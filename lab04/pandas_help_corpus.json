[
  {
    "symbol": "DataFrame",
    "signature": "(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, copy: 'bool | None' = None) -> 'None'",
    "doc": "Two-dimensional, size-mutable, potentially heterogeneous tabular data.\n\nData structure also contains labeled axes (rows and columns).\nArithmetic operations align on both row and column labels. Can be\nthought of as a dict-like container for Series objects. The primary\npandas data structure.\n\nParameters\n----------\ndata : ndarray (structured or homogeneous), Iterable, dict, or DataFrame\n    Dict can contain Series, arrays, constants, dataclass or list-like objects. If\n    data is a dict, column order follows insertion-order. If a dict contains Series\n    which have an index defined, it is aligned by its index. This alignment also\n    occurs if data is a Series or a DataFrame itself. Alignment is done on\n    Series/DataFrame inputs.\n\n    If data is a list of dicts, column order follows insertion-order.\n\nindex : Index or array-like\n    Index to use for resulting frame. Will default to RangeIndex if\n    no indexing information part of input data and no index provided.\ncolumns : Index or array-like\n    Column labels to use for resulting frame when data does not have them,\n    defaulting to RangeIndex(0, 1, 2, ..., n). If data contains column labels,\n    will perform column selection instead.\ndtype : dtype, default None\n    Data type to force. Only a single dtype is allowed. If None, infer.\ncopy : bool or None, default None\n    Copy data from inputs.\n    For dict data, the default of None behaves like ``copy=True``.  For DataFrame\n    or 2d ndarray input, the default of None behaves like ``copy=False``.\n    If data is a dict containing one or more Series (possibly of different dtypes),\n    ``copy=False`` will ensure that these inputs are not copied.\n\n    .. versionchanged:: 1.3.0\n\nSee Also\n--------\nDataFrame.from_records : Constructor from tuples, also record arrays.\nDataFrame.from_dict : From dicts of Series, arrays, or dicts.\nread_csv : Read a comma-separated values (csv) file into DataFrame.\nread_table : Read general delimited file into DataFrame.\nread_clipboard : Read text from clipboard into DataFrame.\n\nNotes\n-----\nPlease reference the :ref:`User Guide <basics.dataframe>` for more information.\n\nExamples\n--------\nConstructing DataFrame from a dictionary.\n\n>>> d = {'col1': [1, 2], 'col2': [3, 4]}\n>>> df = pd.DataFrame(data=d)\n>>> df\n   col1  col2\n0     1     3\n1     2     4\n\nNotice that the inferred dtype is int64.\n\n>>> df.dtypes\ncol1    int64\ncol2    int64\ndtype: object\n\nTo enforce a single dtype:\n\n>>> df = pd.DataFrame(data=d, dtype=np.int8)\n>>> df.dtypes\ncol1    int8\ncol2    int8\ndtype: object\n\nConstructing DataFrame from a dictionary including Series:\n\n>>> d = {'col1': [0, 1, 2, 3], 'col2': pd.Series([2, 3], index=[2, 3])}\n>>> pd.DataFrame(data=d, index=[0, 1, 2, 3])\n   col1  col2\n0     0   NaN\n1     1   NaN\n2     2   2.0\n3     3   3.0\n\nConstructing DataFrame from numpy ndarray:\n\n>>> df2 = pd.DataFrame(np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]),\n...                    columns=['a', 'b', 'c'])\n>>> df2\n   a  b  c\n0  1  2  3\n1  4  5  6\n2  7  8  9\n\nConstructing DataFrame from a numpy ndarray that has labeled columns:\n\n>>> data = np.array([(1, 2, 3), (4, 5, 6), (7, 8, 9)],\n...                 dtype=[(\"a\", \"i4\"), (\"b\", \"i4\"), (\"c\", \"i4\")])\n>>> df3 = pd.DataFrame(data, columns=['c', 'a'])\n...\n>>> df3\n   c  a\n0  3  1\n1  6  4\n2  9  7\n\nConstructing DataFrame from dataclass:\n\n>>> from dataclasses import make_dataclass\n>>> Point = make_dataclass(\"Point\", [(\"x\", int), (\"y\", int)])\n>>> pd.DataFrame([Point(0, 0), Point(0, 3), Point(2, 3)])\n   x  y\n0  0  0\n1  0  3\n2  2  3\n\nConstructing DataFrame from Series/DataFrame:\n\n>>> ser = pd.Series([1, 2, 3], index=[\"a\", \"b\", \"c\"])\n>>> df = pd.DataFrame(data=ser, index=[\"a\", \"c\"])\n>>> df\n   0\na  1\nc  3\n\n>>> df1 = pd.DataFrame([1, 2, 3], index=[\"a\", \"b\", \"c\"], columns=[\"x\"])\n>>> df2 = pd.DataFrame(data=df1, index=[\"a\", \"c\"])\n>>> df2\n   x\na  1\nc  3"
  },
  {
    "symbol": "DataFrame.T",
    "signature": "(property)",
    "doc": "\nThe transpose of the DataFrame.\n\nReturns\n-------\nDataFrame\n    The transposed DataFrame.\n\nSee Also\n--------\nDataFrame.transpose : Transpose index and columns.\n\nExamples\n--------\n>>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n>>> df\n   col1  col2\n0     1     3\n1     2     4\n\n>>> df.T\n      0  1\ncol1  1  2\ncol2  3  4\n"
  },
  {
    "symbol": "DataFrame.abs",
    "signature": "(self) -> 'Self'",
    "doc": "Return a Series/DataFrame with absolute numeric value of each element.\n\nThis function only applies to elements that are all numeric.\n\nReturns\n-------\nabs\n    Series/DataFrame containing the absolute value of each element.\n\nSee Also\n--------\nnumpy.absolute : Calculate the absolute value element-wise.\n\nNotes\n-----\nFor ``complex`` inputs, ``1.2 + 1j``, the absolute value is\n:math:`\\sqrt{ a^2 + b^2 }`.\n\nExamples\n--------\nAbsolute numeric values in a Series.\n\n>>> s = pd.Series([-1.10, 2, -3.33, 4])\n>>> s.abs()\n0    1.10\n1    2.00\n2    3.33\n3    4.00\ndtype: float64\n\nAbsolute numeric values in a Series with complex numbers.\n\n>>> s = pd.Series([1.2 + 1j])\n>>> s.abs()\n0    1.56205\ndtype: float64\n\nAbsolute numeric values in a Series with a Timedelta element.\n\n>>> s = pd.Series([pd.Timedelta('1 days')])\n>>> s.abs()\n0   1 days\ndtype: timedelta64[ns]\n\nSelect rows with data closest to certain value using argsort (from\n`StackOverflow <https://stackoverflow.com/a/17758115>`__).\n\n>>> df = pd.DataFrame({\n...     'a': [4, 5, 6, 7],\n...     'b': [10, 20, 30, 40],\n...     'c': [100, 50, -30, -50]\n... })\n>>> df\n     a    b    c\n0    4   10  100\n1    5   20   50\n2    6   30  -30\n3    7   40  -50\n>>> df.loc[(df.c - 43).abs().argsort()]\n     a    b    c\n1    5   20   50\n0    4   10  100\n2    6   30  -30\n3    7   40  -50"
  },
  {
    "symbol": "DataFrame.add",
    "signature": "(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame'",
    "doc": "Get Addition of dataframe and other, element-wise (binary operator `add`).\n\nEquivalent to ``dataframe + other``, but with support to substitute a fill_value\nfor missing data in one of the inputs. With reverse version, `radd`.\n\nAmong flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to\narithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.\n\nParameters\n----------\nother : scalar, sequence, Series, dict or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis : {0 or 'index', 1 or 'columns'}\n    Whether to compare by the index (0 or 'index') or columns.\n    (1 or 'columns'). For Series input, axis to match Series index on.\nlevel : int or label\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : float or None, default None\n    Fill existing missing (NaN) values, and any new element needed for\n    successful DataFrame alignment, with this value before computation.\n    If data in both corresponding DataFrame locations is missing\n    the result will be missing.\n\nReturns\n-------\nDataFrame\n    Result of the arithmetic operation.\n\nSee Also\n--------\nDataFrame.add : Add DataFrames.\nDataFrame.sub : Subtract DataFrames.\nDataFrame.mul : Multiply DataFrames.\nDataFrame.div : Divide DataFrames (float division).\nDataFrame.truediv : Divide DataFrames (float division).\nDataFrame.floordiv : Divide DataFrames (integer division).\nDataFrame.mod : Calculate modulo (remainder after division).\nDataFrame.pow : Calculate exponential power.\n\nNotes\n-----\nMismatched indices will be unioned together.\n\nExamples\n--------\n>>> df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n>>> df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\nAdd a scalar with operator version which return the same\nresults.\n\n>>> df + 1\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\n>>> df.add(1)\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\nDivide by constant with reverse version.\n\n>>> df.div(10)\n           angles  degrees\ncircle        0.0     36.0\ntriangle      0.3     18.0\nrectangle     0.4     36.0\n\n>>> df.rdiv(10)\n             angles   degrees\ncircle          inf  0.027778\ntriangle   3.333333  0.055556\nrectangle  2.500000  0.027778\n\nSubtract a list and Series by axis with operator version.\n\n>>> df - [1, 2]\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub([1, 2], axis='columns')\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),\n...        axis='index')\n           angles  degrees\ncircle         -1      359\ntriangle        2      179\nrectangle       3      359\n\nMultiply a dictionary by axis.\n\n>>> df.mul({'angles': 0, 'degrees': 2})\n            angles  degrees\ncircle           0      720\ntriangle         0      360\nrectangle        0      720\n\n>>> df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')\n            angles  degrees\ncircle           0        0\ntriangle         6      360\nrectangle       12     1080\n\nMultiply a DataFrame of different shape with operator version.\n\n>>> other = pd.DataFrame({'angles': [0, 3, 4]},\n...                      index=['circle', 'triangle', 'rectangle'])\n>>> other\n           angles\ncircle          0\ntriangle        3\nrectangle       4\n\n>>> df * other\n           angles  degrees\ncircle          0      NaN\ntriangle        9      NaN\nrectangle      16      NaN\n\n>>> df.mul(other, fill_value=0)\n           angles  degrees\ncircle          0      0.0\ntriangle        9      0.0\nrectangle      16      0.0\n\nDivide by a MultiIndex by level.\n\n>>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],\n...                              'degrees': [360, 180, 360, 360, 540, 720]},\n...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],\n...                                    ['circle', 'triangle', 'rectangle',\n...                                     'square', 'pentagon', 'hexagon']])\n>>> df_multindex\n             angles  degrees\nA circle          0      360\n  triangle        3      180\n  rectangle       4      360\nB square          4      360\n  pentagon        5      540\n  hexagon         6      720\n\n>>> df.div(df_multindex, level=1, fill_value=0)\n             angles  degrees\nA circle        NaN      1.0\n  triangle      1.0      1.0\n  rectangle     1.0      1.0\nB square        0.0      0.0\n  pentagon      0.0      0.0\n  hexagon       0.0      0.0"
  },
  {
    "symbol": "DataFrame.add_prefix",
    "signature": "(self, prefix: 'str', axis: 'Axis | None' = None) -> 'Self'",
    "doc": "Prefix labels with string `prefix`.\n\nFor Series, the row labels are prefixed.\nFor DataFrame, the column labels are prefixed.\n\nParameters\n----------\nprefix : str\n    The string to add before each label.\naxis : {0 or 'index', 1 or 'columns', None}, default None\n    Axis to add prefix on\n\n    .. versionadded:: 2.0.0\n\nReturns\n-------\nSeries or DataFrame\n    New Series or DataFrame with updated labels.\n\nSee Also\n--------\nSeries.add_suffix: Suffix row labels with string `suffix`.\nDataFrame.add_suffix: Suffix column labels with string `suffix`.\n\nExamples\n--------\n>>> s = pd.Series([1, 2, 3, 4])\n>>> s\n0    1\n1    2\n2    3\n3    4\ndtype: int64\n\n>>> s.add_prefix('item_')\nitem_0    1\nitem_1    2\nitem_2    3\nitem_3    4\ndtype: int64\n\n>>> df = pd.DataFrame({'A': [1, 2, 3, 4], 'B': [3, 4, 5, 6]})\n>>> df\n   A  B\n0  1  3\n1  2  4\n2  3  5\n3  4  6\n\n>>> df.add_prefix('col_')\n     col_A  col_B\n0       1       3\n1       2       4\n2       3       5\n3       4       6"
  },
  {
    "symbol": "DataFrame.add_suffix",
    "signature": "(self, suffix: 'str', axis: 'Axis | None' = None) -> 'Self'",
    "doc": "Suffix labels with string `suffix`.\n\nFor Series, the row labels are suffixed.\nFor DataFrame, the column labels are suffixed.\n\nParameters\n----------\nsuffix : str\n    The string to add after each label.\naxis : {0 or 'index', 1 or 'columns', None}, default None\n    Axis to add suffix on\n\n    .. versionadded:: 2.0.0\n\nReturns\n-------\nSeries or DataFrame\n    New Series or DataFrame with updated labels.\n\nSee Also\n--------\nSeries.add_prefix: Prefix row labels with string `prefix`.\nDataFrame.add_prefix: Prefix column labels with string `prefix`.\n\nExamples\n--------\n>>> s = pd.Series([1, 2, 3, 4])\n>>> s\n0    1\n1    2\n2    3\n3    4\ndtype: int64\n\n>>> s.add_suffix('_item')\n0_item    1\n1_item    2\n2_item    3\n3_item    4\ndtype: int64\n\n>>> df = pd.DataFrame({'A': [1, 2, 3, 4], 'B': [3, 4, 5, 6]})\n>>> df\n   A  B\n0  1  3\n1  2  4\n2  3  5\n3  4  6\n\n>>> df.add_suffix('_col')\n     A_col  B_col\n0       1       3\n1       2       4\n2       3       5\n3       4       6"
  },
  {
    "symbol": "DataFrame.agg",
    "signature": "(self, func=None, axis: 'Axis' = 0, *args, **kwargs)",
    "doc": "Aggregate using one or more operations over the specified axis.\n\nParameters\n----------\nfunc : function, str, list or dict\n    Function to use for aggregating the data. If a function, must either\n    work when passed a DataFrame or when passed to DataFrame.apply.\n\n    Accepted combinations are:\n\n    - function\n    - string function name\n    - list of functions and/or function names, e.g. ``[np.sum, 'mean']``\n    - dict of axis labels -> functions, function names or list of such.\naxis : {0 or 'index', 1 or 'columns'}, default 0\n        If 0 or 'index': apply function to each column.\n        If 1 or 'columns': apply function to each row.\n*args\n    Positional arguments to pass to `func`.\n**kwargs\n    Keyword arguments to pass to `func`.\n\nReturns\n-------\nscalar, Series or DataFrame\n\n    The return can be:\n\n    * scalar : when Series.agg is called with single function\n    * Series : when DataFrame.agg is called with a single function\n    * DataFrame : when DataFrame.agg is called with several functions\n\nSee Also\n--------\nDataFrame.apply : Perform any type of operations.\nDataFrame.transform : Perform transformation type operations.\npandas.DataFrame.groupby : Perform operations over groups.\npandas.DataFrame.resample : Perform operations over resampled bins.\npandas.DataFrame.rolling : Perform operations over rolling window.\npandas.DataFrame.expanding : Perform operations over expanding window.\npandas.core.window.ewm.ExponentialMovingWindow : Perform operation over exponential\n    weighted window.\n\nNotes\n-----\nThe aggregation operations are always performed over an axis, either the\nindex (default) or the column axis. This behavior is different from\n`numpy` aggregation functions (`mean`, `median`, `prod`, `sum`, `std`,\n`var`), where the default is to compute the aggregation of the flattened\narray, e.g., ``numpy.mean(arr_2d)`` as opposed to\n``numpy.mean(arr_2d, axis=0)``.\n\n`agg` is an alias for `aggregate`. Use the alias.\n\nFunctions that mutate the passed object can produce unexpected\nbehavior or errors and are not supported. See :ref:`gotchas.udf-mutation`\nfor more details.\n\nA passed user-defined-function will be passed a Series for evaluation.\n\nExamples\n--------\n>>> df = pd.DataFrame([[1, 2, 3],\n...                    [4, 5, 6],\n...                    [7, 8, 9],\n...                    [np.nan, np.nan, np.nan]],\n...                   columns=['A', 'B', 'C'])\n\nAggregate these functions over the rows.\n\n>>> df.agg(['sum', 'min'])\n        A     B     C\nsum  12.0  15.0  18.0\nmin   1.0   2.0   3.0\n\nDifferent aggregations per column.\n\n>>> df.agg({'A' : ['sum', 'min'], 'B' : ['min', 'max']})\n        A    B\nsum  12.0  NaN\nmin   1.0  2.0\nmax   NaN  8.0\n\nAggregate different functions over the columns and rename the index of the resulting\nDataFrame.\n\n>>> df.agg(x=('A', 'max'), y=('B', 'min'), z=('C', 'mean'))\n     A    B    C\nx  7.0  NaN  NaN\ny  NaN  2.0  NaN\nz  NaN  NaN  6.0\n\nAggregate over the columns.\n\n>>> df.agg(\"mean\", axis=\"columns\")\n0    2.0\n1    5.0\n2    8.0\n3    NaN\ndtype: float64"
  },
  {
    "symbol": "DataFrame.aggregate",
    "signature": "(self, func=None, axis: 'Axis' = 0, *args, **kwargs)",
    "doc": "Aggregate using one or more operations over the specified axis.\n\nParameters\n----------\nfunc : function, str, list or dict\n    Function to use for aggregating the data. If a function, must either\n    work when passed a DataFrame or when passed to DataFrame.apply.\n\n    Accepted combinations are:\n\n    - function\n    - string function name\n    - list of functions and/or function names, e.g. ``[np.sum, 'mean']``\n    - dict of axis labels -> functions, function names or list of such.\naxis : {0 or 'index', 1 or 'columns'}, default 0\n        If 0 or 'index': apply function to each column.\n        If 1 or 'columns': apply function to each row.\n*args\n    Positional arguments to pass to `func`.\n**kwargs\n    Keyword arguments to pass to `func`.\n\nReturns\n-------\nscalar, Series or DataFrame\n\n    The return can be:\n\n    * scalar : when Series.agg is called with single function\n    * Series : when DataFrame.agg is called with a single function\n    * DataFrame : when DataFrame.agg is called with several functions\n\nSee Also\n--------\nDataFrame.apply : Perform any type of operations.\nDataFrame.transform : Perform transformation type operations.\npandas.DataFrame.groupby : Perform operations over groups.\npandas.DataFrame.resample : Perform operations over resampled bins.\npandas.DataFrame.rolling : Perform operations over rolling window.\npandas.DataFrame.expanding : Perform operations over expanding window.\npandas.core.window.ewm.ExponentialMovingWindow : Perform operation over exponential\n    weighted window.\n\nNotes\n-----\nThe aggregation operations are always performed over an axis, either the\nindex (default) or the column axis. This behavior is different from\n`numpy` aggregation functions (`mean`, `median`, `prod`, `sum`, `std`,\n`var`), where the default is to compute the aggregation of the flattened\narray, e.g., ``numpy.mean(arr_2d)`` as opposed to\n``numpy.mean(arr_2d, axis=0)``.\n\n`agg` is an alias for `aggregate`. Use the alias.\n\nFunctions that mutate the passed object can produce unexpected\nbehavior or errors and are not supported. See :ref:`gotchas.udf-mutation`\nfor more details.\n\nA passed user-defined-function will be passed a Series for evaluation.\n\nExamples\n--------\n>>> df = pd.DataFrame([[1, 2, 3],\n...                    [4, 5, 6],\n...                    [7, 8, 9],\n...                    [np.nan, np.nan, np.nan]],\n...                   columns=['A', 'B', 'C'])\n\nAggregate these functions over the rows.\n\n>>> df.agg(['sum', 'min'])\n        A     B     C\nsum  12.0  15.0  18.0\nmin   1.0   2.0   3.0\n\nDifferent aggregations per column.\n\n>>> df.agg({'A' : ['sum', 'min'], 'B' : ['min', 'max']})\n        A    B\nsum  12.0  NaN\nmin   1.0  2.0\nmax   NaN  8.0\n\nAggregate different functions over the columns and rename the index of the resulting\nDataFrame.\n\n>>> df.agg(x=('A', 'max'), y=('B', 'min'), z=('C', 'mean'))\n     A    B    C\nx  7.0  NaN  NaN\ny  NaN  2.0  NaN\nz  NaN  NaN  6.0\n\nAggregate over the columns.\n\n>>> df.agg(\"mean\", axis=\"columns\")\n0    2.0\n1    5.0\n2    8.0\n3    NaN\ndtype: float64"
  },
  {
    "symbol": "DataFrame.align",
    "signature": "(self, other: 'NDFrameT', join: 'AlignJoin' = 'outer', axis: 'Axis | None' = None, level: 'Level | None' = None, copy: 'bool_t | None' = None, fill_value: 'Hashable | None' = None, method: 'FillnaOptions | None | lib.NoDefault' = <no_default>, limit: 'int | None | lib.NoDefault' = <no_default>, fill_axis: 'Axis | lib.NoDefault' = <no_default>, broadcast_axis: 'Axis | None | lib.NoDefault' = <no_default>) -> 'tuple[Self, NDFrameT]'",
    "doc": "Align two objects on their axes with the specified join method.\n\nJoin method is specified for each axis Index.\n\nParameters\n----------\nother : DataFrame or Series\njoin : {'outer', 'inner', 'left', 'right'}, default 'outer'\n    Type of alignment to be performed.\n\n    * left: use only keys from left frame, preserve key order.\n    * right: use only keys from right frame, preserve key order.\n    * outer: use union of keys from both frames, sort keys lexicographically.\n    * inner: use intersection of keys from both frames,\n      preserve the order of the left keys.\n\naxis : allowed axis of the other object, default None\n    Align on index (0), columns (1), or both (None).\nlevel : int or level name, default None\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\ncopy : bool, default True\n    Always returns new objects. If copy=False and no reindexing is\n    required then original objects are returned.\n\n    .. note::\n        The `copy` keyword will change behavior in pandas 3.0.\n        `Copy-on-Write\n        <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n        will be enabled by default, which means that all methods with a\n        `copy` keyword will use a lazy copy mechanism to defer the copy and\n        ignore the `copy` keyword. The `copy` keyword will be removed in a\n        future version of pandas.\n\n        You can already get the future behavior and improvements through\n        enabling copy on write ``pd.options.mode.copy_on_write = True``\nfill_value : scalar, default np.nan\n    Value to use for missing values. Defaults to NaN, but can be any\n    \"compatible\" value.\nmethod : {'backfill', 'bfill', 'pad', 'ffill', None}, default None\n    Method to use for filling holes in reindexed Series:\n\n    - pad / ffill: propagate last valid observation forward to next valid.\n    - backfill / bfill: use NEXT valid observation to fill gap.\n\n    .. deprecated:: 2.1\n\nlimit : int, default None\n    If method is specified, this is the maximum number of consecutive\n    NaN values to forward/backward fill. In other words, if there is\n    a gap with more than this number of consecutive NaNs, it will only\n    be partially filled. If method is not specified, this is the\n    maximum number of entries along the entire axis where NaNs will be\n    filled. Must be greater than 0 if not None.\n\n    .. deprecated:: 2.1\n\nfill_axis : {0 or 'index'} for Series, {0 or 'index', 1 or 'columns'} for DataFrame, default 0\n    Filling axis, method and limit.\n\n    .. deprecated:: 2.1\n\nbroadcast_axis : {0 or 'index'} for Series, {0 or 'index', 1 or 'columns'} for DataFrame, default None\n    Broadcast values along this axis, if aligning two objects of\n    different dimensions.\n\n    .. deprecated:: 2.1\n\nReturns\n-------\ntuple of (Series/DataFrame, type of other)\n    Aligned objects.\n\nExamples\n--------\n>>> df = pd.DataFrame(\n...     [[1, 2, 3, 4], [6, 7, 8, 9]], columns=[\"D\", \"B\", \"E\", \"A\"], index=[1, 2]\n... )\n>>> other = pd.DataFrame(\n...     [[10, 20, 30, 40], [60, 70, 80, 90], [600, 700, 800, 900]],\n...     columns=[\"A\", \"B\", \"C\", \"D\"],\n...     index=[2, 3, 4],\n... )\n>>> df\n   D  B  E  A\n1  1  2  3  4\n2  6  7  8  9\n>>> other\n    A    B    C    D\n2   10   20   30   40\n3   60   70   80   90\n4  600  700  800  900\n\nAlign on columns:\n\n>>> left, right = df.align(other, join=\"outer\", axis=1)\n>>> left\n   A  B   C  D  E\n1  4  2 NaN  1  3\n2  9  7 NaN  6  8\n>>> right\n    A    B    C    D   E\n2   10   20   30   40 NaN\n3   60   70   80   90 NaN\n4  600  700  800  900 NaN\n\nWe can also align on the index:\n\n>>> left, right = df.align(other, join=\"outer\", axis=0)\n>>> left\n    D    B    E    A\n1  1.0  2.0  3.0  4.0\n2  6.0  7.0  8.0  9.0\n3  NaN  NaN  NaN  NaN\n4  NaN  NaN  NaN  NaN\n>>> right\n    A      B      C      D\n1    NaN    NaN    NaN    NaN\n2   10.0   20.0   30.0   40.0\n3   60.0   70.0   80.0   90.0\n4  600.0  700.0  800.0  900.0\n\nFinally, the default `axis=None` will align on both index and columns:\n\n>>> left, right = df.align(other, join=\"outer\", axis=None)\n>>> left\n     A    B   C    D    E\n1  4.0  2.0 NaN  1.0  3.0\n2  9.0  7.0 NaN  6.0  8.0\n3  NaN  NaN NaN  NaN  NaN\n4  NaN  NaN NaN  NaN  NaN\n>>> right\n       A      B      C      D   E\n1    NaN    NaN    NaN    NaN NaN\n2   10.0   20.0   30.0   40.0 NaN\n3   60.0   70.0   80.0   90.0 NaN\n4  600.0  700.0  800.0  900.0 NaN"
  },
  {
    "symbol": "DataFrame.all",
    "signature": "(self, axis: 'Axis | None' = 0, bool_only: 'bool' = False, skipna: 'bool' = True, **kwargs) -> 'Series | bool'",
    "doc": "Return whether all elements are True, potentially over an axis.\n\nReturns True unless there at least one element within a series or\nalong a Dataframe axis that is False or equivalent (e.g. zero or\nempty).\n\nParameters\n----------\naxis : {0 or 'index', 1 or 'columns', None}, default 0\n    Indicate which axis or axes should be reduced. For `Series` this parameter\n    is unused and defaults to 0.\n\n    * 0 / 'index' : reduce the index, return a Series whose index is the\n      original column labels.\n    * 1 / 'columns' : reduce the columns, return a Series whose index is the\n      original index.\n    * None : reduce all axes, return a scalar.\n\nbool_only : bool, default False\n    Include only boolean columns. Not implemented for Series.\nskipna : bool, default True\n    Exclude NA/null values. If the entire row/column is NA and skipna is\n    True, then the result will be True, as for an empty row/column.\n    If skipna is False, then NA are treated as True, because these are not\n    equal to zero.\n**kwargs : any, default None\n    Additional keywords have no effect but might be accepted for\n    compatibility with NumPy.\n\nReturns\n-------\nSeries or DataFrame\n    If level is specified, then, DataFrame is returned; otherwise, Series\n    is returned.\n\nSee Also\n--------\nSeries.all : Return True if all elements are True.\nDataFrame.any : Return True if one (or more) elements are True.\n\nExamples\n--------\n**Series**\n\n>>> pd.Series([True, True]).all()\nTrue\n>>> pd.Series([True, False]).all()\nFalse\n>>> pd.Series([], dtype=\"float64\").all()\nTrue\n>>> pd.Series([np.nan]).all()\nTrue\n>>> pd.Series([np.nan]).all(skipna=False)\nTrue\n\n**DataFrames**\n\nCreate a dataframe from a dictionary.\n\n>>> df = pd.DataFrame({'col1': [True, True], 'col2': [True, False]})\n>>> df\n   col1   col2\n0  True   True\n1  True  False\n\nDefault behaviour checks if values in each column all return True.\n\n>>> df.all()\ncol1     True\ncol2    False\ndtype: bool\n\nSpecify ``axis='columns'`` to check if values in each row all return True.\n\n>>> df.all(axis='columns')\n0     True\n1    False\ndtype: bool\n\nOr ``axis=None`` for whether every value is True.\n\n>>> df.all(axis=None)\nFalse"
  },
  {
    "symbol": "DataFrame.any",
    "signature": "(self, *, axis: 'Axis | None' = 0, bool_only: 'bool' = False, skipna: 'bool' = True, **kwargs) -> 'Series | bool'",
    "doc": "Return whether any element is True, potentially over an axis.\n\nReturns False unless there is at least one element within a series or\nalong a Dataframe axis that is True or equivalent (e.g. non-zero or\nnon-empty).\n\nParameters\n----------\naxis : {0 or 'index', 1 or 'columns', None}, default 0\n    Indicate which axis or axes should be reduced. For `Series` this parameter\n    is unused and defaults to 0.\n\n    * 0 / 'index' : reduce the index, return a Series whose index is the\n      original column labels.\n    * 1 / 'columns' : reduce the columns, return a Series whose index is the\n      original index.\n    * None : reduce all axes, return a scalar.\n\nbool_only : bool, default False\n    Include only boolean columns. Not implemented for Series.\nskipna : bool, default True\n    Exclude NA/null values. If the entire row/column is NA and skipna is\n    True, then the result will be False, as for an empty row/column.\n    If skipna is False, then NA are treated as True, because these are not\n    equal to zero.\n**kwargs : any, default None\n    Additional keywords have no effect but might be accepted for\n    compatibility with NumPy.\n\nReturns\n-------\nSeries or DataFrame\n    If level is specified, then, DataFrame is returned; otherwise, Series\n    is returned.\n\nSee Also\n--------\nnumpy.any : Numpy version of this method.\nSeries.any : Return whether any element is True.\nSeries.all : Return whether all elements are True.\nDataFrame.any : Return whether any element is True over requested axis.\nDataFrame.all : Return whether all elements are True over requested axis.\n\nExamples\n--------\n**Series**\n\nFor Series input, the output is a scalar indicating whether any element\nis True.\n\n>>> pd.Series([False, False]).any()\nFalse\n>>> pd.Series([True, False]).any()\nTrue\n>>> pd.Series([], dtype=\"float64\").any()\nFalse\n>>> pd.Series([np.nan]).any()\nFalse\n>>> pd.Series([np.nan]).any(skipna=False)\nTrue\n\n**DataFrame**\n\nWhether each column contains at least one True element (the default).\n\n>>> df = pd.DataFrame({\"A\": [1, 2], \"B\": [0, 2], \"C\": [0, 0]})\n>>> df\n   A  B  C\n0  1  0  0\n1  2  2  0\n\n>>> df.any()\nA     True\nB     True\nC    False\ndtype: bool\n\nAggregating over the columns.\n\n>>> df = pd.DataFrame({\"A\": [True, False], \"B\": [1, 2]})\n>>> df\n       A  B\n0   True  1\n1  False  2\n\n>>> df.any(axis='columns')\n0    True\n1    True\ndtype: bool\n\n>>> df = pd.DataFrame({\"A\": [True, False], \"B\": [1, 0]})\n>>> df\n       A  B\n0   True  1\n1  False  0\n\n>>> df.any(axis='columns')\n0    True\n1    False\ndtype: bool\n\nAggregating over the entire DataFrame with ``axis=None``.\n\n>>> df.any(axis=None)\nTrue\n\n`any` for an empty DataFrame is an empty Series.\n\n>>> pd.DataFrame([]).any()\nSeries([], dtype: bool)"
  },
  {
    "symbol": "DataFrame.apply",
    "signature": "(self, func: 'AggFuncType', axis: 'Axis' = 0, raw: 'bool' = False, result_type: \"Literal['expand', 'reduce', 'broadcast'] | None\" = None, args=(), by_row: \"Literal[False, 'compat']\" = 'compat', engine: \"Literal['python', 'numba']\" = 'python', engine_kwargs: 'dict[str, bool] | None' = None, **kwargs)",
    "doc": "Apply a function along an axis of the DataFrame.\n\nObjects passed to the function are Series objects whose index is\neither the DataFrame's index (``axis=0``) or the DataFrame's columns\n(``axis=1``). By default (``result_type=None``), the final return type\nis inferred from the return type of the applied function. Otherwise,\nit depends on the `result_type` argument.\n\nParameters\n----------\nfunc : function\n    Function to apply to each column or row.\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    Axis along which the function is applied:\n\n    * 0 or 'index': apply function to each column.\n    * 1 or 'columns': apply function to each row.\n\nraw : bool, default False\n    Determines if row or column is passed as a Series or ndarray object:\n\n    * ``False`` : passes each row or column as a Series to the\n      function.\n    * ``True`` : the passed function will receive ndarray objects\n      instead.\n      If you are just applying a NumPy reduction function this will\n      achieve much better performance.\n\nresult_type : {'expand', 'reduce', 'broadcast', None}, default None\n    These only act when ``axis=1`` (columns):\n\n    * 'expand' : list-like results will be turned into columns.\n    * 'reduce' : returns a Series if possible rather than expanding\n      list-like results. This is the opposite of 'expand'.\n    * 'broadcast' : results will be broadcast to the original shape\n      of the DataFrame, the original index and columns will be\n      retained.\n\n    The default behaviour (None) depends on the return value of the\n    applied function: list-like results will be returned as a Series\n    of those. However if the apply function returns a Series these\n    are expanded to columns.\nargs : tuple\n    Positional arguments to pass to `func` in addition to the\n    array/series.\nby_row : False or \"compat\", default \"compat\"\n    Only has an effect when ``func`` is a listlike or dictlike of funcs\n    and the func isn't a string.\n    If \"compat\", will if possible first translate the func into pandas\n    methods (e.g. ``Series().apply(np.sum)`` will be translated to\n    ``Series().sum()``). If that doesn't work, will try call to apply again with\n    ``by_row=True`` and if that fails, will call apply again with\n    ``by_row=False`` (backward compatible).\n    If False, the funcs will be passed the whole Series at once.\n\n    .. versionadded:: 2.1.0\n\nengine : {'python', 'numba'}, default 'python'\n    Choose between the python (default) engine or the numba engine in apply.\n\n    The numba engine will attempt to JIT compile the passed function,\n    which may result in speedups for large DataFrames.\n    It also supports the following engine_kwargs :\n\n    - nopython (compile the function in nopython mode)\n    - nogil (release the GIL inside the JIT compiled function)\n    - parallel (try to apply the function in parallel over the DataFrame)\n\n      Note: Due to limitations within numba/how pandas interfaces with numba,\n      you should only use this if raw=True\n\n    Note: The numba compiler only supports a subset of\n    valid Python/numpy operations.\n\n    Please read more about the `supported python features\n    <https://numba.pydata.org/numba-doc/dev/reference/pysupported.html>`_\n    and `supported numpy features\n    <https://numba.pydata.org/numba-doc/dev/reference/numpysupported.html>`_\n    in numba to learn what you can or cannot use in the passed function.\n\n    .. versionadded:: 2.2.0\n\nengine_kwargs : dict\n    Pass keyword arguments to the engine.\n    This is currently only used by the numba engine,\n    see the documentation for the engine argument for more information.\n**kwargs\n    Additional keyword arguments to pass as keywords arguments to\n    `func`.\n\nReturns\n-------\nSeries or DataFrame\n    Result of applying ``func`` along the given axis of the\n    DataFrame.\n\nSee Also\n--------\nDataFrame.map: For elementwise operations.\nDataFrame.aggregate: Only perform aggregating type operations.\nDataFrame.transform: Only perform transforming type operations.\n\nNotes\n-----\nFunctions that mutate the passed object can produce unexpected\nbehavior or errors and are not supported. See :ref:`gotchas.udf-mutation`\nfor more details.\n\nExamples\n--------\n>>> df = pd.DataFrame([[4, 9]] * 3, columns=['A', 'B'])\n>>> df\n   A  B\n0  4  9\n1  4  9\n2  4  9\n\nUsing a numpy universal function (in this case the same as\n``np.sqrt(df)``):\n\n>>> df.apply(np.sqrt)\n     A    B\n0  2.0  3.0\n1  2.0  3.0\n2  2.0  3.0\n\nUsing a reducing function on either axis\n\n>>> df.apply(np.sum, axis=0)\nA    12\nB    27\ndtype: int64\n\n>>> df.apply(np.sum, axis=1)\n0    13\n1    13\n2    13\ndtype: int64\n\nReturning a list-like will result in a Series\n\n>>> df.apply(lambda x: [1, 2], axis=1)\n0    [1, 2]\n1    [1, 2]\n2    [1, 2]\ndtype: object\n\nPassing ``result_type='expand'`` will expand list-like results\nto columns of a Dataframe\n\n>>> df.apply(lambda x: [1, 2], axis=1, result_type='expand')\n   0  1\n0  1  2\n1  1  2\n2  1  2\n\nReturning a Series inside the function is similar to passing\n``result_type='expand'``. The resulting column names\nwill be the Series index.\n\n>>> df.apply(lambda x: pd.Series([1, 2], index=['foo', 'bar']), axis=1)\n   foo  bar\n0    1    2\n1    1    2\n2    1    2\n\nPassing ``result_type='broadcast'`` will ensure the same shape\nresult, whether list-like or scalar is returned by the function,\nand broadcast it along the axis. The resulting column names will\nbe the originals.\n\n>>> df.apply(lambda x: [1, 2], axis=1, result_type='broadcast')\n   A  B\n0  1  2\n1  1  2\n2  1  2"
  },
  {
    "symbol": "DataFrame.applymap",
    "signature": "(self, func: 'PythonFuncType', na_action: 'NaAction | None' = None, **kwargs) -> 'DataFrame'",
    "doc": "Apply a function to a Dataframe elementwise.\n\n.. deprecated:: 2.1.0\n\n   DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n\nThis method applies a function that accepts and returns a scalar\nto every element of a DataFrame.\n\nParameters\n----------\nfunc : callable\n    Python function, returns a single value from a single value.\nna_action : {None, 'ignore'}, default None\n    If 'ignore', propagate NaN values, without passing them to func.\n**kwargs\n    Additional keyword arguments to pass as keywords arguments to\n    `func`.\n\nReturns\n-------\nDataFrame\n    Transformed DataFrame.\n\nSee Also\n--------\nDataFrame.apply : Apply a function along input axis of DataFrame.\nDataFrame.map : Apply a function along input axis of DataFrame.\nDataFrame.replace: Replace values given in `to_replace` with `value`.\n\nExamples\n--------\n>>> df = pd.DataFrame([[1, 2.12], [3.356, 4.567]])\n>>> df\n       0      1\n0  1.000  2.120\n1  3.356  4.567\n\n>>> df.map(lambda x: len(str(x)))\n   0  1\n0  3  4\n1  5  5"
  },
  {
    "symbol": "DataFrame.asfreq",
    "signature": "(self, freq: 'Frequency', method: 'FillnaOptions | None' = None, how: \"Literal['start', 'end'] | None\" = None, normalize: 'bool_t' = False, fill_value: 'Hashable | None' = None) -> 'Self'",
    "doc": "Convert time series to specified frequency.\n\nReturns the original data conformed to a new index with the specified\nfrequency.\n\nIf the index of this Series/DataFrame is a :class:`~pandas.PeriodIndex`, the new index\nis the result of transforming the original index with\n:meth:`PeriodIndex.asfreq <pandas.PeriodIndex.asfreq>` (so the original index\nwill map one-to-one to the new index).\n\nOtherwise, the new index will be equivalent to ``pd.date_range(start, end,\nfreq=freq)`` where ``start`` and ``end`` are, respectively, the first and\nlast entries in the original index (see :func:`pandas.date_range`). The\nvalues corresponding to any timesteps in the new index which were not present\nin the original index will be null (``NaN``), unless a method for filling\nsuch unknowns is provided (see the ``method`` parameter below).\n\nThe :meth:`resample` method is more appropriate if an operation on each group of\ntimesteps (such as an aggregate) is necessary to represent the data at the new\nfrequency.\n\nParameters\n----------\nfreq : DateOffset or str\n    Frequency DateOffset or string.\nmethod : {'backfill'/'bfill', 'pad'/'ffill'}, default None\n    Method to use for filling holes in reindexed Series (note this\n    does not fill NaNs that already were present):\n\n    * 'pad' / 'ffill': propagate last valid observation forward to next\n      valid\n    * 'backfill' / 'bfill': use NEXT valid observation to fill.\nhow : {'start', 'end'}, default end\n    For PeriodIndex only (see PeriodIndex.asfreq).\nnormalize : bool, default False\n    Whether to reset output index to midnight.\nfill_value : scalar, optional\n    Value to use for missing values, applied during upsampling (note\n    this does not fill NaNs that already were present).\n\nReturns\n-------\nSeries/DataFrame\n    Series/DataFrame object reindexed to the specified frequency.\n\nSee Also\n--------\nreindex : Conform DataFrame to new index with optional filling logic.\n\nNotes\n-----\nTo learn more about the frequency strings, please see `this link\n<https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\nExamples\n--------\nStart by creating a series with 4 one minute timestamps.\n\n>>> index = pd.date_range('1/1/2000', periods=4, freq='min')\n>>> series = pd.Series([0.0, None, 2.0, 3.0], index=index)\n>>> df = pd.DataFrame({'s': series})\n>>> df\n                       s\n2000-01-01 00:00:00    0.0\n2000-01-01 00:01:00    NaN\n2000-01-01 00:02:00    2.0\n2000-01-01 00:03:00    3.0\n\nUpsample the series into 30 second bins.\n\n>>> df.asfreq(freq='30s')\n                       s\n2000-01-01 00:00:00    0.0\n2000-01-01 00:00:30    NaN\n2000-01-01 00:01:00    NaN\n2000-01-01 00:01:30    NaN\n2000-01-01 00:02:00    2.0\n2000-01-01 00:02:30    NaN\n2000-01-01 00:03:00    3.0\n\nUpsample again, providing a ``fill value``.\n\n>>> df.asfreq(freq='30s', fill_value=9.0)\n                       s\n2000-01-01 00:00:00    0.0\n2000-01-01 00:00:30    9.0\n2000-01-01 00:01:00    NaN\n2000-01-01 00:01:30    9.0\n2000-01-01 00:02:00    2.0\n2000-01-01 00:02:30    9.0\n2000-01-01 00:03:00    3.0\n\nUpsample again, providing a ``method``.\n\n>>> df.asfreq(freq='30s', method='bfill')\n                       s\n2000-01-01 00:00:00    0.0\n2000-01-01 00:00:30    NaN\n2000-01-01 00:01:00    NaN\n2000-01-01 00:01:30    2.0\n2000-01-01 00:02:00    2.0\n2000-01-01 00:02:30    3.0\n2000-01-01 00:03:00    3.0"
  },
  {
    "symbol": "DataFrame.asof",
    "signature": "(self, where, subset=None)",
    "doc": "Return the last row(s) without any NaNs before `where`.\n\nThe last row (for each element in `where`, if list) without any\nNaN is taken.\nIn case of a :class:`~pandas.DataFrame`, the last row without NaN\nconsidering only the subset of columns (if not `None`)\n\nIf there is no good value, NaN is returned for a Series or\na Series of NaN values for a DataFrame\n\nParameters\n----------\nwhere : date or array-like of dates\n    Date(s) before which the last row(s) are returned.\nsubset : str or array-like of str, default `None`\n    For DataFrame, if not `None`, only use these columns to\n    check for NaNs.\n\nReturns\n-------\nscalar, Series, or DataFrame\n\n    The return can be:\n\n    * scalar : when `self` is a Series and `where` is a scalar\n    * Series: when `self` is a Series and `where` is an array-like,\n      or when `self` is a DataFrame and `where` is a scalar\n    * DataFrame : when `self` is a DataFrame and `where` is an\n      array-like\n\nSee Also\n--------\nmerge_asof : Perform an asof merge. Similar to left join.\n\nNotes\n-----\nDates are assumed to be sorted. Raises if this is not the case.\n\nExamples\n--------\nA Series and a scalar `where`.\n\n>>> s = pd.Series([1, 2, np.nan, 4], index=[10, 20, 30, 40])\n>>> s\n10    1.0\n20    2.0\n30    NaN\n40    4.0\ndtype: float64\n\n>>> s.asof(20)\n2.0\n\nFor a sequence `where`, a Series is returned. The first value is\nNaN, because the first element of `where` is before the first\nindex value.\n\n>>> s.asof([5, 20])\n5     NaN\n20    2.0\ndtype: float64\n\nMissing values are not considered. The following is ``2.0``, not\nNaN, even though NaN is at the index location for ``30``.\n\n>>> s.asof(30)\n2.0\n\nTake all columns into consideration\n\n>>> df = pd.DataFrame({'a': [10., 20., 30., 40., 50.],\n...                    'b': [None, None, None, None, 500]},\n...                   index=pd.DatetimeIndex(['2018-02-27 09:01:00',\n...                                           '2018-02-27 09:02:00',\n...                                           '2018-02-27 09:03:00',\n...                                           '2018-02-27 09:04:00',\n...                                           '2018-02-27 09:05:00']))\n>>> df.asof(pd.DatetimeIndex(['2018-02-27 09:03:30',\n...                           '2018-02-27 09:04:30']))\n                      a   b\n2018-02-27 09:03:30 NaN NaN\n2018-02-27 09:04:30 NaN NaN\n\nTake a single column into consideration\n\n>>> df.asof(pd.DatetimeIndex(['2018-02-27 09:03:30',\n...                           '2018-02-27 09:04:30']),\n...         subset=['a'])\n                        a   b\n2018-02-27 09:03:30  30.0 NaN\n2018-02-27 09:04:30  40.0 NaN"
  },
  {
    "symbol": "DataFrame.assign",
    "signature": "(self, **kwargs) -> 'DataFrame'",
    "doc": "Assign new columns to a DataFrame.\n\nReturns a new object with all original columns in addition to new ones.\nExisting columns that are re-assigned will be overwritten.\n\nParameters\n----------\n**kwargs : dict of {str: callable or Series}\n    The column names are keywords. If the values are\n    callable, they are computed on the DataFrame and\n    assigned to the new columns. The callable must not\n    change input DataFrame (though pandas doesn't check it).\n    If the values are not callable, (e.g. a Series, scalar, or array),\n    they are simply assigned.\n\nReturns\n-------\nDataFrame\n    A new DataFrame with the new columns in addition to\n    all the existing columns.\n\nNotes\n-----\nAssigning multiple columns within the same ``assign`` is possible.\nLater items in '\\*\\*kwargs' may refer to newly created or modified\ncolumns in 'df'; items are computed and assigned into 'df' in order.\n\nExamples\n--------\n>>> df = pd.DataFrame({'temp_c': [17.0, 25.0]},\n...                   index=['Portland', 'Berkeley'])\n>>> df\n          temp_c\nPortland    17.0\nBerkeley    25.0\n\nWhere the value is a callable, evaluated on `df`:\n\n>>> df.assign(temp_f=lambda x: x.temp_c * 9 / 5 + 32)\n          temp_c  temp_f\nPortland    17.0    62.6\nBerkeley    25.0    77.0\n\nAlternatively, the same behavior can be achieved by directly\nreferencing an existing Series or sequence:\n\n>>> df.assign(temp_f=df['temp_c'] * 9 / 5 + 32)\n          temp_c  temp_f\nPortland    17.0    62.6\nBerkeley    25.0    77.0\n\nYou can create multiple columns within the same assign where one\nof the columns depends on another one defined within the same assign:\n\n>>> df.assign(temp_f=lambda x: x['temp_c'] * 9 / 5 + 32,\n...           temp_k=lambda x: (x['temp_f'] + 459.67) * 5 / 9)\n          temp_c  temp_f  temp_k\nPortland    17.0    62.6  290.15\nBerkeley    25.0    77.0  298.15"
  },
  {
    "symbol": "DataFrame.astype",
    "signature": "(self, dtype, copy: 'bool_t | None' = None, errors: 'IgnoreRaise' = 'raise') -> 'Self'",
    "doc": "Cast a pandas object to a specified dtype ``dtype``.\n\nParameters\n----------\ndtype : str, data type, Series or Mapping of column name -> data type\n    Use a str, numpy.dtype, pandas.ExtensionDtype or Python type to\n    cast entire pandas object to the same type. Alternatively, use a\n    mapping, e.g. {col: dtype, ...}, where col is a column label and dtype is\n    a numpy.dtype or Python type to cast one or more of the DataFrame's\n    columns to column-specific types.\ncopy : bool, default True\n    Return a copy when ``copy=True`` (be very careful setting\n    ``copy=False`` as changes to values then may propagate to other\n    pandas objects).\n\n    .. note::\n        The `copy` keyword will change behavior in pandas 3.0.\n        `Copy-on-Write\n        <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n        will be enabled by default, which means that all methods with a\n        `copy` keyword will use a lazy copy mechanism to defer the copy and\n        ignore the `copy` keyword. The `copy` keyword will be removed in a\n        future version of pandas.\n\n        You can already get the future behavior and improvements through\n        enabling copy on write ``pd.options.mode.copy_on_write = True``\nerrors : {'raise', 'ignore'}, default 'raise'\n    Control raising of exceptions on invalid data for provided dtype.\n\n    - ``raise`` : allow exceptions to be raised\n    - ``ignore`` : suppress exceptions. On error return original object.\n\nReturns\n-------\nsame type as caller\n\nSee Also\n--------\nto_datetime : Convert argument to datetime.\nto_timedelta : Convert argument to timedelta.\nto_numeric : Convert argument to a numeric type.\nnumpy.ndarray.astype : Cast a numpy array to a specified type.\n\nNotes\n-----\n.. versionchanged:: 2.0.0\n\n    Using ``astype`` to convert from timezone-naive dtype to\n    timezone-aware dtype will raise an exception.\n    Use :meth:`Series.dt.tz_localize` instead.\n\nExamples\n--------\nCreate a DataFrame:\n\n>>> d = {'col1': [1, 2], 'col2': [3, 4]}\n>>> df = pd.DataFrame(data=d)\n>>> df.dtypes\ncol1    int64\ncol2    int64\ndtype: object\n\nCast all columns to int32:\n\n>>> df.astype('int32').dtypes\ncol1    int32\ncol2    int32\ndtype: object\n\nCast col1 to int32 using a dictionary:\n\n>>> df.astype({'col1': 'int32'}).dtypes\ncol1    int32\ncol2    int64\ndtype: object\n\nCreate a series:\n\n>>> ser = pd.Series([1, 2], dtype='int32')\n>>> ser\n0    1\n1    2\ndtype: int32\n>>> ser.astype('int64')\n0    1\n1    2\ndtype: int64\n\nConvert to categorical type:\n\n>>> ser.astype('category')\n0    1\n1    2\ndtype: category\nCategories (2, int32): [1, 2]\n\nConvert to ordered categorical type with custom ordering:\n\n>>> from pandas.api.types import CategoricalDtype\n>>> cat_dtype = CategoricalDtype(\n...     categories=[2, 1], ordered=True)\n>>> ser.astype(cat_dtype)\n0    1\n1    2\ndtype: category\nCategories (2, int64): [2 < 1]\n\nCreate a series of dates:\n\n>>> ser_date = pd.Series(pd.date_range('20200101', periods=3))\n>>> ser_date\n0   2020-01-01\n1   2020-01-02\n2   2020-01-03\ndtype: datetime64[ns]"
  },
  {
    "symbol": "DataFrame.at",
    "signature": "(property)",
    "doc": "\nAccess a single value for a row/column label pair.\n\nSimilar to ``loc``, in that both provide label-based lookups. Use\n``at`` if you only need to get or set a single value in a DataFrame\nor Series.\n\nRaises\n------\nKeyError\n    If getting a value and 'label' does not exist in a DataFrame or Series.\n\nValueError\n    If row/column label pair is not a tuple or if any label\n    from the pair is not a scalar for DataFrame.\n    If label is list-like (*excluding* NamedTuple) for Series.\n\nSee Also\n--------\nDataFrame.at : Access a single value for a row/column pair by label.\nDataFrame.iat : Access a single value for a row/column pair by integer\n    position.\nDataFrame.loc : Access a group of rows and columns by label(s).\nDataFrame.iloc : Access a group of rows and columns by integer\n    position(s).\nSeries.at : Access a single value by label.\nSeries.iat : Access a single value by integer position.\nSeries.loc : Access a group of rows by label(s).\nSeries.iloc : Access a group of rows by integer position(s).\n\nNotes\n-----\nSee :ref:`Fast scalar value getting and setting <indexing.basics.get_value>`\nfor more details.\n\nExamples\n--------\n>>> df = pd.DataFrame([[0, 2, 3], [0, 4, 1], [10, 20, 30]],\n...                   index=[4, 5, 6], columns=['A', 'B', 'C'])\n>>> df\n    A   B   C\n4   0   2   3\n5   0   4   1\n6  10  20  30\n\nGet value at specified row/column pair\n\n>>> df.at[4, 'B']\n2\n\nSet value at specified row/column pair\n\n>>> df.at[4, 'B'] = 10\n>>> df.at[4, 'B']\n10\n\nGet value within a Series\n\n>>> df.loc[5].at['B']\n4\n"
  },
  {
    "symbol": "DataFrame.at_time",
    "signature": "(self, time, asof: 'bool_t' = False, axis: 'Axis | None' = None) -> 'Self'",
    "doc": "Select values at particular time of day (e.g., 9:30AM).\n\nParameters\n----------\ntime : datetime.time or str\n    The values to select.\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    For `Series` this parameter is unused and defaults to 0.\n\nReturns\n-------\nSeries or DataFrame\n\nRaises\n------\nTypeError\n    If the index is not  a :class:`DatetimeIndex`\n\nSee Also\n--------\nbetween_time : Select values between particular times of the day.\nfirst : Select initial periods of time series based on a date offset.\nlast : Select final periods of time series based on a date offset.\nDatetimeIndex.indexer_at_time : Get just the index locations for\n    values at particular time of the day.\n\nExamples\n--------\n>>> i = pd.date_range('2018-04-09', periods=4, freq='12h')\n>>> ts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)\n>>> ts\n                     A\n2018-04-09 00:00:00  1\n2018-04-09 12:00:00  2\n2018-04-10 00:00:00  3\n2018-04-10 12:00:00  4\n\n>>> ts.at_time('12:00')\n                     A\n2018-04-09 12:00:00  2\n2018-04-10 12:00:00  4"
  },
  {
    "symbol": "DataFrame.attrs",
    "signature": "(property)",
    "doc": "\nDictionary of global attributes of this dataset.\n\n.. warning::\n\n   attrs is experimental and may change without warning.\n\nSee Also\n--------\nDataFrame.flags : Global flags applying to this object.\n\nNotes\n-----\nMany operations that create new datasets will copy ``attrs``. Copies\nare always deep so that changing ``attrs`` will only affect the\npresent dataset. ``pandas.concat`` copies ``attrs`` only if all input\ndatasets have the same ``attrs``.\n\nExamples\n--------\nFor Series:\n\n>>> ser = pd.Series([1, 2, 3])\n>>> ser.attrs = {\"A\": [10, 20, 30]}\n>>> ser.attrs\n{'A': [10, 20, 30]}\n\nFor DataFrame:\n\n>>> df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\n>>> df.attrs = {\"A\": [10, 20, 30]}\n>>> df.attrs\n{'A': [10, 20, 30]}\n"
  },
  {
    "symbol": "DataFrame.axes",
    "signature": "(property)",
    "doc": "\nReturn a list representing the axes of the DataFrame.\n\nIt has the row axis labels and column axis labels as the only members.\nThey are returned in that order.\n\nExamples\n--------\n>>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n>>> df.axes\n[RangeIndex(start=0, stop=2, step=1), Index(['col1', 'col2'],\ndtype='object')]\n"
  },
  {
    "symbol": "DataFrame.backfill",
    "signature": "(self, *, axis: 'None | Axis' = None, inplace: 'bool_t' = False, limit: 'None | int' = None, downcast: 'dict | None | lib.NoDefault' = <no_default>) -> 'Self | None'",
    "doc": "Fill NA/NaN values by using the next valid observation to fill the gap.\n\n.. deprecated:: 2.0\n\n    Series/DataFrame.backfill is deprecated. Use Series/DataFrame.bfill instead.\n\nReturns\n-------\nSeries/DataFrame or None\n    Object with missing values filled or None if ``inplace=True``.\n\nExamples\n--------\nPlease see examples for :meth:`DataFrame.bfill` or :meth:`Series.bfill`."
  },
  {
    "symbol": "DataFrame.between_time",
    "signature": "(self, start_time, end_time, inclusive: 'IntervalClosedType' = 'both', axis: 'Axis | None' = None) -> 'Self'",
    "doc": "Select values between particular times of the day (e.g., 9:00-9:30 AM).\n\nBy setting ``start_time`` to be later than ``end_time``,\nyou can get the times that are *not* between the two times.\n\nParameters\n----------\nstart_time : datetime.time or str\n    Initial time as a time filter limit.\nend_time : datetime.time or str\n    End time as a time filter limit.\ninclusive : {\"both\", \"neither\", \"left\", \"right\"}, default \"both\"\n    Include boundaries; whether to set each bound as closed or open.\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    Determine range time on index or columns value.\n    For `Series` this parameter is unused and defaults to 0.\n\nReturns\n-------\nSeries or DataFrame\n    Data from the original object filtered to the specified dates range.\n\nRaises\n------\nTypeError\n    If the index is not  a :class:`DatetimeIndex`\n\nSee Also\n--------\nat_time : Select values at a particular time of the day.\nfirst : Select initial periods of time series based on a date offset.\nlast : Select final periods of time series based on a date offset.\nDatetimeIndex.indexer_between_time : Get just the index locations for\n    values between particular times of the day.\n\nExamples\n--------\n>>> i = pd.date_range('2018-04-09', periods=4, freq='1D20min')\n>>> ts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)\n>>> ts\n                     A\n2018-04-09 00:00:00  1\n2018-04-10 00:20:00  2\n2018-04-11 00:40:00  3\n2018-04-12 01:00:00  4\n\n>>> ts.between_time('0:15', '0:45')\n                     A\n2018-04-10 00:20:00  2\n2018-04-11 00:40:00  3\n\nYou get the times that are *not* between two times by setting\n``start_time`` later than ``end_time``:\n\n>>> ts.between_time('0:45', '0:15')\n                     A\n2018-04-09 00:00:00  1\n2018-04-12 01:00:00  4"
  },
  {
    "symbol": "DataFrame.bfill",
    "signature": "(self, *, axis: 'None | Axis' = None, inplace: 'bool_t' = False, limit: 'None | int' = None, limit_area: \"Literal['inside', 'outside'] | None\" = None, downcast: 'dict | None | lib.NoDefault' = <no_default>) -> 'Self | None'",
    "doc": "Fill NA/NaN values by using the next valid observation to fill the gap.\n\nParameters\n----------\naxis : {0 or 'index'} for Series, {0 or 'index', 1 or 'columns'} for DataFrame\n    Axis along which to fill missing values. For `Series`\n    this parameter is unused and defaults to 0.\ninplace : bool, default False\n    If True, fill in-place. Note: this will modify any\n    other views on this object (e.g., a no-copy slice for a column in a\n    DataFrame).\nlimit : int, default None\n    If method is specified, this is the maximum number of consecutive\n    NaN values to forward/backward fill. In other words, if there is\n    a gap with more than this number of consecutive NaNs, it will only\n    be partially filled. If method is not specified, this is the\n    maximum number of entries along the entire axis where NaNs will be\n    filled. Must be greater than 0 if not None.\nlimit_area : {`None`, 'inside', 'outside'}, default None\n    If limit is specified, consecutive NaNs will be filled with this\n    restriction.\n\n    * ``None``: No fill restriction.\n    * 'inside': Only fill NaNs surrounded by valid values\n      (interpolate).\n    * 'outside': Only fill NaNs outside valid values (extrapolate).\n\n    .. versionadded:: 2.2.0\n\ndowncast : dict, default is None\n    A dict of item->dtype of what to downcast if possible,\n    or the string 'infer' which will try to downcast to an appropriate\n    equal type (e.g. float64 to int64 if possible).\n\n    .. deprecated:: 2.2.0\n\nReturns\n-------\nSeries/DataFrame or None\n    Object with missing values filled or None if ``inplace=True``.\n\nExamples\n--------\nFor Series:\n\n>>> s = pd.Series([1, None, None, 2])\n>>> s.bfill()\n0    1.0\n1    2.0\n2    2.0\n3    2.0\ndtype: float64\n>>> s.bfill(limit=1)\n0    1.0\n1    NaN\n2    2.0\n3    2.0\ndtype: float64\n\nWith DataFrame:\n\n>>> df = pd.DataFrame({'A': [1, None, None, 4], 'B': [None, 5, None, 7]})\n>>> df\n      A     B\n0   1.0   NaN\n1   NaN   5.0\n2   NaN   NaN\n3   4.0   7.0\n>>> df.bfill()\n      A     B\n0   1.0   5.0\n1   4.0   5.0\n2   4.0   7.0\n3   4.0   7.0\n>>> df.bfill(limit=1)\n      A     B\n0   1.0   5.0\n1   NaN   5.0\n2   4.0   7.0\n3   4.0   7.0"
  },
  {
    "symbol": "DataFrame.bool",
    "signature": "(self) -> 'bool_t'",
    "doc": "Return the bool of a single element Series or DataFrame.\n\n.. deprecated:: 2.1.0\n\n   bool is deprecated and will be removed in future version of pandas.\n   For ``Series`` use ``pandas.Series.item``.\n\nThis must be a boolean scalar value, either True or False. It will raise a\nValueError if the Series or DataFrame does not have exactly 1 element, or that\nelement is not boolean (integer values 0 and 1 will also raise an exception).\n\nReturns\n-------\nbool\n    The value in the Series or DataFrame.\n\nSee Also\n--------\nSeries.astype : Change the data type of a Series, including to boolean.\nDataFrame.astype : Change the data type of a DataFrame, including to boolean.\nnumpy.bool_ : NumPy boolean data type, used by pandas for boolean values.\n\nExamples\n--------\nThe method will only work for single element objects with a boolean value:\n\n>>> pd.Series([True]).bool()  # doctest: +SKIP\nTrue\n>>> pd.Series([False]).bool()  # doctest: +SKIP\nFalse\n\n>>> pd.DataFrame({'col': [True]}).bool()  # doctest: +SKIP\nTrue\n>>> pd.DataFrame({'col': [False]}).bool()  # doctest: +SKIP\nFalse\n\nThis is an alternative method and will only work\nfor single element objects with a boolean value:\n\n>>> pd.Series([True]).item()  # doctest: +SKIP\nTrue\n>>> pd.Series([False]).item()  # doctest: +SKIP\nFalse"
  },
  {
    "symbol": "DataFrame.boxplot",
    "signature": "(self: 'DataFrame', column=None, by=None, ax=None, fontsize: 'int | None' = None, rot: 'int' = 0, grid: 'bool' = True, figsize: 'tuple[float, float] | None' = None, layout=None, return_type=None, backend=None, **kwargs)",
    "doc": "Make a box plot from DataFrame columns.\n\nMake a box-and-whisker plot from DataFrame columns, optionally grouped\nby some other columns. A box plot is a method for graphically depicting\ngroups of numerical data through their quartiles.\nThe box extends from the Q1 to Q3 quartile values of the data,\nwith a line at the median (Q2). The whiskers extend from the edges\nof box to show the range of the data. By default, they extend no more than\n`1.5 * IQR (IQR = Q3 - Q1)` from the edges of the box, ending at the farthest\ndata point within that interval. Outliers are plotted as separate dots.\n\nFor further details see\nWikipedia's entry for `boxplot <https://en.wikipedia.org/wiki/Box_plot>`_.\n\nParameters\n----------\ncolumn : str or list of str, optional\n    Column name or list of names, or vector.\n    Can be any valid input to :meth:`pandas.DataFrame.groupby`.\nby : str or array-like, optional\n    Column in the DataFrame to :meth:`pandas.DataFrame.groupby`.\n    One box-plot will be done per value of columns in `by`.\nax : object of class matplotlib.axes.Axes, optional\n    The matplotlib axes to be used by boxplot.\nfontsize : float or str\n    Tick label font size in points or as a string (e.g., `large`).\nrot : float, default 0\n    The rotation angle of labels (in degrees)\n    with respect to the screen coordinate system.\ngrid : bool, default True\n    Setting this to True will show the grid.\nfigsize : A tuple (width, height) in inches\n    The size of the figure to create in matplotlib.\nlayout : tuple (rows, columns), optional\n    For example, (3, 5) will display the subplots\n    using 3 rows and 5 columns, starting from the top-left.\nreturn_type : {'axes', 'dict', 'both'} or None, default 'axes'\n    The kind of object to return. The default is ``axes``.\n\n    * 'axes' returns the matplotlib axes the boxplot is drawn on.\n    * 'dict' returns a dictionary whose values are the matplotlib\n      Lines of the boxplot.\n    * 'both' returns a namedtuple with the axes and dict.\n    * when grouping with ``by``, a Series mapping columns to\n      ``return_type`` is returned.\n\n      If ``return_type`` is `None`, a NumPy array\n      of axes with the same shape as ``layout`` is returned.\nbackend : str, default None\n    Backend to use instead of the backend specified in the option\n    ``plotting.backend``. For instance, 'matplotlib'. Alternatively, to\n    specify the ``plotting.backend`` for the whole session, set\n    ``pd.options.plotting.backend``.\n\n**kwargs\n    All other plotting keyword arguments to be passed to\n    :func:`matplotlib.pyplot.boxplot`.\n\nReturns\n-------\nresult\n    See Notes.\n\nSee Also\n--------\npandas.Series.plot.hist: Make a histogram.\nmatplotlib.pyplot.boxplot : Matplotlib equivalent plot.\n\nNotes\n-----\nThe return type depends on the `return_type` parameter:\n\n* 'axes' : object of class matplotlib.axes.Axes\n* 'dict' : dict of matplotlib.lines.Line2D objects\n* 'both' : a namedtuple with structure (ax, lines)\n\nFor data grouped with ``by``, return a Series of the above or a numpy\narray:\n\n* :class:`~pandas.Series`\n* :class:`~numpy.array` (for ``return_type = None``)\n\nUse ``return_type='dict'`` when you want to tweak the appearance\nof the lines after plotting. In this case a dict containing the Lines\nmaking up the boxes, caps, fliers, medians, and whiskers is returned.\n\nExamples\n--------\n\nBoxplots can be created for every column in the dataframe\nby ``df.boxplot()`` or indicating the columns to be used:\n\n.. plot::\n    :context: close-figs\n\n    >>> np.random.seed(1234)\n    >>> df = pd.DataFrame(np.random.randn(10, 4),\n    ...                   columns=['Col1', 'Col2', 'Col3', 'Col4'])\n    >>> boxplot = df.boxplot(column=['Col1', 'Col2', 'Col3'])  # doctest: +SKIP\n\nBoxplots of variables distributions grouped by the values of a third\nvariable can be created using the option ``by``. For instance:\n\n.. plot::\n    :context: close-figs\n\n    >>> df = pd.DataFrame(np.random.randn(10, 2),\n    ...                   columns=['Col1', 'Col2'])\n    >>> df['X'] = pd.Series(['A', 'A', 'A', 'A', 'A',\n    ...                      'B', 'B', 'B', 'B', 'B'])\n    >>> boxplot = df.boxplot(by='X')\n\nA list of strings (i.e. ``['X', 'Y']``) can be passed to boxplot\nin order to group the data by combination of the variables in the x-axis:\n\n.. plot::\n    :context: close-figs\n\n    >>> df = pd.DataFrame(np.random.randn(10, 3),\n    ...                   columns=['Col1', 'Col2', 'Col3'])\n    >>> df['X'] = pd.Series(['A', 'A', 'A', 'A', 'A',\n    ...                      'B', 'B', 'B', 'B', 'B'])\n    >>> df['Y'] = pd.Series(['A', 'B', 'A', 'B', 'A',\n    ...                      'B', 'A', 'B', 'A', 'B'])\n    >>> boxplot = df.boxplot(column=['Col1', 'Col2'], by=['X', 'Y'])\n\nThe layout of boxplot can be adjusted giving a tuple to ``layout``:\n\n.. plot::\n    :context: close-figs\n\n    >>> boxplot = df.boxplot(column=['Col1', 'Col2'], by='X',\n    ...                      layout=(2, 1))\n\nAdditional formatting can be done to the boxplot, like suppressing the grid\n(``grid=False``), rotating the labels in the x-axis (i.e. ``rot=45``)\nor changing the fontsize (i.e. ``fontsize=15``):\n\n.. plot::\n    :context: close-figs\n\n    >>> boxplot = df.boxplot(grid=False, rot=45, fontsize=15)  # doctest: +SKIP\n\nThe parameter ``return_type`` can be used to select the type of element\nreturned by `boxplot`.  When ``return_type='axes'`` is selected,\nthe matplotlib axes on which the boxplot is drawn are returned:\n\n    >>> boxplot = df.boxplot(column=['Col1', 'Col2'], return_type='axes')\n    >>> type(boxplot)\n    <class 'matplotlib.axes._axes.Axes'>\n\nWhen grouping with ``by``, a Series mapping columns to ``return_type``\nis returned:\n\n    >>> boxplot = df.boxplot(column=['Col1', 'Col2'], by='X',\n    ...                      return_type='axes')\n    >>> type(boxplot)\n    <class 'pandas.core.series.Series'>\n\nIf ``return_type`` is `None`, a NumPy array of axes with the same shape\nas ``layout`` is returned:\n\n    >>> boxplot = df.boxplot(column=['Col1', 'Col2'], by='X',\n    ...                      return_type=None)\n    >>> type(boxplot)\n    <class 'numpy.ndarray'>"
  },
  {
    "symbol": "DataFrame.clip",
    "signature": "(self, lower=None, upper=None, *, axis: 'Axis | None' = None, inplace: 'bool_t' = False, **kwargs) -> 'Self | None'",
    "doc": "Trim values at input threshold(s).\n\nAssigns values outside boundary to boundary values. Thresholds\ncan be singular values or array like, and in the latter case\nthe clipping is performed element-wise in the specified axis.\n\nParameters\n----------\nlower : float or array-like, default None\n    Minimum threshold value. All values below this\n    threshold will be set to it. A missing\n    threshold (e.g `NA`) will not clip the value.\nupper : float or array-like, default None\n    Maximum threshold value. All values above this\n    threshold will be set to it. A missing\n    threshold (e.g `NA`) will not clip the value.\naxis : {{0 or 'index', 1 or 'columns', None}}, default None\n    Align object with lower and upper along the given axis.\n    For `Series` this parameter is unused and defaults to `None`.\ninplace : bool, default False\n    Whether to perform the operation in place on the data.\n*args, **kwargs\n    Additional keywords have no effect but might be accepted\n    for compatibility with numpy.\n\nReturns\n-------\nSeries or DataFrame or None\n    Same type as calling object with the values outside the\n    clip boundaries replaced or None if ``inplace=True``.\n\nSee Also\n--------\nSeries.clip : Trim values at input threshold in series.\nDataFrame.clip : Trim values at input threshold in dataframe.\nnumpy.clip : Clip (limit) the values in an array.\n\nExamples\n--------\n>>> data = {'col_0': [9, -3, 0, -1, 5], 'col_1': [-2, -7, 6, 8, -5]}\n>>> df = pd.DataFrame(data)\n>>> df\n   col_0  col_1\n0      9     -2\n1     -3     -7\n2      0      6\n3     -1      8\n4      5     -5\n\nClips per column using lower and upper thresholds:\n\n>>> df.clip(-4, 6)\n   col_0  col_1\n0      6     -2\n1     -3     -4\n2      0      6\n3     -1      6\n4      5     -4\n\nClips using specific lower and upper thresholds per column:\n\n>>> df.clip([-2, -1], [4, 5])\n    col_0  col_1\n0      4     -1\n1     -2     -1\n2      0      5\n3     -1      5\n4      4     -1\n\nClips using specific lower and upper thresholds per column element:\n\n>>> t = pd.Series([2, -4, -1, 6, 3])\n>>> t\n0    2\n1   -4\n2   -1\n3    6\n4    3\ndtype: int64\n\n>>> df.clip(t, t + 4, axis=0)\n   col_0  col_1\n0      6      2\n1     -3     -4\n2      0      3\n3      6      8\n4      5      3\n\nClips using specific lower threshold per column element, with missing values:\n\n>>> t = pd.Series([2, -4, np.nan, 6, 3])\n>>> t\n0    2.0\n1   -4.0\n2    NaN\n3    6.0\n4    3.0\ndtype: float64\n\n>>> df.clip(t, axis=0)\ncol_0  col_1\n0      9      2\n1     -3     -4\n2      0      6\n3      6      8\n4      5      3"
  },
  {
    "symbol": "DataFrame.columns",
    "signature": "(property)",
    "doc": "\nThe column labels of the DataFrame.\n\nExamples\n--------\n>>> df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\n>>> df\n     A  B\n0    1  3\n1    2  4\n>>> df.columns\nIndex(['A', 'B'], dtype='object')\n"
  },
  {
    "symbol": "DataFrame.combine",
    "signature": "(self, other: 'DataFrame', func: 'Callable[[Series, Series], Series | Hashable]', fill_value=None, overwrite: 'bool' = True) -> 'DataFrame'",
    "doc": "Perform column-wise combine with another DataFrame.\n\nCombines a DataFrame with `other` DataFrame using `func`\nto element-wise combine columns. The row and column indexes of the\nresulting DataFrame will be the union of the two.\n\nParameters\n----------\nother : DataFrame\n    The DataFrame to merge column-wise.\nfunc : function\n    Function that takes two series as inputs and return a Series or a\n    scalar. Used to merge the two dataframes column by columns.\nfill_value : scalar value, default None\n    The value to fill NaNs with prior to passing any column to the\n    merge func.\noverwrite : bool, default True\n    If True, columns in `self` that do not exist in `other` will be\n    overwritten with NaNs.\n\nReturns\n-------\nDataFrame\n    Combination of the provided DataFrames.\n\nSee Also\n--------\nDataFrame.combine_first : Combine two DataFrame objects and default to\n    non-null values in frame calling the method.\n\nExamples\n--------\nCombine using a simple function that chooses the smaller column.\n\n>>> df1 = pd.DataFrame({'A': [0, 0], 'B': [4, 4]})\n>>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n>>> take_smaller = lambda s1, s2: s1 if s1.sum() < s2.sum() else s2\n>>> df1.combine(df2, take_smaller)\n   A  B\n0  0  3\n1  0  3\n\nExample using a true element-wise combine function.\n\n>>> df1 = pd.DataFrame({'A': [5, 0], 'B': [2, 4]})\n>>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n>>> df1.combine(df2, np.minimum)\n   A  B\n0  1  2\n1  0  3\n\nUsing `fill_value` fills Nones prior to passing the column to the\nmerge function.\n\n>>> df1 = pd.DataFrame({'A': [0, 0], 'B': [None, 4]})\n>>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n>>> df1.combine(df2, take_smaller, fill_value=-5)\n   A    B\n0  0 -5.0\n1  0  4.0\n\nHowever, if the same element in both dataframes is None, that None\nis preserved\n\n>>> df1 = pd.DataFrame({'A': [0, 0], 'B': [None, 4]})\n>>> df2 = pd.DataFrame({'A': [1, 1], 'B': [None, 3]})\n>>> df1.combine(df2, take_smaller, fill_value=-5)\n    A    B\n0  0 -5.0\n1  0  3.0\n\nExample that demonstrates the use of `overwrite` and behavior when\nthe axis differ between the dataframes.\n\n>>> df1 = pd.DataFrame({'A': [0, 0], 'B': [4, 4]})\n>>> df2 = pd.DataFrame({'B': [3, 3], 'C': [-10, 1], }, index=[1, 2])\n>>> df1.combine(df2, take_smaller)\n     A    B     C\n0  NaN  NaN   NaN\n1  NaN  3.0 -10.0\n2  NaN  3.0   1.0\n\n>>> df1.combine(df2, take_smaller, overwrite=False)\n     A    B     C\n0  0.0  NaN   NaN\n1  0.0  3.0 -10.0\n2  NaN  3.0   1.0\n\nDemonstrating the preference of the passed in dataframe.\n\n>>> df2 = pd.DataFrame({'B': [3, 3], 'C': [1, 1], }, index=[1, 2])\n>>> df2.combine(df1, take_smaller)\n   A    B   C\n0  0.0  NaN NaN\n1  0.0  3.0 NaN\n2  NaN  3.0 NaN\n\n>>> df2.combine(df1, take_smaller, overwrite=False)\n     A    B   C\n0  0.0  NaN NaN\n1  0.0  3.0 1.0\n2  NaN  3.0 1.0"
  },
  {
    "symbol": "DataFrame.combine_first",
    "signature": "(self, other: 'DataFrame') -> 'DataFrame'",
    "doc": "Update null elements with value in the same location in `other`.\n\nCombine two DataFrame objects by filling null values in one DataFrame\nwith non-null values from other DataFrame. The row and column indexes\nof the resulting DataFrame will be the union of the two. The resulting\ndataframe contains the 'first' dataframe values and overrides the\nsecond one values where both first.loc[index, col] and\nsecond.loc[index, col] are not missing values, upon calling\nfirst.combine_first(second).\n\nParameters\n----------\nother : DataFrame\n    Provided DataFrame to use to fill null values.\n\nReturns\n-------\nDataFrame\n    The result of combining the provided DataFrame with the other object.\n\nSee Also\n--------\nDataFrame.combine : Perform series-wise operation on two DataFrames\n    using a given function.\n\nExamples\n--------\n>>> df1 = pd.DataFrame({'A': [None, 0], 'B': [None, 4]})\n>>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n>>> df1.combine_first(df2)\n     A    B\n0  1.0  3.0\n1  0.0  4.0\n\nNull values still persist if the location of that null value\ndoes not exist in `other`\n\n>>> df1 = pd.DataFrame({'A': [None, 0], 'B': [4, None]})\n>>> df2 = pd.DataFrame({'B': [3, 3], 'C': [1, 1]}, index=[1, 2])\n>>> df1.combine_first(df2)\n     A    B    C\n0  NaN  4.0  NaN\n1  0.0  3.0  1.0\n2  NaN  3.0  1.0"
  },
  {
    "symbol": "DataFrame.compare",
    "signature": "(self, other: 'DataFrame', align_axis: 'Axis' = 1, keep_shape: 'bool' = False, keep_equal: 'bool' = False, result_names: 'Suffixes' = ('self', 'other')) -> 'DataFrame'",
    "doc": "Compare to another DataFrame and show the differences.\n\nParameters\n----------\nother : DataFrame\n    Object to compare with.\n\nalign_axis : {0 or 'index', 1 or 'columns'}, default 1\n    Determine which axis to align the comparison on.\n\n    * 0, or 'index' : Resulting differences are stacked vertically\n        with rows drawn alternately from self and other.\n    * 1, or 'columns' : Resulting differences are aligned horizontally\n        with columns drawn alternately from self and other.\n\nkeep_shape : bool, default False\n    If true, all rows and columns are kept.\n    Otherwise, only the ones with different values are kept.\n\nkeep_equal : bool, default False\n    If true, the result keeps values that are equal.\n    Otherwise, equal values are shown as NaNs.\n\nresult_names : tuple, default ('self', 'other')\n    Set the dataframes names in the comparison.\n\n    .. versionadded:: 1.5.0\n\nReturns\n-------\nDataFrame\n    DataFrame that shows the differences stacked side by side.\n\n    The resulting index will be a MultiIndex with 'self' and 'other'\n    stacked alternately at the inner level.\n\nRaises\n------\nValueError\n    When the two DataFrames don't have identical labels or shape.\n\nSee Also\n--------\nSeries.compare : Compare with another Series and show differences.\nDataFrame.equals : Test whether two objects contain the same elements.\n\nNotes\n-----\nMatching NaNs will not appear as a difference.\n\nCan only compare identically-labeled\n(i.e. same shape, identical row and column labels) DataFrames\n\nExamples\n--------\n>>> df = pd.DataFrame(\n...     {\n...         \"col1\": [\"a\", \"a\", \"b\", \"b\", \"a\"],\n...         \"col2\": [1.0, 2.0, 3.0, np.nan, 5.0],\n...         \"col3\": [1.0, 2.0, 3.0, 4.0, 5.0]\n...     },\n...     columns=[\"col1\", \"col2\", \"col3\"],\n... )\n>>> df\n  col1  col2  col3\n0    a   1.0   1.0\n1    a   2.0   2.0\n2    b   3.0   3.0\n3    b   NaN   4.0\n4    a   5.0   5.0\n\n>>> df2 = df.copy()\n>>> df2.loc[0, 'col1'] = 'c'\n>>> df2.loc[2, 'col3'] = 4.0\n>>> df2\n  col1  col2  col3\n0    c   1.0   1.0\n1    a   2.0   2.0\n2    b   3.0   4.0\n3    b   NaN   4.0\n4    a   5.0   5.0\n\nAlign the differences on columns\n\n>>> df.compare(df2)\n  col1       col3\n  self other self other\n0    a     c  NaN   NaN\n2  NaN   NaN  3.0   4.0\n\nAssign result_names\n\n>>> df.compare(df2, result_names=(\"left\", \"right\"))\n  col1       col3\n  left right left right\n0    a     c  NaN   NaN\n2  NaN   NaN  3.0   4.0\n\nStack the differences on rows\n\n>>> df.compare(df2, align_axis=0)\n        col1  col3\n0 self     a   NaN\n  other    c   NaN\n2 self   NaN   3.0\n  other  NaN   4.0\n\nKeep the equal values\n\n>>> df.compare(df2, keep_equal=True)\n  col1       col3\n  self other self other\n0    a     c  1.0   1.0\n2    b     b  3.0   4.0\n\nKeep all original rows and columns\n\n>>> df.compare(df2, keep_shape=True)\n  col1       col2       col3\n  self other self other self other\n0    a     c  NaN   NaN  NaN   NaN\n1  NaN   NaN  NaN   NaN  NaN   NaN\n2  NaN   NaN  NaN   NaN  3.0   4.0\n3  NaN   NaN  NaN   NaN  NaN   NaN\n4  NaN   NaN  NaN   NaN  NaN   NaN\n\nKeep all original rows and columns and also all original values\n\n>>> df.compare(df2, keep_shape=True, keep_equal=True)\n  col1       col2       col3\n  self other self other self other\n0    a     c  1.0   1.0  1.0   1.0\n1    a     a  2.0   2.0  2.0   2.0\n2    b     b  3.0   3.0  3.0   4.0\n3    b     b  NaN   NaN  4.0   4.0\n4    a     a  5.0   5.0  5.0   5.0"
  },
  {
    "symbol": "DataFrame.convert_dtypes",
    "signature": "(self, infer_objects: 'bool_t' = True, convert_string: 'bool_t' = True, convert_integer: 'bool_t' = True, convert_boolean: 'bool_t' = True, convert_floating: 'bool_t' = True, dtype_backend: 'DtypeBackend' = 'numpy_nullable') -> 'Self'",
    "doc": "Convert columns to the best possible dtypes using dtypes supporting ``pd.NA``.\n\nParameters\n----------\ninfer_objects : bool, default True\n    Whether object dtypes should be converted to the best possible types.\nconvert_string : bool, default True\n    Whether object dtypes should be converted to ``StringDtype()``.\nconvert_integer : bool, default True\n    Whether, if possible, conversion can be done to integer extension types.\nconvert_boolean : bool, defaults True\n    Whether object dtypes should be converted to ``BooleanDtypes()``.\nconvert_floating : bool, defaults True\n    Whether, if possible, conversion can be done to floating extension types.\n    If `convert_integer` is also True, preference will be give to integer\n    dtypes if the floats can be faithfully casted to integers.\ndtype_backend : {'numpy_nullable', 'pyarrow'}, default 'numpy_nullable'\n    Back-end data type applied to the resultant :class:`DataFrame`\n    (still experimental). Behaviour is as follows:\n\n    * ``\"numpy_nullable\"``: returns nullable-dtype-backed :class:`DataFrame`\n      (default).\n    * ``\"pyarrow\"``: returns pyarrow-backed nullable :class:`ArrowDtype`\n      DataFrame.\n\n    .. versionadded:: 2.0\n\nReturns\n-------\nSeries or DataFrame\n    Copy of input object with new dtype.\n\nSee Also\n--------\ninfer_objects : Infer dtypes of objects.\nto_datetime : Convert argument to datetime.\nto_timedelta : Convert argument to timedelta.\nto_numeric : Convert argument to a numeric type.\n\nNotes\n-----\nBy default, ``convert_dtypes`` will attempt to convert a Series (or each\nSeries in a DataFrame) to dtypes that support ``pd.NA``. By using the options\n``convert_string``, ``convert_integer``, ``convert_boolean`` and\n``convert_floating``, it is possible to turn off individual conversions\nto ``StringDtype``, the integer extension types, ``BooleanDtype``\nor floating extension types, respectively.\n\nFor object-dtyped columns, if ``infer_objects`` is ``True``, use the inference\nrules as during normal Series/DataFrame construction.  Then, if possible,\nconvert to ``StringDtype``, ``BooleanDtype`` or an appropriate integer\nor floating extension type, otherwise leave as ``object``.\n\nIf the dtype is integer, convert to an appropriate integer extension type.\n\nIf the dtype is numeric, and consists of all integers, convert to an\nappropriate integer extension type. Otherwise, convert to an\nappropriate floating extension type.\n\nIn the future, as new dtypes are added that support ``pd.NA``, the results\nof this method will change to support those new dtypes.\n\nExamples\n--------\n>>> df = pd.DataFrame(\n...     {\n...         \"a\": pd.Series([1, 2, 3], dtype=np.dtype(\"int32\")),\n...         \"b\": pd.Series([\"x\", \"y\", \"z\"], dtype=np.dtype(\"O\")),\n...         \"c\": pd.Series([True, False, np.nan], dtype=np.dtype(\"O\")),\n...         \"d\": pd.Series([\"h\", \"i\", np.nan], dtype=np.dtype(\"O\")),\n...         \"e\": pd.Series([10, np.nan, 20], dtype=np.dtype(\"float\")),\n...         \"f\": pd.Series([np.nan, 100.5, 200], dtype=np.dtype(\"float\")),\n...     }\n... )\n\nStart with a DataFrame with default dtypes.\n\n>>> df\n   a  b      c    d     e      f\n0  1  x   True    h  10.0    NaN\n1  2  y  False    i   NaN  100.5\n2  3  z    NaN  NaN  20.0  200.0\n\n>>> df.dtypes\na      int32\nb     object\nc     object\nd     object\ne    float64\nf    float64\ndtype: object\n\nConvert the DataFrame to use best possible dtypes.\n\n>>> dfn = df.convert_dtypes()\n>>> dfn\n   a  b      c     d     e      f\n0  1  x   True     h    10   <NA>\n1  2  y  False     i  <NA>  100.5\n2  3  z   <NA>  <NA>    20  200.0\n\n>>> dfn.dtypes\na             Int32\nb    string[python]\nc           boolean\nd    string[python]\ne             Int64\nf           Float64\ndtype: object\n\nStart with a Series of strings and missing data represented by ``np.nan``.\n\n>>> s = pd.Series([\"a\", \"b\", np.nan])\n>>> s\n0      a\n1      b\n2    NaN\ndtype: object\n\nObtain a Series with dtype ``StringDtype``.\n\n>>> s.convert_dtypes()\n0       a\n1       b\n2    <NA>\ndtype: string"
  },
  {
    "symbol": "DataFrame.copy",
    "signature": "(self, deep: 'bool_t | None' = True) -> 'Self'",
    "doc": "Make a copy of this object's indices and data.\n\nWhen ``deep=True`` (default), a new object will be created with a\ncopy of the calling object's data and indices. Modifications to\nthe data or indices of the copy will not be reflected in the\noriginal object (see notes below).\n\nWhen ``deep=False``, a new object will be created without copying\nthe calling object's data or index (only references to the data\nand index are copied). Any changes to the data of the original\nwill be reflected in the shallow copy (and vice versa).\n\n.. note::\n    The ``deep=False`` behaviour as described above will change\n    in pandas 3.0. `Copy-on-Write\n    <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n    will be enabled by default, which means that the \"shallow\" copy\n    is that is returned with ``deep=False`` will still avoid making\n    an eager copy, but changes to the data of the original will *no*\n    longer be reflected in the shallow copy (or vice versa). Instead,\n    it makes use of a lazy (deferred) copy mechanism that will copy\n    the data only when any changes to the original or shallow copy is\n    made.\n\n    You can already get the future behavior and improvements through\n    enabling copy on write ``pd.options.mode.copy_on_write = True``\n\nParameters\n----------\ndeep : bool, default True\n    Make a deep copy, including a copy of the data and the indices.\n    With ``deep=False`` neither the indices nor the data are copied.\n\nReturns\n-------\nSeries or DataFrame\n    Object type matches caller.\n\nNotes\n-----\nWhen ``deep=True``, data is copied but actual Python objects\nwill not be copied recursively, only the reference to the object.\nThis is in contrast to `copy.deepcopy` in the Standard Library,\nwhich recursively copies object data (see examples below).\n\nWhile ``Index`` objects are copied when ``deep=True``, the underlying\nnumpy array is not copied for performance reasons. Since ``Index`` is\nimmutable, the underlying data can be safely shared and a copy\nis not needed.\n\nSince pandas is not thread safe, see the\n:ref:`gotchas <gotchas.thread-safety>` when copying in a threading\nenvironment.\n\nWhen ``copy_on_write`` in pandas config is set to ``True``, the\n``copy_on_write`` config takes effect even when ``deep=False``.\nThis means that any changes to the copied data would make a new copy\nof the data upon write (and vice versa). Changes made to either the\noriginal or copied variable would not be reflected in the counterpart.\nSee :ref:`Copy_on_Write <copy_on_write>` for more information.\n\nExamples\n--------\n>>> s = pd.Series([1, 2], index=[\"a\", \"b\"])\n>>> s\na    1\nb    2\ndtype: int64\n\n>>> s_copy = s.copy()\n>>> s_copy\na    1\nb    2\ndtype: int64\n\n**Shallow copy versus default (deep) copy:**\n\n>>> s = pd.Series([1, 2], index=[\"a\", \"b\"])\n>>> deep = s.copy()\n>>> shallow = s.copy(deep=False)\n\nShallow copy shares data and index with original.\n\n>>> s is shallow\nFalse\n>>> s.values is shallow.values and s.index is shallow.index\nTrue\n\nDeep copy has own copy of data and index.\n\n>>> s is deep\nFalse\n>>> s.values is deep.values or s.index is deep.index\nFalse\n\nUpdates to the data shared by shallow copy and original is reflected\nin both (NOTE: this will no longer be true for pandas >= 3.0);\ndeep copy remains unchanged.\n\n>>> s.iloc[0] = 3\n>>> shallow.iloc[1] = 4\n>>> s\na    3\nb    4\ndtype: int64\n>>> shallow\na    3\nb    4\ndtype: int64\n>>> deep\na    1\nb    2\ndtype: int64\n\nNote that when copying an object containing Python objects, a deep copy\nwill copy the data, but will not do so recursively. Updating a nested\ndata object will be reflected in the deep copy.\n\n>>> s = pd.Series([[1, 2], [3, 4]])\n>>> deep = s.copy()\n>>> s[0][0] = 10\n>>> s\n0    [10, 2]\n1     [3, 4]\ndtype: object\n>>> deep\n0    [10, 2]\n1     [3, 4]\ndtype: object\n\n**Copy-on-Write is set to true**, the shallow copy is not modified\nwhen the original data is changed:\n\n>>> with pd.option_context(\"mode.copy_on_write\", True):\n...     s = pd.Series([1, 2], index=[\"a\", \"b\"])\n...     copy = s.copy(deep=False)\n...     s.iloc[0] = 100\n...     s\na    100\nb      2\ndtype: int64\n>>> copy\na    1\nb    2\ndtype: int64"
  },
  {
    "symbol": "DataFrame.corr",
    "signature": "(self, method: 'CorrelationMethod' = 'pearson', min_periods: 'int' = 1, numeric_only: 'bool' = False) -> 'DataFrame'",
    "doc": "Compute pairwise correlation of columns, excluding NA/null values.\n\nParameters\n----------\nmethod : {'pearson', 'kendall', 'spearman'} or callable\n    Method of correlation:\n\n    * pearson : standard correlation coefficient\n    * kendall : Kendall Tau correlation coefficient\n    * spearman : Spearman rank correlation\n    * callable: callable with input two 1d ndarrays\n        and returning a float. Note that the returned matrix from corr\n        will have 1 along the diagonals and will be symmetric\n        regardless of the callable's behavior.\nmin_periods : int, optional\n    Minimum number of observations required per pair of columns\n    to have a valid result. Currently only available for Pearson\n    and Spearman correlation.\nnumeric_only : bool, default False\n    Include only `float`, `int` or `boolean` data.\n\n    .. versionadded:: 1.5.0\n\n    .. versionchanged:: 2.0.0\n        The default value of ``numeric_only`` is now ``False``.\n\nReturns\n-------\nDataFrame\n    Correlation matrix.\n\nSee Also\n--------\nDataFrame.corrwith : Compute pairwise correlation with another\n    DataFrame or Series.\nSeries.corr : Compute the correlation between two Series.\n\nNotes\n-----\nPearson, Kendall and Spearman correlation are currently computed using pairwise complete observations.\n\n* `Pearson correlation coefficient <https://en.wikipedia.org/wiki/Pearson_correlation_coefficient>`_\n* `Kendall rank correlation coefficient <https://en.wikipedia.org/wiki/Kendall_rank_correlation_coefficient>`_\n* `Spearman's rank correlation coefficient <https://en.wikipedia.org/wiki/Spearman%27s_rank_correlation_coefficient>`_\n\nExamples\n--------\n>>> def histogram_intersection(a, b):\n...     v = np.minimum(a, b).sum().round(decimals=1)\n...     return v\n>>> df = pd.DataFrame([(.2, .3), (.0, .6), (.6, .0), (.2, .1)],\n...                   columns=['dogs', 'cats'])\n>>> df.corr(method=histogram_intersection)\n      dogs  cats\ndogs   1.0   0.3\ncats   0.3   1.0\n\n>>> df = pd.DataFrame([(1, 1), (2, np.nan), (np.nan, 3), (4, 4)],\n...                   columns=['dogs', 'cats'])\n>>> df.corr(min_periods=3)\n      dogs  cats\ndogs   1.0   NaN\ncats   NaN   1.0"
  },
  {
    "symbol": "DataFrame.corrwith",
    "signature": "(self, other: 'DataFrame | Series', axis: 'Axis' = 0, drop: 'bool' = False, method: 'CorrelationMethod' = 'pearson', numeric_only: 'bool' = False) -> 'Series'",
    "doc": "Compute pairwise correlation.\n\nPairwise correlation is computed between rows or columns of\nDataFrame with rows or columns of Series or DataFrame. DataFrames\nare first aligned along both axes before computing the\ncorrelations.\n\nParameters\n----------\nother : DataFrame, Series\n    Object with which to compute correlations.\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    The axis to use. 0 or 'index' to compute row-wise, 1 or 'columns' for\n    column-wise.\ndrop : bool, default False\n    Drop missing indices from result.\nmethod : {'pearson', 'kendall', 'spearman'} or callable\n    Method of correlation:\n\n    * pearson : standard correlation coefficient\n    * kendall : Kendall Tau correlation coefficient\n    * spearman : Spearman rank correlation\n    * callable: callable with input two 1d ndarrays\n        and returning a float.\n\nnumeric_only : bool, default False\n    Include only `float`, `int` or `boolean` data.\n\n    .. versionadded:: 1.5.0\n\n    .. versionchanged:: 2.0.0\n        The default value of ``numeric_only`` is now ``False``.\n\nReturns\n-------\nSeries\n    Pairwise correlations.\n\nSee Also\n--------\nDataFrame.corr : Compute pairwise correlation of columns.\n\nExamples\n--------\n>>> index = [\"a\", \"b\", \"c\", \"d\", \"e\"]\n>>> columns = [\"one\", \"two\", \"three\", \"four\"]\n>>> df1 = pd.DataFrame(np.arange(20).reshape(5, 4), index=index, columns=columns)\n>>> df2 = pd.DataFrame(np.arange(16).reshape(4, 4), index=index[:4], columns=columns)\n>>> df1.corrwith(df2)\none      1.0\ntwo      1.0\nthree    1.0\nfour     1.0\ndtype: float64\n\n>>> df2.corrwith(df1, axis=1)\na    1.0\nb    1.0\nc    1.0\nd    1.0\ne    NaN\ndtype: float64"
  },
  {
    "symbol": "DataFrame.count",
    "signature": "(self, axis: 'Axis' = 0, numeric_only: 'bool' = False)",
    "doc": "Count non-NA cells for each column or row.\n\nThe values `None`, `NaN`, `NaT`, ``pandas.NA`` are considered NA.\n\nParameters\n----------\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    If 0 or 'index' counts are generated for each column.\n    If 1 or 'columns' counts are generated for each row.\nnumeric_only : bool, default False\n    Include only `float`, `int` or `boolean` data.\n\nReturns\n-------\nSeries\n    For each column/row the number of non-NA/null entries.\n\nSee Also\n--------\nSeries.count: Number of non-NA elements in a Series.\nDataFrame.value_counts: Count unique combinations of columns.\nDataFrame.shape: Number of DataFrame rows and columns (including NA\n    elements).\nDataFrame.isna: Boolean same-sized DataFrame showing places of NA\n    elements.\n\nExamples\n--------\nConstructing DataFrame from a dictionary:\n\n>>> df = pd.DataFrame({\"Person\":\n...                    [\"John\", \"Myla\", \"Lewis\", \"John\", \"Myla\"],\n...                    \"Age\": [24., np.nan, 21., 33, 26],\n...                    \"Single\": [False, True, True, True, False]})\n>>> df\n   Person   Age  Single\n0    John  24.0   False\n1    Myla   NaN    True\n2   Lewis  21.0    True\n3    John  33.0    True\n4    Myla  26.0   False\n\nNotice the uncounted NA values:\n\n>>> df.count()\nPerson    5\nAge       4\nSingle    5\ndtype: int64\n\nCounts for each **row**:\n\n>>> df.count(axis='columns')\n0    3\n1    2\n2    3\n3    3\n4    3\ndtype: int64"
  },
  {
    "symbol": "DataFrame.cov",
    "signature": "(self, min_periods: 'int | None' = None, ddof: 'int | None' = 1, numeric_only: 'bool' = False) -> 'DataFrame'",
    "doc": "Compute pairwise covariance of columns, excluding NA/null values.\n\nCompute the pairwise covariance among the series of a DataFrame.\nThe returned data frame is the `covariance matrix\n<https://en.wikipedia.org/wiki/Covariance_matrix>`__ of the columns\nof the DataFrame.\n\nBoth NA and null values are automatically excluded from the\ncalculation. (See the note below about bias from missing values.)\nA threshold can be set for the minimum number of\nobservations for each value created. Comparisons with observations\nbelow this threshold will be returned as ``NaN``.\n\nThis method is generally used for the analysis of time series data to\nunderstand the relationship between different measures\nacross time.\n\nParameters\n----------\nmin_periods : int, optional\n    Minimum number of observations required per pair of columns\n    to have a valid result.\n\nddof : int, default 1\n    Delta degrees of freedom.  The divisor used in calculations\n    is ``N - ddof``, where ``N`` represents the number of elements.\n    This argument is applicable only when no ``nan`` is in the dataframe.\n\nnumeric_only : bool, default False\n    Include only `float`, `int` or `boolean` data.\n\n    .. versionadded:: 1.5.0\n\n    .. versionchanged:: 2.0.0\n        The default value of ``numeric_only`` is now ``False``.\n\nReturns\n-------\nDataFrame\n    The covariance matrix of the series of the DataFrame.\n\nSee Also\n--------\nSeries.cov : Compute covariance with another Series.\ncore.window.ewm.ExponentialMovingWindow.cov : Exponential weighted sample\n    covariance.\ncore.window.expanding.Expanding.cov : Expanding sample covariance.\ncore.window.rolling.Rolling.cov : Rolling sample covariance.\n\nNotes\n-----\nReturns the covariance matrix of the DataFrame's time series.\nThe covariance is normalized by N-ddof.\n\nFor DataFrames that have Series that are missing data (assuming that\ndata is `missing at random\n<https://en.wikipedia.org/wiki/Missing_data#Missing_at_random>`__)\nthe returned covariance matrix will be an unbiased estimate\nof the variance and covariance between the member Series.\n\nHowever, for many applications this estimate may not be acceptable\nbecause the estimate covariance matrix is not guaranteed to be positive\nsemi-definite. This could lead to estimate correlations having\nabsolute values which are greater than one, and/or a non-invertible\ncovariance matrix. See `Estimation of covariance matrices\n<https://en.wikipedia.org/w/index.php?title=Estimation_of_covariance_\nmatrices>`__ for more details.\n\nExamples\n--------\n>>> df = pd.DataFrame([(1, 2), (0, 3), (2, 0), (1, 1)],\n...                   columns=['dogs', 'cats'])\n>>> df.cov()\n          dogs      cats\ndogs  0.666667 -1.000000\ncats -1.000000  1.666667\n\n>>> np.random.seed(42)\n>>> df = pd.DataFrame(np.random.randn(1000, 5),\n...                   columns=['a', 'b', 'c', 'd', 'e'])\n>>> df.cov()\n          a         b         c         d         e\na  0.998438 -0.020161  0.059277 -0.008943  0.014144\nb -0.020161  1.059352 -0.008543 -0.024738  0.009826\nc  0.059277 -0.008543  1.010670 -0.001486 -0.000271\nd -0.008943 -0.024738 -0.001486  0.921297 -0.013692\ne  0.014144  0.009826 -0.000271 -0.013692  0.977795\n\n**Minimum number of periods**\n\nThis method also supports an optional ``min_periods`` keyword\nthat specifies the required minimum number of non-NA observations for\neach column pair in order to have a valid result:\n\n>>> np.random.seed(42)\n>>> df = pd.DataFrame(np.random.randn(20, 3),\n...                   columns=['a', 'b', 'c'])\n>>> df.loc[df.index[:5], 'a'] = np.nan\n>>> df.loc[df.index[5:10], 'b'] = np.nan\n>>> df.cov(min_periods=12)\n          a         b         c\na  0.316741       NaN -0.150812\nb       NaN  1.248003  0.191417\nc -0.150812  0.191417  0.895202"
  },
  {
    "symbol": "DataFrame.cummax",
    "signature": "(self, axis: 'Axis | None' = None, skipna: 'bool' = True, *args, **kwargs)",
    "doc": "Return cumulative maximum over a DataFrame or Series axis.\n\nReturns a DataFrame or Series of the same size containing the cumulative\nmaximum.\n\nParameters\n----------\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    The index or the name of the axis. 0 is equivalent to None or 'index'.\n    For `Series` this parameter is unused and defaults to 0.\nskipna : bool, default True\n    Exclude NA/null values. If an entire row/column is NA, the result\n    will be NA.\n*args, **kwargs\n    Additional keywords have no effect but might be accepted for\n    compatibility with NumPy.\n\nReturns\n-------\nSeries or DataFrame\n    Return cumulative maximum of Series or DataFrame.\n\nSee Also\n--------\ncore.window.expanding.Expanding.max : Similar functionality\n    but ignores ``NaN`` values.\nDataFrame.max : Return the maximum over\n    DataFrame axis.\nDataFrame.cummax : Return cumulative maximum over DataFrame axis.\nDataFrame.cummin : Return cumulative minimum over DataFrame axis.\nDataFrame.cumsum : Return cumulative sum over DataFrame axis.\nDataFrame.cumprod : Return cumulative product over DataFrame axis.\n\nExamples\n--------\n**Series**\n\n>>> s = pd.Series([2, np.nan, 5, -1, 0])\n>>> s\n0    2.0\n1    NaN\n2    5.0\n3   -1.0\n4    0.0\ndtype: float64\n\nBy default, NA values are ignored.\n\n>>> s.cummax()\n0    2.0\n1    NaN\n2    5.0\n3    5.0\n4    5.0\ndtype: float64\n\nTo include NA values in the operation, use ``skipna=False``\n\n>>> s.cummax(skipna=False)\n0    2.0\n1    NaN\n2    NaN\n3    NaN\n4    NaN\ndtype: float64\n\n**DataFrame**\n\n>>> df = pd.DataFrame([[2.0, 1.0],\n...                    [3.0, np.nan],\n...                    [1.0, 0.0]],\n...                   columns=list('AB'))\n>>> df\n     A    B\n0  2.0  1.0\n1  3.0  NaN\n2  1.0  0.0\n\nBy default, iterates over rows and finds the maximum\nin each column. This is equivalent to ``axis=None`` or ``axis='index'``.\n\n>>> df.cummax()\n     A    B\n0  2.0  1.0\n1  3.0  NaN\n2  3.0  1.0\n\nTo iterate over columns and find the maximum in each row,\nuse ``axis=1``\n\n>>> df.cummax(axis=1)\n     A    B\n0  2.0  2.0\n1  3.0  NaN\n2  1.0  1.0"
  },
  {
    "symbol": "DataFrame.cummin",
    "signature": "(self, axis: 'Axis | None' = None, skipna: 'bool' = True, *args, **kwargs)",
    "doc": "Return cumulative minimum over a DataFrame or Series axis.\n\nReturns a DataFrame or Series of the same size containing the cumulative\nminimum.\n\nParameters\n----------\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    The index or the name of the axis. 0 is equivalent to None or 'index'.\n    For `Series` this parameter is unused and defaults to 0.\nskipna : bool, default True\n    Exclude NA/null values. If an entire row/column is NA, the result\n    will be NA.\n*args, **kwargs\n    Additional keywords have no effect but might be accepted for\n    compatibility with NumPy.\n\nReturns\n-------\nSeries or DataFrame\n    Return cumulative minimum of Series or DataFrame.\n\nSee Also\n--------\ncore.window.expanding.Expanding.min : Similar functionality\n    but ignores ``NaN`` values.\nDataFrame.min : Return the minimum over\n    DataFrame axis.\nDataFrame.cummax : Return cumulative maximum over DataFrame axis.\nDataFrame.cummin : Return cumulative minimum over DataFrame axis.\nDataFrame.cumsum : Return cumulative sum over DataFrame axis.\nDataFrame.cumprod : Return cumulative product over DataFrame axis.\n\nExamples\n--------\n**Series**\n\n>>> s = pd.Series([2, np.nan, 5, -1, 0])\n>>> s\n0    2.0\n1    NaN\n2    5.0\n3   -1.0\n4    0.0\ndtype: float64\n\nBy default, NA values are ignored.\n\n>>> s.cummin()\n0    2.0\n1    NaN\n2    2.0\n3   -1.0\n4   -1.0\ndtype: float64\n\nTo include NA values in the operation, use ``skipna=False``\n\n>>> s.cummin(skipna=False)\n0    2.0\n1    NaN\n2    NaN\n3    NaN\n4    NaN\ndtype: float64\n\n**DataFrame**\n\n>>> df = pd.DataFrame([[2.0, 1.0],\n...                    [3.0, np.nan],\n...                    [1.0, 0.0]],\n...                   columns=list('AB'))\n>>> df\n     A    B\n0  2.0  1.0\n1  3.0  NaN\n2  1.0  0.0\n\nBy default, iterates over rows and finds the minimum\nin each column. This is equivalent to ``axis=None`` or ``axis='index'``.\n\n>>> df.cummin()\n     A    B\n0  2.0  1.0\n1  2.0  NaN\n2  1.0  0.0\n\nTo iterate over columns and find the minimum in each row,\nuse ``axis=1``\n\n>>> df.cummin(axis=1)\n     A    B\n0  2.0  1.0\n1  3.0  NaN\n2  1.0  0.0"
  },
  {
    "symbol": "DataFrame.cumprod",
    "signature": "(self, axis: 'Axis | None' = None, skipna: 'bool' = True, *args, **kwargs)",
    "doc": "Return cumulative product over a DataFrame or Series axis.\n\nReturns a DataFrame or Series of the same size containing the cumulative\nproduct.\n\nParameters\n----------\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    The index or the name of the axis. 0 is equivalent to None or 'index'.\n    For `Series` this parameter is unused and defaults to 0.\nskipna : bool, default True\n    Exclude NA/null values. If an entire row/column is NA, the result\n    will be NA.\n*args, **kwargs\n    Additional keywords have no effect but might be accepted for\n    compatibility with NumPy.\n\nReturns\n-------\nSeries or DataFrame\n    Return cumulative product of Series or DataFrame.\n\nSee Also\n--------\ncore.window.expanding.Expanding.prod : Similar functionality\n    but ignores ``NaN`` values.\nDataFrame.prod : Return the product over\n    DataFrame axis.\nDataFrame.cummax : Return cumulative maximum over DataFrame axis.\nDataFrame.cummin : Return cumulative minimum over DataFrame axis.\nDataFrame.cumsum : Return cumulative sum over DataFrame axis.\nDataFrame.cumprod : Return cumulative product over DataFrame axis.\n\nExamples\n--------\n**Series**\n\n>>> s = pd.Series([2, np.nan, 5, -1, 0])\n>>> s\n0    2.0\n1    NaN\n2    5.0\n3   -1.0\n4    0.0\ndtype: float64\n\nBy default, NA values are ignored.\n\n>>> s.cumprod()\n0     2.0\n1     NaN\n2    10.0\n3   -10.0\n4    -0.0\ndtype: float64\n\nTo include NA values in the operation, use ``skipna=False``\n\n>>> s.cumprod(skipna=False)\n0    2.0\n1    NaN\n2    NaN\n3    NaN\n4    NaN\ndtype: float64\n\n**DataFrame**\n\n>>> df = pd.DataFrame([[2.0, 1.0],\n...                    [3.0, np.nan],\n...                    [1.0, 0.0]],\n...                   columns=list('AB'))\n>>> df\n     A    B\n0  2.0  1.0\n1  3.0  NaN\n2  1.0  0.0\n\nBy default, iterates over rows and finds the product\nin each column. This is equivalent to ``axis=None`` or ``axis='index'``.\n\n>>> df.cumprod()\n     A    B\n0  2.0  1.0\n1  6.0  NaN\n2  6.0  0.0\n\nTo iterate over columns and find the product in each row,\nuse ``axis=1``\n\n>>> df.cumprod(axis=1)\n     A    B\n0  2.0  2.0\n1  3.0  NaN\n2  1.0  0.0"
  },
  {
    "symbol": "DataFrame.cumsum",
    "signature": "(self, axis: 'Axis | None' = None, skipna: 'bool' = True, *args, **kwargs)",
    "doc": "Return cumulative sum over a DataFrame or Series axis.\n\nReturns a DataFrame or Series of the same size containing the cumulative\nsum.\n\nParameters\n----------\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    The index or the name of the axis. 0 is equivalent to None or 'index'.\n    For `Series` this parameter is unused and defaults to 0.\nskipna : bool, default True\n    Exclude NA/null values. If an entire row/column is NA, the result\n    will be NA.\n*args, **kwargs\n    Additional keywords have no effect but might be accepted for\n    compatibility with NumPy.\n\nReturns\n-------\nSeries or DataFrame\n    Return cumulative sum of Series or DataFrame.\n\nSee Also\n--------\ncore.window.expanding.Expanding.sum : Similar functionality\n    but ignores ``NaN`` values.\nDataFrame.sum : Return the sum over\n    DataFrame axis.\nDataFrame.cummax : Return cumulative maximum over DataFrame axis.\nDataFrame.cummin : Return cumulative minimum over DataFrame axis.\nDataFrame.cumsum : Return cumulative sum over DataFrame axis.\nDataFrame.cumprod : Return cumulative product over DataFrame axis.\n\nExamples\n--------\n**Series**\n\n>>> s = pd.Series([2, np.nan, 5, -1, 0])\n>>> s\n0    2.0\n1    NaN\n2    5.0\n3   -1.0\n4    0.0\ndtype: float64\n\nBy default, NA values are ignored.\n\n>>> s.cumsum()\n0    2.0\n1    NaN\n2    7.0\n3    6.0\n4    6.0\ndtype: float64\n\nTo include NA values in the operation, use ``skipna=False``\n\n>>> s.cumsum(skipna=False)\n0    2.0\n1    NaN\n2    NaN\n3    NaN\n4    NaN\ndtype: float64\n\n**DataFrame**\n\n>>> df = pd.DataFrame([[2.0, 1.0],\n...                    [3.0, np.nan],\n...                    [1.0, 0.0]],\n...                   columns=list('AB'))\n>>> df\n     A    B\n0  2.0  1.0\n1  3.0  NaN\n2  1.0  0.0\n\nBy default, iterates over rows and finds the sum\nin each column. This is equivalent to ``axis=None`` or ``axis='index'``.\n\n>>> df.cumsum()\n     A    B\n0  2.0  1.0\n1  5.0  NaN\n2  6.0  1.0\n\nTo iterate over columns and find the sum in each row,\nuse ``axis=1``\n\n>>> df.cumsum(axis=1)\n     A    B\n0  2.0  3.0\n1  3.0  NaN\n2  1.0  1.0"
  },
  {
    "symbol": "DataFrame.describe",
    "signature": "(self, percentiles=None, include=None, exclude=None) -> 'Self'",
    "doc": "Generate descriptive statistics.\n\nDescriptive statistics include those that summarize the central\ntendency, dispersion and shape of a\ndataset's distribution, excluding ``NaN`` values.\n\nAnalyzes both numeric and object series, as well\nas ``DataFrame`` column sets of mixed data types. The output\nwill vary depending on what is provided. Refer to the notes\nbelow for more detail.\n\nParameters\n----------\npercentiles : list-like of numbers, optional\n    The percentiles to include in the output. All should\n    fall between 0 and 1. The default is\n    ``[.25, .5, .75]``, which returns the 25th, 50th, and\n    75th percentiles.\ninclude : 'all', list-like of dtypes or None (default), optional\n    A white list of data types to include in the result. Ignored\n    for ``Series``. Here are the options:\n\n    - 'all' : All columns of the input will be included in the output.\n    - A list-like of dtypes : Limits the results to the\n      provided data types.\n      To limit the result to numeric types submit\n      ``numpy.number``. To limit it instead to object columns submit\n      the ``numpy.object`` data type. Strings\n      can also be used in the style of\n      ``select_dtypes`` (e.g. ``df.describe(include=['O'])``). To\n      select pandas categorical columns, use ``'category'``\n    - None (default) : The result will include all numeric columns.\nexclude : list-like of dtypes or None (default), optional,\n    A black list of data types to omit from the result. Ignored\n    for ``Series``. Here are the options:\n\n    - A list-like of dtypes : Excludes the provided data types\n      from the result. To exclude numeric types submit\n      ``numpy.number``. To exclude object columns submit the data\n      type ``numpy.object``. Strings can also be used in the style of\n      ``select_dtypes`` (e.g. ``df.describe(exclude=['O'])``). To\n      exclude pandas categorical columns, use ``'category'``\n    - None (default) : The result will exclude nothing.\n\nReturns\n-------\nSeries or DataFrame\n    Summary statistics of the Series or Dataframe provided.\n\nSee Also\n--------\nDataFrame.count: Count number of non-NA/null observations.\nDataFrame.max: Maximum of the values in the object.\nDataFrame.min: Minimum of the values in the object.\nDataFrame.mean: Mean of the values.\nDataFrame.std: Standard deviation of the observations.\nDataFrame.select_dtypes: Subset of a DataFrame including/excluding\n    columns based on their dtype.\n\nNotes\n-----\nFor numeric data, the result's index will include ``count``,\n``mean``, ``std``, ``min``, ``max`` as well as lower, ``50`` and\nupper percentiles. By default the lower percentile is ``25`` and the\nupper percentile is ``75``. The ``50`` percentile is the\nsame as the median.\n\nFor object data (e.g. strings or timestamps), the result's index\nwill include ``count``, ``unique``, ``top``, and ``freq``. The ``top``\nis the most common value. The ``freq`` is the most common value's\nfrequency. Timestamps also include the ``first`` and ``last`` items.\n\nIf multiple object values have the highest count, then the\n``count`` and ``top`` results will be arbitrarily chosen from\namong those with the highest count.\n\nFor mixed data types provided via a ``DataFrame``, the default is to\nreturn only an analysis of numeric columns. If the dataframe consists\nonly of object and categorical data without any numeric columns, the\ndefault is to return an analysis of both the object and categorical\ncolumns. If ``include='all'`` is provided as an option, the result\nwill include a union of attributes of each type.\n\nThe `include` and `exclude` parameters can be used to limit\nwhich columns in a ``DataFrame`` are analyzed for the output.\nThe parameters are ignored when analyzing a ``Series``.\n\nExamples\n--------\nDescribing a numeric ``Series``.\n\n>>> s = pd.Series([1, 2, 3])\n>>> s.describe()\ncount    3.0\nmean     2.0\nstd      1.0\nmin      1.0\n25%      1.5\n50%      2.0\n75%      2.5\nmax      3.0\ndtype: float64\n\nDescribing a categorical ``Series``.\n\n>>> s = pd.Series(['a', 'a', 'b', 'c'])\n>>> s.describe()\ncount     4\nunique    3\ntop       a\nfreq      2\ndtype: object\n\nDescribing a timestamp ``Series``.\n\n>>> s = pd.Series([\n...     np.datetime64(\"2000-01-01\"),\n...     np.datetime64(\"2010-01-01\"),\n...     np.datetime64(\"2010-01-01\")\n... ])\n>>> s.describe()\ncount                      3\nmean     2006-09-01 08:00:00\nmin      2000-01-01 00:00:00\n25%      2004-12-31 12:00:00\n50%      2010-01-01 00:00:00\n75%      2010-01-01 00:00:00\nmax      2010-01-01 00:00:00\ndtype: object\n\nDescribing a ``DataFrame``. By default only numeric fields\nare returned.\n\n>>> df = pd.DataFrame({'categorical': pd.Categorical(['d', 'e', 'f']),\n...                    'numeric': [1, 2, 3],\n...                    'object': ['a', 'b', 'c']\n...                    })\n>>> df.describe()\n       numeric\ncount      3.0\nmean       2.0\nstd        1.0\nmin        1.0\n25%        1.5\n50%        2.0\n75%        2.5\nmax        3.0\n\nDescribing all columns of a ``DataFrame`` regardless of data type.\n\n>>> df.describe(include='all')  # doctest: +SKIP\n       categorical  numeric object\ncount            3      3.0      3\nunique           3      NaN      3\ntop              f      NaN      a\nfreq             1      NaN      1\nmean           NaN      2.0    NaN\nstd            NaN      1.0    NaN\nmin            NaN      1.0    NaN\n25%            NaN      1.5    NaN\n50%            NaN      2.0    NaN\n75%            NaN      2.5    NaN\nmax            NaN      3.0    NaN\n\nDescribing a column from a ``DataFrame`` by accessing it as\nan attribute.\n\n>>> df.numeric.describe()\ncount    3.0\nmean     2.0\nstd      1.0\nmin      1.0\n25%      1.5\n50%      2.0\n75%      2.5\nmax      3.0\nName: numeric, dtype: float64\n\nIncluding only numeric columns in a ``DataFrame`` description.\n\n>>> df.describe(include=[np.number])\n       numeric\ncount      3.0\nmean       2.0\nstd        1.0\nmin        1.0\n25%        1.5\n50%        2.0\n75%        2.5\nmax        3.0\n\nIncluding only string columns in a ``DataFrame`` description.\n\n>>> df.describe(include=[object])  # doctest: +SKIP\n       object\ncount       3\nunique      3\ntop         a\nfreq        1\n\nIncluding only categorical columns from a ``DataFrame`` description.\n\n>>> df.describe(include=['category'])\n       categorical\ncount            3\nunique           3\ntop              d\nfreq             1\n\nExcluding numeric columns from a ``DataFrame`` description.\n\n>>> df.describe(exclude=[np.number])  # doctest: +SKIP\n       categorical object\ncount            3      3\nunique           3      3\ntop              f      a\nfreq             1      1\n\nExcluding object columns from a ``DataFrame`` description.\n\n>>> df.describe(exclude=[object])  # doctest: +SKIP\n       categorical  numeric\ncount            3      3.0\nunique           3      NaN\ntop              f      NaN\nfreq             1      NaN\nmean           NaN      2.0\nstd            NaN      1.0\nmin            NaN      1.0\n25%            NaN      1.5\n50%            NaN      2.0\n75%            NaN      2.5\nmax            NaN      3.0"
  },
  {
    "symbol": "DataFrame.diff",
    "signature": "(self, periods: 'int' = 1, axis: 'Axis' = 0) -> 'DataFrame'",
    "doc": "First discrete difference of element.\n\nCalculates the difference of a DataFrame element compared with another\nelement in the DataFrame (default is element in previous row).\n\nParameters\n----------\nperiods : int, default 1\n    Periods to shift for calculating difference, accepts negative\n    values.\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    Take difference over rows (0) or columns (1).\n\nReturns\n-------\nDataFrame\n    First differences of the Series.\n\nSee Also\n--------\nDataFrame.pct_change: Percent change over given number of periods.\nDataFrame.shift: Shift index by desired number of periods with an\n    optional time freq.\nSeries.diff: First discrete difference of object.\n\nNotes\n-----\nFor boolean dtypes, this uses :meth:`operator.xor` rather than\n:meth:`operator.sub`.\nThe result is calculated according to current dtype in DataFrame,\nhowever dtype of the result is always float64.\n\nExamples\n--------\n\nDifference with previous row\n\n>>> df = pd.DataFrame({'a': [1, 2, 3, 4, 5, 6],\n...                    'b': [1, 1, 2, 3, 5, 8],\n...                    'c': [1, 4, 9, 16, 25, 36]})\n>>> df\n   a  b   c\n0  1  1   1\n1  2  1   4\n2  3  2   9\n3  4  3  16\n4  5  5  25\n5  6  8  36\n\n>>> df.diff()\n     a    b     c\n0  NaN  NaN   NaN\n1  1.0  0.0   3.0\n2  1.0  1.0   5.0\n3  1.0  1.0   7.0\n4  1.0  2.0   9.0\n5  1.0  3.0  11.0\n\nDifference with previous column\n\n>>> df.diff(axis=1)\n    a  b   c\n0 NaN  0   0\n1 NaN -1   3\n2 NaN -1   7\n3 NaN -1  13\n4 NaN  0  20\n5 NaN  2  28\n\nDifference with 3rd previous row\n\n>>> df.diff(periods=3)\n     a    b     c\n0  NaN  NaN   NaN\n1  NaN  NaN   NaN\n2  NaN  NaN   NaN\n3  3.0  2.0  15.0\n4  3.0  4.0  21.0\n5  3.0  6.0  27.0\n\nDifference with following row\n\n>>> df.diff(periods=-1)\n     a    b     c\n0 -1.0  0.0  -3.0\n1 -1.0 -1.0  -5.0\n2 -1.0 -1.0  -7.0\n3 -1.0 -2.0  -9.0\n4 -1.0 -3.0 -11.0\n5  NaN  NaN   NaN\n\nOverflow in input dtype\n\n>>> df = pd.DataFrame({'a': [1, 0]}, dtype=np.uint8)\n>>> df.diff()\n       a\n0    NaN\n1  255.0"
  },
  {
    "symbol": "DataFrame.div",
    "signature": "(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame'",
    "doc": "Get Floating division of dataframe and other, element-wise (binary operator `truediv`).\n\nEquivalent to ``dataframe / other``, but with support to substitute a fill_value\nfor missing data in one of the inputs. With reverse version, `rtruediv`.\n\nAmong flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to\narithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.\n\nParameters\n----------\nother : scalar, sequence, Series, dict or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis : {0 or 'index', 1 or 'columns'}\n    Whether to compare by the index (0 or 'index') or columns.\n    (1 or 'columns'). For Series input, axis to match Series index on.\nlevel : int or label\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : float or None, default None\n    Fill existing missing (NaN) values, and any new element needed for\n    successful DataFrame alignment, with this value before computation.\n    If data in both corresponding DataFrame locations is missing\n    the result will be missing.\n\nReturns\n-------\nDataFrame\n    Result of the arithmetic operation.\n\nSee Also\n--------\nDataFrame.add : Add DataFrames.\nDataFrame.sub : Subtract DataFrames.\nDataFrame.mul : Multiply DataFrames.\nDataFrame.div : Divide DataFrames (float division).\nDataFrame.truediv : Divide DataFrames (float division).\nDataFrame.floordiv : Divide DataFrames (integer division).\nDataFrame.mod : Calculate modulo (remainder after division).\nDataFrame.pow : Calculate exponential power.\n\nNotes\n-----\nMismatched indices will be unioned together.\n\nExamples\n--------\n>>> df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n>>> df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\nAdd a scalar with operator version which return the same\nresults.\n\n>>> df + 1\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\n>>> df.add(1)\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\nDivide by constant with reverse version.\n\n>>> df.div(10)\n           angles  degrees\ncircle        0.0     36.0\ntriangle      0.3     18.0\nrectangle     0.4     36.0\n\n>>> df.rdiv(10)\n             angles   degrees\ncircle          inf  0.027778\ntriangle   3.333333  0.055556\nrectangle  2.500000  0.027778\n\nSubtract a list and Series by axis with operator version.\n\n>>> df - [1, 2]\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub([1, 2], axis='columns')\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),\n...        axis='index')\n           angles  degrees\ncircle         -1      359\ntriangle        2      179\nrectangle       3      359\n\nMultiply a dictionary by axis.\n\n>>> df.mul({'angles': 0, 'degrees': 2})\n            angles  degrees\ncircle           0      720\ntriangle         0      360\nrectangle        0      720\n\n>>> df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')\n            angles  degrees\ncircle           0        0\ntriangle         6      360\nrectangle       12     1080\n\nMultiply a DataFrame of different shape with operator version.\n\n>>> other = pd.DataFrame({'angles': [0, 3, 4]},\n...                      index=['circle', 'triangle', 'rectangle'])\n>>> other\n           angles\ncircle          0\ntriangle        3\nrectangle       4\n\n>>> df * other\n           angles  degrees\ncircle          0      NaN\ntriangle        9      NaN\nrectangle      16      NaN\n\n>>> df.mul(other, fill_value=0)\n           angles  degrees\ncircle          0      0.0\ntriangle        9      0.0\nrectangle      16      0.0\n\nDivide by a MultiIndex by level.\n\n>>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],\n...                              'degrees': [360, 180, 360, 360, 540, 720]},\n...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],\n...                                    ['circle', 'triangle', 'rectangle',\n...                                     'square', 'pentagon', 'hexagon']])\n>>> df_multindex\n             angles  degrees\nA circle          0      360\n  triangle        3      180\n  rectangle       4      360\nB square          4      360\n  pentagon        5      540\n  hexagon         6      720\n\n>>> df.div(df_multindex, level=1, fill_value=0)\n             angles  degrees\nA circle        NaN      1.0\n  triangle      1.0      1.0\n  rectangle     1.0      1.0\nB square        0.0      0.0\n  pentagon      0.0      0.0\n  hexagon       0.0      0.0"
  },
  {
    "symbol": "DataFrame.divide",
    "signature": "(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame'",
    "doc": "Get Floating division of dataframe and other, element-wise (binary operator `truediv`).\n\nEquivalent to ``dataframe / other``, but with support to substitute a fill_value\nfor missing data in one of the inputs. With reverse version, `rtruediv`.\n\nAmong flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to\narithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.\n\nParameters\n----------\nother : scalar, sequence, Series, dict or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis : {0 or 'index', 1 or 'columns'}\n    Whether to compare by the index (0 or 'index') or columns.\n    (1 or 'columns'). For Series input, axis to match Series index on.\nlevel : int or label\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : float or None, default None\n    Fill existing missing (NaN) values, and any new element needed for\n    successful DataFrame alignment, with this value before computation.\n    If data in both corresponding DataFrame locations is missing\n    the result will be missing.\n\nReturns\n-------\nDataFrame\n    Result of the arithmetic operation.\n\nSee Also\n--------\nDataFrame.add : Add DataFrames.\nDataFrame.sub : Subtract DataFrames.\nDataFrame.mul : Multiply DataFrames.\nDataFrame.div : Divide DataFrames (float division).\nDataFrame.truediv : Divide DataFrames (float division).\nDataFrame.floordiv : Divide DataFrames (integer division).\nDataFrame.mod : Calculate modulo (remainder after division).\nDataFrame.pow : Calculate exponential power.\n\nNotes\n-----\nMismatched indices will be unioned together.\n\nExamples\n--------\n>>> df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n>>> df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\nAdd a scalar with operator version which return the same\nresults.\n\n>>> df + 1\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\n>>> df.add(1)\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\nDivide by constant with reverse version.\n\n>>> df.div(10)\n           angles  degrees\ncircle        0.0     36.0\ntriangle      0.3     18.0\nrectangle     0.4     36.0\n\n>>> df.rdiv(10)\n             angles   degrees\ncircle          inf  0.027778\ntriangle   3.333333  0.055556\nrectangle  2.500000  0.027778\n\nSubtract a list and Series by axis with operator version.\n\n>>> df - [1, 2]\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub([1, 2], axis='columns')\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),\n...        axis='index')\n           angles  degrees\ncircle         -1      359\ntriangle        2      179\nrectangle       3      359\n\nMultiply a dictionary by axis.\n\n>>> df.mul({'angles': 0, 'degrees': 2})\n            angles  degrees\ncircle           0      720\ntriangle         0      360\nrectangle        0      720\n\n>>> df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')\n            angles  degrees\ncircle           0        0\ntriangle         6      360\nrectangle       12     1080\n\nMultiply a DataFrame of different shape with operator version.\n\n>>> other = pd.DataFrame({'angles': [0, 3, 4]},\n...                      index=['circle', 'triangle', 'rectangle'])\n>>> other\n           angles\ncircle          0\ntriangle        3\nrectangle       4\n\n>>> df * other\n           angles  degrees\ncircle          0      NaN\ntriangle        9      NaN\nrectangle      16      NaN\n\n>>> df.mul(other, fill_value=0)\n           angles  degrees\ncircle          0      0.0\ntriangle        9      0.0\nrectangle      16      0.0\n\nDivide by a MultiIndex by level.\n\n>>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],\n...                              'degrees': [360, 180, 360, 360, 540, 720]},\n...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],\n...                                    ['circle', 'triangle', 'rectangle',\n...                                     'square', 'pentagon', 'hexagon']])\n>>> df_multindex\n             angles  degrees\nA circle          0      360\n  triangle        3      180\n  rectangle       4      360\nB square          4      360\n  pentagon        5      540\n  hexagon         6      720\n\n>>> df.div(df_multindex, level=1, fill_value=0)\n             angles  degrees\nA circle        NaN      1.0\n  triangle      1.0      1.0\n  rectangle     1.0      1.0\nB square        0.0      0.0\n  pentagon      0.0      0.0\n  hexagon       0.0      0.0"
  },
  {
    "symbol": "DataFrame.dot",
    "signature": "(self, other: 'AnyArrayLike | DataFrame') -> 'DataFrame | Series'",
    "doc": "Compute the matrix multiplication between the DataFrame and other.\n\nThis method computes the matrix product between the DataFrame and the\nvalues of an other Series, DataFrame or a numpy array.\n\nIt can also be called using ``self @ other``.\n\nParameters\n----------\nother : Series, DataFrame or array-like\n    The other object to compute the matrix product with.\n\nReturns\n-------\nSeries or DataFrame\n    If other is a Series, return the matrix product between self and\n    other as a Series. If other is a DataFrame or a numpy.array, return\n    the matrix product of self and other in a DataFrame of a np.array.\n\nSee Also\n--------\nSeries.dot: Similar method for Series.\n\nNotes\n-----\nThe dimensions of DataFrame and other must be compatible in order to\ncompute the matrix multiplication. In addition, the column names of\nDataFrame and the index of other must contain the same values, as they\nwill be aligned prior to the multiplication.\n\nThe dot method for Series computes the inner product, instead of the\nmatrix product here.\n\nExamples\n--------\nHere we multiply a DataFrame with a Series.\n\n>>> df = pd.DataFrame([[0, 1, -2, -1], [1, 1, 1, 1]])\n>>> s = pd.Series([1, 1, 2, 1])\n>>> df.dot(s)\n0    -4\n1     5\ndtype: int64\n\nHere we multiply a DataFrame with another DataFrame.\n\n>>> other = pd.DataFrame([[0, 1], [1, 2], [-1, -1], [2, 0]])\n>>> df.dot(other)\n    0   1\n0   1   4\n1   2   2\n\nNote that the dot method give the same result as @\n\n>>> df @ other\n    0   1\n0   1   4\n1   2   2\n\nThe dot method works also if other is an np.array.\n\n>>> arr = np.array([[0, 1], [1, 2], [-1, -1], [2, 0]])\n>>> df.dot(arr)\n    0   1\n0   1   4\n1   2   2\n\nNote how shuffling of the objects does not change the result.\n\n>>> s2 = s.reindex([1, 0, 2, 3])\n>>> df.dot(s2)\n0    -4\n1     5\ndtype: int64"
  },
  {
    "symbol": "DataFrame.drop",
    "signature": "(self, labels: 'IndexLabel | None' = None, *, axis: 'Axis' = 0, index: 'IndexLabel | None' = None, columns: 'IndexLabel | None' = None, level: 'Level | None' = None, inplace: 'bool' = False, errors: 'IgnoreRaise' = 'raise') -> 'DataFrame | None'",
    "doc": "Drop specified labels from rows or columns.\n\nRemove rows or columns by specifying label names and corresponding\naxis, or by directly specifying index or column names. When using a\nmulti-index, labels on different levels can be removed by specifying\nthe level. See the :ref:`user guide <advanced.shown_levels>`\nfor more information about the now unused levels.\n\nParameters\n----------\nlabels : single label or list-like\n    Index or column labels to drop. A tuple will be used as a single\n    label and not treated as a list-like.\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    Whether to drop labels from the index (0 or 'index') or\n    columns (1 or 'columns').\nindex : single label or list-like\n    Alternative to specifying axis (``labels, axis=0``\n    is equivalent to ``index=labels``).\ncolumns : single label or list-like\n    Alternative to specifying axis (``labels, axis=1``\n    is equivalent to ``columns=labels``).\nlevel : int or level name, optional\n    For MultiIndex, level from which the labels will be removed.\ninplace : bool, default False\n    If False, return a copy. Otherwise, do operation\n    in place and return None.\nerrors : {'ignore', 'raise'}, default 'raise'\n    If 'ignore', suppress error and only existing labels are\n    dropped.\n\nReturns\n-------\nDataFrame or None\n    Returns DataFrame or None DataFrame with the specified\n    index or column labels removed or None if inplace=True.\n\nRaises\n------\nKeyError\n    If any of the labels is not found in the selected axis.\n\nSee Also\n--------\nDataFrame.loc : Label-location based indexer for selection by label.\nDataFrame.dropna : Return DataFrame with labels on given axis omitted\n    where (all or any) data are missing.\nDataFrame.drop_duplicates : Return DataFrame with duplicate rows\n    removed, optionally only considering certain columns.\nSeries.drop : Return Series with specified index labels removed.\n\nExamples\n--------\n>>> df = pd.DataFrame(np.arange(12).reshape(3, 4),\n...                   columns=['A', 'B', 'C', 'D'])\n>>> df\n   A  B   C   D\n0  0  1   2   3\n1  4  5   6   7\n2  8  9  10  11\n\nDrop columns\n\n>>> df.drop(['B', 'C'], axis=1)\n   A   D\n0  0   3\n1  4   7\n2  8  11\n\n>>> df.drop(columns=['B', 'C'])\n   A   D\n0  0   3\n1  4   7\n2  8  11\n\nDrop a row by index\n\n>>> df.drop([0, 1])\n   A  B   C   D\n2  8  9  10  11\n\nDrop columns and/or rows of MultiIndex DataFrame\n\n>>> midx = pd.MultiIndex(levels=[['llama', 'cow', 'falcon'],\n...                              ['speed', 'weight', 'length']],\n...                      codes=[[0, 0, 0, 1, 1, 1, 2, 2, 2],\n...                             [0, 1, 2, 0, 1, 2, 0, 1, 2]])\n>>> df = pd.DataFrame(index=midx, columns=['big', 'small'],\n...                   data=[[45, 30], [200, 100], [1.5, 1], [30, 20],\n...                         [250, 150], [1.5, 0.8], [320, 250],\n...                         [1, 0.8], [0.3, 0.2]])\n>>> df\n                big     small\nllama   speed   45.0    30.0\n        weight  200.0   100.0\n        length  1.5     1.0\ncow     speed   30.0    20.0\n        weight  250.0   150.0\n        length  1.5     0.8\nfalcon  speed   320.0   250.0\n        weight  1.0     0.8\n        length  0.3     0.2\n\nDrop a specific index combination from the MultiIndex\nDataFrame, i.e., drop the combination ``'falcon'`` and\n``'weight'``, which deletes only the corresponding row\n\n>>> df.drop(index=('falcon', 'weight'))\n                big     small\nllama   speed   45.0    30.0\n        weight  200.0   100.0\n        length  1.5     1.0\ncow     speed   30.0    20.0\n        weight  250.0   150.0\n        length  1.5     0.8\nfalcon  speed   320.0   250.0\n        length  0.3     0.2\n\n>>> df.drop(index='cow', columns='small')\n                big\nllama   speed   45.0\n        weight  200.0\n        length  1.5\nfalcon  speed   320.0\n        weight  1.0\n        length  0.3\n\n>>> df.drop(index='length', level=1)\n                big     small\nllama   speed   45.0    30.0\n        weight  200.0   100.0\ncow     speed   30.0    20.0\n        weight  250.0   150.0\nfalcon  speed   320.0   250.0\n        weight  1.0     0.8"
  },
  {
    "symbol": "DataFrame.drop_duplicates",
    "signature": "(self, subset: 'Hashable | Sequence[Hashable] | None' = None, *, keep: 'DropKeep' = 'first', inplace: 'bool' = False, ignore_index: 'bool' = False) -> 'DataFrame | None'",
    "doc": "Return DataFrame with duplicate rows removed.\n\nConsidering certain columns is optional. Indexes, including time indexes\nare ignored.\n\nParameters\n----------\nsubset : column label or sequence of labels, optional\n    Only consider certain columns for identifying duplicates, by\n    default use all of the columns.\nkeep : {'first', 'last', ``False``}, default 'first'\n    Determines which duplicates (if any) to keep.\n\n    - 'first' : Drop duplicates except for the first occurrence.\n    - 'last' : Drop duplicates except for the last occurrence.\n    - ``False`` : Drop all duplicates.\n\ninplace : bool, default ``False``\n    Whether to modify the DataFrame rather than creating a new one.\nignore_index : bool, default ``False``\n    If ``True``, the resulting axis will be labeled 0, 1, …, n - 1.\n\nReturns\n-------\nDataFrame or None\n    DataFrame with duplicates removed or None if ``inplace=True``.\n\nSee Also\n--------\nDataFrame.value_counts: Count unique combinations of columns.\n\nExamples\n--------\nConsider dataset containing ramen rating.\n\n>>> df = pd.DataFrame({\n...     'brand': ['Yum Yum', 'Yum Yum', 'Indomie', 'Indomie', 'Indomie'],\n...     'style': ['cup', 'cup', 'cup', 'pack', 'pack'],\n...     'rating': [4, 4, 3.5, 15, 5]\n... })\n>>> df\n    brand style  rating\n0  Yum Yum   cup     4.0\n1  Yum Yum   cup     4.0\n2  Indomie   cup     3.5\n3  Indomie  pack    15.0\n4  Indomie  pack     5.0\n\nBy default, it removes duplicate rows based on all columns.\n\n>>> df.drop_duplicates()\n    brand style  rating\n0  Yum Yum   cup     4.0\n2  Indomie   cup     3.5\n3  Indomie  pack    15.0\n4  Indomie  pack     5.0\n\nTo remove duplicates on specific column(s), use ``subset``.\n\n>>> df.drop_duplicates(subset=['brand'])\n    brand style  rating\n0  Yum Yum   cup     4.0\n2  Indomie   cup     3.5\n\nTo remove duplicates and keep last occurrences, use ``keep``.\n\n>>> df.drop_duplicates(subset=['brand', 'style'], keep='last')\n    brand style  rating\n1  Yum Yum   cup     4.0\n2  Indomie   cup     3.5\n4  Indomie  pack     5.0"
  },
  {
    "symbol": "DataFrame.droplevel",
    "signature": "(self, level: 'IndexLabel', axis: 'Axis' = 0) -> 'Self'",
    "doc": "Return Series/DataFrame with requested index / column level(s) removed.\n\nParameters\n----------\nlevel : int, str, or list-like\n    If a string is given, must be the name of a level\n    If list-like, elements must be names or positional indexes\n    of levels.\n\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    Axis along which the level(s) is removed:\n\n    * 0 or 'index': remove level(s) in column.\n    * 1 or 'columns': remove level(s) in row.\n\n    For `Series` this parameter is unused and defaults to 0.\n\nReturns\n-------\nSeries/DataFrame\n    Series/DataFrame with requested index / column level(s) removed.\n\nExamples\n--------\n>>> df = pd.DataFrame([\n...     [1, 2, 3, 4],\n...     [5, 6, 7, 8],\n...     [9, 10, 11, 12]\n... ]).set_index([0, 1]).rename_axis(['a', 'b'])\n\n>>> df.columns = pd.MultiIndex.from_tuples([\n...     ('c', 'e'), ('d', 'f')\n... ], names=['level_1', 'level_2'])\n\n>>> df\nlevel_1   c   d\nlevel_2   e   f\na b\n1 2      3   4\n5 6      7   8\n9 10    11  12\n\n>>> df.droplevel('a')\nlevel_1   c   d\nlevel_2   e   f\nb\n2        3   4\n6        7   8\n10      11  12\n\n>>> df.droplevel('level_2', axis=1)\nlevel_1   c   d\na b\n1 2      3   4\n5 6      7   8\n9 10    11  12"
  },
  {
    "symbol": "DataFrame.dropna",
    "signature": "(self, *, axis: 'Axis' = 0, how: 'AnyAll | lib.NoDefault' = <no_default>, thresh: 'int | lib.NoDefault' = <no_default>, subset: 'IndexLabel | None' = None, inplace: 'bool' = False, ignore_index: 'bool' = False) -> 'DataFrame | None'",
    "doc": "Remove missing values.\n\nSee the :ref:`User Guide <missing_data>` for more on which values are\nconsidered missing, and how to work with missing data.\n\nParameters\n----------\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    Determine if rows or columns which contain missing values are\n    removed.\n\n    * 0, or 'index' : Drop rows which contain missing values.\n    * 1, or 'columns' : Drop columns which contain missing value.\n\n    Only a single axis is allowed.\n\nhow : {'any', 'all'}, default 'any'\n    Determine if row or column is removed from DataFrame, when we have\n    at least one NA or all NA.\n\n    * 'any' : If any NA values are present, drop that row or column.\n    * 'all' : If all values are NA, drop that row or column.\n\nthresh : int, optional\n    Require that many non-NA values. Cannot be combined with how.\nsubset : column label or sequence of labels, optional\n    Labels along other axis to consider, e.g. if you are dropping rows\n    these would be a list of columns to include.\ninplace : bool, default False\n    Whether to modify the DataFrame rather than creating a new one.\nignore_index : bool, default ``False``\n    If ``True``, the resulting axis will be labeled 0, 1, …, n - 1.\n\n    .. versionadded:: 2.0.0\n\nReturns\n-------\nDataFrame or None\n    DataFrame with NA entries dropped from it or None if ``inplace=True``.\n\nSee Also\n--------\nDataFrame.isna: Indicate missing values.\nDataFrame.notna : Indicate existing (non-missing) values.\nDataFrame.fillna : Replace missing values.\nSeries.dropna : Drop missing values.\nIndex.dropna : Drop missing indices.\n\nExamples\n--------\n>>> df = pd.DataFrame({\"name\": ['Alfred', 'Batman', 'Catwoman'],\n...                    \"toy\": [np.nan, 'Batmobile', 'Bullwhip'],\n...                    \"born\": [pd.NaT, pd.Timestamp(\"1940-04-25\"),\n...                             pd.NaT]})\n>>> df\n       name        toy       born\n0    Alfred        NaN        NaT\n1    Batman  Batmobile 1940-04-25\n2  Catwoman   Bullwhip        NaT\n\nDrop the rows where at least one element is missing.\n\n>>> df.dropna()\n     name        toy       born\n1  Batman  Batmobile 1940-04-25\n\nDrop the columns where at least one element is missing.\n\n>>> df.dropna(axis='columns')\n       name\n0    Alfred\n1    Batman\n2  Catwoman\n\nDrop the rows where all elements are missing.\n\n>>> df.dropna(how='all')\n       name        toy       born\n0    Alfred        NaN        NaT\n1    Batman  Batmobile 1940-04-25\n2  Catwoman   Bullwhip        NaT\n\nKeep only the rows with at least 2 non-NA values.\n\n>>> df.dropna(thresh=2)\n       name        toy       born\n1    Batman  Batmobile 1940-04-25\n2  Catwoman   Bullwhip        NaT\n\nDefine in which columns to look for missing values.\n\n>>> df.dropna(subset=['name', 'toy'])\n       name        toy       born\n1    Batman  Batmobile 1940-04-25\n2  Catwoman   Bullwhip        NaT"
  },
  {
    "symbol": "DataFrame.dtypes",
    "signature": "(property)",
    "doc": "\nReturn the dtypes in the DataFrame.\n\nThis returns a Series with the data type of each column.\nThe result's index is the original DataFrame's columns. Columns\nwith mixed types are stored with the ``object`` dtype. See\n:ref:`the User Guide <basics.dtypes>` for more.\n\nReturns\n-------\npandas.Series\n    The data type of each column.\n\nExamples\n--------\n>>> df = pd.DataFrame({'float': [1.0],\n...                    'int': [1],\n...                    'datetime': [pd.Timestamp('20180310')],\n...                    'string': ['foo']})\n>>> df.dtypes\nfloat              float64\nint                  int64\ndatetime    datetime64[ns]\nstring              object\ndtype: object\n"
  },
  {
    "symbol": "DataFrame.duplicated",
    "signature": "(self, subset: 'Hashable | Sequence[Hashable] | None' = None, keep: 'DropKeep' = 'first') -> 'Series'",
    "doc": "Return boolean Series denoting duplicate rows.\n\nConsidering certain columns is optional.\n\nParameters\n----------\nsubset : column label or sequence of labels, optional\n    Only consider certain columns for identifying duplicates, by\n    default use all of the columns.\nkeep : {'first', 'last', False}, default 'first'\n    Determines which duplicates (if any) to mark.\n\n    - ``first`` : Mark duplicates as ``True`` except for the first occurrence.\n    - ``last`` : Mark duplicates as ``True`` except for the last occurrence.\n    - False : Mark all duplicates as ``True``.\n\nReturns\n-------\nSeries\n    Boolean series for each duplicated rows.\n\nSee Also\n--------\nIndex.duplicated : Equivalent method on index.\nSeries.duplicated : Equivalent method on Series.\nSeries.drop_duplicates : Remove duplicate values from Series.\nDataFrame.drop_duplicates : Remove duplicate values from DataFrame.\n\nExamples\n--------\nConsider dataset containing ramen rating.\n\n>>> df = pd.DataFrame({\n...     'brand': ['Yum Yum', 'Yum Yum', 'Indomie', 'Indomie', 'Indomie'],\n...     'style': ['cup', 'cup', 'cup', 'pack', 'pack'],\n...     'rating': [4, 4, 3.5, 15, 5]\n... })\n>>> df\n    brand style  rating\n0  Yum Yum   cup     4.0\n1  Yum Yum   cup     4.0\n2  Indomie   cup     3.5\n3  Indomie  pack    15.0\n4  Indomie  pack     5.0\n\nBy default, for each set of duplicated values, the first occurrence\nis set on False and all others on True.\n\n>>> df.duplicated()\n0    False\n1     True\n2    False\n3    False\n4    False\ndtype: bool\n\nBy using 'last', the last occurrence of each set of duplicated values\nis set on False and all others on True.\n\n>>> df.duplicated(keep='last')\n0     True\n1    False\n2    False\n3    False\n4    False\ndtype: bool\n\nBy setting ``keep`` on False, all duplicates are True.\n\n>>> df.duplicated(keep=False)\n0     True\n1     True\n2    False\n3    False\n4    False\ndtype: bool\n\nTo find duplicates on specific column(s), use ``subset``.\n\n>>> df.duplicated(subset=['brand'])\n0    False\n1     True\n2    False\n3     True\n4     True\ndtype: bool"
  },
  {
    "symbol": "DataFrame.empty",
    "signature": "(property)",
    "doc": "\nIndicator whether Series/DataFrame is empty.\n\nTrue if Series/DataFrame is entirely empty (no items), meaning any of the\naxes are of length 0.\n\nReturns\n-------\nbool\n    If Series/DataFrame is empty, return True, if not return False.\n\nSee Also\n--------\nSeries.dropna : Return series without null values.\nDataFrame.dropna : Return DataFrame with labels on given axis omitted\n    where (all or any) data are missing.\n\nNotes\n-----\nIf Series/DataFrame contains only NaNs, it is still not considered empty. See\nthe example below.\n\nExamples\n--------\nAn example of an actual empty DataFrame. Notice the index is empty:\n\n>>> df_empty = pd.DataFrame({'A' : []})\n>>> df_empty\nEmpty DataFrame\nColumns: [A]\nIndex: []\n>>> df_empty.empty\nTrue\n\nIf we only have NaNs in our DataFrame, it is not considered empty! We\nwill need to drop the NaNs to make the DataFrame empty:\n\n>>> df = pd.DataFrame({'A' : [np.nan]})\n>>> df\n    A\n0 NaN\n>>> df.empty\nFalse\n>>> df.dropna().empty\nTrue\n\n>>> ser_empty = pd.Series({'A' : []})\n>>> ser_empty\nA    []\ndtype: object\n>>> ser_empty.empty\nFalse\n>>> ser_empty = pd.Series()\n>>> ser_empty.empty\nTrue\n"
  },
  {
    "symbol": "DataFrame.eq",
    "signature": "(self, other, axis: 'Axis' = 'columns', level=None) -> 'DataFrame'",
    "doc": "Get Equal to of dataframe and other, element-wise (binary operator `eq`).\n\nAmong flexible wrappers (`eq`, `ne`, `le`, `lt`, `ge`, `gt`) to comparison\noperators.\n\nEquivalent to `==`, `!=`, `<=`, `<`, `>=`, `>` with support to choose axis\n(rows or columns) and level for comparison.\n\nParameters\n----------\nother : scalar, sequence, Series, or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis : {0 or 'index', 1 or 'columns'}, default 'columns'\n    Whether to compare by the index (0 or 'index') or columns\n    (1 or 'columns').\nlevel : int or label\n    Broadcast across a level, matching Index values on the passed\n    MultiIndex level.\n\nReturns\n-------\nDataFrame of bool\n    Result of the comparison.\n\nSee Also\n--------\nDataFrame.eq : Compare DataFrames for equality elementwise.\nDataFrame.ne : Compare DataFrames for inequality elementwise.\nDataFrame.le : Compare DataFrames for less than inequality\n    or equality elementwise.\nDataFrame.lt : Compare DataFrames for strictly less than\n    inequality elementwise.\nDataFrame.ge : Compare DataFrames for greater than inequality\n    or equality elementwise.\nDataFrame.gt : Compare DataFrames for strictly greater than\n    inequality elementwise.\n\nNotes\n-----\nMismatched indices will be unioned together.\n`NaN` values are considered different (i.e. `NaN` != `NaN`).\n\nExamples\n--------\n>>> df = pd.DataFrame({'cost': [250, 150, 100],\n...                    'revenue': [100, 250, 300]},\n...                   index=['A', 'B', 'C'])\n>>> df\n   cost  revenue\nA   250      100\nB   150      250\nC   100      300\n\nComparison with a scalar, using either the operator or method:\n\n>>> df == 100\n    cost  revenue\nA  False     True\nB  False    False\nC   True    False\n\n>>> df.eq(100)\n    cost  revenue\nA  False     True\nB  False    False\nC   True    False\n\nWhen `other` is a :class:`Series`, the columns of a DataFrame are aligned\nwith the index of `other` and broadcast:\n\n>>> df != pd.Series([100, 250], index=[\"cost\", \"revenue\"])\n    cost  revenue\nA   True     True\nB   True    False\nC  False     True\n\nUse the method to control the broadcast axis:\n\n>>> df.ne(pd.Series([100, 300], index=[\"A\", \"D\"]), axis='index')\n   cost  revenue\nA  True    False\nB  True     True\nC  True     True\nD  True     True\n\nWhen comparing to an arbitrary sequence, the number of columns must\nmatch the number elements in `other`:\n\n>>> df == [250, 100]\n    cost  revenue\nA   True     True\nB  False    False\nC  False    False\n\nUse the method to control the axis:\n\n>>> df.eq([250, 250, 100], axis='index')\n    cost  revenue\nA   True    False\nB  False     True\nC   True    False\n\nCompare to a DataFrame of different shape.\n\n>>> other = pd.DataFrame({'revenue': [300, 250, 100, 150]},\n...                      index=['A', 'B', 'C', 'D'])\n>>> other\n   revenue\nA      300\nB      250\nC      100\nD      150\n\n>>> df.gt(other)\n    cost  revenue\nA  False    False\nB  False    False\nC  False     True\nD  False    False\n\nCompare to a MultiIndex by level.\n\n>>> df_multindex = pd.DataFrame({'cost': [250, 150, 100, 150, 300, 220],\n...                              'revenue': [100, 250, 300, 200, 175, 225]},\n...                             index=[['Q1', 'Q1', 'Q1', 'Q2', 'Q2', 'Q2'],\n...                                    ['A', 'B', 'C', 'A', 'B', 'C']])\n>>> df_multindex\n      cost  revenue\nQ1 A   250      100\n   B   150      250\n   C   100      300\nQ2 A   150      200\n   B   300      175\n   C   220      225\n\n>>> df.le(df_multindex, level=1)\n       cost  revenue\nQ1 A   True     True\n   B   True     True\n   C   True     True\nQ2 A  False     True\n   B   True    False\n   C   True    False"
  },
  {
    "symbol": "DataFrame.equals",
    "signature": "(self, other: 'object') -> 'bool_t'",
    "doc": "Test whether two objects contain the same elements.\n\nThis function allows two Series or DataFrames to be compared against\neach other to see if they have the same shape and elements. NaNs in\nthe same location are considered equal.\n\nThe row/column index do not need to have the same type, as long\nas the values are considered equal. Corresponding columns and\nindex must be of the same dtype.\n\nParameters\n----------\nother : Series or DataFrame\n    The other Series or DataFrame to be compared with the first.\n\nReturns\n-------\nbool\n    True if all elements are the same in both objects, False\n    otherwise.\n\nSee Also\n--------\nSeries.eq : Compare two Series objects of the same length\n    and return a Series where each element is True if the element\n    in each Series is equal, False otherwise.\nDataFrame.eq : Compare two DataFrame objects of the same shape and\n    return a DataFrame where each element is True if the respective\n    element in each DataFrame is equal, False otherwise.\ntesting.assert_series_equal : Raises an AssertionError if left and\n    right are not equal. Provides an easy interface to ignore\n    inequality in dtypes, indexes and precision among others.\ntesting.assert_frame_equal : Like assert_series_equal, but targets\n    DataFrames.\nnumpy.array_equal : Return True if two arrays have the same shape\n    and elements, False otherwise.\n\nExamples\n--------\n>>> df = pd.DataFrame({1: [10], 2: [20]})\n>>> df\n    1   2\n0  10  20\n\nDataFrames df and exactly_equal have the same types and values for\ntheir elements and column labels, which will return True.\n\n>>> exactly_equal = pd.DataFrame({1: [10], 2: [20]})\n>>> exactly_equal\n    1   2\n0  10  20\n>>> df.equals(exactly_equal)\nTrue\n\nDataFrames df and different_column_type have the same element\ntypes and values, but have different types for the column labels,\nwhich will still return True.\n\n>>> different_column_type = pd.DataFrame({1.0: [10], 2.0: [20]})\n>>> different_column_type\n   1.0  2.0\n0   10   20\n>>> df.equals(different_column_type)\nTrue\n\nDataFrames df and different_data_type have different types for the\nsame values for their elements, and will return False even though\ntheir column labels are the same values and types.\n\n>>> different_data_type = pd.DataFrame({1: [10.0], 2: [20.0]})\n>>> different_data_type\n      1     2\n0  10.0  20.0\n>>> df.equals(different_data_type)\nFalse"
  },
  {
    "symbol": "DataFrame.eval",
    "signature": "(self, expr: 'str', *, inplace: 'bool' = False, **kwargs) -> 'Any | None'",
    "doc": "Evaluate a string describing operations on DataFrame columns.\n\nOperates on columns only, not specific rows or elements.  This allows\n`eval` to run arbitrary code, which can make you vulnerable to code\ninjection if you pass user input to this function.\n\nParameters\n----------\nexpr : str\n    The expression string to evaluate.\ninplace : bool, default False\n    If the expression contains an assignment, whether to perform the\n    operation inplace and mutate the existing DataFrame. Otherwise,\n    a new DataFrame is returned.\n**kwargs\n    See the documentation for :func:`eval` for complete details\n    on the keyword arguments accepted by\n    :meth:`~pandas.DataFrame.query`.\n\nReturns\n-------\nndarray, scalar, pandas object, or None\n    The result of the evaluation or None if ``inplace=True``.\n\nSee Also\n--------\nDataFrame.query : Evaluates a boolean expression to query the columns\n    of a frame.\nDataFrame.assign : Can evaluate an expression or function to create new\n    values for a column.\neval : Evaluate a Python expression as a string using various\n    backends.\n\nNotes\n-----\nFor more details see the API documentation for :func:`~eval`.\nFor detailed examples see :ref:`enhancing performance with eval\n<enhancingperf.eval>`.\n\nExamples\n--------\n>>> df = pd.DataFrame({'A': range(1, 6), 'B': range(10, 0, -2)})\n>>> df\n   A   B\n0  1  10\n1  2   8\n2  3   6\n3  4   4\n4  5   2\n>>> df.eval('A + B')\n0    11\n1    10\n2     9\n3     8\n4     7\ndtype: int64\n\nAssignment is allowed though by default the original DataFrame is not\nmodified.\n\n>>> df.eval('C = A + B')\n   A   B   C\n0  1  10  11\n1  2   8  10\n2  3   6   9\n3  4   4   8\n4  5   2   7\n>>> df\n   A   B\n0  1  10\n1  2   8\n2  3   6\n3  4   4\n4  5   2\n\nMultiple columns can be assigned to using multi-line expressions:\n\n>>> df.eval(\n...     '''\n... C = A + B\n... D = A - B\n... '''\n... )\n   A   B   C  D\n0  1  10  11 -9\n1  2   8  10 -6\n2  3   6   9 -3\n3  4   4   8  0\n4  5   2   7  3"
  },
  {
    "symbol": "DataFrame.ewm",
    "signature": "(self, com: 'float | None' = None, span: 'float | None' = None, halflife: 'float | TimedeltaConvertibleTypes | None' = None, alpha: 'float | None' = None, min_periods: 'int | None' = 0, adjust: 'bool_t' = True, ignore_na: 'bool_t' = False, axis: 'Axis | lib.NoDefault' = <no_default>, times: 'np.ndarray | DataFrame | Series | None' = None, method: \"Literal['single', 'table']\" = 'single') -> 'ExponentialMovingWindow'",
    "doc": "Provide exponentially weighted (EW) calculations.\n\nExactly one of ``com``, ``span``, ``halflife``, or ``alpha`` must be\nprovided if ``times`` is not provided. If ``times`` is provided,\n``halflife`` and one of ``com``, ``span`` or ``alpha`` may be provided.\n\nParameters\n----------\ncom : float, optional\n    Specify decay in terms of center of mass\n\n    :math:`\\alpha = 1 / (1 + com)`, for :math:`com \\geq 0`.\n\nspan : float, optional\n    Specify decay in terms of span\n\n    :math:`\\alpha = 2 / (span + 1)`, for :math:`span \\geq 1`.\n\nhalflife : float, str, timedelta, optional\n    Specify decay in terms of half-life\n\n    :math:`\\alpha = 1 - \\exp\\left(-\\ln(2) / halflife\\right)`, for\n    :math:`halflife > 0`.\n\n    If ``times`` is specified, a timedelta convertible unit over which an\n    observation decays to half its value. Only applicable to ``mean()``,\n    and halflife value will not apply to the other functions.\n\nalpha : float, optional\n    Specify smoothing factor :math:`\\alpha` directly\n\n    :math:`0 < \\alpha \\leq 1`.\n\nmin_periods : int, default 0\n    Minimum number of observations in window required to have a value;\n    otherwise, result is ``np.nan``.\n\nadjust : bool, default True\n    Divide by decaying adjustment factor in beginning periods to account\n    for imbalance in relative weightings (viewing EWMA as a moving average).\n\n    - When ``adjust=True`` (default), the EW function is calculated using weights\n      :math:`w_i = (1 - \\alpha)^i`. For example, the EW moving average of the series\n      [:math:`x_0, x_1, ..., x_t`] would be:\n\n    .. math::\n        y_t = \\frac{x_t + (1 - \\alpha)x_{t-1} + (1 - \\alpha)^2 x_{t-2} + ... + (1 -\n        \\alpha)^t x_0}{1 + (1 - \\alpha) + (1 - \\alpha)^2 + ... + (1 - \\alpha)^t}\n\n    - When ``adjust=False``, the exponentially weighted function is calculated\n      recursively:\n\n    .. math::\n        \\begin{split}\n            y_0 &= x_0\\\\\n            y_t &= (1 - \\alpha) y_{t-1} + \\alpha x_t,\n        \\end{split}\nignore_na : bool, default False\n    Ignore missing values when calculating weights.\n\n    - When ``ignore_na=False`` (default), weights are based on absolute positions.\n      For example, the weights of :math:`x_0` and :math:`x_2` used in calculating\n      the final weighted average of [:math:`x_0`, None, :math:`x_2`] are\n      :math:`(1-\\alpha)^2` and :math:`1` if ``adjust=True``, and\n      :math:`(1-\\alpha)^2` and :math:`\\alpha` if ``adjust=False``.\n\n    - When ``ignore_na=True``, weights are based\n      on relative positions. For example, the weights of :math:`x_0` and :math:`x_2`\n      used in calculating the final weighted average of\n      [:math:`x_0`, None, :math:`x_2`] are :math:`1-\\alpha` and :math:`1` if\n      ``adjust=True``, and :math:`1-\\alpha` and :math:`\\alpha` if ``adjust=False``.\n\naxis : {0, 1}, default 0\n    If ``0`` or ``'index'``, calculate across the rows.\n\n    If ``1`` or ``'columns'``, calculate across the columns.\n\n    For `Series` this parameter is unused and defaults to 0.\n\ntimes : np.ndarray, Series, default None\n\n    Only applicable to ``mean()``.\n\n    Times corresponding to the observations. Must be monotonically increasing and\n    ``datetime64[ns]`` dtype.\n\n    If 1-D array like, a sequence with the same shape as the observations.\n\nmethod : str {'single', 'table'}, default 'single'\n    .. versionadded:: 1.4.0\n\n    Execute the rolling operation per single column or row (``'single'``)\n    or over the entire object (``'table'``).\n\n    This argument is only implemented when specifying ``engine='numba'``\n    in the method call.\n\n    Only applicable to ``mean()``\n\nReturns\n-------\npandas.api.typing.ExponentialMovingWindow\n\nSee Also\n--------\nrolling : Provides rolling window calculations.\nexpanding : Provides expanding transformations.\n\nNotes\n-----\nSee :ref:`Windowing Operations <window.exponentially_weighted>`\nfor further usage details and examples.\n\nExamples\n--------\n>>> df = pd.DataFrame({'B': [0, 1, 2, np.nan, 4]})\n>>> df\n     B\n0  0.0\n1  1.0\n2  2.0\n3  NaN\n4  4.0\n\n>>> df.ewm(com=0.5).mean()\n          B\n0  0.000000\n1  0.750000\n2  1.615385\n3  1.615385\n4  3.670213\n>>> df.ewm(alpha=2 / 3).mean()\n          B\n0  0.000000\n1  0.750000\n2  1.615385\n3  1.615385\n4  3.670213\n\n**adjust**\n\n>>> df.ewm(com=0.5, adjust=True).mean()\n          B\n0  0.000000\n1  0.750000\n2  1.615385\n3  1.615385\n4  3.670213\n>>> df.ewm(com=0.5, adjust=False).mean()\n          B\n0  0.000000\n1  0.666667\n2  1.555556\n3  1.555556\n4  3.650794\n\n**ignore_na**\n\n>>> df.ewm(com=0.5, ignore_na=True).mean()\n          B\n0  0.000000\n1  0.750000\n2  1.615385\n3  1.615385\n4  3.225000\n>>> df.ewm(com=0.5, ignore_na=False).mean()\n          B\n0  0.000000\n1  0.750000\n2  1.615385\n3  1.615385\n4  3.670213\n\n**times**\n\nExponentially weighted mean with weights calculated with a timedelta ``halflife``\nrelative to ``times``.\n\n>>> times = ['2020-01-01', '2020-01-03', '2020-01-10', '2020-01-15', '2020-01-17']\n>>> df.ewm(halflife='4 days', times=pd.DatetimeIndex(times)).mean()\n          B\n0  0.000000\n1  0.585786\n2  1.523889\n3  1.523889\n4  3.233686"
  },
  {
    "symbol": "DataFrame.expanding",
    "signature": "(self, min_periods: 'int' = 1, axis: 'Axis | lib.NoDefault' = <no_default>, method: \"Literal['single', 'table']\" = 'single') -> 'Expanding'",
    "doc": "Provide expanding window calculations.\n\nParameters\n----------\nmin_periods : int, default 1\n    Minimum number of observations in window required to have a value;\n    otherwise, result is ``np.nan``.\n\naxis : int or str, default 0\n    If ``0`` or ``'index'``, roll across the rows.\n\n    If ``1`` or ``'columns'``, roll across the columns.\n\n    For `Series` this parameter is unused and defaults to 0.\n\nmethod : str {'single', 'table'}, default 'single'\n    Execute the rolling operation per single column or row (``'single'``)\n    or over the entire object (``'table'``).\n\n    This argument is only implemented when specifying ``engine='numba'``\n    in the method call.\n\n    .. versionadded:: 1.3.0\n\nReturns\n-------\npandas.api.typing.Expanding\n\nSee Also\n--------\nrolling : Provides rolling window calculations.\newm : Provides exponential weighted functions.\n\nNotes\n-----\nSee :ref:`Windowing Operations <window.expanding>` for further usage details\nand examples.\n\nExamples\n--------\n>>> df = pd.DataFrame({\"B\": [0, 1, 2, np.nan, 4]})\n>>> df\n     B\n0  0.0\n1  1.0\n2  2.0\n3  NaN\n4  4.0\n\n**min_periods**\n\nExpanding sum with 1 vs 3 observations needed to calculate a value.\n\n>>> df.expanding(1).sum()\n     B\n0  0.0\n1  1.0\n2  3.0\n3  3.0\n4  7.0\n>>> df.expanding(3).sum()\n     B\n0  NaN\n1  NaN\n2  3.0\n3  3.0\n4  7.0"
  },
  {
    "symbol": "DataFrame.explode",
    "signature": "(self, column: 'IndexLabel', ignore_index: 'bool' = False) -> 'DataFrame'",
    "doc": "Transform each element of a list-like to a row, replicating index values.\n\nParameters\n----------\ncolumn : IndexLabel\n    Column(s) to explode.\n    For multiple columns, specify a non-empty list with each element\n    be str or tuple, and all specified columns their list-like data\n    on same row of the frame must have matching length.\n\n    .. versionadded:: 1.3.0\n        Multi-column explode\n\nignore_index : bool, default False\n    If True, the resulting index will be labeled 0, 1, …, n - 1.\n\nReturns\n-------\nDataFrame\n    Exploded lists to rows of the subset columns;\n    index will be duplicated for these rows.\n\nRaises\n------\nValueError :\n    * If columns of the frame are not unique.\n    * If specified columns to explode is empty list.\n    * If specified columns to explode have not matching count of\n      elements rowwise in the frame.\n\nSee Also\n--------\nDataFrame.unstack : Pivot a level of the (necessarily hierarchical)\n    index labels.\nDataFrame.melt : Unpivot a DataFrame from wide format to long format.\nSeries.explode : Explode a DataFrame from list-like columns to long format.\n\nNotes\n-----\nThis routine will explode list-likes including lists, tuples, sets,\nSeries, and np.ndarray. The result dtype of the subset rows will\nbe object. Scalars will be returned unchanged, and empty list-likes will\nresult in a np.nan for that row. In addition, the ordering of rows in the\noutput will be non-deterministic when exploding sets.\n\nReference :ref:`the user guide <reshaping.explode>` for more examples.\n\nExamples\n--------\n>>> df = pd.DataFrame({'A': [[0, 1, 2], 'foo', [], [3, 4]],\n...                    'B': 1,\n...                    'C': [['a', 'b', 'c'], np.nan, [], ['d', 'e']]})\n>>> df\n           A  B          C\n0  [0, 1, 2]  1  [a, b, c]\n1        foo  1        NaN\n2         []  1         []\n3     [3, 4]  1     [d, e]\n\nSingle-column explode.\n\n>>> df.explode('A')\n     A  B          C\n0    0  1  [a, b, c]\n0    1  1  [a, b, c]\n0    2  1  [a, b, c]\n1  foo  1        NaN\n2  NaN  1         []\n3    3  1     [d, e]\n3    4  1     [d, e]\n\nMulti-column explode.\n\n>>> df.explode(list('AC'))\n     A  B    C\n0    0  1    a\n0    1  1    b\n0    2  1    c\n1  foo  1  NaN\n2  NaN  1  NaN\n3    3  1    d\n3    4  1    e"
  },
  {
    "symbol": "DataFrame.ffill",
    "signature": "(self, *, axis: 'None | Axis' = None, inplace: 'bool_t' = False, limit: 'None | int' = None, limit_area: \"Literal['inside', 'outside'] | None\" = None, downcast: 'dict | None | lib.NoDefault' = <no_default>) -> 'Self | None'",
    "doc": "Fill NA/NaN values by propagating the last valid observation to next valid.\n\nParameters\n----------\naxis : {0 or 'index'} for Series, {0 or 'index', 1 or 'columns'} for DataFrame\n    Axis along which to fill missing values. For `Series`\n    this parameter is unused and defaults to 0.\ninplace : bool, default False\n    If True, fill in-place. Note: this will modify any\n    other views on this object (e.g., a no-copy slice for a column in a\n    DataFrame).\nlimit : int, default None\n    If method is specified, this is the maximum number of consecutive\n    NaN values to forward/backward fill. In other words, if there is\n    a gap with more than this number of consecutive NaNs, it will only\n    be partially filled. If method is not specified, this is the\n    maximum number of entries along the entire axis where NaNs will be\n    filled. Must be greater than 0 if not None.\nlimit_area : {`None`, 'inside', 'outside'}, default None\n    If limit is specified, consecutive NaNs will be filled with this\n    restriction.\n\n    * ``None``: No fill restriction.\n    * 'inside': Only fill NaNs surrounded by valid values\n      (interpolate).\n    * 'outside': Only fill NaNs outside valid values (extrapolate).\n\n    .. versionadded:: 2.2.0\n\ndowncast : dict, default is None\n    A dict of item->dtype of what to downcast if possible,\n    or the string 'infer' which will try to downcast to an appropriate\n    equal type (e.g. float64 to int64 if possible).\n\n    .. deprecated:: 2.2.0\n\nReturns\n-------\nSeries/DataFrame or None\n    Object with missing values filled or None if ``inplace=True``.\n\nExamples\n--------\n>>> df = pd.DataFrame([[np.nan, 2, np.nan, 0],\n...                    [3, 4, np.nan, 1],\n...                    [np.nan, np.nan, np.nan, np.nan],\n...                    [np.nan, 3, np.nan, 4]],\n...                   columns=list(\"ABCD\"))\n>>> df\n     A    B   C    D\n0  NaN  2.0 NaN  0.0\n1  3.0  4.0 NaN  1.0\n2  NaN  NaN NaN  NaN\n3  NaN  3.0 NaN  4.0\n\n>>> df.ffill()\n     A    B   C    D\n0  NaN  2.0 NaN  0.0\n1  3.0  4.0 NaN  1.0\n2  3.0  4.0 NaN  1.0\n3  3.0  3.0 NaN  4.0\n\n>>> ser = pd.Series([1, np.nan, 2, 3])\n>>> ser.ffill()\n0   1.0\n1   1.0\n2   2.0\n3   3.0\ndtype: float64"
  },
  {
    "symbol": "DataFrame.fillna",
    "signature": "(self, value: 'Hashable | Mapping | Series | DataFrame | None' = None, *, method: 'FillnaOptions | None' = None, axis: 'Axis | None' = None, inplace: 'bool_t' = False, limit: 'int | None' = None, downcast: 'dict | None | lib.NoDefault' = <no_default>) -> 'Self | None'",
    "doc": "Fill NA/NaN values using the specified method.\n\nParameters\n----------\nvalue : scalar, dict, Series, or DataFrame\n    Value to use to fill holes (e.g. 0), alternately a\n    dict/Series/DataFrame of values specifying which value to use for\n    each index (for a Series) or column (for a DataFrame).  Values not\n    in the dict/Series/DataFrame will not be filled. This value cannot\n    be a list.\nmethod : {'backfill', 'bfill', 'ffill', None}, default None\n    Method to use for filling holes in reindexed Series:\n\n    * ffill: propagate last valid observation forward to next valid.\n    * backfill / bfill: use next valid observation to fill gap.\n\n    .. deprecated:: 2.1.0\n        Use ffill or bfill instead.\n\naxis : {0 or 'index'} for Series, {0 or 'index', 1 or 'columns'} for DataFrame\n    Axis along which to fill missing values. For `Series`\n    this parameter is unused and defaults to 0.\ninplace : bool, default False\n    If True, fill in-place. Note: this will modify any\n    other views on this object (e.g., a no-copy slice for a column in a\n    DataFrame).\nlimit : int, default None\n    If method is specified, this is the maximum number of consecutive\n    NaN values to forward/backward fill. In other words, if there is\n    a gap with more than this number of consecutive NaNs, it will only\n    be partially filled. If method is not specified, this is the\n    maximum number of entries along the entire axis where NaNs will be\n    filled. Must be greater than 0 if not None.\ndowncast : dict, default is None\n    A dict of item->dtype of what to downcast if possible,\n    or the string 'infer' which will try to downcast to an appropriate\n    equal type (e.g. float64 to int64 if possible).\n\n    .. deprecated:: 2.2.0\n\nReturns\n-------\nSeries/DataFrame or None\n    Object with missing values filled or None if ``inplace=True``.\n\nSee Also\n--------\nffill : Fill values by propagating the last valid observation to next valid.\nbfill : Fill values by using the next valid observation to fill the gap.\ninterpolate : Fill NaN values using interpolation.\nreindex : Conform object to new index.\nasfreq : Convert TimeSeries to specified frequency.\n\nExamples\n--------\n>>> df = pd.DataFrame([[np.nan, 2, np.nan, 0],\n...                    [3, 4, np.nan, 1],\n...                    [np.nan, np.nan, np.nan, np.nan],\n...                    [np.nan, 3, np.nan, 4]],\n...                   columns=list(\"ABCD\"))\n>>> df\n     A    B   C    D\n0  NaN  2.0 NaN  0.0\n1  3.0  4.0 NaN  1.0\n2  NaN  NaN NaN  NaN\n3  NaN  3.0 NaN  4.0\n\nReplace all NaN elements with 0s.\n\n>>> df.fillna(0)\n     A    B    C    D\n0  0.0  2.0  0.0  0.0\n1  3.0  4.0  0.0  1.0\n2  0.0  0.0  0.0  0.0\n3  0.0  3.0  0.0  4.0\n\nReplace all NaN elements in column 'A', 'B', 'C', and 'D', with 0, 1,\n2, and 3 respectively.\n\n>>> values = {\"A\": 0, \"B\": 1, \"C\": 2, \"D\": 3}\n>>> df.fillna(value=values)\n     A    B    C    D\n0  0.0  2.0  2.0  0.0\n1  3.0  4.0  2.0  1.0\n2  0.0  1.0  2.0  3.0\n3  0.0  3.0  2.0  4.0\n\nOnly replace the first NaN element.\n\n>>> df.fillna(value=values, limit=1)\n     A    B    C    D\n0  0.0  2.0  2.0  0.0\n1  3.0  4.0  NaN  1.0\n2  NaN  1.0  NaN  3.0\n3  NaN  3.0  NaN  4.0\n\nWhen filling using a DataFrame, replacement happens along\nthe same column names and same indices\n\n>>> df2 = pd.DataFrame(np.zeros((4, 4)), columns=list(\"ABCE\"))\n>>> df.fillna(df2)\n     A    B    C    D\n0  0.0  2.0  0.0  0.0\n1  3.0  4.0  0.0  1.0\n2  0.0  0.0  0.0  NaN\n3  0.0  3.0  0.0  4.0\n\nNote that column D is not affected since it is not present in df2."
  },
  {
    "symbol": "DataFrame.filter",
    "signature": "(self, items=None, like: 'str | None' = None, regex: 'str | None' = None, axis: 'Axis | None' = None) -> 'Self'",
    "doc": "Subset the dataframe rows or columns according to the specified index labels.\n\nNote that this routine does not filter a dataframe on its\ncontents. The filter is applied to the labels of the index.\n\nParameters\n----------\nitems : list-like\n    Keep labels from axis which are in items.\nlike : str\n    Keep labels from axis for which \"like in label == True\".\nregex : str (regular expression)\n    Keep labels from axis for which re.search(regex, label) == True.\naxis : {0 or 'index', 1 or 'columns', None}, default None\n    The axis to filter on, expressed either as an index (int)\n    or axis name (str). By default this is the info axis, 'columns' for\n    DataFrame. For `Series` this parameter is unused and defaults to `None`.\n\nReturns\n-------\nsame type as input object\n\nSee Also\n--------\nDataFrame.loc : Access a group of rows and columns\n    by label(s) or a boolean array.\n\nNotes\n-----\nThe ``items``, ``like``, and ``regex`` parameters are\nenforced to be mutually exclusive.\n\n``axis`` defaults to the info axis that is used when indexing\nwith ``[]``.\n\nExamples\n--------\n>>> df = pd.DataFrame(np.array(([1, 2, 3], [4, 5, 6])),\n...                   index=['mouse', 'rabbit'],\n...                   columns=['one', 'two', 'three'])\n>>> df\n        one  two  three\nmouse     1    2      3\nrabbit    4    5      6\n\n>>> # select columns by name\n>>> df.filter(items=['one', 'three'])\n         one  three\nmouse     1      3\nrabbit    4      6\n\n>>> # select columns by regular expression\n>>> df.filter(regex='e$', axis=1)\n         one  three\nmouse     1      3\nrabbit    4      6\n\n>>> # select rows containing 'bbi'\n>>> df.filter(like='bbi', axis=0)\n         one  two  three\nrabbit    4    5      6"
  },
  {
    "symbol": "DataFrame.first",
    "signature": "(self, offset) -> 'Self'",
    "doc": "Select initial periods of time series data based on a date offset.\n\n.. deprecated:: 2.1\n    :meth:`.first` is deprecated and will be removed in a future version.\n    Please create a mask and filter using `.loc` instead.\n\nFor a DataFrame with a sorted DatetimeIndex, this function can\nselect the first few rows based on a date offset.\n\nParameters\n----------\noffset : str, DateOffset or dateutil.relativedelta\n    The offset length of the data that will be selected. For instance,\n    '1ME' will display all the rows having their index within the first month.\n\nReturns\n-------\nSeries or DataFrame\n    A subset of the caller.\n\nRaises\n------\nTypeError\n    If the index is not  a :class:`DatetimeIndex`\n\nSee Also\n--------\nlast : Select final periods of time series based on a date offset.\nat_time : Select values at a particular time of the day.\nbetween_time : Select values between particular times of the day.\n\nExamples\n--------\n>>> i = pd.date_range('2018-04-09', periods=4, freq='2D')\n>>> ts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)\n>>> ts\n            A\n2018-04-09  1\n2018-04-11  2\n2018-04-13  3\n2018-04-15  4\n\nGet the rows for the first 3 days:\n\n>>> ts.first('3D')\n            A\n2018-04-09  1\n2018-04-11  2\n\nNotice the data for 3 first calendar days were returned, not the first\n3 days observed in the dataset, and therefore data for 2018-04-13 was\nnot returned."
  },
  {
    "symbol": "DataFrame.first_valid_index",
    "signature": "(self) -> 'Hashable | None'",
    "doc": "Return index for first non-NA value or None, if no non-NA value is found.\n\nReturns\n-------\ntype of index\n\nExamples\n--------\nFor Series:\n\n>>> s = pd.Series([None, 3, 4])\n>>> s.first_valid_index()\n1\n>>> s.last_valid_index()\n2\n\n>>> s = pd.Series([None, None])\n>>> print(s.first_valid_index())\nNone\n>>> print(s.last_valid_index())\nNone\n\nIf all elements in Series are NA/null, returns None.\n\n>>> s = pd.Series()\n>>> print(s.first_valid_index())\nNone\n>>> print(s.last_valid_index())\nNone\n\nIf Series is empty, returns None.\n\nFor DataFrame:\n\n>>> df = pd.DataFrame({'A': [None, None, 2], 'B': [None, 3, 4]})\n>>> df\n     A      B\n0  NaN    NaN\n1  NaN    3.0\n2  2.0    4.0\n>>> df.first_valid_index()\n1\n>>> df.last_valid_index()\n2\n\n>>> df = pd.DataFrame({'A': [None, None, None], 'B': [None, None, None]})\n>>> df\n     A      B\n0  None   None\n1  None   None\n2  None   None\n>>> print(df.first_valid_index())\nNone\n>>> print(df.last_valid_index())\nNone\n\nIf all elements in DataFrame are NA/null, returns None.\n\n>>> df = pd.DataFrame()\n>>> df\nEmpty DataFrame\nColumns: []\nIndex: []\n>>> print(df.first_valid_index())\nNone\n>>> print(df.last_valid_index())\nNone\n\nIf DataFrame is empty, returns None."
  },
  {
    "symbol": "DataFrame.flags",
    "signature": "(property)",
    "doc": "\nGet the properties associated with this pandas object.\n\nThe available flags are\n\n* :attr:`Flags.allows_duplicate_labels`\n\nSee Also\n--------\nFlags : Flags that apply to pandas objects.\nDataFrame.attrs : Global metadata applying to this dataset.\n\nNotes\n-----\n\"Flags\" differ from \"metadata\". Flags reflect properties of the\npandas object (the Series or DataFrame). Metadata refer to properties\nof the dataset, and should be stored in :attr:`DataFrame.attrs`.\n\nExamples\n--------\n>>> df = pd.DataFrame({\"A\": [1, 2]})\n>>> df.flags\n<Flags(allows_duplicate_labels=True)>\n\nFlags can be get or set using ``.``\n\n>>> df.flags.allows_duplicate_labels\nTrue\n>>> df.flags.allows_duplicate_labels = False\n\nOr by slicing with a key\n\n>>> df.flags[\"allows_duplicate_labels\"]\nFalse\n>>> df.flags[\"allows_duplicate_labels\"] = True\n"
  },
  {
    "symbol": "DataFrame.floordiv",
    "signature": "(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame'",
    "doc": "Get Integer division of dataframe and other, element-wise (binary operator `floordiv`).\n\nEquivalent to ``dataframe // other``, but with support to substitute a fill_value\nfor missing data in one of the inputs. With reverse version, `rfloordiv`.\n\nAmong flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to\narithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.\n\nParameters\n----------\nother : scalar, sequence, Series, dict or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis : {0 or 'index', 1 or 'columns'}\n    Whether to compare by the index (0 or 'index') or columns.\n    (1 or 'columns'). For Series input, axis to match Series index on.\nlevel : int or label\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : float or None, default None\n    Fill existing missing (NaN) values, and any new element needed for\n    successful DataFrame alignment, with this value before computation.\n    If data in both corresponding DataFrame locations is missing\n    the result will be missing.\n\nReturns\n-------\nDataFrame\n    Result of the arithmetic operation.\n\nSee Also\n--------\nDataFrame.add : Add DataFrames.\nDataFrame.sub : Subtract DataFrames.\nDataFrame.mul : Multiply DataFrames.\nDataFrame.div : Divide DataFrames (float division).\nDataFrame.truediv : Divide DataFrames (float division).\nDataFrame.floordiv : Divide DataFrames (integer division).\nDataFrame.mod : Calculate modulo (remainder after division).\nDataFrame.pow : Calculate exponential power.\n\nNotes\n-----\nMismatched indices will be unioned together.\n\nExamples\n--------\n>>> df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n>>> df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\nAdd a scalar with operator version which return the same\nresults.\n\n>>> df + 1\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\n>>> df.add(1)\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\nDivide by constant with reverse version.\n\n>>> df.div(10)\n           angles  degrees\ncircle        0.0     36.0\ntriangle      0.3     18.0\nrectangle     0.4     36.0\n\n>>> df.rdiv(10)\n             angles   degrees\ncircle          inf  0.027778\ntriangle   3.333333  0.055556\nrectangle  2.500000  0.027778\n\nSubtract a list and Series by axis with operator version.\n\n>>> df - [1, 2]\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub([1, 2], axis='columns')\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),\n...        axis='index')\n           angles  degrees\ncircle         -1      359\ntriangle        2      179\nrectangle       3      359\n\nMultiply a dictionary by axis.\n\n>>> df.mul({'angles': 0, 'degrees': 2})\n            angles  degrees\ncircle           0      720\ntriangle         0      360\nrectangle        0      720\n\n>>> df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')\n            angles  degrees\ncircle           0        0\ntriangle         6      360\nrectangle       12     1080\n\nMultiply a DataFrame of different shape with operator version.\n\n>>> other = pd.DataFrame({'angles': [0, 3, 4]},\n...                      index=['circle', 'triangle', 'rectangle'])\n>>> other\n           angles\ncircle          0\ntriangle        3\nrectangle       4\n\n>>> df * other\n           angles  degrees\ncircle          0      NaN\ntriangle        9      NaN\nrectangle      16      NaN\n\n>>> df.mul(other, fill_value=0)\n           angles  degrees\ncircle          0      0.0\ntriangle        9      0.0\nrectangle      16      0.0\n\nDivide by a MultiIndex by level.\n\n>>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],\n...                              'degrees': [360, 180, 360, 360, 540, 720]},\n...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],\n...                                    ['circle', 'triangle', 'rectangle',\n...                                     'square', 'pentagon', 'hexagon']])\n>>> df_multindex\n             angles  degrees\nA circle          0      360\n  triangle        3      180\n  rectangle       4      360\nB square          4      360\n  pentagon        5      540\n  hexagon         6      720\n\n>>> df.div(df_multindex, level=1, fill_value=0)\n             angles  degrees\nA circle        NaN      1.0\n  triangle      1.0      1.0\n  rectangle     1.0      1.0\nB square        0.0      0.0\n  pentagon      0.0      0.0\n  hexagon       0.0      0.0"
  },
  {
    "symbol": "DataFrame.from_dict",
    "signature": "(data: 'dict', orient: 'FromDictOrient' = 'columns', dtype: 'Dtype | None' = None, columns: 'Axes | None' = None) -> 'DataFrame'",
    "doc": "Construct DataFrame from dict of array-like or dicts.\n\nCreates DataFrame object from dictionary by columns or by index\nallowing dtype specification.\n\nParameters\n----------\ndata : dict\n    Of the form {field : array-like} or {field : dict}.\norient : {'columns', 'index', 'tight'}, default 'columns'\n    The \"orientation\" of the data. If the keys of the passed dict\n    should be the columns of the resulting DataFrame, pass 'columns'\n    (default). Otherwise if the keys should be rows, pass 'index'.\n    If 'tight', assume a dict with keys ['index', 'columns', 'data',\n    'index_names', 'column_names'].\n\n    .. versionadded:: 1.4.0\n       'tight' as an allowed value for the ``orient`` argument\n\ndtype : dtype, default None\n    Data type to force after DataFrame construction, otherwise infer.\ncolumns : list, default None\n    Column labels to use when ``orient='index'``. Raises a ValueError\n    if used with ``orient='columns'`` or ``orient='tight'``.\n\nReturns\n-------\nDataFrame\n\nSee Also\n--------\nDataFrame.from_records : DataFrame from structured ndarray, sequence\n    of tuples or dicts, or DataFrame.\nDataFrame : DataFrame object creation using constructor.\nDataFrame.to_dict : Convert the DataFrame to a dictionary.\n\nExamples\n--------\nBy default the keys of the dict become the DataFrame columns:\n\n>>> data = {'col_1': [3, 2, 1, 0], 'col_2': ['a', 'b', 'c', 'd']}\n>>> pd.DataFrame.from_dict(data)\n   col_1 col_2\n0      3     a\n1      2     b\n2      1     c\n3      0     d\n\nSpecify ``orient='index'`` to create the DataFrame using dictionary\nkeys as rows:\n\n>>> data = {'row_1': [3, 2, 1, 0], 'row_2': ['a', 'b', 'c', 'd']}\n>>> pd.DataFrame.from_dict(data, orient='index')\n       0  1  2  3\nrow_1  3  2  1  0\nrow_2  a  b  c  d\n\nWhen using the 'index' orientation, the column names can be\nspecified manually:\n\n>>> pd.DataFrame.from_dict(data, orient='index',\n...                        columns=['A', 'B', 'C', 'D'])\n       A  B  C  D\nrow_1  3  2  1  0\nrow_2  a  b  c  d\n\nSpecify ``orient='tight'`` to create the DataFrame using a 'tight'\nformat:\n\n>>> data = {'index': [('a', 'b'), ('a', 'c')],\n...         'columns': [('x', 1), ('y', 2)],\n...         'data': [[1, 3], [2, 4]],\n...         'index_names': ['n1', 'n2'],\n...         'column_names': ['z1', 'z2']}\n>>> pd.DataFrame.from_dict(data, orient='tight')\nz1     x  y\nz2     1  2\nn1 n2\na  b   1  3\n   c   2  4"
  },
  {
    "symbol": "DataFrame.from_records",
    "signature": "(data, index=None, exclude=None, columns=None, coerce_float: 'bool' = False, nrows: 'int | None' = None) -> 'DataFrame'",
    "doc": "Convert structured or record ndarray to DataFrame.\n\nCreates a DataFrame object from a structured ndarray, sequence of\ntuples or dicts, or DataFrame.\n\nParameters\n----------\ndata : structured ndarray, sequence of tuples or dicts, or DataFrame\n    Structured input data.\n\n    .. deprecated:: 2.1.0\n        Passing a DataFrame is deprecated.\nindex : str, list of fields, array-like\n    Field of array to use as the index, alternately a specific set of\n    input labels to use.\nexclude : sequence, default None\n    Columns or fields to exclude.\ncolumns : sequence, default None\n    Column names to use. If the passed data do not have names\n    associated with them, this argument provides names for the\n    columns. Otherwise this argument indicates the order of the columns\n    in the result (any names not found in the data will become all-NA\n    columns).\ncoerce_float : bool, default False\n    Attempt to convert values of non-string, non-numeric objects (like\n    decimal.Decimal) to floating point, useful for SQL result sets.\nnrows : int, default None\n    Number of rows to read if data is an iterator.\n\nReturns\n-------\nDataFrame\n\nSee Also\n--------\nDataFrame.from_dict : DataFrame from dict of array-like or dicts.\nDataFrame : DataFrame object creation using constructor.\n\nExamples\n--------\nData can be provided as a structured ndarray:\n\n>>> data = np.array([(3, 'a'), (2, 'b'), (1, 'c'), (0, 'd')],\n...                 dtype=[('col_1', 'i4'), ('col_2', 'U1')])\n>>> pd.DataFrame.from_records(data)\n   col_1 col_2\n0      3     a\n1      2     b\n2      1     c\n3      0     d\n\nData can be provided as a list of dicts:\n\n>>> data = [{'col_1': 3, 'col_2': 'a'},\n...         {'col_1': 2, 'col_2': 'b'},\n...         {'col_1': 1, 'col_2': 'c'},\n...         {'col_1': 0, 'col_2': 'd'}]\n>>> pd.DataFrame.from_records(data)\n   col_1 col_2\n0      3     a\n1      2     b\n2      1     c\n3      0     d\n\nData can be provided as a list of tuples with corresponding columns:\n\n>>> data = [(3, 'a'), (2, 'b'), (1, 'c'), (0, 'd')]\n>>> pd.DataFrame.from_records(data, columns=['col_1', 'col_2'])\n   col_1 col_2\n0      3     a\n1      2     b\n2      1     c\n3      0     d"
  },
  {
    "symbol": "DataFrame.ge",
    "signature": "(self, other, axis: 'Axis' = 'columns', level=None) -> 'DataFrame'",
    "doc": "Get Greater than or equal to of dataframe and other, element-wise (binary operator `ge`).\n\nAmong flexible wrappers (`eq`, `ne`, `le`, `lt`, `ge`, `gt`) to comparison\noperators.\n\nEquivalent to `==`, `!=`, `<=`, `<`, `>=`, `>` with support to choose axis\n(rows or columns) and level for comparison.\n\nParameters\n----------\nother : scalar, sequence, Series, or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis : {0 or 'index', 1 or 'columns'}, default 'columns'\n    Whether to compare by the index (0 or 'index') or columns\n    (1 or 'columns').\nlevel : int or label\n    Broadcast across a level, matching Index values on the passed\n    MultiIndex level.\n\nReturns\n-------\nDataFrame of bool\n    Result of the comparison.\n\nSee Also\n--------\nDataFrame.eq : Compare DataFrames for equality elementwise.\nDataFrame.ne : Compare DataFrames for inequality elementwise.\nDataFrame.le : Compare DataFrames for less than inequality\n    or equality elementwise.\nDataFrame.lt : Compare DataFrames for strictly less than\n    inequality elementwise.\nDataFrame.ge : Compare DataFrames for greater than inequality\n    or equality elementwise.\nDataFrame.gt : Compare DataFrames for strictly greater than\n    inequality elementwise.\n\nNotes\n-----\nMismatched indices will be unioned together.\n`NaN` values are considered different (i.e. `NaN` != `NaN`).\n\nExamples\n--------\n>>> df = pd.DataFrame({'cost': [250, 150, 100],\n...                    'revenue': [100, 250, 300]},\n...                   index=['A', 'B', 'C'])\n>>> df\n   cost  revenue\nA   250      100\nB   150      250\nC   100      300\n\nComparison with a scalar, using either the operator or method:\n\n>>> df == 100\n    cost  revenue\nA  False     True\nB  False    False\nC   True    False\n\n>>> df.eq(100)\n    cost  revenue\nA  False     True\nB  False    False\nC   True    False\n\nWhen `other` is a :class:`Series`, the columns of a DataFrame are aligned\nwith the index of `other` and broadcast:\n\n>>> df != pd.Series([100, 250], index=[\"cost\", \"revenue\"])\n    cost  revenue\nA   True     True\nB   True    False\nC  False     True\n\nUse the method to control the broadcast axis:\n\n>>> df.ne(pd.Series([100, 300], index=[\"A\", \"D\"]), axis='index')\n   cost  revenue\nA  True    False\nB  True     True\nC  True     True\nD  True     True\n\nWhen comparing to an arbitrary sequence, the number of columns must\nmatch the number elements in `other`:\n\n>>> df == [250, 100]\n    cost  revenue\nA   True     True\nB  False    False\nC  False    False\n\nUse the method to control the axis:\n\n>>> df.eq([250, 250, 100], axis='index')\n    cost  revenue\nA   True    False\nB  False     True\nC   True    False\n\nCompare to a DataFrame of different shape.\n\n>>> other = pd.DataFrame({'revenue': [300, 250, 100, 150]},\n...                      index=['A', 'B', 'C', 'D'])\n>>> other\n   revenue\nA      300\nB      250\nC      100\nD      150\n\n>>> df.gt(other)\n    cost  revenue\nA  False    False\nB  False    False\nC  False     True\nD  False    False\n\nCompare to a MultiIndex by level.\n\n>>> df_multindex = pd.DataFrame({'cost': [250, 150, 100, 150, 300, 220],\n...                              'revenue': [100, 250, 300, 200, 175, 225]},\n...                             index=[['Q1', 'Q1', 'Q1', 'Q2', 'Q2', 'Q2'],\n...                                    ['A', 'B', 'C', 'A', 'B', 'C']])\n>>> df_multindex\n      cost  revenue\nQ1 A   250      100\n   B   150      250\n   C   100      300\nQ2 A   150      200\n   B   300      175\n   C   220      225\n\n>>> df.le(df_multindex, level=1)\n       cost  revenue\nQ1 A   True     True\n   B   True     True\n   C   True     True\nQ2 A  False     True\n   B   True    False\n   C   True    False"
  },
  {
    "symbol": "DataFrame.get",
    "signature": "(self, key, default=None)",
    "doc": "Get item from object for given key (ex: DataFrame column).\n\nReturns default value if not found.\n\nParameters\n----------\nkey : object\n\nReturns\n-------\nsame type as items contained in object\n\nExamples\n--------\n>>> df = pd.DataFrame(\n...     [\n...         [24.3, 75.7, \"high\"],\n...         [31, 87.8, \"high\"],\n...         [22, 71.6, \"medium\"],\n...         [35, 95, \"medium\"],\n...     ],\n...     columns=[\"temp_celsius\", \"temp_fahrenheit\", \"windspeed\"],\n...     index=pd.date_range(start=\"2014-02-12\", end=\"2014-02-15\", freq=\"D\"),\n... )\n\n>>> df\n            temp_celsius  temp_fahrenheit windspeed\n2014-02-12          24.3             75.7      high\n2014-02-13          31.0             87.8      high\n2014-02-14          22.0             71.6    medium\n2014-02-15          35.0             95.0    medium\n\n>>> df.get([\"temp_celsius\", \"windspeed\"])\n            temp_celsius windspeed\n2014-02-12          24.3      high\n2014-02-13          31.0      high\n2014-02-14          22.0    medium\n2014-02-15          35.0    medium\n\n>>> ser = df['windspeed']\n>>> ser.get('2014-02-13')\n'high'\n\nIf the key isn't found, the default value will be used.\n\n>>> df.get([\"temp_celsius\", \"temp_kelvin\"], default=\"default_value\")\n'default_value'\n\n>>> ser.get('2014-02-10', '[unknown]')\n'[unknown]'"
  },
  {
    "symbol": "DataFrame.groupby",
    "signature": "(self, by=None, axis: 'Axis | lib.NoDefault' = <no_default>, level: 'IndexLabel | None' = None, as_index: 'bool' = True, sort: 'bool' = True, group_keys: 'bool' = True, observed: 'bool | lib.NoDefault' = <no_default>, dropna: 'bool' = True) -> 'DataFrameGroupBy'",
    "doc": "Group DataFrame using a mapper or by a Series of columns.\n\nA groupby operation involves some combination of splitting the\nobject, applying a function, and combining the results. This can be\nused to group large amounts of data and compute operations on these\ngroups.\n\nParameters\n----------\nby : mapping, function, label, pd.Grouper or list of such\n    Used to determine the groups for the groupby.\n    If ``by`` is a function, it's called on each value of the object's\n    index. If a dict or Series is passed, the Series or dict VALUES\n    will be used to determine the groups (the Series' values are first\n    aligned; see ``.align()`` method). If a list or ndarray of length\n    equal to the selected axis is passed (see the `groupby user guide\n    <https://pandas.pydata.org/pandas-docs/stable/user_guide/groupby.html#splitting-an-object-into-groups>`_),\n    the values are used as-is to determine the groups. A label or list\n    of labels may be passed to group by the columns in ``self``.\n    Notice that a tuple is interpreted as a (single) key.\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    Split along rows (0) or columns (1). For `Series` this parameter\n    is unused and defaults to 0.\n\n    .. deprecated:: 2.1.0\n\n        Will be removed and behave like axis=0 in a future version.\n        For ``axis=1``, do ``frame.T.groupby(...)`` instead.\n\nlevel : int, level name, or sequence of such, default None\n    If the axis is a MultiIndex (hierarchical), group by a particular\n    level or levels. Do not specify both ``by`` and ``level``.\nas_index : bool, default True\n    Return object with group labels as the\n    index. Only relevant for DataFrame input. as_index=False is\n    effectively \"SQL-style\" grouped output. This argument has no effect\n    on filtrations (see the `filtrations in the user guide\n    <https://pandas.pydata.org/docs/dev/user_guide/groupby.html#filtration>`_),\n    such as ``head()``, ``tail()``, ``nth()`` and in transformations\n    (see the `transformations in the user guide\n    <https://pandas.pydata.org/docs/dev/user_guide/groupby.html#transformation>`_).\nsort : bool, default True\n    Sort group keys. Get better performance by turning this off.\n    Note this does not influence the order of observations within each\n    group. Groupby preserves the order of rows within each group. If False,\n    the groups will appear in the same order as they did in the original DataFrame.\n    This argument has no effect on filtrations (see the `filtrations in the user guide\n    <https://pandas.pydata.org/docs/dev/user_guide/groupby.html#filtration>`_),\n    such as ``head()``, ``tail()``, ``nth()`` and in transformations\n    (see the `transformations in the user guide\n    <https://pandas.pydata.org/docs/dev/user_guide/groupby.html#transformation>`_).\n\n    .. versionchanged:: 2.0.0\n\n        Specifying ``sort=False`` with an ordered categorical grouper will no\n        longer sort the values.\n\ngroup_keys : bool, default True\n    When calling apply and the ``by`` argument produces a like-indexed\n    (i.e. :ref:`a transform <groupby.transform>`) result, add group keys to\n    index to identify pieces. By default group keys are not included\n    when the result's index (and column) labels match the inputs, and\n    are included otherwise.\n\n    .. versionchanged:: 1.5.0\n\n       Warns that ``group_keys`` will no longer be ignored when the\n       result from ``apply`` is a like-indexed Series or DataFrame.\n       Specify ``group_keys`` explicitly to include the group keys or\n       not.\n\n    .. versionchanged:: 2.0.0\n\n       ``group_keys`` now defaults to ``True``.\n\nobserved : bool, default False\n    This only applies if any of the groupers are Categoricals.\n    If True: only show observed values for categorical groupers.\n    If False: show all values for categorical groupers.\n\n    .. deprecated:: 2.1.0\n\n        The default value will change to True in a future version of pandas.\n\ndropna : bool, default True\n    If True, and if group keys contain NA values, NA values together\n    with row/column will be dropped.\n    If False, NA values will also be treated as the key in groups.\n\nReturns\n-------\npandas.api.typing.DataFrameGroupBy\n    Returns a groupby object that contains information about the groups.\n\nSee Also\n--------\nresample : Convenience method for frequency conversion and resampling\n    of time series.\n\nNotes\n-----\nSee the `user guide\n<https://pandas.pydata.org/pandas-docs/stable/groupby.html>`__ for more\ndetailed usage and examples, including splitting an object into groups,\niterating through groups, selecting a group, aggregation, and more.\n\nExamples\n--------\n>>> df = pd.DataFrame({'Animal': ['Falcon', 'Falcon',\n...                               'Parrot', 'Parrot'],\n...                    'Max Speed': [380., 370., 24., 26.]})\n>>> df\n   Animal  Max Speed\n0  Falcon      380.0\n1  Falcon      370.0\n2  Parrot       24.0\n3  Parrot       26.0\n>>> df.groupby(['Animal']).mean()\n        Max Speed\nAnimal\nFalcon      375.0\nParrot       25.0\n\n**Hierarchical Indexes**\n\nWe can groupby different levels of a hierarchical index\nusing the `level` parameter:\n\n>>> arrays = [['Falcon', 'Falcon', 'Parrot', 'Parrot'],\n...           ['Captive', 'Wild', 'Captive', 'Wild']]\n>>> index = pd.MultiIndex.from_arrays(arrays, names=('Animal', 'Type'))\n>>> df = pd.DataFrame({'Max Speed': [390., 350., 30., 20.]},\n...                   index=index)\n>>> df\n                Max Speed\nAnimal Type\nFalcon Captive      390.0\n       Wild         350.0\nParrot Captive       30.0\n       Wild          20.0\n>>> df.groupby(level=0).mean()\n        Max Speed\nAnimal\nFalcon      370.0\nParrot       25.0\n>>> df.groupby(level=\"Type\").mean()\n         Max Speed\nType\nCaptive      210.0\nWild         185.0\n\nWe can also choose to include NA in group keys or not by setting\n`dropna` parameter, the default setting is `True`.\n\n>>> l = [[1, 2, 3], [1, None, 4], [2, 1, 3], [1, 2, 2]]\n>>> df = pd.DataFrame(l, columns=[\"a\", \"b\", \"c\"])\n\n>>> df.groupby(by=[\"b\"]).sum()\n    a   c\nb\n1.0 2   3\n2.0 2   5\n\n>>> df.groupby(by=[\"b\"], dropna=False).sum()\n    a   c\nb\n1.0 2   3\n2.0 2   5\nNaN 1   4\n\n>>> l = [[\"a\", 12, 12], [None, 12.3, 33.], [\"b\", 12.3, 123], [\"a\", 1, 1]]\n>>> df = pd.DataFrame(l, columns=[\"a\", \"b\", \"c\"])\n\n>>> df.groupby(by=\"a\").sum()\n    b     c\na\na   13.0   13.0\nb   12.3  123.0\n\n>>> df.groupby(by=\"a\", dropna=False).sum()\n    b     c\na\na   13.0   13.0\nb   12.3  123.0\nNaN 12.3   33.0\n\nWhen using ``.apply()``, use ``group_keys`` to include or exclude the\ngroup keys. The ``group_keys`` argument defaults to ``True`` (include).\n\n>>> df = pd.DataFrame({'Animal': ['Falcon', 'Falcon',\n...                               'Parrot', 'Parrot'],\n...                    'Max Speed': [380., 370., 24., 26.]})\n>>> df.groupby(\"Animal\", group_keys=True)[['Max Speed']].apply(lambda x: x)\n          Max Speed\nAnimal\nFalcon 0      380.0\n       1      370.0\nParrot 2       24.0\n       3       26.0\n\n>>> df.groupby(\"Animal\", group_keys=False)[['Max Speed']].apply(lambda x: x)\n   Max Speed\n0      380.0\n1      370.0\n2       24.0\n3       26.0"
  },
  {
    "symbol": "DataFrame.gt",
    "signature": "(self, other, axis: 'Axis' = 'columns', level=None) -> 'DataFrame'",
    "doc": "Get Greater than of dataframe and other, element-wise (binary operator `gt`).\n\nAmong flexible wrappers (`eq`, `ne`, `le`, `lt`, `ge`, `gt`) to comparison\noperators.\n\nEquivalent to `==`, `!=`, `<=`, `<`, `>=`, `>` with support to choose axis\n(rows or columns) and level for comparison.\n\nParameters\n----------\nother : scalar, sequence, Series, or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis : {0 or 'index', 1 or 'columns'}, default 'columns'\n    Whether to compare by the index (0 or 'index') or columns\n    (1 or 'columns').\nlevel : int or label\n    Broadcast across a level, matching Index values on the passed\n    MultiIndex level.\n\nReturns\n-------\nDataFrame of bool\n    Result of the comparison.\n\nSee Also\n--------\nDataFrame.eq : Compare DataFrames for equality elementwise.\nDataFrame.ne : Compare DataFrames for inequality elementwise.\nDataFrame.le : Compare DataFrames for less than inequality\n    or equality elementwise.\nDataFrame.lt : Compare DataFrames for strictly less than\n    inequality elementwise.\nDataFrame.ge : Compare DataFrames for greater than inequality\n    or equality elementwise.\nDataFrame.gt : Compare DataFrames for strictly greater than\n    inequality elementwise.\n\nNotes\n-----\nMismatched indices will be unioned together.\n`NaN` values are considered different (i.e. `NaN` != `NaN`).\n\nExamples\n--------\n>>> df = pd.DataFrame({'cost': [250, 150, 100],\n...                    'revenue': [100, 250, 300]},\n...                   index=['A', 'B', 'C'])\n>>> df\n   cost  revenue\nA   250      100\nB   150      250\nC   100      300\n\nComparison with a scalar, using either the operator or method:\n\n>>> df == 100\n    cost  revenue\nA  False     True\nB  False    False\nC   True    False\n\n>>> df.eq(100)\n    cost  revenue\nA  False     True\nB  False    False\nC   True    False\n\nWhen `other` is a :class:`Series`, the columns of a DataFrame are aligned\nwith the index of `other` and broadcast:\n\n>>> df != pd.Series([100, 250], index=[\"cost\", \"revenue\"])\n    cost  revenue\nA   True     True\nB   True    False\nC  False     True\n\nUse the method to control the broadcast axis:\n\n>>> df.ne(pd.Series([100, 300], index=[\"A\", \"D\"]), axis='index')\n   cost  revenue\nA  True    False\nB  True     True\nC  True     True\nD  True     True\n\nWhen comparing to an arbitrary sequence, the number of columns must\nmatch the number elements in `other`:\n\n>>> df == [250, 100]\n    cost  revenue\nA   True     True\nB  False    False\nC  False    False\n\nUse the method to control the axis:\n\n>>> df.eq([250, 250, 100], axis='index')\n    cost  revenue\nA   True    False\nB  False     True\nC   True    False\n\nCompare to a DataFrame of different shape.\n\n>>> other = pd.DataFrame({'revenue': [300, 250, 100, 150]},\n...                      index=['A', 'B', 'C', 'D'])\n>>> other\n   revenue\nA      300\nB      250\nC      100\nD      150\n\n>>> df.gt(other)\n    cost  revenue\nA  False    False\nB  False    False\nC  False     True\nD  False    False\n\nCompare to a MultiIndex by level.\n\n>>> df_multindex = pd.DataFrame({'cost': [250, 150, 100, 150, 300, 220],\n...                              'revenue': [100, 250, 300, 200, 175, 225]},\n...                             index=[['Q1', 'Q1', 'Q1', 'Q2', 'Q2', 'Q2'],\n...                                    ['A', 'B', 'C', 'A', 'B', 'C']])\n>>> df_multindex\n      cost  revenue\nQ1 A   250      100\n   B   150      250\n   C   100      300\nQ2 A   150      200\n   B   300      175\n   C   220      225\n\n>>> df.le(df_multindex, level=1)\n       cost  revenue\nQ1 A   True     True\n   B   True     True\n   C   True     True\nQ2 A  False     True\n   B   True    False\n   C   True    False"
  },
  {
    "symbol": "DataFrame.head",
    "signature": "(self, n: 'int' = 5) -> 'Self'",
    "doc": "Return the first `n` rows.\n\nThis function returns the first `n` rows for the object based\non position. It is useful for quickly testing if your object\nhas the right type of data in it.\n\nFor negative values of `n`, this function returns all rows except\nthe last `|n|` rows, equivalent to ``df[:n]``.\n\nIf n is larger than the number of rows, this function returns all rows.\n\nParameters\n----------\nn : int, default 5\n    Number of rows to select.\n\nReturns\n-------\nsame type as caller\n    The first `n` rows of the caller object.\n\nSee Also\n--------\nDataFrame.tail: Returns the last `n` rows.\n\nExamples\n--------\n>>> df = pd.DataFrame({'animal': ['alligator', 'bee', 'falcon', 'lion',\n...                    'monkey', 'parrot', 'shark', 'whale', 'zebra']})\n>>> df\n      animal\n0  alligator\n1        bee\n2     falcon\n3       lion\n4     monkey\n5     parrot\n6      shark\n7      whale\n8      zebra\n\nViewing the first 5 lines\n\n>>> df.head()\n      animal\n0  alligator\n1        bee\n2     falcon\n3       lion\n4     monkey\n\nViewing the first `n` lines (three in this case)\n\n>>> df.head(3)\n      animal\n0  alligator\n1        bee\n2     falcon\n\nFor negative values of `n`\n\n>>> df.head(-3)\n      animal\n0  alligator\n1        bee\n2     falcon\n3       lion\n4     monkey\n5     parrot"
  },
  {
    "symbol": "DataFrame.hist",
    "signature": "(data: 'DataFrame', column: 'IndexLabel | None' = None, by=None, grid: 'bool' = True, xlabelsize: 'int | None' = None, xrot: 'float | None' = None, ylabelsize: 'int | None' = None, yrot: 'float | None' = None, ax=None, sharex: 'bool' = False, sharey: 'bool' = False, figsize: 'tuple[int, int] | None' = None, layout: 'tuple[int, int] | None' = None, bins: 'int | Sequence[int]' = 10, backend: 'str | None' = None, legend: 'bool' = False, **kwargs)",
    "doc": "Make a histogram of the DataFrame's columns.\n\nA `histogram`_ is a representation of the distribution of data.\nThis function calls :meth:`matplotlib.pyplot.hist`, on each series in\nthe DataFrame, resulting in one histogram per column.\n\n.. _histogram: https://en.wikipedia.org/wiki/Histogram\n\nParameters\n----------\ndata : DataFrame\n    The pandas object holding the data.\ncolumn : str or sequence, optional\n    If passed, will be used to limit data to a subset of columns.\nby : object, optional\n    If passed, then used to form histograms for separate groups.\ngrid : bool, default True\n    Whether to show axis grid lines.\nxlabelsize : int, default None\n    If specified changes the x-axis label size.\nxrot : float, default None\n    Rotation of x axis labels. For example, a value of 90 displays the\n    x labels rotated 90 degrees clockwise.\nylabelsize : int, default None\n    If specified changes the y-axis label size.\nyrot : float, default None\n    Rotation of y axis labels. For example, a value of 90 displays the\n    y labels rotated 90 degrees clockwise.\nax : Matplotlib axes object, default None\n    The axes to plot the histogram on.\nsharex : bool, default True if ax is None else False\n    In case subplots=True, share x axis and set some x axis labels to\n    invisible; defaults to True if ax is None otherwise False if an ax\n    is passed in.\n    Note that passing in both an ax and sharex=True will alter all x axis\n    labels for all subplots in a figure.\nsharey : bool, default False\n    In case subplots=True, share y axis and set some y axis labels to\n    invisible.\nfigsize : tuple, optional\n    The size in inches of the figure to create. Uses the value in\n    `matplotlib.rcParams` by default.\nlayout : tuple, optional\n    Tuple of (rows, columns) for the layout of the histograms.\nbins : int or sequence, default 10\n    Number of histogram bins to be used. If an integer is given, bins + 1\n    bin edges are calculated and returned. If bins is a sequence, gives\n    bin edges, including left edge of first bin and right edge of last\n    bin. In this case, bins is returned unmodified.\n\nbackend : str, default None\n    Backend to use instead of the backend specified in the option\n    ``plotting.backend``. For instance, 'matplotlib'. Alternatively, to\n    specify the ``plotting.backend`` for the whole session, set\n    ``pd.options.plotting.backend``.\n\nlegend : bool, default False\n    Whether to show the legend.\n\n**kwargs\n    All other plotting keyword arguments to be passed to\n    :meth:`matplotlib.pyplot.hist`.\n\nReturns\n-------\nmatplotlib.AxesSubplot or numpy.ndarray of them\n\nSee Also\n--------\nmatplotlib.pyplot.hist : Plot a histogram using matplotlib.\n\nExamples\n--------\nThis example draws a histogram based on the length and width of\nsome animals, displayed in three bins\n\n.. plot::\n    :context: close-figs\n\n    >>> data = {'length': [1.5, 0.5, 1.2, 0.9, 3],\n    ...         'width': [0.7, 0.2, 0.15, 0.2, 1.1]}\n    >>> index = ['pig', 'rabbit', 'duck', 'chicken', 'horse']\n    >>> df = pd.DataFrame(data, index=index)\n    >>> hist = df.hist(bins=3)"
  },
  {
    "symbol": "DataFrame.iat",
    "signature": "(property)",
    "doc": "\nAccess a single value for a row/column pair by integer position.\n\nSimilar to ``iloc``, in that both provide integer-based lookups. Use\n``iat`` if you only need to get or set a single value in a DataFrame\nor Series.\n\nRaises\n------\nIndexError\n    When integer position is out of bounds.\n\nSee Also\n--------\nDataFrame.at : Access a single value for a row/column label pair.\nDataFrame.loc : Access a group of rows and columns by label(s).\nDataFrame.iloc : Access a group of rows and columns by integer position(s).\n\nExamples\n--------\n>>> df = pd.DataFrame([[0, 2, 3], [0, 4, 1], [10, 20, 30]],\n...                   columns=['A', 'B', 'C'])\n>>> df\n    A   B   C\n0   0   2   3\n1   0   4   1\n2  10  20  30\n\nGet value at specified row/column pair\n\n>>> df.iat[1, 2]\n1\n\nSet value at specified row/column pair\n\n>>> df.iat[1, 2] = 10\n>>> df.iat[1, 2]\n10\n\nGet value within a series\n\n>>> df.loc[0].iat[1]\n2\n"
  },
  {
    "symbol": "DataFrame.idxmax",
    "signature": "(self, axis: 'Axis' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False) -> 'Series'",
    "doc": "Return index of first occurrence of maximum over requested axis.\n\nNA/null values are excluded.\n\nParameters\n----------\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    The axis to use. 0 or 'index' for row-wise, 1 or 'columns' for column-wise.\nskipna : bool, default True\n    Exclude NA/null values. If an entire row/column is NA, the result\n    will be NA.\nnumeric_only : bool, default False\n    Include only `float`, `int` or `boolean` data.\n\n    .. versionadded:: 1.5.0\n\nReturns\n-------\nSeries\n    Indexes of maxima along the specified axis.\n\nRaises\n------\nValueError\n    * If the row/column is empty\n\nSee Also\n--------\nSeries.idxmax : Return index of the maximum element.\n\nNotes\n-----\nThis method is the DataFrame version of ``ndarray.argmax``.\n\nExamples\n--------\nConsider a dataset containing food consumption in Argentina.\n\n>>> df = pd.DataFrame({'consumption': [10.51, 103.11, 55.48],\n...                     'co2_emissions': [37.2, 19.66, 1712]},\n...                   index=['Pork', 'Wheat Products', 'Beef'])\n\n>>> df\n                consumption  co2_emissions\nPork                  10.51         37.20\nWheat Products       103.11         19.66\nBeef                  55.48       1712.00\n\nBy default, it returns the index for the maximum value in each column.\n\n>>> df.idxmax()\nconsumption     Wheat Products\nco2_emissions             Beef\ndtype: object\n\nTo return the index for the maximum value in each row, use ``axis=\"columns\"``.\n\n>>> df.idxmax(axis=\"columns\")\nPork              co2_emissions\nWheat Products     consumption\nBeef              co2_emissions\ndtype: object"
  },
  {
    "symbol": "DataFrame.idxmin",
    "signature": "(self, axis: 'Axis' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False) -> 'Series'",
    "doc": "Return index of first occurrence of minimum over requested axis.\n\nNA/null values are excluded.\n\nParameters\n----------\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    The axis to use. 0 or 'index' for row-wise, 1 or 'columns' for column-wise.\nskipna : bool, default True\n    Exclude NA/null values. If an entire row/column is NA, the result\n    will be NA.\nnumeric_only : bool, default False\n    Include only `float`, `int` or `boolean` data.\n\n    .. versionadded:: 1.5.0\n\nReturns\n-------\nSeries\n    Indexes of minima along the specified axis.\n\nRaises\n------\nValueError\n    * If the row/column is empty\n\nSee Also\n--------\nSeries.idxmin : Return index of the minimum element.\n\nNotes\n-----\nThis method is the DataFrame version of ``ndarray.argmin``.\n\nExamples\n--------\nConsider a dataset containing food consumption in Argentina.\n\n>>> df = pd.DataFrame({'consumption': [10.51, 103.11, 55.48],\n...                     'co2_emissions': [37.2, 19.66, 1712]},\n...                   index=['Pork', 'Wheat Products', 'Beef'])\n\n>>> df\n                consumption  co2_emissions\nPork                  10.51         37.20\nWheat Products       103.11         19.66\nBeef                  55.48       1712.00\n\nBy default, it returns the index for the minimum value in each column.\n\n>>> df.idxmin()\nconsumption                Pork\nco2_emissions    Wheat Products\ndtype: object\n\nTo return the index for the minimum value in each row, use ``axis=\"columns\"``.\n\n>>> df.idxmin(axis=\"columns\")\nPork                consumption\nWheat Products    co2_emissions\nBeef                consumption\ndtype: object"
  },
  {
    "symbol": "DataFrame.iloc",
    "signature": "(property)",
    "doc": "\nPurely integer-location based indexing for selection by position.\n\n.. deprecated:: 2.2.0\n\n   Returning a tuple from a callable is deprecated.\n\n``.iloc[]`` is primarily integer position based (from ``0`` to\n``length-1`` of the axis), but may also be used with a boolean\narray.\n\nAllowed inputs are:\n\n- An integer, e.g. ``5``.\n- A list or array of integers, e.g. ``[4, 3, 0]``.\n- A slice object with ints, e.g. ``1:7``.\n- A boolean array.\n- A ``callable`` function with one argument (the calling Series or\n  DataFrame) and that returns valid output for indexing (one of the above).\n  This is useful in method chains, when you don't have a reference to the\n  calling object, but would like to base your selection on\n  some value.\n- A tuple of row and column indexes. The tuple elements consist of one of the\n  above inputs, e.g. ``(0, 1)``.\n\n``.iloc`` will raise ``IndexError`` if a requested indexer is\nout-of-bounds, except *slice* indexers which allow out-of-bounds\nindexing (this conforms with python/numpy *slice* semantics).\n\nSee more at :ref:`Selection by Position <indexing.integer>`.\n\nSee Also\n--------\nDataFrame.iat : Fast integer location scalar accessor.\nDataFrame.loc : Purely label-location based indexer for selection by label.\nSeries.iloc : Purely integer-location based indexing for\n               selection by position.\n\nExamples\n--------\n>>> mydict = [{'a': 1, 'b': 2, 'c': 3, 'd': 4},\n...           {'a': 100, 'b': 200, 'c': 300, 'd': 400},\n...           {'a': 1000, 'b': 2000, 'c': 3000, 'd': 4000}]\n>>> df = pd.DataFrame(mydict)\n>>> df\n      a     b     c     d\n0     1     2     3     4\n1   100   200   300   400\n2  1000  2000  3000  4000\n\n**Indexing just the rows**\n\nWith a scalar integer.\n\n>>> type(df.iloc[0])\n<class 'pandas.core.series.Series'>\n>>> df.iloc[0]\na    1\nb    2\nc    3\nd    4\nName: 0, dtype: int64\n\nWith a list of integers.\n\n>>> df.iloc[[0]]\n   a  b  c  d\n0  1  2  3  4\n>>> type(df.iloc[[0]])\n<class 'pandas.core.frame.DataFrame'>\n\n>>> df.iloc[[0, 1]]\n     a    b    c    d\n0    1    2    3    4\n1  100  200  300  400\n\nWith a `slice` object.\n\n>>> df.iloc[:3]\n      a     b     c     d\n0     1     2     3     4\n1   100   200   300   400\n2  1000  2000  3000  4000\n\nWith a boolean mask the same length as the index.\n\n>>> df.iloc[[True, False, True]]\n      a     b     c     d\n0     1     2     3     4\n2  1000  2000  3000  4000\n\nWith a callable, useful in method chains. The `x` passed\nto the ``lambda`` is the DataFrame being sliced. This selects\nthe rows whose index label even.\n\n>>> df.iloc[lambda x: x.index % 2 == 0]\n      a     b     c     d\n0     1     2     3     4\n2  1000  2000  3000  4000\n\n**Indexing both axes**\n\nYou can mix the indexer types for the index and columns. Use ``:`` to\nselect the entire axis.\n\nWith scalar integers.\n\n>>> df.iloc[0, 1]\n2\n\nWith lists of integers.\n\n>>> df.iloc[[0, 2], [1, 3]]\n      b     d\n0     2     4\n2  2000  4000\n\nWith `slice` objects.\n\n>>> df.iloc[1:3, 0:3]\n      a     b     c\n1   100   200   300\n2  1000  2000  3000\n\nWith a boolean array whose length matches the columns.\n\n>>> df.iloc[:, [True, False, True, False]]\n      a     c\n0     1     3\n1   100   300\n2  1000  3000\n\nWith a callable function that expects the Series or DataFrame.\n\n>>> df.iloc[:, lambda df: [0, 2]]\n      a     c\n0     1     3\n1   100   300\n2  1000  3000\n"
  },
  {
    "symbol": "DataFrame.index",
    "signature": "(property)",
    "doc": "\n        The index (row labels) of the DataFrame.\n\n        The index of a DataFrame is a series of labels that identify each row.\n        The labels can be integers, strings, or any other hashable type. The index\n        is used for label-based access and alignment, and can be accessed or\n        modified using this attribute.\n\n        Returns\n        -------\n        pandas.Index\n            The index labels of the DataFrame.\n\n        See Also\n        --------\n        DataFrame.columns : The column labels of the DataFrame.\n        DataFrame.to_numpy : Convert the DataFrame to a NumPy array.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'Name': ['Alice', 'Bob', 'Aritra'],\n        ...                    'Age': [25, 30, 35],\n        ...                    'Location': ['Seattle', 'New York', 'Kona']},\n        ...                   index=([10, 20, 30]))\n        >>> df.index\n        Index([10, 20, 30], dtype='int64')\n\n        In this example, we create a DataFrame with 3 rows and 3 columns,\n        including Name, Age, and Location information. We set the index labels to\n        be the integers 10, 20, and 30. We then access the `index` attribute of the\n        DataFrame, which returns an `Index` object containing the index labels.\n\n        >>> df.index = [100, 200, 300]\n        >>> df\n            Name  Age Location\n        100  Alice   25  Seattle\n        200    Bob   30 New York\n        300  Aritra  35    Kona\n\n        In this example, we modify the index labels of the DataFrame by assigning\n        a new list of labels to the `index` attribute. The DataFrame is then\n        updated with the new labels, and the output shows the modified DataFrame.\n        "
  },
  {
    "symbol": "DataFrame.infer_objects",
    "signature": "(self, copy: 'bool_t | None' = None) -> 'Self'",
    "doc": "Attempt to infer better dtypes for object columns.\n\nAttempts soft conversion of object-dtyped\ncolumns, leaving non-object and unconvertible\ncolumns unchanged. The inference rules are the\nsame as during normal Series/DataFrame construction.\n\nParameters\n----------\ncopy : bool, default True\n    Whether to make a copy for non-object or non-inferable columns\n    or Series.\n\n    .. note::\n        The `copy` keyword will change behavior in pandas 3.0.\n        `Copy-on-Write\n        <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n        will be enabled by default, which means that all methods with a\n        `copy` keyword will use a lazy copy mechanism to defer the copy and\n        ignore the `copy` keyword. The `copy` keyword will be removed in a\n        future version of pandas.\n\n        You can already get the future behavior and improvements through\n        enabling copy on write ``pd.options.mode.copy_on_write = True``\n\nReturns\n-------\nsame type as input object\n\nSee Also\n--------\nto_datetime : Convert argument to datetime.\nto_timedelta : Convert argument to timedelta.\nto_numeric : Convert argument to numeric type.\nconvert_dtypes : Convert argument to best possible dtype.\n\nExamples\n--------\n>>> df = pd.DataFrame({\"A\": [\"a\", 1, 2, 3]})\n>>> df = df.iloc[1:]\n>>> df\n   A\n1  1\n2  2\n3  3\n\n>>> df.dtypes\nA    object\ndtype: object\n\n>>> df.infer_objects().dtypes\nA    int64\ndtype: object"
  },
  {
    "symbol": "DataFrame.info",
    "signature": "(self, verbose: 'bool | None' = None, buf: 'WriteBuffer[str] | None' = None, max_cols: 'int | None' = None, memory_usage: 'bool | str | None' = None, show_counts: 'bool | None' = None) -> 'None'",
    "doc": "Print a concise summary of a DataFrame.\n\nThis method prints information about a DataFrame including\nthe index dtype and columns, non-null values and memory usage.\n\nParameters\n----------\nverbose : bool, optional\n    Whether to print the full summary. By default, the setting in\n    ``pandas.options.display.max_info_columns`` is followed.\nbuf : writable buffer, defaults to sys.stdout\n    Where to send the output. By default, the output is printed to\n    sys.stdout. Pass a writable buffer if you need to further process\n    the output.\nmax_cols : int, optional\n    When to switch from the verbose to the truncated output. If the\n    DataFrame has more than `max_cols` columns, the truncated output\n    is used. By default, the setting in\n    ``pandas.options.display.max_info_columns`` is used.\nmemory_usage : bool, str, optional\n    Specifies whether total memory usage of the DataFrame\n    elements (including the index) should be displayed. By default,\n    this follows the ``pandas.options.display.memory_usage`` setting.\n\n    True always show memory usage. False never shows memory usage.\n    A value of 'deep' is equivalent to \"True with deep introspection\".\n    Memory usage is shown in human-readable units (base-2\n    representation). Without deep introspection a memory estimation is\n    made based in column dtype and number of rows assuming values\n    consume the same memory amount for corresponding dtypes. With deep\n    memory introspection, a real memory usage calculation is performed\n    at the cost of computational resources. See the\n    :ref:`Frequently Asked Questions <df-memory-usage>` for more\n    details.\nshow_counts : bool, optional\n    Whether to show the non-null counts. By default, this is shown\n    only if the DataFrame is smaller than\n    ``pandas.options.display.max_info_rows`` and\n    ``pandas.options.display.max_info_columns``. A value of True always\n    shows the counts, and False never shows the counts.\n\nReturns\n-------\nNone\n    This method prints a summary of a DataFrame and returns None.\n\nSee Also\n--------\nDataFrame.describe: Generate descriptive statistics of DataFrame\n    columns.\nDataFrame.memory_usage: Memory usage of DataFrame columns.\n\nExamples\n--------\n>>> int_values = [1, 2, 3, 4, 5]\n>>> text_values = ['alpha', 'beta', 'gamma', 'delta', 'epsilon']\n>>> float_values = [0.0, 0.25, 0.5, 0.75, 1.0]\n>>> df = pd.DataFrame({\"int_col\": int_values, \"text_col\": text_values,\n...                   \"float_col\": float_values})\n>>> df\n    int_col text_col  float_col\n0        1    alpha       0.00\n1        2     beta       0.25\n2        3    gamma       0.50\n3        4    delta       0.75\n4        5  epsilon       1.00\n\nPrints information of all columns:\n\n>>> df.info(verbose=True)\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 5 entries, 0 to 4\nData columns (total 3 columns):\n #   Column     Non-Null Count  Dtype\n---  ------     --------------  -----\n 0   int_col    5 non-null      int64\n 1   text_col   5 non-null      object\n 2   float_col  5 non-null      float64\ndtypes: float64(1), int64(1), object(1)\nmemory usage: 248.0+ bytes\n\nPrints a summary of columns count and its dtypes but not per column\ninformation:\n\n>>> df.info(verbose=False)\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 5 entries, 0 to 4\nColumns: 3 entries, int_col to float_col\ndtypes: float64(1), int64(1), object(1)\nmemory usage: 248.0+ bytes\n\nPipe output of DataFrame.info to buffer instead of sys.stdout, get\nbuffer content and writes to a text file:\n\n>>> import io\n>>> buffer = io.StringIO()\n>>> df.info(buf=buffer)\n>>> s = buffer.getvalue()\n>>> with open(\"df_info.txt\", \"w\",\n...           encoding=\"utf-8\") as f:  # doctest: +SKIP\n...     f.write(s)\n260\n\nThe `memory_usage` parameter allows deep introspection mode, specially\nuseful for big DataFrames and fine-tune memory optimization:\n\n>>> random_strings_array = np.random.choice(['a', 'b', 'c'], 10 ** 6)\n>>> df = pd.DataFrame({\n...     'column_1': np.random.choice(['a', 'b', 'c'], 10 ** 6),\n...     'column_2': np.random.choice(['a', 'b', 'c'], 10 ** 6),\n...     'column_3': np.random.choice(['a', 'b', 'c'], 10 ** 6)\n... })\n>>> df.info()\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1000000 entries, 0 to 999999\nData columns (total 3 columns):\n #   Column    Non-Null Count    Dtype\n---  ------    --------------    -----\n 0   column_1  1000000 non-null  object\n 1   column_2  1000000 non-null  object\n 2   column_3  1000000 non-null  object\ndtypes: object(3)\nmemory usage: 22.9+ MB\n\n>>> df.info(memory_usage='deep')\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1000000 entries, 0 to 999999\nData columns (total 3 columns):\n #   Column    Non-Null Count    Dtype\n---  ------    --------------    -----\n 0   column_1  1000000 non-null  object\n 1   column_2  1000000 non-null  object\n 2   column_3  1000000 non-null  object\ndtypes: object(3)\nmemory usage: 165.9 MB"
  },
  {
    "symbol": "DataFrame.insert",
    "signature": "(self, loc: 'int', column: 'Hashable', value: 'Scalar | AnyArrayLike', allow_duplicates: 'bool | lib.NoDefault' = <no_default>) -> 'None'",
    "doc": "Insert column into DataFrame at specified location.\n\nRaises a ValueError if `column` is already contained in the DataFrame,\nunless `allow_duplicates` is set to True.\n\nParameters\n----------\nloc : int\n    Insertion index. Must verify 0 <= loc <= len(columns).\ncolumn : str, number, or hashable object\n    Label of the inserted column.\nvalue : Scalar, Series, or array-like\n    Content of the inserted column.\nallow_duplicates : bool, optional, default lib.no_default\n    Allow duplicate column labels to be created.\n\nSee Also\n--------\nIndex.insert : Insert new item by index.\n\nExamples\n--------\n>>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n>>> df\n   col1  col2\n0     1     3\n1     2     4\n>>> df.insert(1, \"newcol\", [99, 99])\n>>> df\n   col1  newcol  col2\n0     1      99     3\n1     2      99     4\n>>> df.insert(0, \"col1\", [100, 100], allow_duplicates=True)\n>>> df\n   col1  col1  newcol  col2\n0   100     1      99     3\n1   100     2      99     4\n\nNotice that pandas uses index alignment in case of `value` from type `Series`:\n\n>>> df.insert(0, \"col0\", pd.Series([5, 6], index=[1, 2]))\n>>> df\n   col0  col1  col1  newcol  col2\n0   NaN   100     1      99     3\n1   5.0   100     2      99     4"
  },
  {
    "symbol": "DataFrame.interpolate",
    "signature": "(self, method: 'InterpolateOptions' = 'linear', *, axis: 'Axis' = 0, limit: 'int | None' = None, inplace: 'bool_t' = False, limit_direction: \"Literal['forward', 'backward', 'both'] | None\" = None, limit_area: \"Literal['inside', 'outside'] | None\" = None, downcast: \"Literal['infer'] | None | lib.NoDefault\" = <no_default>, **kwargs) -> 'Self | None'",
    "doc": "Fill NaN values using an interpolation method.\n\nPlease note that only ``method='linear'`` is supported for\nDataFrame/Series with a MultiIndex.\n\nParameters\n----------\nmethod : str, default 'linear'\n    Interpolation technique to use. One of:\n\n    * 'linear': Ignore the index and treat the values as equally\n      spaced. This is the only method supported on MultiIndexes.\n    * 'time': Works on daily and higher resolution data to interpolate\n      given length of interval.\n    * 'index', 'values': use the actual numerical values of the index.\n    * 'pad': Fill in NaNs using existing values.\n    * 'nearest', 'zero', 'slinear', 'quadratic', 'cubic',\n      'barycentric', 'polynomial': Passed to\n      `scipy.interpolate.interp1d`, whereas 'spline' is passed to\n      `scipy.interpolate.UnivariateSpline`. These methods use the numerical\n      values of the index.  Both 'polynomial' and 'spline' require that\n      you also specify an `order` (int), e.g.\n      ``df.interpolate(method='polynomial', order=5)``. Note that,\n      `slinear` method in Pandas refers to the Scipy first order `spline`\n      instead of Pandas first order `spline`.\n    * 'krogh', 'piecewise_polynomial', 'spline', 'pchip', 'akima',\n      'cubicspline': Wrappers around the SciPy interpolation methods of\n      similar names. See `Notes`.\n    * 'from_derivatives': Refers to\n      `scipy.interpolate.BPoly.from_derivatives`.\n\naxis : {{0 or 'index', 1 or 'columns', None}}, default None\n    Axis to interpolate along. For `Series` this parameter is unused\n    and defaults to 0.\nlimit : int, optional\n    Maximum number of consecutive NaNs to fill. Must be greater than\n    0.\ninplace : bool, default False\n    Update the data in place if possible.\nlimit_direction : {{'forward', 'backward', 'both'}}, Optional\n    Consecutive NaNs will be filled in this direction.\n\n    If limit is specified:\n        * If 'method' is 'pad' or 'ffill', 'limit_direction' must be 'forward'.\n        * If 'method' is 'backfill' or 'bfill', 'limit_direction' must be\n          'backwards'.\n\n    If 'limit' is not specified:\n        * If 'method' is 'backfill' or 'bfill', the default is 'backward'\n        * else the default is 'forward'\n\n    raises ValueError if `limit_direction` is 'forward' or 'both' and\n        method is 'backfill' or 'bfill'.\n    raises ValueError if `limit_direction` is 'backward' or 'both' and\n        method is 'pad' or 'ffill'.\n\nlimit_area : {{`None`, 'inside', 'outside'}}, default None\n    If limit is specified, consecutive NaNs will be filled with this\n    restriction.\n\n    * ``None``: No fill restriction.\n    * 'inside': Only fill NaNs surrounded by valid values\n      (interpolate).\n    * 'outside': Only fill NaNs outside valid values (extrapolate).\n\ndowncast : optional, 'infer' or None, defaults to None\n    Downcast dtypes if possible.\n\n    .. deprecated:: 2.1.0\n\n``**kwargs`` : optional\n    Keyword arguments to pass on to the interpolating function.\n\nReturns\n-------\nSeries or DataFrame or None\n    Returns the same object type as the caller, interpolated at\n    some or all ``NaN`` values or None if ``inplace=True``.\n\nSee Also\n--------\nfillna : Fill missing values using different methods.\nscipy.interpolate.Akima1DInterpolator : Piecewise cubic polynomials\n    (Akima interpolator).\nscipy.interpolate.BPoly.from_derivatives : Piecewise polynomial in the\n    Bernstein basis.\nscipy.interpolate.interp1d : Interpolate a 1-D function.\nscipy.interpolate.KroghInterpolator : Interpolate polynomial (Krogh\n    interpolator).\nscipy.interpolate.PchipInterpolator : PCHIP 1-d monotonic cubic\n    interpolation.\nscipy.interpolate.CubicSpline : Cubic spline data interpolator.\n\nNotes\n-----\nThe 'krogh', 'piecewise_polynomial', 'spline', 'pchip' and 'akima'\nmethods are wrappers around the respective SciPy implementations of\nsimilar names. These use the actual numerical values of the index.\nFor more information on their behavior, see the\n`SciPy documentation\n<https://docs.scipy.org/doc/scipy/reference/interpolate.html#univariate-interpolation>`__.\n\nExamples\n--------\nFilling in ``NaN`` in a :class:`~pandas.Series` via linear\ninterpolation.\n\n>>> s = pd.Series([0, 1, np.nan, 3])\n>>> s\n0    0.0\n1    1.0\n2    NaN\n3    3.0\ndtype: float64\n>>> s.interpolate()\n0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float64\n\nFilling in ``NaN`` in a Series via polynomial interpolation or splines:\nBoth 'polynomial' and 'spline' methods require that you also specify\nan ``order`` (int).\n\n>>> s = pd.Series([0, 2, np.nan, 8])\n>>> s.interpolate(method='polynomial', order=2)\n0    0.000000\n1    2.000000\n2    4.666667\n3    8.000000\ndtype: float64\n\nFill the DataFrame forward (that is, going down) along each column\nusing linear interpolation.\n\nNote how the last entry in column 'a' is interpolated differently,\nbecause there is no entry after it to use for interpolation.\nNote how the first entry in column 'b' remains ``NaN``, because there\nis no entry before it to use for interpolation.\n\n>>> df = pd.DataFrame([(0.0, np.nan, -1.0, 1.0),\n...                    (np.nan, 2.0, np.nan, np.nan),\n...                    (2.0, 3.0, np.nan, 9.0),\n...                    (np.nan, 4.0, -4.0, 16.0)],\n...                   columns=list('abcd'))\n>>> df\n     a    b    c     d\n0  0.0  NaN -1.0   1.0\n1  NaN  2.0  NaN   NaN\n2  2.0  3.0  NaN   9.0\n3  NaN  4.0 -4.0  16.0\n>>> df.interpolate(method='linear', limit_direction='forward', axis=0)\n     a    b    c     d\n0  0.0  NaN -1.0   1.0\n1  1.0  2.0 -2.0   5.0\n2  2.0  3.0 -3.0   9.0\n3  2.0  4.0 -4.0  16.0\n\nUsing polynomial interpolation.\n\n>>> df['d'].interpolate(method='polynomial', order=2)\n0     1.0\n1     4.0\n2     9.0\n3    16.0\nName: d, dtype: float64"
  },
  {
    "symbol": "DataFrame.isetitem",
    "signature": "(self, loc, value) -> 'None'",
    "doc": "Set the given value in the column with position `loc`.\n\nThis is a positional analogue to ``__setitem__``.\n\nParameters\n----------\nloc : int or sequence of ints\n    Index position for the column.\nvalue : scalar or arraylike\n    Value(s) for the column.\n\nNotes\n-----\n``frame.isetitem(loc, value)`` is an in-place method as it will\nmodify the DataFrame in place (not returning a new object). In contrast to\n``frame.iloc[:, i] = value`` which will try to update the existing values in\nplace, ``frame.isetitem(loc, value)`` will not update the values of the column\nitself in place, it will instead insert a new array.\n\nIn cases where ``frame.columns`` is unique, this is equivalent to\n``frame[frame.columns[i]] = value``."
  },
  {
    "symbol": "DataFrame.isin",
    "signature": "(self, values: 'Series | DataFrame | Sequence | Mapping') -> 'DataFrame'",
    "doc": "Whether each element in the DataFrame is contained in values.\n\nParameters\n----------\nvalues : iterable, Series, DataFrame or dict\n    The result will only be true at a location if all the\n    labels match. If `values` is a Series, that's the index. If\n    `values` is a dict, the keys must be the column names,\n    which must match. If `values` is a DataFrame,\n    then both the index and column labels must match.\n\nReturns\n-------\nDataFrame\n    DataFrame of booleans showing whether each element in the DataFrame\n    is contained in values.\n\nSee Also\n--------\nDataFrame.eq: Equality test for DataFrame.\nSeries.isin: Equivalent method on Series.\nSeries.str.contains: Test if pattern or regex is contained within a\n    string of a Series or Index.\n\nExamples\n--------\n>>> df = pd.DataFrame({'num_legs': [2, 4], 'num_wings': [2, 0]},\n...                   index=['falcon', 'dog'])\n>>> df\n        num_legs  num_wings\nfalcon         2          2\ndog            4          0\n\nWhen ``values`` is a list check whether every value in the DataFrame\nis present in the list (which animals have 0 or 2 legs or wings)\n\n>>> df.isin([0, 2])\n        num_legs  num_wings\nfalcon      True       True\ndog        False       True\n\nTo check if ``values`` is *not* in the DataFrame, use the ``~`` operator:\n\n>>> ~df.isin([0, 2])\n        num_legs  num_wings\nfalcon     False      False\ndog         True      False\n\nWhen ``values`` is a dict, we can pass values to check for each\ncolumn separately:\n\n>>> df.isin({'num_wings': [0, 3]})\n        num_legs  num_wings\nfalcon     False      False\ndog        False       True\n\nWhen ``values`` is a Series or DataFrame the index and column must\nmatch. Note that 'falcon' does not match based on the number of legs\nin other.\n\n>>> other = pd.DataFrame({'num_legs': [8, 3], 'num_wings': [0, 2]},\n...                      index=['spider', 'falcon'])\n>>> df.isin(other)\n        num_legs  num_wings\nfalcon     False       True\ndog        False      False"
  },
  {
    "symbol": "DataFrame.isna",
    "signature": "(self) -> 'DataFrame'",
    "doc": "Detect missing values.\n\nReturn a boolean same-sized object indicating if the values are NA.\nNA values, such as None or :attr:`numpy.NaN`, gets mapped to True\nvalues.\nEverything else gets mapped to False values. Characters such as empty\nstrings ``''`` or :attr:`numpy.inf` are not considered NA values\n(unless you set ``pandas.options.mode.use_inf_as_na = True``).\n\nReturns\n-------\nDataFrame\n    Mask of bool values for each element in DataFrame that\n    indicates whether an element is an NA value.\n\nSee Also\n--------\nDataFrame.isnull : Alias of isna.\nDataFrame.notna : Boolean inverse of isna.\nDataFrame.dropna : Omit axes labels with missing values.\nisna : Top-level isna.\n\nExamples\n--------\nShow which entries in a DataFrame are NA.\n\n>>> df = pd.DataFrame(dict(age=[5, 6, np.nan],\n...                        born=[pd.NaT, pd.Timestamp('1939-05-27'),\n...                              pd.Timestamp('1940-04-25')],\n...                        name=['Alfred', 'Batman', ''],\n...                        toy=[None, 'Batmobile', 'Joker']))\n>>> df\n   age       born    name        toy\n0  5.0        NaT  Alfred       None\n1  6.0 1939-05-27  Batman  Batmobile\n2  NaN 1940-04-25              Joker\n\n>>> df.isna()\n     age   born   name    toy\n0  False   True  False   True\n1  False  False  False  False\n2   True  False  False  False\n\nShow which entries in a Series are NA.\n\n>>> ser = pd.Series([5, 6, np.nan])\n>>> ser\n0    5.0\n1    6.0\n2    NaN\ndtype: float64\n\n>>> ser.isna()\n0    False\n1    False\n2     True\ndtype: bool"
  },
  {
    "symbol": "DataFrame.isnull",
    "signature": "(self) -> 'DataFrame'",
    "doc": "DataFrame.isnull is an alias for DataFrame.isna.\n\nDetect missing values.\n\nReturn a boolean same-sized object indicating if the values are NA.\nNA values, such as None or :attr:`numpy.NaN`, gets mapped to True\nvalues.\nEverything else gets mapped to False values. Characters such as empty\nstrings ``''`` or :attr:`numpy.inf` are not considered NA values\n(unless you set ``pandas.options.mode.use_inf_as_na = True``).\n\nReturns\n-------\nDataFrame\n    Mask of bool values for each element in DataFrame that\n    indicates whether an element is an NA value.\n\nSee Also\n--------\nDataFrame.isnull : Alias of isna.\nDataFrame.notna : Boolean inverse of isna.\nDataFrame.dropna : Omit axes labels with missing values.\nisna : Top-level isna.\n\nExamples\n--------\nShow which entries in a DataFrame are NA.\n\n>>> df = pd.DataFrame(dict(age=[5, 6, np.nan],\n...                        born=[pd.NaT, pd.Timestamp('1939-05-27'),\n...                              pd.Timestamp('1940-04-25')],\n...                        name=['Alfred', 'Batman', ''],\n...                        toy=[None, 'Batmobile', 'Joker']))\n>>> df\n   age       born    name        toy\n0  5.0        NaT  Alfred       None\n1  6.0 1939-05-27  Batman  Batmobile\n2  NaN 1940-04-25              Joker\n\n>>> df.isna()\n     age   born   name    toy\n0  False   True  False   True\n1  False  False  False  False\n2   True  False  False  False\n\nShow which entries in a Series are NA.\n\n>>> ser = pd.Series([5, 6, np.nan])\n>>> ser\n0    5.0\n1    6.0\n2    NaN\ndtype: float64\n\n>>> ser.isna()\n0    False\n1    False\n2     True\ndtype: bool"
  },
  {
    "symbol": "DataFrame.items",
    "signature": "(self) -> 'Iterable[tuple[Hashable, Series]]'",
    "doc": "Iterate over (column name, Series) pairs.\n\nIterates over the DataFrame columns, returning a tuple with\nthe column name and the content as a Series.\n\nYields\n------\nlabel : object\n    The column names for the DataFrame being iterated over.\ncontent : Series\n    The column entries belonging to each label, as a Series.\n\nSee Also\n--------\nDataFrame.iterrows : Iterate over DataFrame rows as\n    (index, Series) pairs.\nDataFrame.itertuples : Iterate over DataFrame rows as namedtuples\n    of the values.\n\nExamples\n--------\n>>> df = pd.DataFrame({'species': ['bear', 'bear', 'marsupial'],\n...                   'population': [1864, 22000, 80000]},\n...                   index=['panda', 'polar', 'koala'])\n>>> df\n        species   population\npanda   bear      1864\npolar   bear      22000\nkoala   marsupial 80000\n>>> for label, content in df.items():\n...     print(f'label: {label}')\n...     print(f'content: {content}', sep='\\n')\n...\nlabel: species\ncontent:\npanda         bear\npolar         bear\nkoala    marsupial\nName: species, dtype: object\nlabel: population\ncontent:\npanda     1864\npolar    22000\nkoala    80000\nName: population, dtype: int64"
  },
  {
    "symbol": "DataFrame.iterrows",
    "signature": "(self) -> 'Iterable[tuple[Hashable, Series]]'",
    "doc": "Iterate over DataFrame rows as (index, Series) pairs.\n\nYields\n------\nindex : label or tuple of label\n    The index of the row. A tuple for a `MultiIndex`.\ndata : Series\n    The data of the row as a Series.\n\nSee Also\n--------\nDataFrame.itertuples : Iterate over DataFrame rows as namedtuples of the values.\nDataFrame.items : Iterate over (column name, Series) pairs.\n\nNotes\n-----\n1. Because ``iterrows`` returns a Series for each row,\n   it does **not** preserve dtypes across the rows (dtypes are\n   preserved across columns for DataFrames).\n\n   To preserve dtypes while iterating over the rows, it is better\n   to use :meth:`itertuples` which returns namedtuples of the values\n   and which is generally faster than ``iterrows``.\n\n2. You should **never modify** something you are iterating over.\n   This is not guaranteed to work in all cases. Depending on the\n   data types, the iterator returns a copy and not a view, and writing\n   to it will have no effect.\n\nExamples\n--------\n\n>>> df = pd.DataFrame([[1, 1.5]], columns=['int', 'float'])\n>>> row = next(df.iterrows())[1]\n>>> row\nint      1.0\nfloat    1.5\nName: 0, dtype: float64\n>>> print(row['int'].dtype)\nfloat64\n>>> print(df['int'].dtype)\nint64"
  },
  {
    "symbol": "DataFrame.itertuples",
    "signature": "(self, index: 'bool' = True, name: 'str | None' = 'Pandas') -> 'Iterable[tuple[Any, ...]]'",
    "doc": "Iterate over DataFrame rows as namedtuples.\n\nParameters\n----------\nindex : bool, default True\n    If True, return the index as the first element of the tuple.\nname : str or None, default \"Pandas\"\n    The name of the returned namedtuples or None to return regular\n    tuples.\n\nReturns\n-------\niterator\n    An object to iterate over namedtuples for each row in the\n    DataFrame with the first field possibly being the index and\n    following fields being the column values.\n\nSee Also\n--------\nDataFrame.iterrows : Iterate over DataFrame rows as (index, Series)\n    pairs.\nDataFrame.items : Iterate over (column name, Series) pairs.\n\nNotes\n-----\nThe column names will be renamed to positional names if they are\ninvalid Python identifiers, repeated, or start with an underscore.\n\nExamples\n--------\n>>> df = pd.DataFrame({'num_legs': [4, 2], 'num_wings': [0, 2]},\n...                   index=['dog', 'hawk'])\n>>> df\n      num_legs  num_wings\ndog          4          0\nhawk         2          2\n>>> for row in df.itertuples():\n...     print(row)\n...\nPandas(Index='dog', num_legs=4, num_wings=0)\nPandas(Index='hawk', num_legs=2, num_wings=2)\n\nBy setting the `index` parameter to False we can remove the index\nas the first element of the tuple:\n\n>>> for row in df.itertuples(index=False):\n...     print(row)\n...\nPandas(num_legs=4, num_wings=0)\nPandas(num_legs=2, num_wings=2)\n\nWith the `name` parameter set we set a custom name for the yielded\nnamedtuples:\n\n>>> for row in df.itertuples(name='Animal'):\n...     print(row)\n...\nAnimal(Index='dog', num_legs=4, num_wings=0)\nAnimal(Index='hawk', num_legs=2, num_wings=2)"
  },
  {
    "symbol": "DataFrame.join",
    "signature": "(self, other: 'DataFrame | Series | Iterable[DataFrame | Series]', on: 'IndexLabel | None' = None, how: 'MergeHow' = 'left', lsuffix: 'str' = '', rsuffix: 'str' = '', sort: 'bool' = False, validate: 'JoinValidate | None' = None) -> 'DataFrame'",
    "doc": "Join columns of another DataFrame.\n\nJoin columns with `other` DataFrame either on index or on a key\ncolumn. Efficiently join multiple DataFrame objects by index at once by\npassing a list.\n\nParameters\n----------\nother : DataFrame, Series, or a list containing any combination of them\n    Index should be similar to one of the columns in this one. If a\n    Series is passed, its name attribute must be set, and that will be\n    used as the column name in the resulting joined DataFrame.\non : str, list of str, or array-like, optional\n    Column or index level name(s) in the caller to join on the index\n    in `other`, otherwise joins index-on-index. If multiple\n    values given, the `other` DataFrame must have a MultiIndex. Can\n    pass an array as the join key if it is not already contained in\n    the calling DataFrame. Like an Excel VLOOKUP operation.\nhow : {'left', 'right', 'outer', 'inner', 'cross'}, default 'left'\n    How to handle the operation of the two objects.\n\n    * left: use calling frame's index (or column if on is specified)\n    * right: use `other`'s index.\n    * outer: form union of calling frame's index (or column if on is\n      specified) with `other`'s index, and sort it lexicographically.\n    * inner: form intersection of calling frame's index (or column if\n      on is specified) with `other`'s index, preserving the order\n      of the calling's one.\n    * cross: creates the cartesian product from both frames, preserves the order\n      of the left keys.\nlsuffix : str, default ''\n    Suffix to use from left frame's overlapping columns.\nrsuffix : str, default ''\n    Suffix to use from right frame's overlapping columns.\nsort : bool, default False\n    Order result DataFrame lexicographically by the join key. If False,\n    the order of the join key depends on the join type (how keyword).\nvalidate : str, optional\n    If specified, checks if join is of specified type.\n\n    * \"one_to_one\" or \"1:1\": check if join keys are unique in both left\n      and right datasets.\n    * \"one_to_many\" or \"1:m\": check if join keys are unique in left dataset.\n    * \"many_to_one\" or \"m:1\": check if join keys are unique in right dataset.\n    * \"many_to_many\" or \"m:m\": allowed, but does not result in checks.\n\n    .. versionadded:: 1.5.0\n\nReturns\n-------\nDataFrame\n    A dataframe containing columns from both the caller and `other`.\n\nSee Also\n--------\nDataFrame.merge : For column(s)-on-column(s) operations.\n\nNotes\n-----\nParameters `on`, `lsuffix`, and `rsuffix` are not supported when\npassing a list of `DataFrame` objects.\n\nExamples\n--------\n>>> df = pd.DataFrame({'key': ['K0', 'K1', 'K2', 'K3', 'K4', 'K5'],\n...                    'A': ['A0', 'A1', 'A2', 'A3', 'A4', 'A5']})\n\n>>> df\n  key   A\n0  K0  A0\n1  K1  A1\n2  K2  A2\n3  K3  A3\n4  K4  A4\n5  K5  A5\n\n>>> other = pd.DataFrame({'key': ['K0', 'K1', 'K2'],\n...                       'B': ['B0', 'B1', 'B2']})\n\n>>> other\n  key   B\n0  K0  B0\n1  K1  B1\n2  K2  B2\n\nJoin DataFrames using their indexes.\n\n>>> df.join(other, lsuffix='_caller', rsuffix='_other')\n  key_caller   A key_other    B\n0         K0  A0        K0   B0\n1         K1  A1        K1   B1\n2         K2  A2        K2   B2\n3         K3  A3       NaN  NaN\n4         K4  A4       NaN  NaN\n5         K5  A5       NaN  NaN\n\nIf we want to join using the key columns, we need to set key to be\nthe index in both `df` and `other`. The joined DataFrame will have\nkey as its index.\n\n>>> df.set_index('key').join(other.set_index('key'))\n      A    B\nkey\nK0   A0   B0\nK1   A1   B1\nK2   A2   B2\nK3   A3  NaN\nK4   A4  NaN\nK5   A5  NaN\n\nAnother option to join using the key columns is to use the `on`\nparameter. DataFrame.join always uses `other`'s index but we can use\nany column in `df`. This method preserves the original DataFrame's\nindex in the result.\n\n>>> df.join(other.set_index('key'), on='key')\n  key   A    B\n0  K0  A0   B0\n1  K1  A1   B1\n2  K2  A2   B2\n3  K3  A3  NaN\n4  K4  A4  NaN\n5  K5  A5  NaN\n\nUsing non-unique key values shows how they are matched.\n\n>>> df = pd.DataFrame({'key': ['K0', 'K1', 'K1', 'K3', 'K0', 'K1'],\n...                    'A': ['A0', 'A1', 'A2', 'A3', 'A4', 'A5']})\n\n>>> df\n  key   A\n0  K0  A0\n1  K1  A1\n2  K1  A2\n3  K3  A3\n4  K0  A4\n5  K1  A5\n\n>>> df.join(other.set_index('key'), on='key', validate='m:1')\n  key   A    B\n0  K0  A0   B0\n1  K1  A1   B1\n2  K1  A2   B1\n3  K3  A3  NaN\n4  K0  A4   B0\n5  K1  A5   B1"
  },
  {
    "symbol": "DataFrame.keys",
    "signature": "(self) -> 'Index'",
    "doc": "Get the 'info axis' (see Indexing for more).\n\nThis is index for Series, columns for DataFrame.\n\nReturns\n-------\nIndex\n    Info axis.\n\nExamples\n--------\n>>> d = pd.DataFrame(data={'A': [1, 2, 3], 'B': [0, 4, 8]},\n...                  index=['a', 'b', 'c'])\n>>> d\n   A  B\na  1  0\nb  2  4\nc  3  8\n>>> d.keys()\nIndex(['A', 'B'], dtype='object')"
  },
  {
    "symbol": "DataFrame.kurt",
    "signature": "(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs)",
    "doc": "Return unbiased kurtosis over requested axis.\n\nKurtosis obtained using Fisher's definition of\nkurtosis (kurtosis of normal == 0.0). Normalized by N-1.\n\nParameters\n----------\naxis : {index (0), columns (1)}\n    Axis for the function to be applied on.\n    For `Series` this parameter is unused and defaults to 0.\n\n    For DataFrames, specifying ``axis=None`` will apply the aggregation\n    across both axes.\n\n    .. versionadded:: 2.0.0\n\nskipna : bool, default True\n    Exclude NA/null values when computing the result.\nnumeric_only : bool, default False\n    Include only float, int, boolean columns. Not implemented for Series.\n\n**kwargs\n    Additional keyword arguments to be passed to the function.\n\nReturns\n-------\nSeries or scalar\n\n            Examples\n            --------\n            >>> s = pd.Series([1, 2, 2, 3], index=['cat', 'dog', 'dog', 'mouse'])\n            >>> s\n            cat    1\n            dog    2\n            dog    2\n            mouse  3\n            dtype: int64\n            >>> s.kurt()\n            1.5\n\n            With a DataFrame\n\n            >>> df = pd.DataFrame({'a': [1, 2, 2, 3], 'b': [3, 4, 4, 4]},\n            ...                   index=['cat', 'dog', 'dog', 'mouse'])\n            >>> df\n                   a   b\n              cat  1   3\n              dog  2   4\n              dog  2   4\n            mouse  3   4\n            >>> df.kurt()\n            a   1.5\n            b   4.0\n            dtype: float64\n\n            With axis=None\n\n            >>> df.kurt(axis=None).round(6)\n            -0.988693\n\n            Using axis=1\n\n            >>> df = pd.DataFrame({'a': [1, 2], 'b': [3, 4], 'c': [3, 4], 'd': [1, 2]},\n            ...                   index=['cat', 'dog'])\n            >>> df.kurt(axis=1)\n            cat   -6.0\n            dog   -6.0\n            dtype: float64"
  },
  {
    "symbol": "DataFrame.kurtosis",
    "signature": "(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs)",
    "doc": "Return unbiased kurtosis over requested axis.\n\nKurtosis obtained using Fisher's definition of\nkurtosis (kurtosis of normal == 0.0). Normalized by N-1.\n\nParameters\n----------\naxis : {index (0), columns (1)}\n    Axis for the function to be applied on.\n    For `Series` this parameter is unused and defaults to 0.\n\n    For DataFrames, specifying ``axis=None`` will apply the aggregation\n    across both axes.\n\n    .. versionadded:: 2.0.0\n\nskipna : bool, default True\n    Exclude NA/null values when computing the result.\nnumeric_only : bool, default False\n    Include only float, int, boolean columns. Not implemented for Series.\n\n**kwargs\n    Additional keyword arguments to be passed to the function.\n\nReturns\n-------\nSeries or scalar\n\n            Examples\n            --------\n            >>> s = pd.Series([1, 2, 2, 3], index=['cat', 'dog', 'dog', 'mouse'])\n            >>> s\n            cat    1\n            dog    2\n            dog    2\n            mouse  3\n            dtype: int64\n            >>> s.kurt()\n            1.5\n\n            With a DataFrame\n\n            >>> df = pd.DataFrame({'a': [1, 2, 2, 3], 'b': [3, 4, 4, 4]},\n            ...                   index=['cat', 'dog', 'dog', 'mouse'])\n            >>> df\n                   a   b\n              cat  1   3\n              dog  2   4\n              dog  2   4\n            mouse  3   4\n            >>> df.kurt()\n            a   1.5\n            b   4.0\n            dtype: float64\n\n            With axis=None\n\n            >>> df.kurt(axis=None).round(6)\n            -0.988693\n\n            Using axis=1\n\n            >>> df = pd.DataFrame({'a': [1, 2], 'b': [3, 4], 'c': [3, 4], 'd': [1, 2]},\n            ...                   index=['cat', 'dog'])\n            >>> df.kurt(axis=1)\n            cat   -6.0\n            dog   -6.0\n            dtype: float64"
  },
  {
    "symbol": "DataFrame.last",
    "signature": "(self, offset) -> 'Self'",
    "doc": "Select final periods of time series data based on a date offset.\n\n.. deprecated:: 2.1\n    :meth:`.last` is deprecated and will be removed in a future version.\n    Please create a mask and filter using `.loc` instead.\n\nFor a DataFrame with a sorted DatetimeIndex, this function\nselects the last few rows based on a date offset.\n\nParameters\n----------\noffset : str, DateOffset, dateutil.relativedelta\n    The offset length of the data that will be selected. For instance,\n    '3D' will display all the rows having their index within the last 3 days.\n\nReturns\n-------\nSeries or DataFrame\n    A subset of the caller.\n\nRaises\n------\nTypeError\n    If the index is not  a :class:`DatetimeIndex`\n\nSee Also\n--------\nfirst : Select initial periods of time series based on a date offset.\nat_time : Select values at a particular time of the day.\nbetween_time : Select values between particular times of the day.\n\nNotes\n-----\n.. deprecated:: 2.1.0\n    Please create a mask and filter using `.loc` instead\n\nExamples\n--------\n>>> i = pd.date_range('2018-04-09', periods=4, freq='2D')\n>>> ts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)\n>>> ts\n            A\n2018-04-09  1\n2018-04-11  2\n2018-04-13  3\n2018-04-15  4\n\nGet the rows for the last 3 days:\n\n>>> ts.last('3D')  # doctest: +SKIP\n            A\n2018-04-13  3\n2018-04-15  4\n\nNotice the data for 3 last calendar days were returned, not the last\n3 observed days in the dataset, and therefore data for 2018-04-11 was\nnot returned."
  },
  {
    "symbol": "DataFrame.last_valid_index",
    "signature": "(self) -> 'Hashable | None'",
    "doc": "Return index for last non-NA value or None, if no non-NA value is found.\n\nReturns\n-------\ntype of index\n\nExamples\n--------\nFor Series:\n\n>>> s = pd.Series([None, 3, 4])\n>>> s.first_valid_index()\n1\n>>> s.last_valid_index()\n2\n\n>>> s = pd.Series([None, None])\n>>> print(s.first_valid_index())\nNone\n>>> print(s.last_valid_index())\nNone\n\nIf all elements in Series are NA/null, returns None.\n\n>>> s = pd.Series()\n>>> print(s.first_valid_index())\nNone\n>>> print(s.last_valid_index())\nNone\n\nIf Series is empty, returns None.\n\nFor DataFrame:\n\n>>> df = pd.DataFrame({'A': [None, None, 2], 'B': [None, 3, 4]})\n>>> df\n     A      B\n0  NaN    NaN\n1  NaN    3.0\n2  2.0    4.0\n>>> df.first_valid_index()\n1\n>>> df.last_valid_index()\n2\n\n>>> df = pd.DataFrame({'A': [None, None, None], 'B': [None, None, None]})\n>>> df\n     A      B\n0  None   None\n1  None   None\n2  None   None\n>>> print(df.first_valid_index())\nNone\n>>> print(df.last_valid_index())\nNone\n\nIf all elements in DataFrame are NA/null, returns None.\n\n>>> df = pd.DataFrame()\n>>> df\nEmpty DataFrame\nColumns: []\nIndex: []\n>>> print(df.first_valid_index())\nNone\n>>> print(df.last_valid_index())\nNone\n\nIf DataFrame is empty, returns None."
  },
  {
    "symbol": "DataFrame.le",
    "signature": "(self, other, axis: 'Axis' = 'columns', level=None) -> 'DataFrame'",
    "doc": "Get Less than or equal to of dataframe and other, element-wise (binary operator `le`).\n\nAmong flexible wrappers (`eq`, `ne`, `le`, `lt`, `ge`, `gt`) to comparison\noperators.\n\nEquivalent to `==`, `!=`, `<=`, `<`, `>=`, `>` with support to choose axis\n(rows or columns) and level for comparison.\n\nParameters\n----------\nother : scalar, sequence, Series, or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis : {0 or 'index', 1 or 'columns'}, default 'columns'\n    Whether to compare by the index (0 or 'index') or columns\n    (1 or 'columns').\nlevel : int or label\n    Broadcast across a level, matching Index values on the passed\n    MultiIndex level.\n\nReturns\n-------\nDataFrame of bool\n    Result of the comparison.\n\nSee Also\n--------\nDataFrame.eq : Compare DataFrames for equality elementwise.\nDataFrame.ne : Compare DataFrames for inequality elementwise.\nDataFrame.le : Compare DataFrames for less than inequality\n    or equality elementwise.\nDataFrame.lt : Compare DataFrames for strictly less than\n    inequality elementwise.\nDataFrame.ge : Compare DataFrames for greater than inequality\n    or equality elementwise.\nDataFrame.gt : Compare DataFrames for strictly greater than\n    inequality elementwise.\n\nNotes\n-----\nMismatched indices will be unioned together.\n`NaN` values are considered different (i.e. `NaN` != `NaN`).\n\nExamples\n--------\n>>> df = pd.DataFrame({'cost': [250, 150, 100],\n...                    'revenue': [100, 250, 300]},\n...                   index=['A', 'B', 'C'])\n>>> df\n   cost  revenue\nA   250      100\nB   150      250\nC   100      300\n\nComparison with a scalar, using either the operator or method:\n\n>>> df == 100\n    cost  revenue\nA  False     True\nB  False    False\nC   True    False\n\n>>> df.eq(100)\n    cost  revenue\nA  False     True\nB  False    False\nC   True    False\n\nWhen `other` is a :class:`Series`, the columns of a DataFrame are aligned\nwith the index of `other` and broadcast:\n\n>>> df != pd.Series([100, 250], index=[\"cost\", \"revenue\"])\n    cost  revenue\nA   True     True\nB   True    False\nC  False     True\n\nUse the method to control the broadcast axis:\n\n>>> df.ne(pd.Series([100, 300], index=[\"A\", \"D\"]), axis='index')\n   cost  revenue\nA  True    False\nB  True     True\nC  True     True\nD  True     True\n\nWhen comparing to an arbitrary sequence, the number of columns must\nmatch the number elements in `other`:\n\n>>> df == [250, 100]\n    cost  revenue\nA   True     True\nB  False    False\nC  False    False\n\nUse the method to control the axis:\n\n>>> df.eq([250, 250, 100], axis='index')\n    cost  revenue\nA   True    False\nB  False     True\nC   True    False\n\nCompare to a DataFrame of different shape.\n\n>>> other = pd.DataFrame({'revenue': [300, 250, 100, 150]},\n...                      index=['A', 'B', 'C', 'D'])\n>>> other\n   revenue\nA      300\nB      250\nC      100\nD      150\n\n>>> df.gt(other)\n    cost  revenue\nA  False    False\nB  False    False\nC  False     True\nD  False    False\n\nCompare to a MultiIndex by level.\n\n>>> df_multindex = pd.DataFrame({'cost': [250, 150, 100, 150, 300, 220],\n...                              'revenue': [100, 250, 300, 200, 175, 225]},\n...                             index=[['Q1', 'Q1', 'Q1', 'Q2', 'Q2', 'Q2'],\n...                                    ['A', 'B', 'C', 'A', 'B', 'C']])\n>>> df_multindex\n      cost  revenue\nQ1 A   250      100\n   B   150      250\n   C   100      300\nQ2 A   150      200\n   B   300      175\n   C   220      225\n\n>>> df.le(df_multindex, level=1)\n       cost  revenue\nQ1 A   True     True\n   B   True     True\n   C   True     True\nQ2 A  False     True\n   B   True    False\n   C   True    False"
  },
  {
    "symbol": "DataFrame.loc",
    "signature": "(property)",
    "doc": "\nAccess a group of rows and columns by label(s) or a boolean array.\n\n``.loc[]`` is primarily label based, but may also be used with a\nboolean array.\n\nAllowed inputs are:\n\n- A single label, e.g. ``5`` or ``'a'``, (note that ``5`` is\n  interpreted as a *label* of the index, and **never** as an\n  integer position along the index).\n- A list or array of labels, e.g. ``['a', 'b', 'c']``.\n- A slice object with labels, e.g. ``'a':'f'``.\n\n  .. warning:: Note that contrary to usual python slices, **both** the\n      start and the stop are included\n\n- A boolean array of the same length as the axis being sliced,\n  e.g. ``[True, False, True]``.\n- An alignable boolean Series. The index of the key will be aligned before\n  masking.\n- An alignable Index. The Index of the returned selection will be the input.\n- A ``callable`` function with one argument (the calling Series or\n  DataFrame) and that returns valid output for indexing (one of the above)\n\nSee more at :ref:`Selection by Label <indexing.label>`.\n\nRaises\n------\nKeyError\n    If any items are not found.\nIndexingError\n    If an indexed key is passed and its index is unalignable to the frame index.\n\nSee Also\n--------\nDataFrame.at : Access a single value for a row/column label pair.\nDataFrame.iloc : Access group of rows and columns by integer position(s).\nDataFrame.xs : Returns a cross-section (row(s) or column(s)) from the\n               Series/DataFrame.\nSeries.loc : Access group of values using labels.\n\nExamples\n--------\n**Getting values**\n\n>>> df = pd.DataFrame([[1, 2], [4, 5], [7, 8]],\n...                   index=['cobra', 'viper', 'sidewinder'],\n...                   columns=['max_speed', 'shield'])\n>>> df\n            max_speed  shield\ncobra               1       2\nviper               4       5\nsidewinder          7       8\n\nSingle label. Note this returns the row as a Series.\n\n>>> df.loc['viper']\nmax_speed    4\nshield       5\nName: viper, dtype: int64\n\nList of labels. Note using ``[[]]`` returns a DataFrame.\n\n>>> df.loc[['viper', 'sidewinder']]\n            max_speed  shield\nviper               4       5\nsidewinder          7       8\n\nSingle label for row and column\n\n>>> df.loc['cobra', 'shield']\n2\n\nSlice with labels for row and single label for column. As mentioned\nabove, note that both the start and stop of the slice are included.\n\n>>> df.loc['cobra':'viper', 'max_speed']\ncobra    1\nviper    4\nName: max_speed, dtype: int64\n\nBoolean list with the same length as the row axis\n\n>>> df.loc[[False, False, True]]\n            max_speed  shield\nsidewinder          7       8\n\nAlignable boolean Series:\n\n>>> df.loc[pd.Series([False, True, False],\n...                  index=['viper', 'sidewinder', 'cobra'])]\n                     max_speed  shield\nsidewinder          7       8\n\nIndex (same behavior as ``df.reindex``)\n\n>>> df.loc[pd.Index([\"cobra\", \"viper\"], name=\"foo\")]\n       max_speed  shield\nfoo\ncobra          1       2\nviper          4       5\n\nConditional that returns a boolean Series\n\n>>> df.loc[df['shield'] > 6]\n            max_speed  shield\nsidewinder          7       8\n\nConditional that returns a boolean Series with column labels specified\n\n>>> df.loc[df['shield'] > 6, ['max_speed']]\n            max_speed\nsidewinder          7\n\nMultiple conditional using ``&`` that returns a boolean Series\n\n>>> df.loc[(df['max_speed'] > 1) & (df['shield'] < 8)]\n            max_speed  shield\nviper          4       5\n\nMultiple conditional using ``|`` that returns a boolean Series\n\n>>> df.loc[(df['max_speed'] > 4) | (df['shield'] < 5)]\n            max_speed  shield\ncobra               1       2\nsidewinder          7       8\n\nPlease ensure that each condition is wrapped in parentheses ``()``.\nSee the :ref:`user guide<indexing.boolean>`\nfor more details and explanations of Boolean indexing.\n\n.. note::\n    If you find yourself using 3 or more conditionals in ``.loc[]``,\n    consider using :ref:`advanced indexing<advanced.advanced_hierarchical>`.\n\n    See below for using ``.loc[]`` on MultiIndex DataFrames.\n\nCallable that returns a boolean Series\n\n>>> df.loc[lambda df: df['shield'] == 8]\n            max_speed  shield\nsidewinder          7       8\n\n**Setting values**\n\nSet value for all items matching the list of labels\n\n>>> df.loc[['viper', 'sidewinder'], ['shield']] = 50\n>>> df\n            max_speed  shield\ncobra               1       2\nviper               4      50\nsidewinder          7      50\n\nSet value for an entire row\n\n>>> df.loc['cobra'] = 10\n>>> df\n            max_speed  shield\ncobra              10      10\nviper               4      50\nsidewinder          7      50\n\nSet value for an entire column\n\n>>> df.loc[:, 'max_speed'] = 30\n>>> df\n            max_speed  shield\ncobra              30      10\nviper              30      50\nsidewinder         30      50\n\nSet value for rows matching callable condition\n\n>>> df.loc[df['shield'] > 35] = 0\n>>> df\n            max_speed  shield\ncobra              30      10\nviper               0       0\nsidewinder          0       0\n\nAdd value matching location\n\n>>> df.loc[\"viper\", \"shield\"] += 5\n>>> df\n            max_speed  shield\ncobra              30      10\nviper               0       5\nsidewinder          0       0\n\nSetting using a ``Series`` or a ``DataFrame`` sets the values matching the\nindex labels, not the index positions.\n\n>>> shuffled_df = df.loc[[\"viper\", \"cobra\", \"sidewinder\"]]\n>>> df.loc[:] += shuffled_df\n>>> df\n            max_speed  shield\ncobra              60      20\nviper               0      10\nsidewinder          0       0\n\n**Getting values on a DataFrame with an index that has integer labels**\n\nAnother example using integers for the index\n\n>>> df = pd.DataFrame([[1, 2], [4, 5], [7, 8]],\n...                   index=[7, 8, 9], columns=['max_speed', 'shield'])\n>>> df\n   max_speed  shield\n7          1       2\n8          4       5\n9          7       8\n\nSlice with integer labels for rows. As mentioned above, note that both\nthe start and stop of the slice are included.\n\n>>> df.loc[7:9]\n   max_speed  shield\n7          1       2\n8          4       5\n9          7       8\n\n**Getting values with a MultiIndex**\n\nA number of examples using a DataFrame with a MultiIndex\n\n>>> tuples = [\n...     ('cobra', 'mark i'), ('cobra', 'mark ii'),\n...     ('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),\n...     ('viper', 'mark ii'), ('viper', 'mark iii')\n... ]\n>>> index = pd.MultiIndex.from_tuples(tuples)\n>>> values = [[12, 2], [0, 4], [10, 20],\n...           [1, 4], [7, 1], [16, 36]]\n>>> df = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\n>>> df\n                     max_speed  shield\ncobra      mark i           12       2\n           mark ii           0       4\nsidewinder mark i           10      20\n           mark ii           1       4\nviper      mark ii           7       1\n           mark iii         16      36\n\nSingle label. Note this returns a DataFrame with a single index.\n\n>>> df.loc['cobra']\n         max_speed  shield\nmark i          12       2\nmark ii          0       4\n\nSingle index tuple. Note this returns a Series.\n\n>>> df.loc[('cobra', 'mark ii')]\nmax_speed    0\nshield       4\nName: (cobra, mark ii), dtype: int64\n\nSingle label for row and column. Similar to passing in a tuple, this\nreturns a Series.\n\n>>> df.loc['cobra', 'mark i']\nmax_speed    12\nshield        2\nName: (cobra, mark i), dtype: int64\n\nSingle tuple. Note using ``[[]]`` returns a DataFrame.\n\n>>> df.loc[[('cobra', 'mark ii')]]\n               max_speed  shield\ncobra mark ii          0       4\n\nSingle tuple for the index with a single label for the column\n\n>>> df.loc[('cobra', 'mark i'), 'shield']\n2\n\nSlice from index tuple to single label\n\n>>> df.loc[('cobra', 'mark i'):'viper']\n                     max_speed  shield\ncobra      mark i           12       2\n           mark ii           0       4\nsidewinder mark i           10      20\n           mark ii           1       4\nviper      mark ii           7       1\n           mark iii         16      36\n\nSlice from index tuple to index tuple\n\n>>> df.loc[('cobra', 'mark i'):('viper', 'mark ii')]\n                    max_speed  shield\ncobra      mark i          12       2\n           mark ii          0       4\nsidewinder mark i          10      20\n           mark ii          1       4\nviper      mark ii          7       1\n\nPlease see the :ref:`user guide<advanced.advanced_hierarchical>`\nfor more details and explanations of advanced indexing.\n"
  },
  {
    "symbol": "DataFrame.lt",
    "signature": "(self, other, axis: 'Axis' = 'columns', level=None) -> 'DataFrame'",
    "doc": "Get Less than of dataframe and other, element-wise (binary operator `lt`).\n\nAmong flexible wrappers (`eq`, `ne`, `le`, `lt`, `ge`, `gt`) to comparison\noperators.\n\nEquivalent to `==`, `!=`, `<=`, `<`, `>=`, `>` with support to choose axis\n(rows or columns) and level for comparison.\n\nParameters\n----------\nother : scalar, sequence, Series, or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis : {0 or 'index', 1 or 'columns'}, default 'columns'\n    Whether to compare by the index (0 or 'index') or columns\n    (1 or 'columns').\nlevel : int or label\n    Broadcast across a level, matching Index values on the passed\n    MultiIndex level.\n\nReturns\n-------\nDataFrame of bool\n    Result of the comparison.\n\nSee Also\n--------\nDataFrame.eq : Compare DataFrames for equality elementwise.\nDataFrame.ne : Compare DataFrames for inequality elementwise.\nDataFrame.le : Compare DataFrames for less than inequality\n    or equality elementwise.\nDataFrame.lt : Compare DataFrames for strictly less than\n    inequality elementwise.\nDataFrame.ge : Compare DataFrames for greater than inequality\n    or equality elementwise.\nDataFrame.gt : Compare DataFrames for strictly greater than\n    inequality elementwise.\n\nNotes\n-----\nMismatched indices will be unioned together.\n`NaN` values are considered different (i.e. `NaN` != `NaN`).\n\nExamples\n--------\n>>> df = pd.DataFrame({'cost': [250, 150, 100],\n...                    'revenue': [100, 250, 300]},\n...                   index=['A', 'B', 'C'])\n>>> df\n   cost  revenue\nA   250      100\nB   150      250\nC   100      300\n\nComparison with a scalar, using either the operator or method:\n\n>>> df == 100\n    cost  revenue\nA  False     True\nB  False    False\nC   True    False\n\n>>> df.eq(100)\n    cost  revenue\nA  False     True\nB  False    False\nC   True    False\n\nWhen `other` is a :class:`Series`, the columns of a DataFrame are aligned\nwith the index of `other` and broadcast:\n\n>>> df != pd.Series([100, 250], index=[\"cost\", \"revenue\"])\n    cost  revenue\nA   True     True\nB   True    False\nC  False     True\n\nUse the method to control the broadcast axis:\n\n>>> df.ne(pd.Series([100, 300], index=[\"A\", \"D\"]), axis='index')\n   cost  revenue\nA  True    False\nB  True     True\nC  True     True\nD  True     True\n\nWhen comparing to an arbitrary sequence, the number of columns must\nmatch the number elements in `other`:\n\n>>> df == [250, 100]\n    cost  revenue\nA   True     True\nB  False    False\nC  False    False\n\nUse the method to control the axis:\n\n>>> df.eq([250, 250, 100], axis='index')\n    cost  revenue\nA   True    False\nB  False     True\nC   True    False\n\nCompare to a DataFrame of different shape.\n\n>>> other = pd.DataFrame({'revenue': [300, 250, 100, 150]},\n...                      index=['A', 'B', 'C', 'D'])\n>>> other\n   revenue\nA      300\nB      250\nC      100\nD      150\n\n>>> df.gt(other)\n    cost  revenue\nA  False    False\nB  False    False\nC  False     True\nD  False    False\n\nCompare to a MultiIndex by level.\n\n>>> df_multindex = pd.DataFrame({'cost': [250, 150, 100, 150, 300, 220],\n...                              'revenue': [100, 250, 300, 200, 175, 225]},\n...                             index=[['Q1', 'Q1', 'Q1', 'Q2', 'Q2', 'Q2'],\n...                                    ['A', 'B', 'C', 'A', 'B', 'C']])\n>>> df_multindex\n      cost  revenue\nQ1 A   250      100\n   B   150      250\n   C   100      300\nQ2 A   150      200\n   B   300      175\n   C   220      225\n\n>>> df.le(df_multindex, level=1)\n       cost  revenue\nQ1 A   True     True\n   B   True     True\n   C   True     True\nQ2 A  False     True\n   B   True    False\n   C   True    False"
  },
  {
    "symbol": "DataFrame.map",
    "signature": "(self, func: 'PythonFuncType', na_action: 'str | None' = None, **kwargs) -> 'DataFrame'",
    "doc": "Apply a function to a Dataframe elementwise.\n\n.. versionadded:: 2.1.0\n\n   DataFrame.applymap was deprecated and renamed to DataFrame.map.\n\nThis method applies a function that accepts and returns a scalar\nto every element of a DataFrame.\n\nParameters\n----------\nfunc : callable\n    Python function, returns a single value from a single value.\nna_action : {None, 'ignore'}, default None\n    If 'ignore', propagate NaN values, without passing them to func.\n**kwargs\n    Additional keyword arguments to pass as keywords arguments to\n    `func`.\n\nReturns\n-------\nDataFrame\n    Transformed DataFrame.\n\nSee Also\n--------\nDataFrame.apply : Apply a function along input axis of DataFrame.\nDataFrame.replace: Replace values given in `to_replace` with `value`.\nSeries.map : Apply a function elementwise on a Series.\n\nExamples\n--------\n>>> df = pd.DataFrame([[1, 2.12], [3.356, 4.567]])\n>>> df\n       0      1\n0  1.000  2.120\n1  3.356  4.567\n\n>>> df.map(lambda x: len(str(x)))\n   0  1\n0  3  4\n1  5  5\n\nLike Series.map, NA values can be ignored:\n\n>>> df_copy = df.copy()\n>>> df_copy.iloc[0, 0] = pd.NA\n>>> df_copy.map(lambda x: len(str(x)), na_action='ignore')\n     0  1\n0  NaN  4\n1  5.0  5\n\nIt is also possible to use `map` with functions that are not\n`lambda` functions:\n\n>>> df.map(round, ndigits=1)\n     0    1\n0  1.0  2.1\n1  3.4  4.6\n\nNote that a vectorized version of `func` often exists, which will\nbe much faster. You could square each number elementwise.\n\n>>> df.map(lambda x: x**2)\n           0          1\n0   1.000000   4.494400\n1  11.262736  20.857489\n\nBut it's better to avoid map in that case.\n\n>>> df ** 2\n           0          1\n0   1.000000   4.494400\n1  11.262736  20.857489"
  },
  {
    "symbol": "DataFrame.mask",
    "signature": "(self, cond, other=<no_default>, *, inplace: 'bool_t' = False, axis: 'Axis | None' = None, level: 'Level | None' = None) -> 'Self | None'",
    "doc": "Replace values where the condition is True.\n\nParameters\n----------\ncond : bool Series/DataFrame, array-like, or callable\n    Where `cond` is False, keep the original value. Where\n    True, replace with corresponding value from `other`.\n    If `cond` is callable, it is computed on the Series/DataFrame and\n    should return boolean Series/DataFrame or array. The callable must\n    not change input Series/DataFrame (though pandas doesn't check it).\nother : scalar, Series/DataFrame, or callable\n    Entries where `cond` is True are replaced with\n    corresponding value from `other`.\n    If other is callable, it is computed on the Series/DataFrame and\n    should return scalar or Series/DataFrame. The callable must not\n    change input Series/DataFrame (though pandas doesn't check it).\n    If not specified, entries will be filled with the corresponding\n    NULL value (``np.nan`` for numpy dtypes, ``pd.NA`` for extension\n    dtypes).\ninplace : bool, default False\n    Whether to perform the operation in place on the data.\naxis : int, default None\n    Alignment axis if needed. For `Series` this parameter is\n    unused and defaults to 0.\nlevel : int, default None\n    Alignment level if needed.\n\nReturns\n-------\nSame type as caller or None if ``inplace=True``.\n\nSee Also\n--------\n:func:`DataFrame.where` : Return an object of same shape as\n    self.\n\nNotes\n-----\nThe mask method is an application of the if-then idiom. For each\nelement in the calling DataFrame, if ``cond`` is ``False`` the\nelement is used; otherwise the corresponding element from the DataFrame\n``other`` is used. If the axis of ``other`` does not align with axis of\n``cond`` Series/DataFrame, the misaligned index positions will be filled with\nTrue.\n\nThe signature for :func:`DataFrame.where` differs from\n:func:`numpy.where`. Roughly ``df1.where(m, df2)`` is equivalent to\n``np.where(m, df1, df2)``.\n\nFor further details and examples see the ``mask`` documentation in\n:ref:`indexing <indexing.where_mask>`.\n\nThe dtype of the object takes precedence. The fill value is casted to\nthe object's dtype, if this can be done losslessly.\n\nExamples\n--------\n>>> s = pd.Series(range(5))\n>>> s.where(s > 0)\n0    NaN\n1    1.0\n2    2.0\n3    3.0\n4    4.0\ndtype: float64\n>>> s.mask(s > 0)\n0    0.0\n1    NaN\n2    NaN\n3    NaN\n4    NaN\ndtype: float64\n\n>>> s = pd.Series(range(5))\n>>> t = pd.Series([True, False])\n>>> s.where(t, 99)\n0     0\n1    99\n2    99\n3    99\n4    99\ndtype: int64\n>>> s.mask(t, 99)\n0    99\n1     1\n2    99\n3    99\n4    99\ndtype: int64\n\n>>> s.where(s > 1, 10)\n0    10\n1    10\n2    2\n3    3\n4    4\ndtype: int64\n>>> s.mask(s > 1, 10)\n0     0\n1     1\n2    10\n3    10\n4    10\ndtype: int64\n\n>>> df = pd.DataFrame(np.arange(10).reshape(-1, 2), columns=['A', 'B'])\n>>> df\n   A  B\n0  0  1\n1  2  3\n2  4  5\n3  6  7\n4  8  9\n>>> m = df % 3 == 0\n>>> df.where(m, -df)\n   A  B\n0  0 -1\n1 -2  3\n2 -4 -5\n3  6 -7\n4 -8  9\n>>> df.where(m, -df) == np.where(m, df, -df)\n      A     B\n0  True  True\n1  True  True\n2  True  True\n3  True  True\n4  True  True\n>>> df.where(m, -df) == df.mask(~m, -df)\n      A     B\n0  True  True\n1  True  True\n2  True  True\n3  True  True\n4  True  True"
  },
  {
    "symbol": "DataFrame.max",
    "signature": "(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs)",
    "doc": "Return the maximum of the values over the requested axis.\n\nIf you want the *index* of the maximum, use ``idxmax``. This is the equivalent of the ``numpy.ndarray`` method ``argmax``.\n\nParameters\n----------\naxis : {index (0), columns (1)}\n    Axis for the function to be applied on.\n    For `Series` this parameter is unused and defaults to 0.\n\n    For DataFrames, specifying ``axis=None`` will apply the aggregation\n    across both axes.\n\n    .. versionadded:: 2.0.0\n\nskipna : bool, default True\n    Exclude NA/null values when computing the result.\nnumeric_only : bool, default False\n    Include only float, int, boolean columns. Not implemented for Series.\n\n**kwargs\n    Additional keyword arguments to be passed to the function.\n\nReturns\n-------\nSeries or scalar\n\nSee Also\n--------\nSeries.sum : Return the sum.\nSeries.min : Return the minimum.\nSeries.max : Return the maximum.\nSeries.idxmin : Return the index of the minimum.\nSeries.idxmax : Return the index of the maximum.\nDataFrame.sum : Return the sum over the requested axis.\nDataFrame.min : Return the minimum over the requested axis.\nDataFrame.max : Return the maximum over the requested axis.\nDataFrame.idxmin : Return the index of the minimum over the requested axis.\nDataFrame.idxmax : Return the index of the maximum over the requested axis.\n\nExamples\n--------\n>>> idx = pd.MultiIndex.from_arrays([\n...     ['warm', 'warm', 'cold', 'cold'],\n...     ['dog', 'falcon', 'fish', 'spider']],\n...     names=['blooded', 'animal'])\n>>> s = pd.Series([4, 2, 0, 8], name='legs', index=idx)\n>>> s\nblooded  animal\nwarm     dog       4\n         falcon    2\ncold     fish      0\n         spider    8\nName: legs, dtype: int64\n\n>>> s.max()\n8"
  },
  {
    "symbol": "DataFrame.mean",
    "signature": "(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs)",
    "doc": "Return the mean of the values over the requested axis.\n\nParameters\n----------\naxis : {index (0), columns (1)}\n    Axis for the function to be applied on.\n    For `Series` this parameter is unused and defaults to 0.\n\n    For DataFrames, specifying ``axis=None`` will apply the aggregation\n    across both axes.\n\n    .. versionadded:: 2.0.0\n\nskipna : bool, default True\n    Exclude NA/null values when computing the result.\nnumeric_only : bool, default False\n    Include only float, int, boolean columns. Not implemented for Series.\n\n**kwargs\n    Additional keyword arguments to be passed to the function.\n\nReturns\n-------\nSeries or scalar\n\n            Examples\n            --------\n            >>> s = pd.Series([1, 2, 3])\n            >>> s.mean()\n            2.0\n\n            With a DataFrame\n\n            >>> df = pd.DataFrame({'a': [1, 2], 'b': [2, 3]}, index=['tiger', 'zebra'])\n            >>> df\n                   a   b\n            tiger  1   2\n            zebra  2   3\n            >>> df.mean()\n            a   1.5\n            b   2.5\n            dtype: float64\n\n            Using axis=1\n\n            >>> df.mean(axis=1)\n            tiger   1.5\n            zebra   2.5\n            dtype: float64\n\n            In this case, `numeric_only` should be set to `True` to avoid\n            getting an error.\n\n            >>> df = pd.DataFrame({'a': [1, 2], 'b': ['T', 'Z']},\n            ...                   index=['tiger', 'zebra'])\n            >>> df.mean(numeric_only=True)\n            a   1.5\n            dtype: float64"
  },
  {
    "symbol": "DataFrame.median",
    "signature": "(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs)",
    "doc": "Return the median of the values over the requested axis.\n\nParameters\n----------\naxis : {index (0), columns (1)}\n    Axis for the function to be applied on.\n    For `Series` this parameter is unused and defaults to 0.\n\n    For DataFrames, specifying ``axis=None`` will apply the aggregation\n    across both axes.\n\n    .. versionadded:: 2.0.0\n\nskipna : bool, default True\n    Exclude NA/null values when computing the result.\nnumeric_only : bool, default False\n    Include only float, int, boolean columns. Not implemented for Series.\n\n**kwargs\n    Additional keyword arguments to be passed to the function.\n\nReturns\n-------\nSeries or scalar\n\n            Examples\n            --------\n            >>> s = pd.Series([1, 2, 3])\n            >>> s.median()\n            2.0\n\n            With a DataFrame\n\n            >>> df = pd.DataFrame({'a': [1, 2], 'b': [2, 3]}, index=['tiger', 'zebra'])\n            >>> df\n                   a   b\n            tiger  1   2\n            zebra  2   3\n            >>> df.median()\n            a   1.5\n            b   2.5\n            dtype: float64\n\n            Using axis=1\n\n            >>> df.median(axis=1)\n            tiger   1.5\n            zebra   2.5\n            dtype: float64\n\n            In this case, `numeric_only` should be set to `True`\n            to avoid getting an error.\n\n            >>> df = pd.DataFrame({'a': [1, 2], 'b': ['T', 'Z']},\n            ...                   index=['tiger', 'zebra'])\n            >>> df.median(numeric_only=True)\n            a   1.5\n            dtype: float64"
  },
  {
    "symbol": "DataFrame.melt",
    "signature": "(self, id_vars=None, value_vars=None, var_name=None, value_name: 'Hashable' = 'value', col_level: 'Level | None' = None, ignore_index: 'bool' = True) -> 'DataFrame'",
    "doc": "Unpivot a DataFrame from wide to long format, optionally leaving identifiers set.\n\nThis function is useful to massage a DataFrame into a format where one\nor more columns are identifier variables (`id_vars`), while all other\ncolumns, considered measured variables (`value_vars`), are \"unpivoted\" to\nthe row axis, leaving just two non-identifier columns, 'variable' and\n'value'.\n\nParameters\n----------\nid_vars : scalar, tuple, list, or ndarray, optional\n    Column(s) to use as identifier variables.\nvalue_vars : scalar, tuple, list, or ndarray, optional\n    Column(s) to unpivot. If not specified, uses all columns that\n    are not set as `id_vars`.\nvar_name : scalar, default None\n    Name to use for the 'variable' column. If None it uses\n    ``frame.columns.name`` or 'variable'.\nvalue_name : scalar, default 'value'\n    Name to use for the 'value' column, can't be an existing column label.\ncol_level : scalar, optional\n    If columns are a MultiIndex then use this level to melt.\nignore_index : bool, default True\n    If True, original index is ignored. If False, the original index is retained.\n    Index labels will be repeated as necessary.\n\nReturns\n-------\nDataFrame\n    Unpivoted DataFrame.\n\nSee Also\n--------\nmelt : Identical method.\npivot_table : Create a spreadsheet-style pivot table as a DataFrame.\nDataFrame.pivot : Return reshaped DataFrame organized\n    by given index / column values.\nDataFrame.explode : Explode a DataFrame from list-like\n        columns to long format.\n\nNotes\n-----\nReference :ref:`the user guide <reshaping.melt>` for more examples.\n\nExamples\n--------\n>>> df = pd.DataFrame({'A': {0: 'a', 1: 'b', 2: 'c'},\n...                    'B': {0: 1, 1: 3, 2: 5},\n...                    'C': {0: 2, 1: 4, 2: 6}})\n>>> df\n   A  B  C\n0  a  1  2\n1  b  3  4\n2  c  5  6\n\n>>> df.melt(id_vars=['A'], value_vars=['B'])\n   A variable  value\n0  a        B      1\n1  b        B      3\n2  c        B      5\n\n>>> df.melt(id_vars=['A'], value_vars=['B', 'C'])\n   A variable  value\n0  a        B      1\n1  b        B      3\n2  c        B      5\n3  a        C      2\n4  b        C      4\n5  c        C      6\n\nThe names of 'variable' and 'value' columns can be customized:\n\n>>> df.melt(id_vars=['A'], value_vars=['B'],\n...         var_name='myVarname', value_name='myValname')\n   A myVarname  myValname\n0  a         B          1\n1  b         B          3\n2  c         B          5\n\nOriginal index values can be kept around:\n\n>>> df.melt(id_vars=['A'], value_vars=['B', 'C'], ignore_index=False)\n   A variable  value\n0  a        B      1\n1  b        B      3\n2  c        B      5\n0  a        C      2\n1  b        C      4\n2  c        C      6\n\nIf you have multi-index columns:\n\n>>> df.columns = [list('ABC'), list('DEF')]\n>>> df\n   A  B  C\n   D  E  F\n0  a  1  2\n1  b  3  4\n2  c  5  6\n\n>>> df.melt(col_level=0, id_vars=['A'], value_vars=['B'])\n   A variable  value\n0  a        B      1\n1  b        B      3\n2  c        B      5\n\n>>> df.melt(id_vars=[('A', 'D')], value_vars=[('B', 'E')])\n  (A, D) variable_0 variable_1  value\n0      a          B          E      1\n1      b          B          E      3\n2      c          B          E      5"
  },
  {
    "symbol": "DataFrame.memory_usage",
    "signature": "(self, index: 'bool' = True, deep: 'bool' = False) -> 'Series'",
    "doc": "Return the memory usage of each column in bytes.\n\nThe memory usage can optionally include the contribution of\nthe index and elements of `object` dtype.\n\nThis value is displayed in `DataFrame.info` by default. This can be\nsuppressed by setting ``pandas.options.display.memory_usage`` to False.\n\nParameters\n----------\nindex : bool, default True\n    Specifies whether to include the memory usage of the DataFrame's\n    index in returned Series. If ``index=True``, the memory usage of\n    the index is the first item in the output.\ndeep : bool, default False\n    If True, introspect the data deeply by interrogating\n    `object` dtypes for system-level memory consumption, and include\n    it in the returned values.\n\nReturns\n-------\nSeries\n    A Series whose index is the original column names and whose values\n    is the memory usage of each column in bytes.\n\nSee Also\n--------\nnumpy.ndarray.nbytes : Total bytes consumed by the elements of an\n    ndarray.\nSeries.memory_usage : Bytes consumed by a Series.\nCategorical : Memory-efficient array for string values with\n    many repeated values.\nDataFrame.info : Concise summary of a DataFrame.\n\nNotes\n-----\nSee the :ref:`Frequently Asked Questions <df-memory-usage>` for more\ndetails.\n\nExamples\n--------\n>>> dtypes = ['int64', 'float64', 'complex128', 'object', 'bool']\n>>> data = dict([(t, np.ones(shape=5000, dtype=int).astype(t))\n...              for t in dtypes])\n>>> df = pd.DataFrame(data)\n>>> df.head()\n   int64  float64            complex128  object  bool\n0      1      1.0              1.0+0.0j       1  True\n1      1      1.0              1.0+0.0j       1  True\n2      1      1.0              1.0+0.0j       1  True\n3      1      1.0              1.0+0.0j       1  True\n4      1      1.0              1.0+0.0j       1  True\n\n>>> df.memory_usage()\nIndex           128\nint64         40000\nfloat64       40000\ncomplex128    80000\nobject        40000\nbool           5000\ndtype: int64\n\n>>> df.memory_usage(index=False)\nint64         40000\nfloat64       40000\ncomplex128    80000\nobject        40000\nbool           5000\ndtype: int64\n\nThe memory footprint of `object` dtype columns is ignored by default:\n\n>>> df.memory_usage(deep=True)\nIndex            128\nint64          40000\nfloat64        40000\ncomplex128     80000\nobject        180000\nbool            5000\ndtype: int64\n\nUse a Categorical for efficient storage of an object-dtype column with\nmany repeated values.\n\n>>> df['object'].astype('category').memory_usage(deep=True)\n5244"
  },
  {
    "symbol": "DataFrame.merge",
    "signature": "(self, right: 'DataFrame | Series', how: 'MergeHow' = 'inner', on: 'IndexLabel | AnyArrayLike | None' = None, left_on: 'IndexLabel | AnyArrayLike | None' = None, right_on: 'IndexLabel | AnyArrayLike | None' = None, left_index: 'bool' = False, right_index: 'bool' = False, sort: 'bool' = False, suffixes: 'Suffixes' = ('_x', '_y'), copy: 'bool | None' = None, indicator: 'str | bool' = False, validate: 'MergeValidate | None' = None) -> 'DataFrame'",
    "doc": "Merge DataFrame or named Series objects with a database-style join.\n\nA named Series object is treated as a DataFrame with a single named column.\n\nThe join is done on columns or indexes. If joining columns on\ncolumns, the DataFrame indexes *will be ignored*. Otherwise if joining indexes\non indexes or indexes on a column or columns, the index will be passed on.\nWhen performing a cross merge, no column specifications to merge on are\nallowed.\n\n.. warning::\n\n    If both key columns contain rows where the key is a null value, those\n    rows will be matched against each other. This is different from usual SQL\n    join behaviour and can lead to unexpected results.\n\nParameters\n----------\nright : DataFrame or named Series\n    Object to merge with.\nhow : {'left', 'right', 'outer', 'inner', 'cross'}, default 'inner'\n    Type of merge to be performed.\n\n    * left: use only keys from left frame, similar to a SQL left outer join;\n      preserve key order.\n    * right: use only keys from right frame, similar to a SQL right outer join;\n      preserve key order.\n    * outer: use union of keys from both frames, similar to a SQL full outer\n      join; sort keys lexicographically.\n    * inner: use intersection of keys from both frames, similar to a SQL inner\n      join; preserve the order of the left keys.\n    * cross: creates the cartesian product from both frames, preserves the order\n      of the left keys.\non : label or list\n    Column or index level names to join on. These must be found in both\n    DataFrames. If `on` is None and not merging on indexes then this defaults\n    to the intersection of the columns in both DataFrames.\nleft_on : label or list, or array-like\n    Column or index level names to join on in the left DataFrame. Can also\n    be an array or list of arrays of the length of the left DataFrame.\n    These arrays are treated as if they are columns.\nright_on : label or list, or array-like\n    Column or index level names to join on in the right DataFrame. Can also\n    be an array or list of arrays of the length of the right DataFrame.\n    These arrays are treated as if they are columns.\nleft_index : bool, default False\n    Use the index from the left DataFrame as the join key(s). If it is a\n    MultiIndex, the number of keys in the other DataFrame (either the index\n    or a number of columns) must match the number of levels.\nright_index : bool, default False\n    Use the index from the right DataFrame as the join key. Same caveats as\n    left_index.\nsort : bool, default False\n    Sort the join keys lexicographically in the result DataFrame. If False,\n    the order of the join keys depends on the join type (how keyword).\nsuffixes : list-like, default is (\"_x\", \"_y\")\n    A length-2 sequence where each element is optionally a string\n    indicating the suffix to add to overlapping column names in\n    `left` and `right` respectively. Pass a value of `None` instead\n    of a string to indicate that the column name from `left` or\n    `right` should be left as-is, with no suffix. At least one of the\n    values must not be None.\ncopy : bool, default True\n    If False, avoid copy if possible.\n\n    .. note::\n        The `copy` keyword will change behavior in pandas 3.0.\n        `Copy-on-Write\n        <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n        will be enabled by default, which means that all methods with a\n        `copy` keyword will use a lazy copy mechanism to defer the copy and\n        ignore the `copy` keyword. The `copy` keyword will be removed in a\n        future version of pandas.\n\n        You can already get the future behavior and improvements through\n        enabling copy on write ``pd.options.mode.copy_on_write = True``\nindicator : bool or str, default False\n    If True, adds a column to the output DataFrame called \"_merge\" with\n    information on the source of each row. The column can be given a different\n    name by providing a string argument. The column will have a Categorical\n    type with the value of \"left_only\" for observations whose merge key only\n    appears in the left DataFrame, \"right_only\" for observations\n    whose merge key only appears in the right DataFrame, and \"both\"\n    if the observation's merge key is found in both DataFrames.\n\nvalidate : str, optional\n    If specified, checks if merge is of specified type.\n\n    * \"one_to_one\" or \"1:1\": check if merge keys are unique in both\n      left and right datasets.\n    * \"one_to_many\" or \"1:m\": check if merge keys are unique in left\n      dataset.\n    * \"many_to_one\" or \"m:1\": check if merge keys are unique in right\n      dataset.\n    * \"many_to_many\" or \"m:m\": allowed, but does not result in checks.\n\nReturns\n-------\nDataFrame\n    A DataFrame of the two merged objects.\n\nSee Also\n--------\nmerge_ordered : Merge with optional filling/interpolation.\nmerge_asof : Merge on nearest keys.\nDataFrame.join : Similar method using indices.\n\nExamples\n--------\n>>> df1 = pd.DataFrame({'lkey': ['foo', 'bar', 'baz', 'foo'],\n...                     'value': [1, 2, 3, 5]})\n>>> df2 = pd.DataFrame({'rkey': ['foo', 'bar', 'baz', 'foo'],\n...                     'value': [5, 6, 7, 8]})\n>>> df1\n    lkey value\n0   foo      1\n1   bar      2\n2   baz      3\n3   foo      5\n>>> df2\n    rkey value\n0   foo      5\n1   bar      6\n2   baz      7\n3   foo      8\n\nMerge df1 and df2 on the lkey and rkey columns. The value columns have\nthe default suffixes, _x and _y, appended.\n\n>>> df1.merge(df2, left_on='lkey', right_on='rkey')\n  lkey  value_x rkey  value_y\n0  foo        1  foo        5\n1  foo        1  foo        8\n2  bar        2  bar        6\n3  baz        3  baz        7\n4  foo        5  foo        5\n5  foo        5  foo        8\n\nMerge DataFrames df1 and df2 with specified left and right suffixes\nappended to any overlapping columns.\n\n>>> df1.merge(df2, left_on='lkey', right_on='rkey',\n...           suffixes=('_left', '_right'))\n  lkey  value_left rkey  value_right\n0  foo           1  foo            5\n1  foo           1  foo            8\n2  bar           2  bar            6\n3  baz           3  baz            7\n4  foo           5  foo            5\n5  foo           5  foo            8\n\nMerge DataFrames df1 and df2, but raise an exception if the DataFrames have\nany overlapping columns.\n\n>>> df1.merge(df2, left_on='lkey', right_on='rkey', suffixes=(False, False))\nTraceback (most recent call last):\n...\nValueError: columns overlap but no suffix specified:\n    Index(['value'], dtype='object')\n\n>>> df1 = pd.DataFrame({'a': ['foo', 'bar'], 'b': [1, 2]})\n>>> df2 = pd.DataFrame({'a': ['foo', 'baz'], 'c': [3, 4]})\n>>> df1\n      a  b\n0   foo  1\n1   bar  2\n>>> df2\n      a  c\n0   foo  3\n1   baz  4\n\n>>> df1.merge(df2, how='inner', on='a')\n      a  b  c\n0   foo  1  3\n\n>>> df1.merge(df2, how='left', on='a')\n      a  b  c\n0   foo  1  3.0\n1   bar  2  NaN\n\n>>> df1 = pd.DataFrame({'left': ['foo', 'bar']})\n>>> df2 = pd.DataFrame({'right': [7, 8]})\n>>> df1\n    left\n0   foo\n1   bar\n>>> df2\n    right\n0   7\n1   8\n\n>>> df1.merge(df2, how='cross')\n   left  right\n0   foo      7\n1   foo      8\n2   bar      7\n3   bar      8"
  },
  {
    "symbol": "DataFrame.min",
    "signature": "(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs)",
    "doc": "Return the minimum of the values over the requested axis.\n\nIf you want the *index* of the minimum, use ``idxmin``. This is the equivalent of the ``numpy.ndarray`` method ``argmin``.\n\nParameters\n----------\naxis : {index (0), columns (1)}\n    Axis for the function to be applied on.\n    For `Series` this parameter is unused and defaults to 0.\n\n    For DataFrames, specifying ``axis=None`` will apply the aggregation\n    across both axes.\n\n    .. versionadded:: 2.0.0\n\nskipna : bool, default True\n    Exclude NA/null values when computing the result.\nnumeric_only : bool, default False\n    Include only float, int, boolean columns. Not implemented for Series.\n\n**kwargs\n    Additional keyword arguments to be passed to the function.\n\nReturns\n-------\nSeries or scalar\n\nSee Also\n--------\nSeries.sum : Return the sum.\nSeries.min : Return the minimum.\nSeries.max : Return the maximum.\nSeries.idxmin : Return the index of the minimum.\nSeries.idxmax : Return the index of the maximum.\nDataFrame.sum : Return the sum over the requested axis.\nDataFrame.min : Return the minimum over the requested axis.\nDataFrame.max : Return the maximum over the requested axis.\nDataFrame.idxmin : Return the index of the minimum over the requested axis.\nDataFrame.idxmax : Return the index of the maximum over the requested axis.\n\nExamples\n--------\n>>> idx = pd.MultiIndex.from_arrays([\n...     ['warm', 'warm', 'cold', 'cold'],\n...     ['dog', 'falcon', 'fish', 'spider']],\n...     names=['blooded', 'animal'])\n>>> s = pd.Series([4, 2, 0, 8], name='legs', index=idx)\n>>> s\nblooded  animal\nwarm     dog       4\n         falcon    2\ncold     fish      0\n         spider    8\nName: legs, dtype: int64\n\n>>> s.min()\n0"
  },
  {
    "symbol": "DataFrame.mod",
    "signature": "(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame'",
    "doc": "Get Modulo of dataframe and other, element-wise (binary operator `mod`).\n\nEquivalent to ``dataframe % other``, but with support to substitute a fill_value\nfor missing data in one of the inputs. With reverse version, `rmod`.\n\nAmong flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to\narithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.\n\nParameters\n----------\nother : scalar, sequence, Series, dict or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis : {0 or 'index', 1 or 'columns'}\n    Whether to compare by the index (0 or 'index') or columns.\n    (1 or 'columns'). For Series input, axis to match Series index on.\nlevel : int or label\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : float or None, default None\n    Fill existing missing (NaN) values, and any new element needed for\n    successful DataFrame alignment, with this value before computation.\n    If data in both corresponding DataFrame locations is missing\n    the result will be missing.\n\nReturns\n-------\nDataFrame\n    Result of the arithmetic operation.\n\nSee Also\n--------\nDataFrame.add : Add DataFrames.\nDataFrame.sub : Subtract DataFrames.\nDataFrame.mul : Multiply DataFrames.\nDataFrame.div : Divide DataFrames (float division).\nDataFrame.truediv : Divide DataFrames (float division).\nDataFrame.floordiv : Divide DataFrames (integer division).\nDataFrame.mod : Calculate modulo (remainder after division).\nDataFrame.pow : Calculate exponential power.\n\nNotes\n-----\nMismatched indices will be unioned together.\n\nExamples\n--------\n>>> df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n>>> df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\nAdd a scalar with operator version which return the same\nresults.\n\n>>> df + 1\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\n>>> df.add(1)\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\nDivide by constant with reverse version.\n\n>>> df.div(10)\n           angles  degrees\ncircle        0.0     36.0\ntriangle      0.3     18.0\nrectangle     0.4     36.0\n\n>>> df.rdiv(10)\n             angles   degrees\ncircle          inf  0.027778\ntriangle   3.333333  0.055556\nrectangle  2.500000  0.027778\n\nSubtract a list and Series by axis with operator version.\n\n>>> df - [1, 2]\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub([1, 2], axis='columns')\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),\n...        axis='index')\n           angles  degrees\ncircle         -1      359\ntriangle        2      179\nrectangle       3      359\n\nMultiply a dictionary by axis.\n\n>>> df.mul({'angles': 0, 'degrees': 2})\n            angles  degrees\ncircle           0      720\ntriangle         0      360\nrectangle        0      720\n\n>>> df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')\n            angles  degrees\ncircle           0        0\ntriangle         6      360\nrectangle       12     1080\n\nMultiply a DataFrame of different shape with operator version.\n\n>>> other = pd.DataFrame({'angles': [0, 3, 4]},\n...                      index=['circle', 'triangle', 'rectangle'])\n>>> other\n           angles\ncircle          0\ntriangle        3\nrectangle       4\n\n>>> df * other\n           angles  degrees\ncircle          0      NaN\ntriangle        9      NaN\nrectangle      16      NaN\n\n>>> df.mul(other, fill_value=0)\n           angles  degrees\ncircle          0      0.0\ntriangle        9      0.0\nrectangle      16      0.0\n\nDivide by a MultiIndex by level.\n\n>>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],\n...                              'degrees': [360, 180, 360, 360, 540, 720]},\n...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],\n...                                    ['circle', 'triangle', 'rectangle',\n...                                     'square', 'pentagon', 'hexagon']])\n>>> df_multindex\n             angles  degrees\nA circle          0      360\n  triangle        3      180\n  rectangle       4      360\nB square          4      360\n  pentagon        5      540\n  hexagon         6      720\n\n>>> df.div(df_multindex, level=1, fill_value=0)\n             angles  degrees\nA circle        NaN      1.0\n  triangle      1.0      1.0\n  rectangle     1.0      1.0\nB square        0.0      0.0\n  pentagon      0.0      0.0\n  hexagon       0.0      0.0"
  },
  {
    "symbol": "DataFrame.mode",
    "signature": "(self, axis: 'Axis' = 0, numeric_only: 'bool' = False, dropna: 'bool' = True) -> 'DataFrame'",
    "doc": "Get the mode(s) of each element along the selected axis.\n\nThe mode of a set of values is the value that appears most often.\nIt can be multiple values.\n\nParameters\n----------\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    The axis to iterate over while searching for the mode:\n\n    * 0 or 'index' : get mode of each column\n    * 1 or 'columns' : get mode of each row.\n\nnumeric_only : bool, default False\n    If True, only apply to numeric columns.\ndropna : bool, default True\n    Don't consider counts of NaN/NaT.\n\nReturns\n-------\nDataFrame\n    The modes of each column or row.\n\nSee Also\n--------\nSeries.mode : Return the highest frequency value in a Series.\nSeries.value_counts : Return the counts of values in a Series.\n\nExamples\n--------\n>>> df = pd.DataFrame([('bird', 2, 2),\n...                    ('mammal', 4, np.nan),\n...                    ('arthropod', 8, 0),\n...                    ('bird', 2, np.nan)],\n...                   index=('falcon', 'horse', 'spider', 'ostrich'),\n...                   columns=('species', 'legs', 'wings'))\n>>> df\n           species  legs  wings\nfalcon        bird     2    2.0\nhorse       mammal     4    NaN\nspider   arthropod     8    0.0\nostrich       bird     2    NaN\n\nBy default, missing values are not considered, and the mode of wings\nare both 0 and 2. Because the resulting DataFrame has two rows,\nthe second row of ``species`` and ``legs`` contains ``NaN``.\n\n>>> df.mode()\n  species  legs  wings\n0    bird   2.0    0.0\n1     NaN   NaN    2.0\n\nSetting ``dropna=False`` ``NaN`` values are considered and they can be\nthe mode (like for wings).\n\n>>> df.mode(dropna=False)\n  species  legs  wings\n0    bird     2    NaN\n\nSetting ``numeric_only=True``, only the mode of numeric columns is\ncomputed, and columns of other types are ignored.\n\n>>> df.mode(numeric_only=True)\n   legs  wings\n0   2.0    0.0\n1   NaN    2.0\n\nTo compute the mode over columns and not rows, use the axis parameter:\n\n>>> df.mode(axis='columns', numeric_only=True)\n           0    1\nfalcon   2.0  NaN\nhorse    4.0  NaN\nspider   0.0  8.0\nostrich  2.0  NaN"
  },
  {
    "symbol": "DataFrame.mul",
    "signature": "(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame'",
    "doc": "Get Multiplication of dataframe and other, element-wise (binary operator `mul`).\n\nEquivalent to ``dataframe * other``, but with support to substitute a fill_value\nfor missing data in one of the inputs. With reverse version, `rmul`.\n\nAmong flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to\narithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.\n\nParameters\n----------\nother : scalar, sequence, Series, dict or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis : {0 or 'index', 1 or 'columns'}\n    Whether to compare by the index (0 or 'index') or columns.\n    (1 or 'columns'). For Series input, axis to match Series index on.\nlevel : int or label\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : float or None, default None\n    Fill existing missing (NaN) values, and any new element needed for\n    successful DataFrame alignment, with this value before computation.\n    If data in both corresponding DataFrame locations is missing\n    the result will be missing.\n\nReturns\n-------\nDataFrame\n    Result of the arithmetic operation.\n\nSee Also\n--------\nDataFrame.add : Add DataFrames.\nDataFrame.sub : Subtract DataFrames.\nDataFrame.mul : Multiply DataFrames.\nDataFrame.div : Divide DataFrames (float division).\nDataFrame.truediv : Divide DataFrames (float division).\nDataFrame.floordiv : Divide DataFrames (integer division).\nDataFrame.mod : Calculate modulo (remainder after division).\nDataFrame.pow : Calculate exponential power.\n\nNotes\n-----\nMismatched indices will be unioned together.\n\nExamples\n--------\n>>> df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n>>> df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\nAdd a scalar with operator version which return the same\nresults.\n\n>>> df + 1\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\n>>> df.add(1)\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\nDivide by constant with reverse version.\n\n>>> df.div(10)\n           angles  degrees\ncircle        0.0     36.0\ntriangle      0.3     18.0\nrectangle     0.4     36.0\n\n>>> df.rdiv(10)\n             angles   degrees\ncircle          inf  0.027778\ntriangle   3.333333  0.055556\nrectangle  2.500000  0.027778\n\nSubtract a list and Series by axis with operator version.\n\n>>> df - [1, 2]\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub([1, 2], axis='columns')\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),\n...        axis='index')\n           angles  degrees\ncircle         -1      359\ntriangle        2      179\nrectangle       3      359\n\nMultiply a dictionary by axis.\n\n>>> df.mul({'angles': 0, 'degrees': 2})\n            angles  degrees\ncircle           0      720\ntriangle         0      360\nrectangle        0      720\n\n>>> df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')\n            angles  degrees\ncircle           0        0\ntriangle         6      360\nrectangle       12     1080\n\nMultiply a DataFrame of different shape with operator version.\n\n>>> other = pd.DataFrame({'angles': [0, 3, 4]},\n...                      index=['circle', 'triangle', 'rectangle'])\n>>> other\n           angles\ncircle          0\ntriangle        3\nrectangle       4\n\n>>> df * other\n           angles  degrees\ncircle          0      NaN\ntriangle        9      NaN\nrectangle      16      NaN\n\n>>> df.mul(other, fill_value=0)\n           angles  degrees\ncircle          0      0.0\ntriangle        9      0.0\nrectangle      16      0.0\n\nDivide by a MultiIndex by level.\n\n>>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],\n...                              'degrees': [360, 180, 360, 360, 540, 720]},\n...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],\n...                                    ['circle', 'triangle', 'rectangle',\n...                                     'square', 'pentagon', 'hexagon']])\n>>> df_multindex\n             angles  degrees\nA circle          0      360\n  triangle        3      180\n  rectangle       4      360\nB square          4      360\n  pentagon        5      540\n  hexagon         6      720\n\n>>> df.div(df_multindex, level=1, fill_value=0)\n             angles  degrees\nA circle        NaN      1.0\n  triangle      1.0      1.0\n  rectangle     1.0      1.0\nB square        0.0      0.0\n  pentagon      0.0      0.0\n  hexagon       0.0      0.0"
  },
  {
    "symbol": "DataFrame.multiply",
    "signature": "(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame'",
    "doc": "Get Multiplication of dataframe and other, element-wise (binary operator `mul`).\n\nEquivalent to ``dataframe * other``, but with support to substitute a fill_value\nfor missing data in one of the inputs. With reverse version, `rmul`.\n\nAmong flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to\narithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.\n\nParameters\n----------\nother : scalar, sequence, Series, dict or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis : {0 or 'index', 1 or 'columns'}\n    Whether to compare by the index (0 or 'index') or columns.\n    (1 or 'columns'). For Series input, axis to match Series index on.\nlevel : int or label\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : float or None, default None\n    Fill existing missing (NaN) values, and any new element needed for\n    successful DataFrame alignment, with this value before computation.\n    If data in both corresponding DataFrame locations is missing\n    the result will be missing.\n\nReturns\n-------\nDataFrame\n    Result of the arithmetic operation.\n\nSee Also\n--------\nDataFrame.add : Add DataFrames.\nDataFrame.sub : Subtract DataFrames.\nDataFrame.mul : Multiply DataFrames.\nDataFrame.div : Divide DataFrames (float division).\nDataFrame.truediv : Divide DataFrames (float division).\nDataFrame.floordiv : Divide DataFrames (integer division).\nDataFrame.mod : Calculate modulo (remainder after division).\nDataFrame.pow : Calculate exponential power.\n\nNotes\n-----\nMismatched indices will be unioned together.\n\nExamples\n--------\n>>> df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n>>> df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\nAdd a scalar with operator version which return the same\nresults.\n\n>>> df + 1\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\n>>> df.add(1)\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\nDivide by constant with reverse version.\n\n>>> df.div(10)\n           angles  degrees\ncircle        0.0     36.0\ntriangle      0.3     18.0\nrectangle     0.4     36.0\n\n>>> df.rdiv(10)\n             angles   degrees\ncircle          inf  0.027778\ntriangle   3.333333  0.055556\nrectangle  2.500000  0.027778\n\nSubtract a list and Series by axis with operator version.\n\n>>> df - [1, 2]\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub([1, 2], axis='columns')\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),\n...        axis='index')\n           angles  degrees\ncircle         -1      359\ntriangle        2      179\nrectangle       3      359\n\nMultiply a dictionary by axis.\n\n>>> df.mul({'angles': 0, 'degrees': 2})\n            angles  degrees\ncircle           0      720\ntriangle         0      360\nrectangle        0      720\n\n>>> df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')\n            angles  degrees\ncircle           0        0\ntriangle         6      360\nrectangle       12     1080\n\nMultiply a DataFrame of different shape with operator version.\n\n>>> other = pd.DataFrame({'angles': [0, 3, 4]},\n...                      index=['circle', 'triangle', 'rectangle'])\n>>> other\n           angles\ncircle          0\ntriangle        3\nrectangle       4\n\n>>> df * other\n           angles  degrees\ncircle          0      NaN\ntriangle        9      NaN\nrectangle      16      NaN\n\n>>> df.mul(other, fill_value=0)\n           angles  degrees\ncircle          0      0.0\ntriangle        9      0.0\nrectangle      16      0.0\n\nDivide by a MultiIndex by level.\n\n>>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],\n...                              'degrees': [360, 180, 360, 360, 540, 720]},\n...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],\n...                                    ['circle', 'triangle', 'rectangle',\n...                                     'square', 'pentagon', 'hexagon']])\n>>> df_multindex\n             angles  degrees\nA circle          0      360\n  triangle        3      180\n  rectangle       4      360\nB square          4      360\n  pentagon        5      540\n  hexagon         6      720\n\n>>> df.div(df_multindex, level=1, fill_value=0)\n             angles  degrees\nA circle        NaN      1.0\n  triangle      1.0      1.0\n  rectangle     1.0      1.0\nB square        0.0      0.0\n  pentagon      0.0      0.0\n  hexagon       0.0      0.0"
  },
  {
    "symbol": "DataFrame.ndim",
    "signature": "(property)",
    "doc": "\nReturn an int representing the number of axes / array dimensions.\n\nReturn 1 if Series. Otherwise return 2 if DataFrame.\n\nSee Also\n--------\nndarray.ndim : Number of array dimensions.\n\nExamples\n--------\n>>> s = pd.Series({'a': 1, 'b': 2, 'c': 3})\n>>> s.ndim\n1\n\n>>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n>>> df.ndim\n2\n"
  },
  {
    "symbol": "DataFrame.ne",
    "signature": "(self, other, axis: 'Axis' = 'columns', level=None) -> 'DataFrame'",
    "doc": "Get Not equal to of dataframe and other, element-wise (binary operator `ne`).\n\nAmong flexible wrappers (`eq`, `ne`, `le`, `lt`, `ge`, `gt`) to comparison\noperators.\n\nEquivalent to `==`, `!=`, `<=`, `<`, `>=`, `>` with support to choose axis\n(rows or columns) and level for comparison.\n\nParameters\n----------\nother : scalar, sequence, Series, or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis : {0 or 'index', 1 or 'columns'}, default 'columns'\n    Whether to compare by the index (0 or 'index') or columns\n    (1 or 'columns').\nlevel : int or label\n    Broadcast across a level, matching Index values on the passed\n    MultiIndex level.\n\nReturns\n-------\nDataFrame of bool\n    Result of the comparison.\n\nSee Also\n--------\nDataFrame.eq : Compare DataFrames for equality elementwise.\nDataFrame.ne : Compare DataFrames for inequality elementwise.\nDataFrame.le : Compare DataFrames for less than inequality\n    or equality elementwise.\nDataFrame.lt : Compare DataFrames for strictly less than\n    inequality elementwise.\nDataFrame.ge : Compare DataFrames for greater than inequality\n    or equality elementwise.\nDataFrame.gt : Compare DataFrames for strictly greater than\n    inequality elementwise.\n\nNotes\n-----\nMismatched indices will be unioned together.\n`NaN` values are considered different (i.e. `NaN` != `NaN`).\n\nExamples\n--------\n>>> df = pd.DataFrame({'cost': [250, 150, 100],\n...                    'revenue': [100, 250, 300]},\n...                   index=['A', 'B', 'C'])\n>>> df\n   cost  revenue\nA   250      100\nB   150      250\nC   100      300\n\nComparison with a scalar, using either the operator or method:\n\n>>> df == 100\n    cost  revenue\nA  False     True\nB  False    False\nC   True    False\n\n>>> df.eq(100)\n    cost  revenue\nA  False     True\nB  False    False\nC   True    False\n\nWhen `other` is a :class:`Series`, the columns of a DataFrame are aligned\nwith the index of `other` and broadcast:\n\n>>> df != pd.Series([100, 250], index=[\"cost\", \"revenue\"])\n    cost  revenue\nA   True     True\nB   True    False\nC  False     True\n\nUse the method to control the broadcast axis:\n\n>>> df.ne(pd.Series([100, 300], index=[\"A\", \"D\"]), axis='index')\n   cost  revenue\nA  True    False\nB  True     True\nC  True     True\nD  True     True\n\nWhen comparing to an arbitrary sequence, the number of columns must\nmatch the number elements in `other`:\n\n>>> df == [250, 100]\n    cost  revenue\nA   True     True\nB  False    False\nC  False    False\n\nUse the method to control the axis:\n\n>>> df.eq([250, 250, 100], axis='index')\n    cost  revenue\nA   True    False\nB  False     True\nC   True    False\n\nCompare to a DataFrame of different shape.\n\n>>> other = pd.DataFrame({'revenue': [300, 250, 100, 150]},\n...                      index=['A', 'B', 'C', 'D'])\n>>> other\n   revenue\nA      300\nB      250\nC      100\nD      150\n\n>>> df.gt(other)\n    cost  revenue\nA  False    False\nB  False    False\nC  False     True\nD  False    False\n\nCompare to a MultiIndex by level.\n\n>>> df_multindex = pd.DataFrame({'cost': [250, 150, 100, 150, 300, 220],\n...                              'revenue': [100, 250, 300, 200, 175, 225]},\n...                             index=[['Q1', 'Q1', 'Q1', 'Q2', 'Q2', 'Q2'],\n...                                    ['A', 'B', 'C', 'A', 'B', 'C']])\n>>> df_multindex\n      cost  revenue\nQ1 A   250      100\n   B   150      250\n   C   100      300\nQ2 A   150      200\n   B   300      175\n   C   220      225\n\n>>> df.le(df_multindex, level=1)\n       cost  revenue\nQ1 A   True     True\n   B   True     True\n   C   True     True\nQ2 A  False     True\n   B   True    False\n   C   True    False"
  },
  {
    "symbol": "DataFrame.nlargest",
    "signature": "(self, n: 'int', columns: 'IndexLabel', keep: 'NsmallestNlargestKeep' = 'first') -> 'DataFrame'",
    "doc": "Return the first `n` rows ordered by `columns` in descending order.\n\nReturn the first `n` rows with the largest values in `columns`, in\ndescending order. The columns that are not specified are returned as\nwell, but not used for ordering.\n\nThis method is equivalent to\n``df.sort_values(columns, ascending=False).head(n)``, but more\nperformant.\n\nParameters\n----------\nn : int\n    Number of rows to return.\ncolumns : label or list of labels\n    Column label(s) to order by.\nkeep : {'first', 'last', 'all'}, default 'first'\n    Where there are duplicate values:\n\n    - ``first`` : prioritize the first occurrence(s)\n    - ``last`` : prioritize the last occurrence(s)\n    - ``all`` : keep all the ties of the smallest item even if it means\n      selecting more than ``n`` items.\n\nReturns\n-------\nDataFrame\n    The first `n` rows ordered by the given columns in descending\n    order.\n\nSee Also\n--------\nDataFrame.nsmallest : Return the first `n` rows ordered by `columns` in\n    ascending order.\nDataFrame.sort_values : Sort DataFrame by the values.\nDataFrame.head : Return the first `n` rows without re-ordering.\n\nNotes\n-----\nThis function cannot be used with all column types. For example, when\nspecifying columns with `object` or `category` dtypes, ``TypeError`` is\nraised.\n\nExamples\n--------\n>>> df = pd.DataFrame({'population': [59000000, 65000000, 434000,\n...                                   434000, 434000, 337000, 11300,\n...                                   11300, 11300],\n...                    'GDP': [1937894, 2583560 , 12011, 4520, 12128,\n...                            17036, 182, 38, 311],\n...                    'alpha-2': [\"IT\", \"FR\", \"MT\", \"MV\", \"BN\",\n...                                \"IS\", \"NR\", \"TV\", \"AI\"]},\n...                   index=[\"Italy\", \"France\", \"Malta\",\n...                          \"Maldives\", \"Brunei\", \"Iceland\",\n...                          \"Nauru\", \"Tuvalu\", \"Anguilla\"])\n>>> df\n          population      GDP alpha-2\nItaly       59000000  1937894      IT\nFrance      65000000  2583560      FR\nMalta         434000    12011      MT\nMaldives      434000     4520      MV\nBrunei        434000    12128      BN\nIceland       337000    17036      IS\nNauru          11300      182      NR\nTuvalu         11300       38      TV\nAnguilla       11300      311      AI\n\nIn the following example, we will use ``nlargest`` to select the three\nrows having the largest values in column \"population\".\n\n>>> df.nlargest(3, 'population')\n        population      GDP alpha-2\nFrance    65000000  2583560      FR\nItaly     59000000  1937894      IT\nMalta       434000    12011      MT\n\nWhen using ``keep='last'``, ties are resolved in reverse order:\n\n>>> df.nlargest(3, 'population', keep='last')\n        population      GDP alpha-2\nFrance    65000000  2583560      FR\nItaly     59000000  1937894      IT\nBrunei      434000    12128      BN\n\nWhen using ``keep='all'``, the number of element kept can go beyond ``n``\nif there are duplicate values for the smallest element, all the\nties are kept:\n\n>>> df.nlargest(3, 'population', keep='all')\n          population      GDP alpha-2\nFrance      65000000  2583560      FR\nItaly       59000000  1937894      IT\nMalta         434000    12011      MT\nMaldives      434000     4520      MV\nBrunei        434000    12128      BN\n\nHowever, ``nlargest`` does not keep ``n`` distinct largest elements:\n\n>>> df.nlargest(5, 'population', keep='all')\n          population      GDP alpha-2\nFrance      65000000  2583560      FR\nItaly       59000000  1937894      IT\nMalta         434000    12011      MT\nMaldives      434000     4520      MV\nBrunei        434000    12128      BN\n\nTo order by the largest values in column \"population\" and then \"GDP\",\nwe can specify multiple columns like in the next example.\n\n>>> df.nlargest(3, ['population', 'GDP'])\n        population      GDP alpha-2\nFrance    65000000  2583560      FR\nItaly     59000000  1937894      IT\nBrunei      434000    12128      BN"
  },
  {
    "symbol": "DataFrame.notna",
    "signature": "(self) -> 'DataFrame'",
    "doc": "Detect existing (non-missing) values.\n\nReturn a boolean same-sized object indicating if the values are not NA.\nNon-missing values get mapped to True. Characters such as empty\nstrings ``''`` or :attr:`numpy.inf` are not considered NA values\n(unless you set ``pandas.options.mode.use_inf_as_na = True``).\nNA values, such as None or :attr:`numpy.NaN`, get mapped to False\nvalues.\n\nReturns\n-------\nDataFrame\n    Mask of bool values for each element in DataFrame that\n    indicates whether an element is not an NA value.\n\nSee Also\n--------\nDataFrame.notnull : Alias of notna.\nDataFrame.isna : Boolean inverse of notna.\nDataFrame.dropna : Omit axes labels with missing values.\nnotna : Top-level notna.\n\nExamples\n--------\nShow which entries in a DataFrame are not NA.\n\n>>> df = pd.DataFrame(dict(age=[5, 6, np.nan],\n...                        born=[pd.NaT, pd.Timestamp('1939-05-27'),\n...                              pd.Timestamp('1940-04-25')],\n...                        name=['Alfred', 'Batman', ''],\n...                        toy=[None, 'Batmobile', 'Joker']))\n>>> df\n   age       born    name        toy\n0  5.0        NaT  Alfred       None\n1  6.0 1939-05-27  Batman  Batmobile\n2  NaN 1940-04-25              Joker\n\n>>> df.notna()\n     age   born  name    toy\n0   True  False  True  False\n1   True   True  True   True\n2  False   True  True   True\n\nShow which entries in a Series are not NA.\n\n>>> ser = pd.Series([5, 6, np.nan])\n>>> ser\n0    5.0\n1    6.0\n2    NaN\ndtype: float64\n\n>>> ser.notna()\n0     True\n1     True\n2    False\ndtype: bool"
  },
  {
    "symbol": "DataFrame.notnull",
    "signature": "(self) -> 'DataFrame'",
    "doc": "DataFrame.notnull is an alias for DataFrame.notna.\n\nDetect existing (non-missing) values.\n\nReturn a boolean same-sized object indicating if the values are not NA.\nNon-missing values get mapped to True. Characters such as empty\nstrings ``''`` or :attr:`numpy.inf` are not considered NA values\n(unless you set ``pandas.options.mode.use_inf_as_na = True``).\nNA values, such as None or :attr:`numpy.NaN`, get mapped to False\nvalues.\n\nReturns\n-------\nDataFrame\n    Mask of bool values for each element in DataFrame that\n    indicates whether an element is not an NA value.\n\nSee Also\n--------\nDataFrame.notnull : Alias of notna.\nDataFrame.isna : Boolean inverse of notna.\nDataFrame.dropna : Omit axes labels with missing values.\nnotna : Top-level notna.\n\nExamples\n--------\nShow which entries in a DataFrame are not NA.\n\n>>> df = pd.DataFrame(dict(age=[5, 6, np.nan],\n...                        born=[pd.NaT, pd.Timestamp('1939-05-27'),\n...                              pd.Timestamp('1940-04-25')],\n...                        name=['Alfred', 'Batman', ''],\n...                        toy=[None, 'Batmobile', 'Joker']))\n>>> df\n   age       born    name        toy\n0  5.0        NaT  Alfred       None\n1  6.0 1939-05-27  Batman  Batmobile\n2  NaN 1940-04-25              Joker\n\n>>> df.notna()\n     age   born  name    toy\n0   True  False  True  False\n1   True   True  True   True\n2  False   True  True   True\n\nShow which entries in a Series are not NA.\n\n>>> ser = pd.Series([5, 6, np.nan])\n>>> ser\n0    5.0\n1    6.0\n2    NaN\ndtype: float64\n\n>>> ser.notna()\n0     True\n1     True\n2    False\ndtype: bool"
  },
  {
    "symbol": "DataFrame.nsmallest",
    "signature": "(self, n: 'int', columns: 'IndexLabel', keep: 'NsmallestNlargestKeep' = 'first') -> 'DataFrame'",
    "doc": "Return the first `n` rows ordered by `columns` in ascending order.\n\nReturn the first `n` rows with the smallest values in `columns`, in\nascending order. The columns that are not specified are returned as\nwell, but not used for ordering.\n\nThis method is equivalent to\n``df.sort_values(columns, ascending=True).head(n)``, but more\nperformant.\n\nParameters\n----------\nn : int\n    Number of items to retrieve.\ncolumns : list or str\n    Column name or names to order by.\nkeep : {'first', 'last', 'all'}, default 'first'\n    Where there are duplicate values:\n\n    - ``first`` : take the first occurrence.\n    - ``last`` : take the last occurrence.\n    - ``all`` : keep all the ties of the largest item even if it means\n      selecting more than ``n`` items.\n\nReturns\n-------\nDataFrame\n\nSee Also\n--------\nDataFrame.nlargest : Return the first `n` rows ordered by `columns` in\n    descending order.\nDataFrame.sort_values : Sort DataFrame by the values.\nDataFrame.head : Return the first `n` rows without re-ordering.\n\nExamples\n--------\n>>> df = pd.DataFrame({'population': [59000000, 65000000, 434000,\n...                                   434000, 434000, 337000, 337000,\n...                                   11300, 11300],\n...                    'GDP': [1937894, 2583560 , 12011, 4520, 12128,\n...                            17036, 182, 38, 311],\n...                    'alpha-2': [\"IT\", \"FR\", \"MT\", \"MV\", \"BN\",\n...                                \"IS\", \"NR\", \"TV\", \"AI\"]},\n...                   index=[\"Italy\", \"France\", \"Malta\",\n...                          \"Maldives\", \"Brunei\", \"Iceland\",\n...                          \"Nauru\", \"Tuvalu\", \"Anguilla\"])\n>>> df\n          population      GDP alpha-2\nItaly       59000000  1937894      IT\nFrance      65000000  2583560      FR\nMalta         434000    12011      MT\nMaldives      434000     4520      MV\nBrunei        434000    12128      BN\nIceland       337000    17036      IS\nNauru         337000      182      NR\nTuvalu         11300       38      TV\nAnguilla       11300      311      AI\n\nIn the following example, we will use ``nsmallest`` to select the\nthree rows having the smallest values in column \"population\".\n\n>>> df.nsmallest(3, 'population')\n          population    GDP alpha-2\nTuvalu         11300     38      TV\nAnguilla       11300    311      AI\nIceland       337000  17036      IS\n\nWhen using ``keep='last'``, ties are resolved in reverse order:\n\n>>> df.nsmallest(3, 'population', keep='last')\n          population  GDP alpha-2\nAnguilla       11300  311      AI\nTuvalu         11300   38      TV\nNauru         337000  182      NR\n\nWhen using ``keep='all'``, the number of element kept can go beyond ``n``\nif there are duplicate values for the largest element, all the\nties are kept.\n\n>>> df.nsmallest(3, 'population', keep='all')\n          population    GDP alpha-2\nTuvalu         11300     38      TV\nAnguilla       11300    311      AI\nIceland       337000  17036      IS\nNauru         337000    182      NR\n\nHowever, ``nsmallest`` does not keep ``n`` distinct\nsmallest elements:\n\n>>> df.nsmallest(4, 'population', keep='all')\n          population    GDP alpha-2\nTuvalu         11300     38      TV\nAnguilla       11300    311      AI\nIceland       337000  17036      IS\nNauru         337000    182      NR\n\nTo order by the smallest values in column \"population\" and then \"GDP\", we can\nspecify multiple columns like in the next example.\n\n>>> df.nsmallest(3, ['population', 'GDP'])\n          population  GDP alpha-2\nTuvalu         11300   38      TV\nAnguilla       11300  311      AI\nNauru         337000  182      NR"
  },
  {
    "symbol": "DataFrame.nunique",
    "signature": "(self, axis: 'Axis' = 0, dropna: 'bool' = True) -> 'Series'",
    "doc": "Count number of distinct elements in specified axis.\n\nReturn Series with number of distinct elements. Can ignore NaN\nvalues.\n\nParameters\n----------\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    The axis to use. 0 or 'index' for row-wise, 1 or 'columns' for\n    column-wise.\ndropna : bool, default True\n    Don't include NaN in the counts.\n\nReturns\n-------\nSeries\n\nSee Also\n--------\nSeries.nunique: Method nunique for Series.\nDataFrame.count: Count non-NA cells for each column or row.\n\nExamples\n--------\n>>> df = pd.DataFrame({'A': [4, 5, 6], 'B': [4, 1, 1]})\n>>> df.nunique()\nA    3\nB    2\ndtype: int64\n\n>>> df.nunique(axis=1)\n0    1\n1    2\n2    2\ndtype: int64"
  },
  {
    "symbol": "DataFrame.pad",
    "signature": "(self, *, axis: 'None | Axis' = None, inplace: 'bool_t' = False, limit: 'None | int' = None, downcast: 'dict | None | lib.NoDefault' = <no_default>) -> 'Self | None'",
    "doc": "Fill NA/NaN values by propagating the last valid observation to next valid.\n\n.. deprecated:: 2.0\n\n    Series/DataFrame.pad is deprecated. Use Series/DataFrame.ffill instead.\n\nReturns\n-------\nSeries/DataFrame or None\n    Object with missing values filled or None if ``inplace=True``.\n\nExamples\n--------\nPlease see examples for :meth:`DataFrame.ffill` or :meth:`Series.ffill`."
  },
  {
    "symbol": "DataFrame.pct_change",
    "signature": "(self, periods: 'int' = 1, fill_method: 'FillnaOptions | None | lib.NoDefault' = <no_default>, limit: 'int | None | lib.NoDefault' = <no_default>, freq=None, **kwargs) -> 'Self'",
    "doc": "Fractional change between the current and a prior element.\n\nComputes the fractional change from the immediately previous row by\ndefault. This is useful in comparing the fraction of change in a time\nseries of elements.\n\n.. note::\n\n    Despite the name of this method, it calculates fractional change\n    (also known as per unit change or relative change) and not\n    percentage change. If you need the percentage change, multiply\n    these values by 100.\n\nParameters\n----------\nperiods : int, default 1\n    Periods to shift for forming percent change.\nfill_method : {'backfill', 'bfill', 'pad', 'ffill', None}, default 'pad'\n    How to handle NAs **before** computing percent changes.\n\n    .. deprecated:: 2.1\n        All options of `fill_method` are deprecated except `fill_method=None`.\n\nlimit : int, default None\n    The number of consecutive NAs to fill before stopping.\n\n    .. deprecated:: 2.1\n\nfreq : DateOffset, timedelta, or str, optional\n    Increment to use from time series API (e.g. 'ME' or BDay()).\n**kwargs\n    Additional keyword arguments are passed into\n    `DataFrame.shift` or `Series.shift`.\n\nReturns\n-------\nSeries or DataFrame\n    The same type as the calling object.\n\nSee Also\n--------\nSeries.diff : Compute the difference of two elements in a Series.\nDataFrame.diff : Compute the difference of two elements in a DataFrame.\nSeries.shift : Shift the index by some number of periods.\nDataFrame.shift : Shift the index by some number of periods.\n\nExamples\n--------\n**Series**\n\n>>> s = pd.Series([90, 91, 85])\n>>> s\n0    90\n1    91\n2    85\ndtype: int64\n\n>>> s.pct_change()\n0         NaN\n1    0.011111\n2   -0.065934\ndtype: float64\n\n>>> s.pct_change(periods=2)\n0         NaN\n1         NaN\n2   -0.055556\ndtype: float64\n\nSee the percentage change in a Series where filling NAs with last\nvalid observation forward to next valid.\n\n>>> s = pd.Series([90, 91, None, 85])\n>>> s\n0    90.0\n1    91.0\n2     NaN\n3    85.0\ndtype: float64\n\n>>> s.ffill().pct_change()\n0         NaN\n1    0.011111\n2    0.000000\n3   -0.065934\ndtype: float64\n\n**DataFrame**\n\nPercentage change in French franc, Deutsche Mark, and Italian lira from\n1980-01-01 to 1980-03-01.\n\n>>> df = pd.DataFrame({\n...     'FR': [4.0405, 4.0963, 4.3149],\n...     'GR': [1.7246, 1.7482, 1.8519],\n...     'IT': [804.74, 810.01, 860.13]},\n...     index=['1980-01-01', '1980-02-01', '1980-03-01'])\n>>> df\n                FR      GR      IT\n1980-01-01  4.0405  1.7246  804.74\n1980-02-01  4.0963  1.7482  810.01\n1980-03-01  4.3149  1.8519  860.13\n\n>>> df.pct_change()\n                  FR        GR        IT\n1980-01-01       NaN       NaN       NaN\n1980-02-01  0.013810  0.013684  0.006549\n1980-03-01  0.053365  0.059318  0.061876\n\nPercentage of change in GOOG and APPL stock volume. Shows computing\nthe percentage change between columns.\n\n>>> df = pd.DataFrame({\n...     '2016': [1769950, 30586265],\n...     '2015': [1500923, 40912316],\n...     '2014': [1371819, 41403351]},\n...     index=['GOOG', 'APPL'])\n>>> df\n          2016      2015      2014\nGOOG   1769950   1500923   1371819\nAPPL  30586265  40912316  41403351\n\n>>> df.pct_change(axis='columns', periods=-1)\n          2016      2015  2014\nGOOG  0.179241  0.094112   NaN\nAPPL -0.252395 -0.011860   NaN"
  },
  {
    "symbol": "DataFrame.pipe",
    "signature": "(self, func: 'Callable[..., T] | tuple[Callable[..., T], str]', *args, **kwargs) -> 'T'",
    "doc": "Apply chainable functions that expect Series or DataFrames.\n\nParameters\n----------\nfunc : function\n    Function to apply to the Series/DataFrame.\n    ``args``, and ``kwargs`` are passed into ``func``.\n    Alternatively a ``(callable, data_keyword)`` tuple where\n    ``data_keyword`` is a string indicating the keyword of\n    ``callable`` that expects the Series/DataFrame.\n*args : iterable, optional\n    Positional arguments passed into ``func``.\n**kwargs : mapping, optional\n    A dictionary of keyword arguments passed into ``func``.\n\nReturns\n-------\nthe return type of ``func``.\n\nSee Also\n--------\nDataFrame.apply : Apply a function along input axis of DataFrame.\nDataFrame.map : Apply a function elementwise on a whole DataFrame.\nSeries.map : Apply a mapping correspondence on a\n    :class:`~pandas.Series`.\n\nNotes\n-----\nUse ``.pipe`` when chaining together functions that expect\nSeries, DataFrames or GroupBy objects.\n\nExamples\n--------\nConstructing a income DataFrame from a dictionary.\n\n>>> data = [[8000, 1000], [9500, np.nan], [5000, 2000]]\n>>> df = pd.DataFrame(data, columns=['Salary', 'Others'])\n>>> df\n   Salary  Others\n0    8000  1000.0\n1    9500     NaN\n2    5000  2000.0\n\nFunctions that perform tax reductions on an income DataFrame.\n\n>>> def subtract_federal_tax(df):\n...     return df * 0.9\n>>> def subtract_state_tax(df, rate):\n...     return df * (1 - rate)\n>>> def subtract_national_insurance(df, rate, rate_increase):\n...     new_rate = rate + rate_increase\n...     return df * (1 - new_rate)\n\nInstead of writing\n\n>>> subtract_national_insurance(\n...     subtract_state_tax(subtract_federal_tax(df), rate=0.12),\n...     rate=0.05,\n...     rate_increase=0.02)  # doctest: +SKIP\n\nYou can write\n\n>>> (\n...     df.pipe(subtract_federal_tax)\n...     .pipe(subtract_state_tax, rate=0.12)\n...     .pipe(subtract_national_insurance, rate=0.05, rate_increase=0.02)\n... )\n    Salary   Others\n0  5892.48   736.56\n1  6997.32      NaN\n2  3682.80  1473.12\n\nIf you have a function that takes the data as (say) the second\nargument, pass a tuple indicating which keyword expects the\ndata. For example, suppose ``national_insurance`` takes its data as ``df``\nin the second argument:\n\n>>> def subtract_national_insurance(rate, df, rate_increase):\n...     new_rate = rate + rate_increase\n...     return df * (1 - new_rate)\n>>> (\n...     df.pipe(subtract_federal_tax)\n...     .pipe(subtract_state_tax, rate=0.12)\n...     .pipe(\n...         (subtract_national_insurance, 'df'),\n...         rate=0.05,\n...         rate_increase=0.02\n...     )\n... )\n    Salary   Others\n0  5892.48   736.56\n1  6997.32      NaN\n2  3682.80  1473.12"
  },
  {
    "symbol": "DataFrame.pivot",
    "signature": "(self, *, columns, index=<no_default>, values=<no_default>) -> 'DataFrame'",
    "doc": "Return reshaped DataFrame organized by given index / column values.\n\nReshape data (produce a \"pivot\" table) based on column values. Uses\nunique values from specified `index` / `columns` to form axes of the\nresulting DataFrame. This function does not support data\naggregation, multiple values will result in a MultiIndex in the\ncolumns. See the :ref:`User Guide <reshaping>` for more on reshaping.\n\nParameters\n----------\ncolumns : str or object or a list of str\n    Column to use to make new frame's columns.\nindex : str or object or a list of str, optional\n    Column to use to make new frame's index. If not given, uses existing index.\nvalues : str, object or a list of the previous, optional\n    Column(s) to use for populating new frame's values. If not\n    specified, all remaining columns will be used and the result will\n    have hierarchically indexed columns.\n\nReturns\n-------\nDataFrame\n    Returns reshaped DataFrame.\n\nRaises\n------\nValueError:\n    When there are any `index`, `columns` combinations with multiple\n    values. `DataFrame.pivot_table` when you need to aggregate.\n\nSee Also\n--------\nDataFrame.pivot_table : Generalization of pivot that can handle\n    duplicate values for one index/column pair.\nDataFrame.unstack : Pivot based on the index values instead of a\n    column.\nwide_to_long : Wide panel to long format. Less flexible but more\n    user-friendly than melt.\n\nNotes\n-----\nFor finer-tuned control, see hierarchical indexing documentation along\nwith the related stack/unstack methods.\n\nReference :ref:`the user guide <reshaping.pivot>` for more examples.\n\nExamples\n--------\n>>> df = pd.DataFrame({'foo': ['one', 'one', 'one', 'two', 'two',\n...                            'two'],\n...                    'bar': ['A', 'B', 'C', 'A', 'B', 'C'],\n...                    'baz': [1, 2, 3, 4, 5, 6],\n...                    'zoo': ['x', 'y', 'z', 'q', 'w', 't']})\n>>> df\n    foo   bar  baz  zoo\n0   one   A    1    x\n1   one   B    2    y\n2   one   C    3    z\n3   two   A    4    q\n4   two   B    5    w\n5   two   C    6    t\n\n>>> df.pivot(index='foo', columns='bar', values='baz')\nbar  A   B   C\nfoo\none  1   2   3\ntwo  4   5   6\n\n>>> df.pivot(index='foo', columns='bar')['baz']\nbar  A   B   C\nfoo\none  1   2   3\ntwo  4   5   6\n\n>>> df.pivot(index='foo', columns='bar', values=['baz', 'zoo'])\n      baz       zoo\nbar   A  B  C   A  B  C\nfoo\none   1  2  3   x  y  z\ntwo   4  5  6   q  w  t\n\nYou could also assign a list of column names or a list of index names.\n\n>>> df = pd.DataFrame({\n...        \"lev1\": [1, 1, 1, 2, 2, 2],\n...        \"lev2\": [1, 1, 2, 1, 1, 2],\n...        \"lev3\": [1, 2, 1, 2, 1, 2],\n...        \"lev4\": [1, 2, 3, 4, 5, 6],\n...        \"values\": [0, 1, 2, 3, 4, 5]})\n>>> df\n    lev1 lev2 lev3 lev4 values\n0   1    1    1    1    0\n1   1    1    2    2    1\n2   1    2    1    3    2\n3   2    1    2    4    3\n4   2    1    1    5    4\n5   2    2    2    6    5\n\n>>> df.pivot(index=\"lev1\", columns=[\"lev2\", \"lev3\"], values=\"values\")\nlev2    1         2\nlev3    1    2    1    2\nlev1\n1     0.0  1.0  2.0  NaN\n2     4.0  3.0  NaN  5.0\n\n>>> df.pivot(index=[\"lev1\", \"lev2\"], columns=[\"lev3\"], values=\"values\")\n      lev3    1    2\nlev1  lev2\n   1     1  0.0  1.0\n         2  2.0  NaN\n   2     1  4.0  3.0\n         2  NaN  5.0\n\nA ValueError is raised if there are any duplicates.\n\n>>> df = pd.DataFrame({\"foo\": ['one', 'one', 'two', 'two'],\n...                    \"bar\": ['A', 'A', 'B', 'C'],\n...                    \"baz\": [1, 2, 3, 4]})\n>>> df\n   foo bar  baz\n0  one   A    1\n1  one   A    2\n2  two   B    3\n3  two   C    4\n\nNotice that the first two rows are the same for our `index`\nand `columns` arguments.\n\n>>> df.pivot(index='foo', columns='bar', values='baz')\nTraceback (most recent call last):\n   ...\nValueError: Index contains duplicate entries, cannot reshape"
  },
  {
    "symbol": "DataFrame.pivot_table",
    "signature": "(self, values=None, index=None, columns=None, aggfunc: 'AggFuncType' = 'mean', fill_value=None, margins: 'bool' = False, dropna: 'bool' = True, margins_name: 'Level' = 'All', observed: 'bool | lib.NoDefault' = <no_default>, sort: 'bool' = True) -> 'DataFrame'",
    "doc": "Create a spreadsheet-style pivot table as a DataFrame.\n\nThe levels in the pivot table will be stored in MultiIndex objects\n(hierarchical indexes) on the index and columns of the result DataFrame.\n\nParameters\n----------\nvalues : list-like or scalar, optional\n    Column or columns to aggregate.\nindex : column, Grouper, array, or list of the previous\n    Keys to group by on the pivot table index. If a list is passed,\n    it can contain any of the other types (except list). If an array is\n    passed, it must be the same length as the data and will be used in\n    the same manner as column values.\ncolumns : column, Grouper, array, or list of the previous\n    Keys to group by on the pivot table column. If a list is passed,\n    it can contain any of the other types (except list). If an array is\n    passed, it must be the same length as the data and will be used in\n    the same manner as column values.\naggfunc : function, list of functions, dict, default \"mean\"\n    If a list of functions is passed, the resulting pivot table will have\n    hierarchical columns whose top level are the function names\n    (inferred from the function objects themselves).\n    If a dict is passed, the key is column to aggregate and the value is\n    function or list of functions. If ``margin=True``, aggfunc will be\n    used to calculate the partial aggregates.\nfill_value : scalar, default None\n    Value to replace missing values with (in the resulting pivot table,\n    after aggregation).\nmargins : bool, default False\n    If ``margins=True``, special ``All`` columns and rows\n    will be added with partial group aggregates across the categories\n    on the rows and columns.\ndropna : bool, default True\n    Do not include columns whose entries are all NaN. If True,\n    rows with a NaN value in any column will be omitted before\n    computing margins.\nmargins_name : str, default 'All'\n    Name of the row / column that will contain the totals\n    when margins is True.\nobserved : bool, default False\n    This only applies if any of the groupers are Categoricals.\n    If True: only show observed values for categorical groupers.\n    If False: show all values for categorical groupers.\n\n    .. deprecated:: 2.2.0\n\n        The default value of ``False`` is deprecated and will change to\n        ``True`` in a future version of pandas.\n\nsort : bool, default True\n    Specifies if the result should be sorted.\n\n    .. versionadded:: 1.3.0\n\nReturns\n-------\nDataFrame\n    An Excel style pivot table.\n\nSee Also\n--------\nDataFrame.pivot : Pivot without aggregation that can handle\n    non-numeric data.\nDataFrame.melt: Unpivot a DataFrame from wide to long format,\n    optionally leaving identifiers set.\nwide_to_long : Wide panel to long format. Less flexible but more\n    user-friendly than melt.\n\nNotes\n-----\nReference :ref:`the user guide <reshaping.pivot>` for more examples.\n\nExamples\n--------\n>>> df = pd.DataFrame({\"A\": [\"foo\", \"foo\", \"foo\", \"foo\", \"foo\",\n...                          \"bar\", \"bar\", \"bar\", \"bar\"],\n...                    \"B\": [\"one\", \"one\", \"one\", \"two\", \"two\",\n...                          \"one\", \"one\", \"two\", \"two\"],\n...                    \"C\": [\"small\", \"large\", \"large\", \"small\",\n...                          \"small\", \"large\", \"small\", \"small\",\n...                          \"large\"],\n...                    \"D\": [1, 2, 2, 3, 3, 4, 5, 6, 7],\n...                    \"E\": [2, 4, 5, 5, 6, 6, 8, 9, 9]})\n>>> df\n     A    B      C  D  E\n0  foo  one  small  1  2\n1  foo  one  large  2  4\n2  foo  one  large  2  5\n3  foo  two  small  3  5\n4  foo  two  small  3  6\n5  bar  one  large  4  6\n6  bar  one  small  5  8\n7  bar  two  small  6  9\n8  bar  two  large  7  9\n\nThis first example aggregates values by taking the sum.\n\n>>> table = pd.pivot_table(df, values='D', index=['A', 'B'],\n...                        columns=['C'], aggfunc=\"sum\")\n>>> table\nC        large  small\nA   B\nbar one    4.0    5.0\n    two    7.0    6.0\nfoo one    4.0    1.0\n    two    NaN    6.0\n\nWe can also fill missing values using the `fill_value` parameter.\n\n>>> table = pd.pivot_table(df, values='D', index=['A', 'B'],\n...                        columns=['C'], aggfunc=\"sum\", fill_value=0)\n>>> table\nC        large  small\nA   B\nbar one      4      5\n    two      7      6\nfoo one      4      1\n    two      0      6\n\nThe next example aggregates by taking the mean across multiple columns.\n\n>>> table = pd.pivot_table(df, values=['D', 'E'], index=['A', 'C'],\n...                        aggfunc={'D': \"mean\", 'E': \"mean\"})\n>>> table\n                D         E\nA   C\nbar large  5.500000  7.500000\n    small  5.500000  8.500000\nfoo large  2.000000  4.500000\n    small  2.333333  4.333333\n\nWe can also calculate multiple types of aggregations for any given\nvalue column.\n\n>>> table = pd.pivot_table(df, values=['D', 'E'], index=['A', 'C'],\n...                        aggfunc={'D': \"mean\",\n...                                 'E': [\"min\", \"max\", \"mean\"]})\n>>> table\n                  D   E\n               mean max      mean  min\nA   C\nbar large  5.500000   9  7.500000    6\n    small  5.500000   9  8.500000    8\nfoo large  2.000000   5  4.500000    4\n    small  2.333333   6  4.333333    2"
  },
  {
    "symbol": "DataFrame.pop",
    "signature": "(self, item: 'Hashable') -> 'Series'",
    "doc": "Return item and drop from frame. Raise KeyError if not found.\n\nParameters\n----------\nitem : label\n    Label of column to be popped.\n\nReturns\n-------\nSeries\n\nExamples\n--------\n>>> df = pd.DataFrame([('falcon', 'bird', 389.0),\n...                    ('parrot', 'bird', 24.0),\n...                    ('lion', 'mammal', 80.5),\n...                    ('monkey', 'mammal', np.nan)],\n...                   columns=('name', 'class', 'max_speed'))\n>>> df\n     name   class  max_speed\n0  falcon    bird      389.0\n1  parrot    bird       24.0\n2    lion  mammal       80.5\n3  monkey  mammal        NaN\n\n>>> df.pop('class')\n0      bird\n1      bird\n2    mammal\n3    mammal\nName: class, dtype: object\n\n>>> df\n     name  max_speed\n0  falcon      389.0\n1  parrot       24.0\n2    lion       80.5\n3  monkey        NaN"
  },
  {
    "symbol": "DataFrame.pow",
    "signature": "(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame'",
    "doc": "Get Exponential power of dataframe and other, element-wise (binary operator `pow`).\n\nEquivalent to ``dataframe ** other``, but with support to substitute a fill_value\nfor missing data in one of the inputs. With reverse version, `rpow`.\n\nAmong flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to\narithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.\n\nParameters\n----------\nother : scalar, sequence, Series, dict or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis : {0 or 'index', 1 or 'columns'}\n    Whether to compare by the index (0 or 'index') or columns.\n    (1 or 'columns'). For Series input, axis to match Series index on.\nlevel : int or label\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : float or None, default None\n    Fill existing missing (NaN) values, and any new element needed for\n    successful DataFrame alignment, with this value before computation.\n    If data in both corresponding DataFrame locations is missing\n    the result will be missing.\n\nReturns\n-------\nDataFrame\n    Result of the arithmetic operation.\n\nSee Also\n--------\nDataFrame.add : Add DataFrames.\nDataFrame.sub : Subtract DataFrames.\nDataFrame.mul : Multiply DataFrames.\nDataFrame.div : Divide DataFrames (float division).\nDataFrame.truediv : Divide DataFrames (float division).\nDataFrame.floordiv : Divide DataFrames (integer division).\nDataFrame.mod : Calculate modulo (remainder after division).\nDataFrame.pow : Calculate exponential power.\n\nNotes\n-----\nMismatched indices will be unioned together.\n\nExamples\n--------\n>>> df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n>>> df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\nAdd a scalar with operator version which return the same\nresults.\n\n>>> df + 1\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\n>>> df.add(1)\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\nDivide by constant with reverse version.\n\n>>> df.div(10)\n           angles  degrees\ncircle        0.0     36.0\ntriangle      0.3     18.0\nrectangle     0.4     36.0\n\n>>> df.rdiv(10)\n             angles   degrees\ncircle          inf  0.027778\ntriangle   3.333333  0.055556\nrectangle  2.500000  0.027778\n\nSubtract a list and Series by axis with operator version.\n\n>>> df - [1, 2]\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub([1, 2], axis='columns')\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),\n...        axis='index')\n           angles  degrees\ncircle         -1      359\ntriangle        2      179\nrectangle       3      359\n\nMultiply a dictionary by axis.\n\n>>> df.mul({'angles': 0, 'degrees': 2})\n            angles  degrees\ncircle           0      720\ntriangle         0      360\nrectangle        0      720\n\n>>> df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')\n            angles  degrees\ncircle           0        0\ntriangle         6      360\nrectangle       12     1080\n\nMultiply a DataFrame of different shape with operator version.\n\n>>> other = pd.DataFrame({'angles': [0, 3, 4]},\n...                      index=['circle', 'triangle', 'rectangle'])\n>>> other\n           angles\ncircle          0\ntriangle        3\nrectangle       4\n\n>>> df * other\n           angles  degrees\ncircle          0      NaN\ntriangle        9      NaN\nrectangle      16      NaN\n\n>>> df.mul(other, fill_value=0)\n           angles  degrees\ncircle          0      0.0\ntriangle        9      0.0\nrectangle      16      0.0\n\nDivide by a MultiIndex by level.\n\n>>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],\n...                              'degrees': [360, 180, 360, 360, 540, 720]},\n...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],\n...                                    ['circle', 'triangle', 'rectangle',\n...                                     'square', 'pentagon', 'hexagon']])\n>>> df_multindex\n             angles  degrees\nA circle          0      360\n  triangle        3      180\n  rectangle       4      360\nB square          4      360\n  pentagon        5      540\n  hexagon         6      720\n\n>>> df.div(df_multindex, level=1, fill_value=0)\n             angles  degrees\nA circle        NaN      1.0\n  triangle      1.0      1.0\n  rectangle     1.0      1.0\nB square        0.0      0.0\n  pentagon      0.0      0.0\n  hexagon       0.0      0.0"
  },
  {
    "symbol": "DataFrame.prod",
    "signature": "(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, min_count: 'int' = 0, **kwargs)",
    "doc": "Return the product of the values over the requested axis.\n\nParameters\n----------\naxis : {index (0), columns (1)}\n    Axis for the function to be applied on.\n    For `Series` this parameter is unused and defaults to 0.\n\n    .. warning::\n\n        The behavior of DataFrame.prod with ``axis=None`` is deprecated,\n        in a future version this will reduce over both axes and return a scalar\n        To retain the old behavior, pass axis=0 (or do not pass axis).\n\n    .. versionadded:: 2.0.0\n\nskipna : bool, default True\n    Exclude NA/null values when computing the result.\nnumeric_only : bool, default False\n    Include only float, int, boolean columns. Not implemented for Series.\n\nmin_count : int, default 0\n    The required number of valid values to perform the operation. If fewer than\n    ``min_count`` non-NA values are present the result will be NA.\n**kwargs\n    Additional keyword arguments to be passed to the function.\n\nReturns\n-------\nSeries or scalar\n\nSee Also\n--------\nSeries.sum : Return the sum.\nSeries.min : Return the minimum.\nSeries.max : Return the maximum.\nSeries.idxmin : Return the index of the minimum.\nSeries.idxmax : Return the index of the maximum.\nDataFrame.sum : Return the sum over the requested axis.\nDataFrame.min : Return the minimum over the requested axis.\nDataFrame.max : Return the maximum over the requested axis.\nDataFrame.idxmin : Return the index of the minimum over the requested axis.\nDataFrame.idxmax : Return the index of the maximum over the requested axis.\n\nExamples\n--------\nBy default, the product of an empty or all-NA Series is ``1``\n\n>>> pd.Series([], dtype=\"float64\").prod()\n1.0\n\nThis can be controlled with the ``min_count`` parameter\n\n>>> pd.Series([], dtype=\"float64\").prod(min_count=1)\nnan\n\nThanks to the ``skipna`` parameter, ``min_count`` handles all-NA and\nempty series identically.\n\n>>> pd.Series([np.nan]).prod()\n1.0\n\n>>> pd.Series([np.nan]).prod(min_count=1)\nnan"
  },
  {
    "symbol": "DataFrame.product",
    "signature": "(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, min_count: 'int' = 0, **kwargs)",
    "doc": "Return the product of the values over the requested axis.\n\nParameters\n----------\naxis : {index (0), columns (1)}\n    Axis for the function to be applied on.\n    For `Series` this parameter is unused and defaults to 0.\n\n    .. warning::\n\n        The behavior of DataFrame.prod with ``axis=None`` is deprecated,\n        in a future version this will reduce over both axes and return a scalar\n        To retain the old behavior, pass axis=0 (or do not pass axis).\n\n    .. versionadded:: 2.0.0\n\nskipna : bool, default True\n    Exclude NA/null values when computing the result.\nnumeric_only : bool, default False\n    Include only float, int, boolean columns. Not implemented for Series.\n\nmin_count : int, default 0\n    The required number of valid values to perform the operation. If fewer than\n    ``min_count`` non-NA values are present the result will be NA.\n**kwargs\n    Additional keyword arguments to be passed to the function.\n\nReturns\n-------\nSeries or scalar\n\nSee Also\n--------\nSeries.sum : Return the sum.\nSeries.min : Return the minimum.\nSeries.max : Return the maximum.\nSeries.idxmin : Return the index of the minimum.\nSeries.idxmax : Return the index of the maximum.\nDataFrame.sum : Return the sum over the requested axis.\nDataFrame.min : Return the minimum over the requested axis.\nDataFrame.max : Return the maximum over the requested axis.\nDataFrame.idxmin : Return the index of the minimum over the requested axis.\nDataFrame.idxmax : Return the index of the maximum over the requested axis.\n\nExamples\n--------\nBy default, the product of an empty or all-NA Series is ``1``\n\n>>> pd.Series([], dtype=\"float64\").prod()\n1.0\n\nThis can be controlled with the ``min_count`` parameter\n\n>>> pd.Series([], dtype=\"float64\").prod(min_count=1)\nnan\n\nThanks to the ``skipna`` parameter, ``min_count`` handles all-NA and\nempty series identically.\n\n>>> pd.Series([np.nan]).prod()\n1.0\n\n>>> pd.Series([np.nan]).prod(min_count=1)\nnan"
  },
  {
    "symbol": "DataFrame.quantile",
    "signature": "(self, q: 'float | AnyArrayLike | Sequence[float]' = 0.5, axis: 'Axis' = 0, numeric_only: 'bool' = False, interpolation: 'QuantileInterpolation' = 'linear', method: \"Literal['single', 'table']\" = 'single') -> 'Series | DataFrame'",
    "doc": "Return values at the given quantile over requested axis.\n\nParameters\n----------\nq : float or array-like, default 0.5 (50% quantile)\n    Value between 0 <= q <= 1, the quantile(s) to compute.\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    Equals 0 or 'index' for row-wise, 1 or 'columns' for column-wise.\nnumeric_only : bool, default False\n    Include only `float`, `int` or `boolean` data.\n\n    .. versionchanged:: 2.0.0\n        The default value of ``numeric_only`` is now ``False``.\n\ninterpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n    This optional parameter specifies the interpolation method to use,\n    when the desired quantile lies between two data points `i` and `j`:\n\n    * linear: `i + (j - i) * fraction`, where `fraction` is the\n      fractional part of the index surrounded by `i` and `j`.\n    * lower: `i`.\n    * higher: `j`.\n    * nearest: `i` or `j` whichever is nearest.\n    * midpoint: (`i` + `j`) / 2.\nmethod : {'single', 'table'}, default 'single'\n    Whether to compute quantiles per-column ('single') or over all columns\n    ('table'). When 'table', the only allowed interpolation methods are\n    'nearest', 'lower', and 'higher'.\n\nReturns\n-------\nSeries or DataFrame\n\n    If ``q`` is an array, a DataFrame will be returned where the\n      index is ``q``, the columns are the columns of self, and the\n      values are the quantiles.\n    If ``q`` is a float, a Series will be returned where the\n      index is the columns of self and the values are the quantiles.\n\nSee Also\n--------\ncore.window.rolling.Rolling.quantile: Rolling quantile.\nnumpy.percentile: Numpy function to compute the percentile.\n\nExamples\n--------\n>>> df = pd.DataFrame(np.array([[1, 1], [2, 10], [3, 100], [4, 100]]),\n...                   columns=['a', 'b'])\n>>> df.quantile(.1)\na    1.3\nb    3.7\nName: 0.1, dtype: float64\n>>> df.quantile([.1, .5])\n       a     b\n0.1  1.3   3.7\n0.5  2.5  55.0\n\nSpecifying `method='table'` will compute the quantile over all columns.\n\n>>> df.quantile(.1, method=\"table\", interpolation=\"nearest\")\na    1\nb    1\nName: 0.1, dtype: int64\n>>> df.quantile([.1, .5], method=\"table\", interpolation=\"nearest\")\n     a    b\n0.1  1    1\n0.5  3  100\n\nSpecifying `numeric_only=False` will also compute the quantile of\ndatetime and timedelta data.\n\n>>> df = pd.DataFrame({'A': [1, 2],\n...                    'B': [pd.Timestamp('2010'),\n...                          pd.Timestamp('2011')],\n...                    'C': [pd.Timedelta('1 days'),\n...                          pd.Timedelta('2 days')]})\n>>> df.quantile(0.5, numeric_only=False)\nA                    1.5\nB    2010-07-02 12:00:00\nC        1 days 12:00:00\nName: 0.5, dtype: object"
  },
  {
    "symbol": "DataFrame.query",
    "signature": "(self, expr: 'str', *, inplace: 'bool' = False, **kwargs) -> 'DataFrame | None'",
    "doc": "Query the columns of a DataFrame with a boolean expression.\n\nParameters\n----------\nexpr : str\n    The query string to evaluate.\n\n    You can refer to variables\n    in the environment by prefixing them with an '@' character like\n    ``@a + b``.\n\n    You can refer to column names that are not valid Python variable names\n    by surrounding them in backticks. Thus, column names containing spaces\n    or punctuations (besides underscores) or starting with digits must be\n    surrounded by backticks. (For example, a column named \"Area (cm^2)\" would\n    be referenced as ```Area (cm^2)```). Column names which are Python keywords\n    (like \"list\", \"for\", \"import\", etc) cannot be used.\n\n    For example, if one of your columns is called ``a a`` and you want\n    to sum it with ``b``, your query should be ```a a` + b``.\n\ninplace : bool\n    Whether to modify the DataFrame rather than creating a new one.\n**kwargs\n    See the documentation for :func:`eval` for complete details\n    on the keyword arguments accepted by :meth:`DataFrame.query`.\n\nReturns\n-------\nDataFrame or None\n    DataFrame resulting from the provided query expression or\n    None if ``inplace=True``.\n\nSee Also\n--------\neval : Evaluate a string describing operations on\n    DataFrame columns.\nDataFrame.eval : Evaluate a string describing operations on\n    DataFrame columns.\n\nNotes\n-----\nThe result of the evaluation of this expression is first passed to\n:attr:`DataFrame.loc` and if that fails because of a\nmultidimensional key (e.g., a DataFrame) then the result will be passed\nto :meth:`DataFrame.__getitem__`.\n\nThis method uses the top-level :func:`eval` function to\nevaluate the passed query.\n\nThe :meth:`~pandas.DataFrame.query` method uses a slightly\nmodified Python syntax by default. For example, the ``&`` and ``|``\n(bitwise) operators have the precedence of their boolean cousins,\n:keyword:`and` and :keyword:`or`. This *is* syntactically valid Python,\nhowever the semantics are different.\n\nYou can change the semantics of the expression by passing the keyword\nargument ``parser='python'``. This enforces the same semantics as\nevaluation in Python space. Likewise, you can pass ``engine='python'``\nto evaluate an expression using Python itself as a backend. This is not\nrecommended as it is inefficient compared to using ``numexpr`` as the\nengine.\n\nThe :attr:`DataFrame.index` and\n:attr:`DataFrame.columns` attributes of the\n:class:`~pandas.DataFrame` instance are placed in the query namespace\nby default, which allows you to treat both the index and columns of the\nframe as a column in the frame.\nThe identifier ``index`` is used for the frame index; you can also\nuse the name of the index to identify it in a query. Please note that\nPython keywords may not be used as identifiers.\n\nFor further details and examples see the ``query`` documentation in\n:ref:`indexing <indexing.query>`.\n\n*Backtick quoted variables*\n\nBacktick quoted variables are parsed as literal Python code and\nare converted internally to a Python valid identifier.\nThis can lead to the following problems.\n\nDuring parsing a number of disallowed characters inside the backtick\nquoted string are replaced by strings that are allowed as a Python identifier.\nThese characters include all operators in Python, the space character, the\nquestion mark, the exclamation mark, the dollar sign, and the euro sign.\nFor other characters that fall outside the ASCII range (U+0001..U+007F)\nand those that are not further specified in PEP 3131,\nthe query parser will raise an error.\nThis excludes whitespace different than the space character,\nbut also the hashtag (as it is used for comments) and the backtick\nitself (backtick can also not be escaped).\n\nIn a special case, quotes that make a pair around a backtick can\nconfuse the parser.\nFor example, ```it's` > `that's``` will raise an error,\nas it forms a quoted string (``'s > `that'``) with a backtick inside.\n\nSee also the Python documentation about lexical analysis\n(https://docs.python.org/3/reference/lexical_analysis.html)\nin combination with the source code in :mod:`pandas.core.computation.parsing`.\n\nExamples\n--------\n>>> df = pd.DataFrame({'A': range(1, 6),\n...                    'B': range(10, 0, -2),\n...                    'C C': range(10, 5, -1)})\n>>> df\n   A   B  C C\n0  1  10   10\n1  2   8    9\n2  3   6    8\n3  4   4    7\n4  5   2    6\n>>> df.query('A > B')\n   A  B  C C\n4  5  2    6\n\nThe previous expression is equivalent to\n\n>>> df[df.A > df.B]\n   A  B  C C\n4  5  2    6\n\nFor columns with spaces in their name, you can use backtick quoting.\n\n>>> df.query('B == `C C`')\n   A   B  C C\n0  1  10   10\n\nThe previous expression is equivalent to\n\n>>> df[df.B == df['C C']]\n   A   B  C C\n0  1  10   10"
  },
  {
    "symbol": "DataFrame.radd",
    "signature": "(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame'",
    "doc": "Get Addition of dataframe and other, element-wise (binary operator `radd`).\n\nEquivalent to ``other + dataframe``, but with support to substitute a fill_value\nfor missing data in one of the inputs. With reverse version, `add`.\n\nAmong flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to\narithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.\n\nParameters\n----------\nother : scalar, sequence, Series, dict or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis : {0 or 'index', 1 or 'columns'}\n    Whether to compare by the index (0 or 'index') or columns.\n    (1 or 'columns'). For Series input, axis to match Series index on.\nlevel : int or label\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : float or None, default None\n    Fill existing missing (NaN) values, and any new element needed for\n    successful DataFrame alignment, with this value before computation.\n    If data in both corresponding DataFrame locations is missing\n    the result will be missing.\n\nReturns\n-------\nDataFrame\n    Result of the arithmetic operation.\n\nSee Also\n--------\nDataFrame.add : Add DataFrames.\nDataFrame.sub : Subtract DataFrames.\nDataFrame.mul : Multiply DataFrames.\nDataFrame.div : Divide DataFrames (float division).\nDataFrame.truediv : Divide DataFrames (float division).\nDataFrame.floordiv : Divide DataFrames (integer division).\nDataFrame.mod : Calculate modulo (remainder after division).\nDataFrame.pow : Calculate exponential power.\n\nNotes\n-----\nMismatched indices will be unioned together.\n\nExamples\n--------\n>>> df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n>>> df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\nAdd a scalar with operator version which return the same\nresults.\n\n>>> df + 1\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\n>>> df.add(1)\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\nDivide by constant with reverse version.\n\n>>> df.div(10)\n           angles  degrees\ncircle        0.0     36.0\ntriangle      0.3     18.0\nrectangle     0.4     36.0\n\n>>> df.rdiv(10)\n             angles   degrees\ncircle          inf  0.027778\ntriangle   3.333333  0.055556\nrectangle  2.500000  0.027778\n\nSubtract a list and Series by axis with operator version.\n\n>>> df - [1, 2]\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub([1, 2], axis='columns')\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),\n...        axis='index')\n           angles  degrees\ncircle         -1      359\ntriangle        2      179\nrectangle       3      359\n\nMultiply a dictionary by axis.\n\n>>> df.mul({'angles': 0, 'degrees': 2})\n            angles  degrees\ncircle           0      720\ntriangle         0      360\nrectangle        0      720\n\n>>> df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')\n            angles  degrees\ncircle           0        0\ntriangle         6      360\nrectangle       12     1080\n\nMultiply a DataFrame of different shape with operator version.\n\n>>> other = pd.DataFrame({'angles': [0, 3, 4]},\n...                      index=['circle', 'triangle', 'rectangle'])\n>>> other\n           angles\ncircle          0\ntriangle        3\nrectangle       4\n\n>>> df * other\n           angles  degrees\ncircle          0      NaN\ntriangle        9      NaN\nrectangle      16      NaN\n\n>>> df.mul(other, fill_value=0)\n           angles  degrees\ncircle          0      0.0\ntriangle        9      0.0\nrectangle      16      0.0\n\nDivide by a MultiIndex by level.\n\n>>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],\n...                              'degrees': [360, 180, 360, 360, 540, 720]},\n...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],\n...                                    ['circle', 'triangle', 'rectangle',\n...                                     'square', 'pentagon', 'hexagon']])\n>>> df_multindex\n             angles  degrees\nA circle          0      360\n  triangle        3      180\n  rectangle       4      360\nB square          4      360\n  pentagon        5      540\n  hexagon         6      720\n\n>>> df.div(df_multindex, level=1, fill_value=0)\n             angles  degrees\nA circle        NaN      1.0\n  triangle      1.0      1.0\n  rectangle     1.0      1.0\nB square        0.0      0.0\n  pentagon      0.0      0.0\n  hexagon       0.0      0.0"
  },
  {
    "symbol": "DataFrame.rank",
    "signature": "(self, axis: 'Axis' = 0, method: \"Literal['average', 'min', 'max', 'first', 'dense']\" = 'average', numeric_only: 'bool_t' = False, na_option: \"Literal['keep', 'top', 'bottom']\" = 'keep', ascending: 'bool_t' = True, pct: 'bool_t' = False) -> 'Self'",
    "doc": "Compute numerical data ranks (1 through n) along axis.\n\nBy default, equal values are assigned a rank that is the average of the\nranks of those values.\n\nParameters\n----------\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    Index to direct ranking.\n    For `Series` this parameter is unused and defaults to 0.\nmethod : {'average', 'min', 'max', 'first', 'dense'}, default 'average'\n    How to rank the group of records that have the same value (i.e. ties):\n\n    * average: average rank of the group\n    * min: lowest rank in the group\n    * max: highest rank in the group\n    * first: ranks assigned in order they appear in the array\n    * dense: like 'min', but rank always increases by 1 between groups.\n\nnumeric_only : bool, default False\n    For DataFrame objects, rank only numeric columns if set to True.\n\n    .. versionchanged:: 2.0.0\n        The default value of ``numeric_only`` is now ``False``.\n\nna_option : {'keep', 'top', 'bottom'}, default 'keep'\n    How to rank NaN values:\n\n    * keep: assign NaN rank to NaN values\n    * top: assign lowest rank to NaN values\n    * bottom: assign highest rank to NaN values\n\nascending : bool, default True\n    Whether or not the elements should be ranked in ascending order.\npct : bool, default False\n    Whether or not to display the returned rankings in percentile\n    form.\n\nReturns\n-------\nsame type as caller\n    Return a Series or DataFrame with data ranks as values.\n\nSee Also\n--------\ncore.groupby.DataFrameGroupBy.rank : Rank of values within each group.\ncore.groupby.SeriesGroupBy.rank : Rank of values within each group.\n\nExamples\n--------\n>>> df = pd.DataFrame(data={'Animal': ['cat', 'penguin', 'dog',\n...                                    'spider', 'snake'],\n...                         'Number_legs': [4, 2, 4, 8, np.nan]})\n>>> df\n    Animal  Number_legs\n0      cat          4.0\n1  penguin          2.0\n2      dog          4.0\n3   spider          8.0\n4    snake          NaN\n\nTies are assigned the mean of the ranks (by default) for the group.\n\n>>> s = pd.Series(range(5), index=list(\"abcde\"))\n>>> s[\"d\"] = s[\"b\"]\n>>> s.rank()\na    1.0\nb    2.5\nc    4.0\nd    2.5\ne    5.0\ndtype: float64\n\nThe following example shows how the method behaves with the above\nparameters:\n\n* default_rank: this is the default behaviour obtained without using\n  any parameter.\n* max_rank: setting ``method = 'max'`` the records that have the\n  same values are ranked using the highest rank (e.g.: since 'cat'\n  and 'dog' are both in the 2nd and 3rd position, rank 3 is assigned.)\n* NA_bottom: choosing ``na_option = 'bottom'``, if there are records\n  with NaN values they are placed at the bottom of the ranking.\n* pct_rank: when setting ``pct = True``, the ranking is expressed as\n  percentile rank.\n\n>>> df['default_rank'] = df['Number_legs'].rank()\n>>> df['max_rank'] = df['Number_legs'].rank(method='max')\n>>> df['NA_bottom'] = df['Number_legs'].rank(na_option='bottom')\n>>> df['pct_rank'] = df['Number_legs'].rank(pct=True)\n>>> df\n    Animal  Number_legs  default_rank  max_rank  NA_bottom  pct_rank\n0      cat          4.0           2.5       3.0        2.5     0.625\n1  penguin          2.0           1.0       1.0        1.0     0.250\n2      dog          4.0           2.5       3.0        2.5     0.625\n3   spider          8.0           4.0       4.0        4.0     1.000\n4    snake          NaN           NaN       NaN        5.0       NaN"
  },
  {
    "symbol": "DataFrame.rdiv",
    "signature": "(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame'",
    "doc": "Get Floating division of dataframe and other, element-wise (binary operator `rtruediv`).\n\nEquivalent to ``other / dataframe``, but with support to substitute a fill_value\nfor missing data in one of the inputs. With reverse version, `truediv`.\n\nAmong flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to\narithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.\n\nParameters\n----------\nother : scalar, sequence, Series, dict or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis : {0 or 'index', 1 or 'columns'}\n    Whether to compare by the index (0 or 'index') or columns.\n    (1 or 'columns'). For Series input, axis to match Series index on.\nlevel : int or label\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : float or None, default None\n    Fill existing missing (NaN) values, and any new element needed for\n    successful DataFrame alignment, with this value before computation.\n    If data in both corresponding DataFrame locations is missing\n    the result will be missing.\n\nReturns\n-------\nDataFrame\n    Result of the arithmetic operation.\n\nSee Also\n--------\nDataFrame.add : Add DataFrames.\nDataFrame.sub : Subtract DataFrames.\nDataFrame.mul : Multiply DataFrames.\nDataFrame.div : Divide DataFrames (float division).\nDataFrame.truediv : Divide DataFrames (float division).\nDataFrame.floordiv : Divide DataFrames (integer division).\nDataFrame.mod : Calculate modulo (remainder after division).\nDataFrame.pow : Calculate exponential power.\n\nNotes\n-----\nMismatched indices will be unioned together.\n\nExamples\n--------\n>>> df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n>>> df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\nAdd a scalar with operator version which return the same\nresults.\n\n>>> df + 1\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\n>>> df.add(1)\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\nDivide by constant with reverse version.\n\n>>> df.div(10)\n           angles  degrees\ncircle        0.0     36.0\ntriangle      0.3     18.0\nrectangle     0.4     36.0\n\n>>> df.rdiv(10)\n             angles   degrees\ncircle          inf  0.027778\ntriangle   3.333333  0.055556\nrectangle  2.500000  0.027778\n\nSubtract a list and Series by axis with operator version.\n\n>>> df - [1, 2]\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub([1, 2], axis='columns')\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),\n...        axis='index')\n           angles  degrees\ncircle         -1      359\ntriangle        2      179\nrectangle       3      359\n\nMultiply a dictionary by axis.\n\n>>> df.mul({'angles': 0, 'degrees': 2})\n            angles  degrees\ncircle           0      720\ntriangle         0      360\nrectangle        0      720\n\n>>> df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')\n            angles  degrees\ncircle           0        0\ntriangle         6      360\nrectangle       12     1080\n\nMultiply a DataFrame of different shape with operator version.\n\n>>> other = pd.DataFrame({'angles': [0, 3, 4]},\n...                      index=['circle', 'triangle', 'rectangle'])\n>>> other\n           angles\ncircle          0\ntriangle        3\nrectangle       4\n\n>>> df * other\n           angles  degrees\ncircle          0      NaN\ntriangle        9      NaN\nrectangle      16      NaN\n\n>>> df.mul(other, fill_value=0)\n           angles  degrees\ncircle          0      0.0\ntriangle        9      0.0\nrectangle      16      0.0\n\nDivide by a MultiIndex by level.\n\n>>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],\n...                              'degrees': [360, 180, 360, 360, 540, 720]},\n...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],\n...                                    ['circle', 'triangle', 'rectangle',\n...                                     'square', 'pentagon', 'hexagon']])\n>>> df_multindex\n             angles  degrees\nA circle          0      360\n  triangle        3      180\n  rectangle       4      360\nB square          4      360\n  pentagon        5      540\n  hexagon         6      720\n\n>>> df.div(df_multindex, level=1, fill_value=0)\n             angles  degrees\nA circle        NaN      1.0\n  triangle      1.0      1.0\n  rectangle     1.0      1.0\nB square        0.0      0.0\n  pentagon      0.0      0.0\n  hexagon       0.0      0.0"
  },
  {
    "symbol": "DataFrame.reindex",
    "signature": "(self, labels=None, *, index=None, columns=None, axis: 'Axis | None' = None, method: 'ReindexMethod | None' = None, copy: 'bool | None' = None, level: 'Level | None' = None, fill_value: 'Scalar | None' = nan, limit: 'int | None' = None, tolerance=None) -> 'DataFrame'",
    "doc": "Conform DataFrame to new index with optional filling logic.\n\nPlaces NA/NaN in locations having no value in the previous index. A new object\nis produced unless the new index is equivalent to the current one and\n``copy=False``.\n\nParameters\n----------\n\nlabels : array-like, optional\n    New labels / index to conform the axis specified by 'axis' to.\nindex : array-like, optional\n    New labels for the index. Preferably an Index object to avoid\n    duplicating data.\ncolumns : array-like, optional\n    New labels for the columns. Preferably an Index object to avoid\n    duplicating data.\naxis : int or str, optional\n    Axis to target. Can be either the axis name ('index', 'columns')\n    or number (0, 1).\nmethod : {None, 'backfill'/'bfill', 'pad'/'ffill', 'nearest'}\n    Method to use for filling holes in reindexed DataFrame.\n    Please note: this is only applicable to DataFrames/Series with a\n    monotonically increasing/decreasing index.\n\n    * None (default): don't fill gaps\n    * pad / ffill: Propagate last valid observation forward to next\n      valid.\n    * backfill / bfill: Use next valid observation to fill gap.\n    * nearest: Use nearest valid observations to fill gap.\n\ncopy : bool, default True\n    Return a new object, even if the passed indexes are the same.\n\n    .. note::\n        The `copy` keyword will change behavior in pandas 3.0.\n        `Copy-on-Write\n        <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n        will be enabled by default, which means that all methods with a\n        `copy` keyword will use a lazy copy mechanism to defer the copy and\n        ignore the `copy` keyword. The `copy` keyword will be removed in a\n        future version of pandas.\n\n        You can already get the future behavior and improvements through\n        enabling copy on write ``pd.options.mode.copy_on_write = True``\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : scalar, default np.nan\n    Value to use for missing values. Defaults to NaN, but can be any\n    \"compatible\" value.\nlimit : int, default None\n    Maximum number of consecutive elements to forward or backward fill.\ntolerance : optional\n    Maximum distance between original and new labels for inexact\n    matches. The values of the index at the matching locations most\n    satisfy the equation ``abs(index[indexer] - target) <= tolerance``.\n\n    Tolerance may be a scalar value, which applies the same tolerance\n    to all values, or list-like, which applies variable tolerance per\n    element. List-like includes list, tuple, array, Series, and must be\n    the same size as the index and its dtype must exactly match the\n    index's type.\n\nReturns\n-------\nDataFrame with changed index.\n\nSee Also\n--------\nDataFrame.set_index : Set row labels.\nDataFrame.reset_index : Remove row labels or move them to new columns.\nDataFrame.reindex_like : Change to same indices as other DataFrame.\n\nExamples\n--------\n``DataFrame.reindex`` supports two calling conventions\n\n* ``(index=index_labels, columns=column_labels, ...)``\n* ``(labels, axis={'index', 'columns'}, ...)``\n\nWe *highly* recommend using keyword arguments to clarify your\nintent.\n\nCreate a dataframe with some fictional data.\n\n>>> index = ['Firefox', 'Chrome', 'Safari', 'IE10', 'Konqueror']\n>>> df = pd.DataFrame({'http_status': [200, 200, 404, 404, 301],\n...                   'response_time': [0.04, 0.02, 0.07, 0.08, 1.0]},\n...                   index=index)\n>>> df\n           http_status  response_time\nFirefox            200           0.04\nChrome             200           0.02\nSafari             404           0.07\nIE10               404           0.08\nKonqueror          301           1.00\n\nCreate a new index and reindex the dataframe. By default\nvalues in the new index that do not have corresponding\nrecords in the dataframe are assigned ``NaN``.\n\n>>> new_index = ['Safari', 'Iceweasel', 'Comodo Dragon', 'IE10',\n...              'Chrome']\n>>> df.reindex(new_index)\n               http_status  response_time\nSafari               404.0           0.07\nIceweasel              NaN            NaN\nComodo Dragon          NaN            NaN\nIE10                 404.0           0.08\nChrome               200.0           0.02\n\nWe can fill in the missing values by passing a value to\nthe keyword ``fill_value``. Because the index is not monotonically\nincreasing or decreasing, we cannot use arguments to the keyword\n``method`` to fill the ``NaN`` values.\n\n>>> df.reindex(new_index, fill_value=0)\n               http_status  response_time\nSafari                 404           0.07\nIceweasel                0           0.00\nComodo Dragon            0           0.00\nIE10                   404           0.08\nChrome                 200           0.02\n\n>>> df.reindex(new_index, fill_value='missing')\n              http_status response_time\nSafari                404          0.07\nIceweasel         missing       missing\nComodo Dragon     missing       missing\nIE10                  404          0.08\nChrome                200          0.02\n\nWe can also reindex the columns.\n\n>>> df.reindex(columns=['http_status', 'user_agent'])\n           http_status  user_agent\nFirefox            200         NaN\nChrome             200         NaN\nSafari             404         NaN\nIE10               404         NaN\nKonqueror          301         NaN\n\nOr we can use \"axis-style\" keyword arguments\n\n>>> df.reindex(['http_status', 'user_agent'], axis=\"columns\")\n           http_status  user_agent\nFirefox            200         NaN\nChrome             200         NaN\nSafari             404         NaN\nIE10               404         NaN\nKonqueror          301         NaN\n\nTo further illustrate the filling functionality in\n``reindex``, we will create a dataframe with a\nmonotonically increasing index (for example, a sequence\nof dates).\n\n>>> date_index = pd.date_range('1/1/2010', periods=6, freq='D')\n>>> df2 = pd.DataFrame({\"prices\": [100, 101, np.nan, 100, 89, 88]},\n...                    index=date_index)\n>>> df2\n            prices\n2010-01-01   100.0\n2010-01-02   101.0\n2010-01-03     NaN\n2010-01-04   100.0\n2010-01-05    89.0\n2010-01-06    88.0\n\nSuppose we decide to expand the dataframe to cover a wider\ndate range.\n\n>>> date_index2 = pd.date_range('12/29/2009', periods=10, freq='D')\n>>> df2.reindex(date_index2)\n            prices\n2009-12-29     NaN\n2009-12-30     NaN\n2009-12-31     NaN\n2010-01-01   100.0\n2010-01-02   101.0\n2010-01-03     NaN\n2010-01-04   100.0\n2010-01-05    89.0\n2010-01-06    88.0\n2010-01-07     NaN\n\nThe index entries that did not have a value in the original data frame\n(for example, '2009-12-29') are by default filled with ``NaN``.\nIf desired, we can fill in the missing values using one of several\noptions.\n\nFor example, to back-propagate the last valid value to fill the ``NaN``\nvalues, pass ``bfill`` as an argument to the ``method`` keyword.\n\n>>> df2.reindex(date_index2, method='bfill')\n            prices\n2009-12-29   100.0\n2009-12-30   100.0\n2009-12-31   100.0\n2010-01-01   100.0\n2010-01-02   101.0\n2010-01-03     NaN\n2010-01-04   100.0\n2010-01-05    89.0\n2010-01-06    88.0\n2010-01-07     NaN\n\nPlease note that the ``NaN`` value present in the original dataframe\n(at index value 2010-01-03) will not be filled by any of the\nvalue propagation schemes. This is because filling while reindexing\ndoes not look at dataframe values, but only compares the original and\ndesired indexes. If you do want to fill in the ``NaN`` values present\nin the original dataframe, use the ``fillna()`` method.\n\nSee the :ref:`user guide <basics.reindexing>` for more."
  },
  {
    "symbol": "DataFrame.reindex_like",
    "signature": "(self, other, method: \"Literal['backfill', 'bfill', 'pad', 'ffill', 'nearest'] | None\" = None, copy: 'bool_t | None' = None, limit: 'int | None' = None, tolerance=None) -> 'Self'",
    "doc": "Return an object with matching indices as other object.\n\nConform the object to the same index on all axes. Optional\nfilling logic, placing NaN in locations having no value\nin the previous index. A new object is produced unless the\nnew index is equivalent to the current one and copy=False.\n\nParameters\n----------\nother : Object of the same data type\n    Its row and column indices are used to define the new indices\n    of this object.\nmethod : {None, 'backfill'/'bfill', 'pad'/'ffill', 'nearest'}\n    Method to use for filling holes in reindexed DataFrame.\n    Please note: this is only applicable to DataFrames/Series with a\n    monotonically increasing/decreasing index.\n\n    * None (default): don't fill gaps\n    * pad / ffill: propagate last valid observation forward to next\n      valid\n    * backfill / bfill: use next valid observation to fill gap\n    * nearest: use nearest valid observations to fill gap.\n\ncopy : bool, default True\n    Return a new object, even if the passed indexes are the same.\n\n    .. note::\n        The `copy` keyword will change behavior in pandas 3.0.\n        `Copy-on-Write\n        <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n        will be enabled by default, which means that all methods with a\n        `copy` keyword will use a lazy copy mechanism to defer the copy and\n        ignore the `copy` keyword. The `copy` keyword will be removed in a\n        future version of pandas.\n\n        You can already get the future behavior and improvements through\n        enabling copy on write ``pd.options.mode.copy_on_write = True``\nlimit : int, default None\n    Maximum number of consecutive labels to fill for inexact matches.\ntolerance : optional\n    Maximum distance between original and new labels for inexact\n    matches. The values of the index at the matching locations must\n    satisfy the equation ``abs(index[indexer] - target) <= tolerance``.\n\n    Tolerance may be a scalar value, which applies the same tolerance\n    to all values, or list-like, which applies variable tolerance per\n    element. List-like includes list, tuple, array, Series, and must be\n    the same size as the index and its dtype must exactly match the\n    index's type.\n\nReturns\n-------\nSeries or DataFrame\n    Same type as caller, but with changed indices on each axis.\n\nSee Also\n--------\nDataFrame.set_index : Set row labels.\nDataFrame.reset_index : Remove row labels or move them to new columns.\nDataFrame.reindex : Change to new indices or expand indices.\n\nNotes\n-----\nSame as calling\n``.reindex(index=other.index, columns=other.columns,...)``.\n\nExamples\n--------\n>>> df1 = pd.DataFrame([[24.3, 75.7, 'high'],\n...                     [31, 87.8, 'high'],\n...                     [22, 71.6, 'medium'],\n...                     [35, 95, 'medium']],\n...                    columns=['temp_celsius', 'temp_fahrenheit',\n...                             'windspeed'],\n...                    index=pd.date_range(start='2014-02-12',\n...                                        end='2014-02-15', freq='D'))\n\n>>> df1\n            temp_celsius  temp_fahrenheit windspeed\n2014-02-12          24.3             75.7      high\n2014-02-13          31.0             87.8      high\n2014-02-14          22.0             71.6    medium\n2014-02-15          35.0             95.0    medium\n\n>>> df2 = pd.DataFrame([[28, 'low'],\n...                     [30, 'low'],\n...                     [35.1, 'medium']],\n...                    columns=['temp_celsius', 'windspeed'],\n...                    index=pd.DatetimeIndex(['2014-02-12', '2014-02-13',\n...                                            '2014-02-15']))\n\n>>> df2\n            temp_celsius windspeed\n2014-02-12          28.0       low\n2014-02-13          30.0       low\n2014-02-15          35.1    medium\n\n>>> df2.reindex_like(df1)\n            temp_celsius  temp_fahrenheit windspeed\n2014-02-12          28.0              NaN       low\n2014-02-13          30.0              NaN       low\n2014-02-14           NaN              NaN       NaN\n2014-02-15          35.1              NaN    medium"
  },
  {
    "symbol": "DataFrame.rename",
    "signature": "(self, mapper: 'Renamer | None' = None, *, index: 'Renamer | None' = None, columns: 'Renamer | None' = None, axis: 'Axis | None' = None, copy: 'bool | None' = None, inplace: 'bool' = False, level: 'Level | None' = None, errors: 'IgnoreRaise' = 'ignore') -> 'DataFrame | None'",
    "doc": "Rename columns or index labels.\n\nFunction / dict values must be unique (1-to-1). Labels not contained in\na dict / Series will be left as-is. Extra labels listed don't throw an\nerror.\n\nSee the :ref:`user guide <basics.rename>` for more.\n\nParameters\n----------\nmapper : dict-like or function\n    Dict-like or function transformations to apply to\n    that axis' values. Use either ``mapper`` and ``axis`` to\n    specify the axis to target with ``mapper``, or ``index`` and\n    ``columns``.\nindex : dict-like or function\n    Alternative to specifying axis (``mapper, axis=0``\n    is equivalent to ``index=mapper``).\ncolumns : dict-like or function\n    Alternative to specifying axis (``mapper, axis=1``\n    is equivalent to ``columns=mapper``).\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    Axis to target with ``mapper``. Can be either the axis name\n    ('index', 'columns') or number (0, 1). The default is 'index'.\ncopy : bool, default True\n    Also copy underlying data.\n\n    .. note::\n        The `copy` keyword will change behavior in pandas 3.0.\n        `Copy-on-Write\n        <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n        will be enabled by default, which means that all methods with a\n        `copy` keyword will use a lazy copy mechanism to defer the copy and\n        ignore the `copy` keyword. The `copy` keyword will be removed in a\n        future version of pandas.\n\n        You can already get the future behavior and improvements through\n        enabling copy on write ``pd.options.mode.copy_on_write = True``\ninplace : bool, default False\n    Whether to modify the DataFrame rather than creating a new one.\n    If True then value of copy is ignored.\nlevel : int or level name, default None\n    In case of a MultiIndex, only rename labels in the specified\n    level.\nerrors : {'ignore', 'raise'}, default 'ignore'\n    If 'raise', raise a `KeyError` when a dict-like `mapper`, `index`,\n    or `columns` contains labels that are not present in the Index\n    being transformed.\n    If 'ignore', existing keys will be renamed and extra keys will be\n    ignored.\n\nReturns\n-------\nDataFrame or None\n    DataFrame with the renamed axis labels or None if ``inplace=True``.\n\nRaises\n------\nKeyError\n    If any of the labels is not found in the selected axis and\n    \"errors='raise'\".\n\nSee Also\n--------\nDataFrame.rename_axis : Set the name of the axis.\n\nExamples\n--------\n``DataFrame.rename`` supports two calling conventions\n\n* ``(index=index_mapper, columns=columns_mapper, ...)``\n* ``(mapper, axis={'index', 'columns'}, ...)``\n\nWe *highly* recommend using keyword arguments to clarify your\nintent.\n\nRename columns using a mapping:\n\n>>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n>>> df.rename(columns={\"A\": \"a\", \"B\": \"c\"})\n   a  c\n0  1  4\n1  2  5\n2  3  6\n\nRename index using a mapping:\n\n>>> df.rename(index={0: \"x\", 1: \"y\", 2: \"z\"})\n   A  B\nx  1  4\ny  2  5\nz  3  6\n\nCast index labels to a different type:\n\n>>> df.index\nRangeIndex(start=0, stop=3, step=1)\n>>> df.rename(index=str).index\nIndex(['0', '1', '2'], dtype='object')\n\n>>> df.rename(columns={\"A\": \"a\", \"B\": \"b\", \"C\": \"c\"}, errors=\"raise\")\nTraceback (most recent call last):\nKeyError: ['C'] not found in axis\n\nUsing axis-style parameters:\n\n>>> df.rename(str.lower, axis='columns')\n   a  b\n0  1  4\n1  2  5\n2  3  6\n\n>>> df.rename({1: 2, 2: 4}, axis='index')\n   A  B\n0  1  4\n2  2  5\n4  3  6"
  },
  {
    "symbol": "DataFrame.rename_axis",
    "signature": "(self, mapper: 'IndexLabel | lib.NoDefault' = <no_default>, *, index=<no_default>, columns=<no_default>, axis: 'Axis' = 0, copy: 'bool_t | None' = None, inplace: 'bool_t' = False) -> 'Self | None'",
    "doc": "Set the name of the axis for the index or columns.\n\nParameters\n----------\nmapper : scalar, list-like, optional\n    Value to set the axis name attribute.\nindex, columns : scalar, list-like, dict-like or function, optional\n    A scalar, list-like, dict-like or functions transformations to\n    apply to that axis' values.\n    Note that the ``columns`` parameter is not allowed if the\n    object is a Series. This parameter only apply for DataFrame\n    type objects.\n\n    Use either ``mapper`` and ``axis`` to\n    specify the axis to target with ``mapper``, or ``index``\n    and/or ``columns``.\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    The axis to rename. For `Series` this parameter is unused and defaults to 0.\ncopy : bool, default None\n    Also copy underlying data.\n\n    .. note::\n        The `copy` keyword will change behavior in pandas 3.0.\n        `Copy-on-Write\n        <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n        will be enabled by default, which means that all methods with a\n        `copy` keyword will use a lazy copy mechanism to defer the copy and\n        ignore the `copy` keyword. The `copy` keyword will be removed in a\n        future version of pandas.\n\n        You can already get the future behavior and improvements through\n        enabling copy on write ``pd.options.mode.copy_on_write = True``\ninplace : bool, default False\n    Modifies the object directly, instead of creating a new Series\n    or DataFrame.\n\nReturns\n-------\nSeries, DataFrame, or None\n    The same type as the caller or None if ``inplace=True``.\n\nSee Also\n--------\nSeries.rename : Alter Series index labels or name.\nDataFrame.rename : Alter DataFrame index labels or name.\nIndex.rename : Set new names on index.\n\nNotes\n-----\n``DataFrame.rename_axis`` supports two calling conventions\n\n* ``(index=index_mapper, columns=columns_mapper, ...)``\n* ``(mapper, axis={'index', 'columns'}, ...)``\n\nThe first calling convention will only modify the names of\nthe index and/or the names of the Index object that is the columns.\nIn this case, the parameter ``copy`` is ignored.\n\nThe second calling convention will modify the names of the\ncorresponding index if mapper is a list or a scalar.\nHowever, if mapper is dict-like or a function, it will use the\ndeprecated behavior of modifying the axis *labels*.\n\nWe *highly* recommend using keyword arguments to clarify your\nintent.\n\nExamples\n--------\n**Series**\n\n>>> s = pd.Series([\"dog\", \"cat\", \"monkey\"])\n>>> s\n0       dog\n1       cat\n2    monkey\ndtype: object\n>>> s.rename_axis(\"animal\")\nanimal\n0    dog\n1    cat\n2    monkey\ndtype: object\n\n**DataFrame**\n\n>>> df = pd.DataFrame({\"num_legs\": [4, 4, 2],\n...                    \"num_arms\": [0, 0, 2]},\n...                   [\"dog\", \"cat\", \"monkey\"])\n>>> df\n        num_legs  num_arms\ndog            4         0\ncat            4         0\nmonkey         2         2\n>>> df = df.rename_axis(\"animal\")\n>>> df\n        num_legs  num_arms\nanimal\ndog            4         0\ncat            4         0\nmonkey         2         2\n>>> df = df.rename_axis(\"limbs\", axis=\"columns\")\n>>> df\nlimbs   num_legs  num_arms\nanimal\ndog            4         0\ncat            4         0\nmonkey         2         2\n\n**MultiIndex**\n\n>>> df.index = pd.MultiIndex.from_product([['mammal'],\n...                                        ['dog', 'cat', 'monkey']],\n...                                       names=['type', 'name'])\n>>> df\nlimbs          num_legs  num_arms\ntype   name\nmammal dog            4         0\n       cat            4         0\n       monkey         2         2\n\n>>> df.rename_axis(index={'type': 'class'})\nlimbs          num_legs  num_arms\nclass  name\nmammal dog            4         0\n       cat            4         0\n       monkey         2         2\n\n>>> df.rename_axis(columns=str.upper)\nLIMBS          num_legs  num_arms\ntype   name\nmammal dog            4         0\n       cat            4         0\n       monkey         2         2"
  },
  {
    "symbol": "DataFrame.reorder_levels",
    "signature": "(self, order: 'Sequence[int | str]', axis: 'Axis' = 0) -> 'DataFrame'",
    "doc": "Rearrange index levels using input order. May not drop or duplicate levels.\n\nParameters\n----------\norder : list of int or list of str\n    List representing new level order. Reference level by number\n    (position) or by key (label).\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    Where to reorder levels.\n\nReturns\n-------\nDataFrame\n\nExamples\n--------\n>>> data = {\n...     \"class\": [\"Mammals\", \"Mammals\", \"Reptiles\"],\n...     \"diet\": [\"Omnivore\", \"Carnivore\", \"Carnivore\"],\n...     \"species\": [\"Humans\", \"Dogs\", \"Snakes\"],\n... }\n>>> df = pd.DataFrame(data, columns=[\"class\", \"diet\", \"species\"])\n>>> df = df.set_index([\"class\", \"diet\"])\n>>> df\n                                  species\nclass      diet\nMammals    Omnivore                Humans\n           Carnivore                 Dogs\nReptiles   Carnivore               Snakes\n\nLet's reorder the levels of the index:\n\n>>> df.reorder_levels([\"diet\", \"class\"])\n                                  species\ndiet      class\nOmnivore  Mammals                  Humans\nCarnivore Mammals                    Dogs\n          Reptiles                 Snakes"
  },
  {
    "symbol": "DataFrame.replace",
    "signature": "(self, to_replace=None, value=<no_default>, *, inplace: 'bool_t' = False, limit: 'int | None' = None, regex: 'bool_t' = False, method: \"Literal['pad', 'ffill', 'bfill'] | lib.NoDefault\" = <no_default>) -> 'Self | None'",
    "doc": "Replace values given in `to_replace` with `value`.\n\nValues of the Series/DataFrame are replaced with other values dynamically.\nThis differs from updating with ``.loc`` or ``.iloc``, which require\nyou to specify a location to update with some value.\n\nParameters\n----------\nto_replace : str, regex, list, dict, Series, int, float, or None\n    How to find the values that will be replaced.\n\n    * numeric, str or regex:\n\n        - numeric: numeric values equal to `to_replace` will be\n          replaced with `value`\n        - str: string exactly matching `to_replace` will be replaced\n          with `value`\n        - regex: regexs matching `to_replace` will be replaced with\n          `value`\n\n    * list of str, regex, or numeric:\n\n        - First, if `to_replace` and `value` are both lists, they\n          **must** be the same length.\n        - Second, if ``regex=True`` then all of the strings in **both**\n          lists will be interpreted as regexs otherwise they will match\n          directly. This doesn't matter much for `value` since there\n          are only a few possible substitution regexes you can use.\n        - str, regex and numeric rules apply as above.\n\n    * dict:\n\n        - Dicts can be used to specify different replacement values\n          for different existing values. For example,\n          ``{'a': 'b', 'y': 'z'}`` replaces the value 'a' with 'b' and\n          'y' with 'z'. To use a dict in this way, the optional `value`\n          parameter should not be given.\n        - For a DataFrame a dict can specify that different values\n          should be replaced in different columns. For example,\n          ``{'a': 1, 'b': 'z'}`` looks for the value 1 in column 'a'\n          and the value 'z' in column 'b' and replaces these values\n          with whatever is specified in `value`. The `value` parameter\n          should not be ``None`` in this case. You can treat this as a\n          special case of passing two lists except that you are\n          specifying the column to search in.\n        - For a DataFrame nested dictionaries, e.g.,\n          ``{'a': {'b': np.nan}}``, are read as follows: look in column\n          'a' for the value 'b' and replace it with NaN. The optional `value`\n          parameter should not be specified to use a nested dict in this\n          way. You can nest regular expressions as well. Note that\n          column names (the top-level dictionary keys in a nested\n          dictionary) **cannot** be regular expressions.\n\n    * None:\n\n        - This means that the `regex` argument must be a string,\n          compiled regular expression, or list, dict, ndarray or\n          Series of such elements. If `value` is also ``None`` then\n          this **must** be a nested dictionary or Series.\n\n    See the examples section for examples of each of these.\nvalue : scalar, dict, list, str, regex, default None\n    Value to replace any values matching `to_replace` with.\n    For a DataFrame a dict of values can be used to specify which\n    value to use for each column (columns not in the dict will not be\n    filled). Regular expressions, strings and lists or dicts of such\n    objects are also allowed.\n\ninplace : bool, default False\n    If True, performs operation inplace and returns None.\nlimit : int, default None\n    Maximum size gap to forward or backward fill.\n\n    .. deprecated:: 2.1.0\nregex : bool or same types as `to_replace`, default False\n    Whether to interpret `to_replace` and/or `value` as regular\n    expressions. Alternatively, this could be a regular expression or a\n    list, dict, or array of regular expressions in which case\n    `to_replace` must be ``None``.\nmethod : {'pad', 'ffill', 'bfill'}\n    The method to use when for replacement, when `to_replace` is a\n    scalar, list or tuple and `value` is ``None``.\n\n    .. deprecated:: 2.1.0\n\nReturns\n-------\nSeries/DataFrame\n    Object after replacement.\n\nRaises\n------\nAssertionError\n    * If `regex` is not a ``bool`` and `to_replace` is not\n      ``None``.\n\nTypeError\n    * If `to_replace` is not a scalar, array-like, ``dict``, or ``None``\n    * If `to_replace` is a ``dict`` and `value` is not a ``list``,\n      ``dict``, ``ndarray``, or ``Series``\n    * If `to_replace` is ``None`` and `regex` is not compilable\n      into a regular expression or is a list, dict, ndarray, or\n      Series.\n    * When replacing multiple ``bool`` or ``datetime64`` objects and\n      the arguments to `to_replace` does not match the type of the\n      value being replaced\n\nValueError\n    * If a ``list`` or an ``ndarray`` is passed to `to_replace` and\n      `value` but they are not the same length.\n\nSee Also\n--------\nSeries.fillna : Fill NA values.\nDataFrame.fillna : Fill NA values.\nSeries.where : Replace values based on boolean condition.\nDataFrame.where : Replace values based on boolean condition.\nDataFrame.map: Apply a function to a Dataframe elementwise.\nSeries.map: Map values of Series according to an input mapping or function.\nSeries.str.replace : Simple string replacement.\n\nNotes\n-----\n* Regex substitution is performed under the hood with ``re.sub``. The\n  rules for substitution for ``re.sub`` are the same.\n* Regular expressions will only substitute on strings, meaning you\n  cannot provide, for example, a regular expression matching floating\n  point numbers and expect the columns in your frame that have a\n  numeric dtype to be matched. However, if those floating point\n  numbers *are* strings, then you can do this.\n* This method has *a lot* of options. You are encouraged to experiment\n  and play with this method to gain intuition about how it works.\n* When dict is used as the `to_replace` value, it is like\n  key(s) in the dict are the to_replace part and\n  value(s) in the dict are the value parameter.\n\nExamples\n--------\n\n**Scalar `to_replace` and `value`**\n\n>>> s = pd.Series([1, 2, 3, 4, 5])\n>>> s.replace(1, 5)\n0    5\n1    2\n2    3\n3    4\n4    5\ndtype: int64\n\n>>> df = pd.DataFrame({'A': [0, 1, 2, 3, 4],\n...                    'B': [5, 6, 7, 8, 9],\n...                    'C': ['a', 'b', 'c', 'd', 'e']})\n>>> df.replace(0, 5)\n    A  B  C\n0  5  5  a\n1  1  6  b\n2  2  7  c\n3  3  8  d\n4  4  9  e\n\n**List-like `to_replace`**\n\n>>> df.replace([0, 1, 2, 3], 4)\n    A  B  C\n0  4  5  a\n1  4  6  b\n2  4  7  c\n3  4  8  d\n4  4  9  e\n\n>>> df.replace([0, 1, 2, 3], [4, 3, 2, 1])\n    A  B  C\n0  4  5  a\n1  3  6  b\n2  2  7  c\n3  1  8  d\n4  4  9  e\n\n>>> s.replace([1, 2], method='bfill')\n0    3\n1    3\n2    3\n3    4\n4    5\ndtype: int64\n\n**dict-like `to_replace`**\n\n>>> df.replace({0: 10, 1: 100})\n        A  B  C\n0   10  5  a\n1  100  6  b\n2    2  7  c\n3    3  8  d\n4    4  9  e\n\n>>> df.replace({'A': 0, 'B': 5}, 100)\n        A    B  C\n0  100  100  a\n1    1    6  b\n2    2    7  c\n3    3    8  d\n4    4    9  e\n\n>>> df.replace({'A': {0: 100, 4: 400}})\n        A  B  C\n0  100  5  a\n1    1  6  b\n2    2  7  c\n3    3  8  d\n4  400  9  e\n\n**Regular expression `to_replace`**\n\n>>> df = pd.DataFrame({'A': ['bat', 'foo', 'bait'],\n...                    'B': ['abc', 'bar', 'xyz']})\n>>> df.replace(to_replace=r'^ba.$', value='new', regex=True)\n        A    B\n0   new  abc\n1   foo  new\n2  bait  xyz\n\n>>> df.replace({'A': r'^ba.$'}, {'A': 'new'}, regex=True)\n        A    B\n0   new  abc\n1   foo  bar\n2  bait  xyz\n\n>>> df.replace(regex=r'^ba.$', value='new')\n        A    B\n0   new  abc\n1   foo  new\n2  bait  xyz\n\n>>> df.replace(regex={r'^ba.$': 'new', 'foo': 'xyz'})\n        A    B\n0   new  abc\n1   xyz  new\n2  bait  xyz\n\n>>> df.replace(regex=[r'^ba.$', 'foo'], value='new')\n        A    B\n0   new  abc\n1   new  new\n2  bait  xyz\n\nCompare the behavior of ``s.replace({'a': None})`` and\n``s.replace('a', None)`` to understand the peculiarities\nof the `to_replace` parameter:\n\n>>> s = pd.Series([10, 'a', 'a', 'b', 'a'])\n\nWhen one uses a dict as the `to_replace` value, it is like the\nvalue(s) in the dict are equal to the `value` parameter.\n``s.replace({'a': None})`` is equivalent to\n``s.replace(to_replace={'a': None}, value=None, method=None)``:\n\n>>> s.replace({'a': None})\n0      10\n1    None\n2    None\n3       b\n4    None\ndtype: object\n\nWhen ``value`` is not explicitly passed and `to_replace` is a scalar, list\nor tuple, `replace` uses the method parameter (default 'pad') to do the\nreplacement. So this is why the 'a' values are being replaced by 10\nin rows 1 and 2 and 'b' in row 4 in this case.\n\n>>> s.replace('a')\n0    10\n1    10\n2    10\n3     b\n4     b\ndtype: object\n\n    .. deprecated:: 2.1.0\n        The 'method' parameter and padding behavior are deprecated.\n\nOn the other hand, if ``None`` is explicitly passed for ``value``, it will\nbe respected:\n\n>>> s.replace('a', None)\n0      10\n1    None\n2    None\n3       b\n4    None\ndtype: object\n\n    .. versionchanged:: 1.4.0\n        Previously the explicit ``None`` was silently ignored.\n\nWhen ``regex=True``, ``value`` is not ``None`` and `to_replace` is a string,\nthe replacement will be applied in all columns of the DataFrame.\n\n>>> df = pd.DataFrame({'A': [0, 1, 2, 3, 4],\n...                    'B': ['a', 'b', 'c', 'd', 'e'],\n...                    'C': ['f', 'g', 'h', 'i', 'j']})\n\n>>> df.replace(to_replace='^[a-g]', value='e', regex=True)\n    A  B  C\n0  0  e  e\n1  1  e  e\n2  2  e  h\n3  3  e  i\n4  4  e  j\n\nIf ``value`` is not ``None`` and `to_replace` is a dictionary, the dictionary\nkeys will be the DataFrame columns that the replacement will be applied.\n\n>>> df.replace(to_replace={'B': '^[a-c]', 'C': '^[h-j]'}, value='e', regex=True)\n    A  B  C\n0  0  e  f\n1  1  e  g\n2  2  e  e\n3  3  d  e\n4  4  e  e"
  },
  {
    "symbol": "DataFrame.resample",
    "signature": "(self, rule, axis: 'Axis | lib.NoDefault' = <no_default>, closed: \"Literal['right', 'left'] | None\" = None, label: \"Literal['right', 'left'] | None\" = None, convention: \"Literal['start', 'end', 's', 'e'] | lib.NoDefault\" = <no_default>, kind: \"Literal['timestamp', 'period'] | None | lib.NoDefault\" = <no_default>, on: 'Level | None' = None, level: 'Level | None' = None, origin: 'str | TimestampConvertibleTypes' = 'start_day', offset: 'TimedeltaConvertibleTypes | None' = None, group_keys: 'bool_t' = False) -> 'Resampler'",
    "doc": "Resample time-series data.\n\nConvenience method for frequency conversion and resampling of time series.\nThe object must have a datetime-like index (`DatetimeIndex`, `PeriodIndex`,\nor `TimedeltaIndex`), or the caller must pass the label of a datetime-like\nseries/index to the ``on``/``level`` keyword parameter.\n\nParameters\n----------\nrule : DateOffset, Timedelta or str\n    The offset string or object representing target conversion.\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    Which axis to use for up- or down-sampling. For `Series` this parameter\n    is unused and defaults to 0. Must be\n    `DatetimeIndex`, `TimedeltaIndex` or `PeriodIndex`.\n\n    .. deprecated:: 2.0.0\n        Use frame.T.resample(...) instead.\nclosed : {'right', 'left'}, default None\n    Which side of bin interval is closed. The default is 'left'\n    for all frequency offsets except for 'ME', 'YE', 'QE', 'BME',\n    'BA', 'BQE', and 'W' which all have a default of 'right'.\nlabel : {'right', 'left'}, default None\n    Which bin edge label to label bucket with. The default is 'left'\n    for all frequency offsets except for 'ME', 'YE', 'QE', 'BME',\n    'BA', 'BQE', and 'W' which all have a default of 'right'.\nconvention : {'start', 'end', 's', 'e'}, default 'start'\n    For `PeriodIndex` only, controls whether to use the start or\n    end of `rule`.\n\n    .. deprecated:: 2.2.0\n        Convert PeriodIndex to DatetimeIndex before resampling instead.\nkind : {'timestamp', 'period'}, optional, default None\n    Pass 'timestamp' to convert the resulting index to a\n    `DateTimeIndex` or 'period' to convert it to a `PeriodIndex`.\n    By default the input representation is retained.\n\n    .. deprecated:: 2.2.0\n        Convert index to desired type explicitly instead.\n\non : str, optional\n    For a DataFrame, column to use instead of index for resampling.\n    Column must be datetime-like.\nlevel : str or int, optional\n    For a MultiIndex, level (name or number) to use for\n    resampling. `level` must be datetime-like.\norigin : Timestamp or str, default 'start_day'\n    The timestamp on which to adjust the grouping. The timezone of origin\n    must match the timezone of the index.\n    If string, must be one of the following:\n\n    - 'epoch': `origin` is 1970-01-01\n    - 'start': `origin` is the first value of the timeseries\n    - 'start_day': `origin` is the first day at midnight of the timeseries\n\n    - 'end': `origin` is the last value of the timeseries\n    - 'end_day': `origin` is the ceiling midnight of the last day\n\n    .. versionadded:: 1.3.0\n\n    .. note::\n\n        Only takes effect for Tick-frequencies (i.e. fixed frequencies like\n        days, hours, and minutes, rather than months or quarters).\noffset : Timedelta or str, default is None\n    An offset timedelta added to the origin.\n\ngroup_keys : bool, default False\n    Whether to include the group keys in the result index when using\n    ``.apply()`` on the resampled object.\n\n    .. versionadded:: 1.5.0\n\n        Not specifying ``group_keys`` will retain values-dependent behavior\n        from pandas 1.4 and earlier (see :ref:`pandas 1.5.0 Release notes\n        <whatsnew_150.enhancements.resample_group_keys>` for examples).\n\n    .. versionchanged:: 2.0.0\n\n        ``group_keys`` now defaults to ``False``.\n\nReturns\n-------\npandas.api.typing.Resampler\n    :class:`~pandas.core.Resampler` object.\n\nSee Also\n--------\nSeries.resample : Resample a Series.\nDataFrame.resample : Resample a DataFrame.\ngroupby : Group Series/DataFrame by mapping, function, label, or list of labels.\nasfreq : Reindex a Series/DataFrame with the given frequency without grouping.\n\nNotes\n-----\nSee the `user guide\n<https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#resampling>`__\nfor more.\n\nTo learn more about the offset strings, please see `this link\n<https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#dateoffset-objects>`__.\n\nExamples\n--------\nStart by creating a series with 9 one minute timestamps.\n\n>>> index = pd.date_range('1/1/2000', periods=9, freq='min')\n>>> series = pd.Series(range(9), index=index)\n>>> series\n2000-01-01 00:00:00    0\n2000-01-01 00:01:00    1\n2000-01-01 00:02:00    2\n2000-01-01 00:03:00    3\n2000-01-01 00:04:00    4\n2000-01-01 00:05:00    5\n2000-01-01 00:06:00    6\n2000-01-01 00:07:00    7\n2000-01-01 00:08:00    8\nFreq: min, dtype: int64\n\nDownsample the series into 3 minute bins and sum the values\nof the timestamps falling into a bin.\n\n>>> series.resample('3min').sum()\n2000-01-01 00:00:00     3\n2000-01-01 00:03:00    12\n2000-01-01 00:06:00    21\nFreq: 3min, dtype: int64\n\nDownsample the series into 3 minute bins as above, but label each\nbin using the right edge instead of the left. Please note that the\nvalue in the bucket used as the label is not included in the bucket,\nwhich it labels. For example, in the original series the\nbucket ``2000-01-01 00:03:00`` contains the value 3, but the summed\nvalue in the resampled bucket with the label ``2000-01-01 00:03:00``\ndoes not include 3 (if it did, the summed value would be 6, not 3).\n\n>>> series.resample('3min', label='right').sum()\n2000-01-01 00:03:00     3\n2000-01-01 00:06:00    12\n2000-01-01 00:09:00    21\nFreq: 3min, dtype: int64\n\nTo include this value close the right side of the bin interval,\nas shown below.\n\n>>> series.resample('3min', label='right', closed='right').sum()\n2000-01-01 00:00:00     0\n2000-01-01 00:03:00     6\n2000-01-01 00:06:00    15\n2000-01-01 00:09:00    15\nFreq: 3min, dtype: int64\n\nUpsample the series into 30 second bins.\n\n>>> series.resample('30s').asfreq()[0:5]   # Select first 5 rows\n2000-01-01 00:00:00   0.0\n2000-01-01 00:00:30   NaN\n2000-01-01 00:01:00   1.0\n2000-01-01 00:01:30   NaN\n2000-01-01 00:02:00   2.0\nFreq: 30s, dtype: float64\n\nUpsample the series into 30 second bins and fill the ``NaN``\nvalues using the ``ffill`` method.\n\n>>> series.resample('30s').ffill()[0:5]\n2000-01-01 00:00:00    0\n2000-01-01 00:00:30    0\n2000-01-01 00:01:00    1\n2000-01-01 00:01:30    1\n2000-01-01 00:02:00    2\nFreq: 30s, dtype: int64\n\nUpsample the series into 30 second bins and fill the\n``NaN`` values using the ``bfill`` method.\n\n>>> series.resample('30s').bfill()[0:5]\n2000-01-01 00:00:00    0\n2000-01-01 00:00:30    1\n2000-01-01 00:01:00    1\n2000-01-01 00:01:30    2\n2000-01-01 00:02:00    2\nFreq: 30s, dtype: int64\n\nPass a custom function via ``apply``\n\n>>> def custom_resampler(arraylike):\n...     return np.sum(arraylike) + 5\n...\n>>> series.resample('3min').apply(custom_resampler)\n2000-01-01 00:00:00     8\n2000-01-01 00:03:00    17\n2000-01-01 00:06:00    26\nFreq: 3min, dtype: int64\n\nFor DataFrame objects, the keyword `on` can be used to specify the\ncolumn instead of the index for resampling.\n\n>>> d = {'price': [10, 11, 9, 13, 14, 18, 17, 19],\n...      'volume': [50, 60, 40, 100, 50, 100, 40, 50]}\n>>> df = pd.DataFrame(d)\n>>> df['week_starting'] = pd.date_range('01/01/2018',\n...                                     periods=8,\n...                                     freq='W')\n>>> df\n   price  volume week_starting\n0     10      50    2018-01-07\n1     11      60    2018-01-14\n2      9      40    2018-01-21\n3     13     100    2018-01-28\n4     14      50    2018-02-04\n5     18     100    2018-02-11\n6     17      40    2018-02-18\n7     19      50    2018-02-25\n>>> df.resample('ME', on='week_starting').mean()\n               price  volume\nweek_starting\n2018-01-31     10.75    62.5\n2018-02-28     17.00    60.0\n\nFor a DataFrame with MultiIndex, the keyword `level` can be used to\nspecify on which level the resampling needs to take place.\n\n>>> days = pd.date_range('1/1/2000', periods=4, freq='D')\n>>> d2 = {'price': [10, 11, 9, 13, 14, 18, 17, 19],\n...       'volume': [50, 60, 40, 100, 50, 100, 40, 50]}\n>>> df2 = pd.DataFrame(\n...     d2,\n...     index=pd.MultiIndex.from_product(\n...         [days, ['morning', 'afternoon']]\n...     )\n... )\n>>> df2\n                      price  volume\n2000-01-01 morning       10      50\n           afternoon     11      60\n2000-01-02 morning        9      40\n           afternoon     13     100\n2000-01-03 morning       14      50\n           afternoon     18     100\n2000-01-04 morning       17      40\n           afternoon     19      50\n>>> df2.resample('D', level=0).sum()\n            price  volume\n2000-01-01     21     110\n2000-01-02     22     140\n2000-01-03     32     150\n2000-01-04     36      90\n\nIf you want to adjust the start of the bins based on a fixed timestamp:\n\n>>> start, end = '2000-10-01 23:30:00', '2000-10-02 00:30:00'\n>>> rng = pd.date_range(start, end, freq='7min')\n>>> ts = pd.Series(np.arange(len(rng)) * 3, index=rng)\n>>> ts\n2000-10-01 23:30:00     0\n2000-10-01 23:37:00     3\n2000-10-01 23:44:00     6\n2000-10-01 23:51:00     9\n2000-10-01 23:58:00    12\n2000-10-02 00:05:00    15\n2000-10-02 00:12:00    18\n2000-10-02 00:19:00    21\n2000-10-02 00:26:00    24\nFreq: 7min, dtype: int64\n\n>>> ts.resample('17min').sum()\n2000-10-01 23:14:00     0\n2000-10-01 23:31:00     9\n2000-10-01 23:48:00    21\n2000-10-02 00:05:00    54\n2000-10-02 00:22:00    24\nFreq: 17min, dtype: int64\n\n>>> ts.resample('17min', origin='epoch').sum()\n2000-10-01 23:18:00     0\n2000-10-01 23:35:00    18\n2000-10-01 23:52:00    27\n2000-10-02 00:09:00    39\n2000-10-02 00:26:00    24\nFreq: 17min, dtype: int64\n\n>>> ts.resample('17min', origin='2000-01-01').sum()\n2000-10-01 23:24:00     3\n2000-10-01 23:41:00    15\n2000-10-01 23:58:00    45\n2000-10-02 00:15:00    45\nFreq: 17min, dtype: int64\n\nIf you want to adjust the start of the bins with an `offset` Timedelta, the two\nfollowing lines are equivalent:\n\n>>> ts.resample('17min', origin='start').sum()\n2000-10-01 23:30:00     9\n2000-10-01 23:47:00    21\n2000-10-02 00:04:00    54\n2000-10-02 00:21:00    24\nFreq: 17min, dtype: int64\n\n>>> ts.resample('17min', offset='23h30min').sum()\n2000-10-01 23:30:00     9\n2000-10-01 23:47:00    21\n2000-10-02 00:04:00    54\n2000-10-02 00:21:00    24\nFreq: 17min, dtype: int64\n\nIf you want to take the largest Timestamp as the end of the bins:\n\n>>> ts.resample('17min', origin='end').sum()\n2000-10-01 23:35:00     0\n2000-10-01 23:52:00    18\n2000-10-02 00:09:00    27\n2000-10-02 00:26:00    63\nFreq: 17min, dtype: int64\n\nIn contrast with the `start_day`, you can use `end_day` to take the ceiling\nmidnight of the largest Timestamp as the end of the bins and drop the bins\nnot containing data:\n\n>>> ts.resample('17min', origin='end_day').sum()\n2000-10-01 23:38:00     3\n2000-10-01 23:55:00    15\n2000-10-02 00:12:00    45\n2000-10-02 00:29:00    45\nFreq: 17min, dtype: int64"
  },
  {
    "symbol": "DataFrame.reset_index",
    "signature": "(self, level: 'IndexLabel | None' = None, *, drop: 'bool' = False, inplace: 'bool' = False, col_level: 'Hashable' = 0, col_fill: 'Hashable' = '', allow_duplicates: 'bool | lib.NoDefault' = <no_default>, names: 'Hashable | Sequence[Hashable] | None' = None) -> 'DataFrame | None'",
    "doc": "Reset the index, or a level of it.\n\nReset the index of the DataFrame, and use the default one instead.\nIf the DataFrame has a MultiIndex, this method can remove one or more\nlevels.\n\nParameters\n----------\nlevel : int, str, tuple, or list, default None\n    Only remove the given levels from the index. Removes all levels by\n    default.\ndrop : bool, default False\n    Do not try to insert index into dataframe columns. This resets\n    the index to the default integer index.\ninplace : bool, default False\n    Whether to modify the DataFrame rather than creating a new one.\ncol_level : int or str, default 0\n    If the columns have multiple levels, determines which level the\n    labels are inserted into. By default it is inserted into the first\n    level.\ncol_fill : object, default ''\n    If the columns have multiple levels, determines how the other\n    levels are named. If None then the index name is repeated.\nallow_duplicates : bool, optional, default lib.no_default\n    Allow duplicate column labels to be created.\n\n    .. versionadded:: 1.5.0\n\nnames : int, str or 1-dimensional list, default None\n    Using the given string, rename the DataFrame column which contains the\n    index data. If the DataFrame has a MultiIndex, this has to be a list or\n    tuple with length equal to the number of levels.\n\n    .. versionadded:: 1.5.0\n\nReturns\n-------\nDataFrame or None\n    DataFrame with the new index or None if ``inplace=True``.\n\nSee Also\n--------\nDataFrame.set_index : Opposite of reset_index.\nDataFrame.reindex : Change to new indices or expand indices.\nDataFrame.reindex_like : Change to same indices as other DataFrame.\n\nExamples\n--------\n>>> df = pd.DataFrame([('bird', 389.0),\n...                    ('bird', 24.0),\n...                    ('mammal', 80.5),\n...                    ('mammal', np.nan)],\n...                   index=['falcon', 'parrot', 'lion', 'monkey'],\n...                   columns=('class', 'max_speed'))\n>>> df\n         class  max_speed\nfalcon    bird      389.0\nparrot    bird       24.0\nlion    mammal       80.5\nmonkey  mammal        NaN\n\nWhen we reset the index, the old index is added as a column, and a\nnew sequential index is used:\n\n>>> df.reset_index()\n    index   class  max_speed\n0  falcon    bird      389.0\n1  parrot    bird       24.0\n2    lion  mammal       80.5\n3  monkey  mammal        NaN\n\nWe can use the `drop` parameter to avoid the old index being added as\na column:\n\n>>> df.reset_index(drop=True)\n    class  max_speed\n0    bird      389.0\n1    bird       24.0\n2  mammal       80.5\n3  mammal        NaN\n\nYou can also use `reset_index` with `MultiIndex`.\n\n>>> index = pd.MultiIndex.from_tuples([('bird', 'falcon'),\n...                                    ('bird', 'parrot'),\n...                                    ('mammal', 'lion'),\n...                                    ('mammal', 'monkey')],\n...                                   names=['class', 'name'])\n>>> columns = pd.MultiIndex.from_tuples([('speed', 'max'),\n...                                      ('species', 'type')])\n>>> df = pd.DataFrame([(389.0, 'fly'),\n...                    (24.0, 'fly'),\n...                    (80.5, 'run'),\n...                    (np.nan, 'jump')],\n...                   index=index,\n...                   columns=columns)\n>>> df\n               speed species\n                 max    type\nclass  name\nbird   falcon  389.0     fly\n       parrot   24.0     fly\nmammal lion     80.5     run\n       monkey    NaN    jump\n\nUsing the `names` parameter, choose a name for the index column:\n\n>>> df.reset_index(names=['classes', 'names'])\n  classes   names  speed species\n                     max    type\n0    bird  falcon  389.0     fly\n1    bird  parrot   24.0     fly\n2  mammal    lion   80.5     run\n3  mammal  monkey    NaN    jump\n\nIf the index has multiple levels, we can reset a subset of them:\n\n>>> df.reset_index(level='class')\n         class  speed species\n                  max    type\nname\nfalcon    bird  389.0     fly\nparrot    bird   24.0     fly\nlion    mammal   80.5     run\nmonkey  mammal    NaN    jump\n\nIf we are not dropping the index, by default, it is placed in the top\nlevel. We can place it in another level:\n\n>>> df.reset_index(level='class', col_level=1)\n                speed species\n         class    max    type\nname\nfalcon    bird  389.0     fly\nparrot    bird   24.0     fly\nlion    mammal   80.5     run\nmonkey  mammal    NaN    jump\n\nWhen the index is inserted under another level, we can specify under\nwhich one with the parameter `col_fill`:\n\n>>> df.reset_index(level='class', col_level=1, col_fill='species')\n              species  speed species\n                class    max    type\nname\nfalcon           bird  389.0     fly\nparrot           bird   24.0     fly\nlion           mammal   80.5     run\nmonkey         mammal    NaN    jump\n\nIf we specify a nonexistent level for `col_fill`, it is created:\n\n>>> df.reset_index(level='class', col_level=1, col_fill='genus')\n                genus  speed species\n                class    max    type\nname\nfalcon           bird  389.0     fly\nparrot           bird   24.0     fly\nlion           mammal   80.5     run\nmonkey         mammal    NaN    jump"
  },
  {
    "symbol": "DataFrame.rfloordiv",
    "signature": "(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame'",
    "doc": "Get Integer division of dataframe and other, element-wise (binary operator `rfloordiv`).\n\nEquivalent to ``other // dataframe``, but with support to substitute a fill_value\nfor missing data in one of the inputs. With reverse version, `floordiv`.\n\nAmong flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to\narithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.\n\nParameters\n----------\nother : scalar, sequence, Series, dict or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis : {0 or 'index', 1 or 'columns'}\n    Whether to compare by the index (0 or 'index') or columns.\n    (1 or 'columns'). For Series input, axis to match Series index on.\nlevel : int or label\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : float or None, default None\n    Fill existing missing (NaN) values, and any new element needed for\n    successful DataFrame alignment, with this value before computation.\n    If data in both corresponding DataFrame locations is missing\n    the result will be missing.\n\nReturns\n-------\nDataFrame\n    Result of the arithmetic operation.\n\nSee Also\n--------\nDataFrame.add : Add DataFrames.\nDataFrame.sub : Subtract DataFrames.\nDataFrame.mul : Multiply DataFrames.\nDataFrame.div : Divide DataFrames (float division).\nDataFrame.truediv : Divide DataFrames (float division).\nDataFrame.floordiv : Divide DataFrames (integer division).\nDataFrame.mod : Calculate modulo (remainder after division).\nDataFrame.pow : Calculate exponential power.\n\nNotes\n-----\nMismatched indices will be unioned together.\n\nExamples\n--------\n>>> df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n>>> df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\nAdd a scalar with operator version which return the same\nresults.\n\n>>> df + 1\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\n>>> df.add(1)\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\nDivide by constant with reverse version.\n\n>>> df.div(10)\n           angles  degrees\ncircle        0.0     36.0\ntriangle      0.3     18.0\nrectangle     0.4     36.0\n\n>>> df.rdiv(10)\n             angles   degrees\ncircle          inf  0.027778\ntriangle   3.333333  0.055556\nrectangle  2.500000  0.027778\n\nSubtract a list and Series by axis with operator version.\n\n>>> df - [1, 2]\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub([1, 2], axis='columns')\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),\n...        axis='index')\n           angles  degrees\ncircle         -1      359\ntriangle        2      179\nrectangle       3      359\n\nMultiply a dictionary by axis.\n\n>>> df.mul({'angles': 0, 'degrees': 2})\n            angles  degrees\ncircle           0      720\ntriangle         0      360\nrectangle        0      720\n\n>>> df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')\n            angles  degrees\ncircle           0        0\ntriangle         6      360\nrectangle       12     1080\n\nMultiply a DataFrame of different shape with operator version.\n\n>>> other = pd.DataFrame({'angles': [0, 3, 4]},\n...                      index=['circle', 'triangle', 'rectangle'])\n>>> other\n           angles\ncircle          0\ntriangle        3\nrectangle       4\n\n>>> df * other\n           angles  degrees\ncircle          0      NaN\ntriangle        9      NaN\nrectangle      16      NaN\n\n>>> df.mul(other, fill_value=0)\n           angles  degrees\ncircle          0      0.0\ntriangle        9      0.0\nrectangle      16      0.0\n\nDivide by a MultiIndex by level.\n\n>>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],\n...                              'degrees': [360, 180, 360, 360, 540, 720]},\n...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],\n...                                    ['circle', 'triangle', 'rectangle',\n...                                     'square', 'pentagon', 'hexagon']])\n>>> df_multindex\n             angles  degrees\nA circle          0      360\n  triangle        3      180\n  rectangle       4      360\nB square          4      360\n  pentagon        5      540\n  hexagon         6      720\n\n>>> df.div(df_multindex, level=1, fill_value=0)\n             angles  degrees\nA circle        NaN      1.0\n  triangle      1.0      1.0\n  rectangle     1.0      1.0\nB square        0.0      0.0\n  pentagon      0.0      0.0\n  hexagon       0.0      0.0"
  },
  {
    "symbol": "DataFrame.rmod",
    "signature": "(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame'",
    "doc": "Get Modulo of dataframe and other, element-wise (binary operator `rmod`).\n\nEquivalent to ``other % dataframe``, but with support to substitute a fill_value\nfor missing data in one of the inputs. With reverse version, `mod`.\n\nAmong flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to\narithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.\n\nParameters\n----------\nother : scalar, sequence, Series, dict or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis : {0 or 'index', 1 or 'columns'}\n    Whether to compare by the index (0 or 'index') or columns.\n    (1 or 'columns'). For Series input, axis to match Series index on.\nlevel : int or label\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : float or None, default None\n    Fill existing missing (NaN) values, and any new element needed for\n    successful DataFrame alignment, with this value before computation.\n    If data in both corresponding DataFrame locations is missing\n    the result will be missing.\n\nReturns\n-------\nDataFrame\n    Result of the arithmetic operation.\n\nSee Also\n--------\nDataFrame.add : Add DataFrames.\nDataFrame.sub : Subtract DataFrames.\nDataFrame.mul : Multiply DataFrames.\nDataFrame.div : Divide DataFrames (float division).\nDataFrame.truediv : Divide DataFrames (float division).\nDataFrame.floordiv : Divide DataFrames (integer division).\nDataFrame.mod : Calculate modulo (remainder after division).\nDataFrame.pow : Calculate exponential power.\n\nNotes\n-----\nMismatched indices will be unioned together.\n\nExamples\n--------\n>>> df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n>>> df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\nAdd a scalar with operator version which return the same\nresults.\n\n>>> df + 1\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\n>>> df.add(1)\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\nDivide by constant with reverse version.\n\n>>> df.div(10)\n           angles  degrees\ncircle        0.0     36.0\ntriangle      0.3     18.0\nrectangle     0.4     36.0\n\n>>> df.rdiv(10)\n             angles   degrees\ncircle          inf  0.027778\ntriangle   3.333333  0.055556\nrectangle  2.500000  0.027778\n\nSubtract a list and Series by axis with operator version.\n\n>>> df - [1, 2]\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub([1, 2], axis='columns')\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),\n...        axis='index')\n           angles  degrees\ncircle         -1      359\ntriangle        2      179\nrectangle       3      359\n\nMultiply a dictionary by axis.\n\n>>> df.mul({'angles': 0, 'degrees': 2})\n            angles  degrees\ncircle           0      720\ntriangle         0      360\nrectangle        0      720\n\n>>> df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')\n            angles  degrees\ncircle           0        0\ntriangle         6      360\nrectangle       12     1080\n\nMultiply a DataFrame of different shape with operator version.\n\n>>> other = pd.DataFrame({'angles': [0, 3, 4]},\n...                      index=['circle', 'triangle', 'rectangle'])\n>>> other\n           angles\ncircle          0\ntriangle        3\nrectangle       4\n\n>>> df * other\n           angles  degrees\ncircle          0      NaN\ntriangle        9      NaN\nrectangle      16      NaN\n\n>>> df.mul(other, fill_value=0)\n           angles  degrees\ncircle          0      0.0\ntriangle        9      0.0\nrectangle      16      0.0\n\nDivide by a MultiIndex by level.\n\n>>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],\n...                              'degrees': [360, 180, 360, 360, 540, 720]},\n...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],\n...                                    ['circle', 'triangle', 'rectangle',\n...                                     'square', 'pentagon', 'hexagon']])\n>>> df_multindex\n             angles  degrees\nA circle          0      360\n  triangle        3      180\n  rectangle       4      360\nB square          4      360\n  pentagon        5      540\n  hexagon         6      720\n\n>>> df.div(df_multindex, level=1, fill_value=0)\n             angles  degrees\nA circle        NaN      1.0\n  triangle      1.0      1.0\n  rectangle     1.0      1.0\nB square        0.0      0.0\n  pentagon      0.0      0.0\n  hexagon       0.0      0.0"
  },
  {
    "symbol": "DataFrame.rmul",
    "signature": "(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame'",
    "doc": "Get Multiplication of dataframe and other, element-wise (binary operator `rmul`).\n\nEquivalent to ``other * dataframe``, but with support to substitute a fill_value\nfor missing data in one of the inputs. With reverse version, `mul`.\n\nAmong flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to\narithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.\n\nParameters\n----------\nother : scalar, sequence, Series, dict or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis : {0 or 'index', 1 or 'columns'}\n    Whether to compare by the index (0 or 'index') or columns.\n    (1 or 'columns'). For Series input, axis to match Series index on.\nlevel : int or label\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : float or None, default None\n    Fill existing missing (NaN) values, and any new element needed for\n    successful DataFrame alignment, with this value before computation.\n    If data in both corresponding DataFrame locations is missing\n    the result will be missing.\n\nReturns\n-------\nDataFrame\n    Result of the arithmetic operation.\n\nSee Also\n--------\nDataFrame.add : Add DataFrames.\nDataFrame.sub : Subtract DataFrames.\nDataFrame.mul : Multiply DataFrames.\nDataFrame.div : Divide DataFrames (float division).\nDataFrame.truediv : Divide DataFrames (float division).\nDataFrame.floordiv : Divide DataFrames (integer division).\nDataFrame.mod : Calculate modulo (remainder after division).\nDataFrame.pow : Calculate exponential power.\n\nNotes\n-----\nMismatched indices will be unioned together.\n\nExamples\n--------\n>>> df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n>>> df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\nAdd a scalar with operator version which return the same\nresults.\n\n>>> df + 1\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\n>>> df.add(1)\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\nDivide by constant with reverse version.\n\n>>> df.div(10)\n           angles  degrees\ncircle        0.0     36.0\ntriangle      0.3     18.0\nrectangle     0.4     36.0\n\n>>> df.rdiv(10)\n             angles   degrees\ncircle          inf  0.027778\ntriangle   3.333333  0.055556\nrectangle  2.500000  0.027778\n\nSubtract a list and Series by axis with operator version.\n\n>>> df - [1, 2]\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub([1, 2], axis='columns')\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),\n...        axis='index')\n           angles  degrees\ncircle         -1      359\ntriangle        2      179\nrectangle       3      359\n\nMultiply a dictionary by axis.\n\n>>> df.mul({'angles': 0, 'degrees': 2})\n            angles  degrees\ncircle           0      720\ntriangle         0      360\nrectangle        0      720\n\n>>> df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')\n            angles  degrees\ncircle           0        0\ntriangle         6      360\nrectangle       12     1080\n\nMultiply a DataFrame of different shape with operator version.\n\n>>> other = pd.DataFrame({'angles': [0, 3, 4]},\n...                      index=['circle', 'triangle', 'rectangle'])\n>>> other\n           angles\ncircle          0\ntriangle        3\nrectangle       4\n\n>>> df * other\n           angles  degrees\ncircle          0      NaN\ntriangle        9      NaN\nrectangle      16      NaN\n\n>>> df.mul(other, fill_value=0)\n           angles  degrees\ncircle          0      0.0\ntriangle        9      0.0\nrectangle      16      0.0\n\nDivide by a MultiIndex by level.\n\n>>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],\n...                              'degrees': [360, 180, 360, 360, 540, 720]},\n...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],\n...                                    ['circle', 'triangle', 'rectangle',\n...                                     'square', 'pentagon', 'hexagon']])\n>>> df_multindex\n             angles  degrees\nA circle          0      360\n  triangle        3      180\n  rectangle       4      360\nB square          4      360\n  pentagon        5      540\n  hexagon         6      720\n\n>>> df.div(df_multindex, level=1, fill_value=0)\n             angles  degrees\nA circle        NaN      1.0\n  triangle      1.0      1.0\n  rectangle     1.0      1.0\nB square        0.0      0.0\n  pentagon      0.0      0.0\n  hexagon       0.0      0.0"
  },
  {
    "symbol": "DataFrame.rolling",
    "signature": "(self, window: 'int | dt.timedelta | str | BaseOffset | BaseIndexer', min_periods: 'int | None' = None, center: 'bool_t' = False, win_type: 'str | None' = None, on: 'str | None' = None, axis: 'Axis | lib.NoDefault' = <no_default>, closed: 'IntervalClosedType | None' = None, step: 'int | None' = None, method: 'str' = 'single') -> 'Window | Rolling'",
    "doc": "Provide rolling window calculations.\n\nParameters\n----------\nwindow : int, timedelta, str, offset, or BaseIndexer subclass\n    Size of the moving window.\n\n    If an integer, the fixed number of observations used for\n    each window.\n\n    If a timedelta, str, or offset, the time period of each window. Each\n    window will be a variable sized based on the observations included in\n    the time-period. This is only valid for datetimelike indexes.\n    To learn more about the offsets & frequency strings, please see `this link\n    <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\n    If a BaseIndexer subclass, the window boundaries\n    based on the defined ``get_window_bounds`` method. Additional rolling\n    keyword arguments, namely ``min_periods``, ``center``, ``closed`` and\n    ``step`` will be passed to ``get_window_bounds``.\n\nmin_periods : int, default None\n    Minimum number of observations in window required to have a value;\n    otherwise, result is ``np.nan``.\n\n    For a window that is specified by an offset, ``min_periods`` will default to 1.\n\n    For a window that is specified by an integer, ``min_periods`` will default\n    to the size of the window.\n\ncenter : bool, default False\n    If False, set the window labels as the right edge of the window index.\n\n    If True, set the window labels as the center of the window index.\n\nwin_type : str, default None\n    If ``None``, all points are evenly weighted.\n\n    If a string, it must be a valid `scipy.signal window function\n    <https://docs.scipy.org/doc/scipy/reference/signal.windows.html#module-scipy.signal.windows>`__.\n\n    Certain Scipy window types require additional parameters to be passed\n    in the aggregation function. The additional parameters must match\n    the keywords specified in the Scipy window type method signature.\n\non : str, optional\n    For a DataFrame, a column label or Index level on which\n    to calculate the rolling window, rather than the DataFrame's index.\n\n    Provided integer column is ignored and excluded from result since\n    an integer index is not used to calculate the rolling window.\n\naxis : int or str, default 0\n    If ``0`` or ``'index'``, roll across the rows.\n\n    If ``1`` or ``'columns'``, roll across the columns.\n\n    For `Series` this parameter is unused and defaults to 0.\n\n    .. deprecated:: 2.1.0\n\n        The axis keyword is deprecated. For ``axis=1``,\n        transpose the DataFrame first instead.\n\nclosed : str, default None\n    If ``'right'``, the first point in the window is excluded from calculations.\n\n    If ``'left'``, the last point in the window is excluded from calculations.\n\n    If ``'both'``, the no points in the window are excluded from calculations.\n\n    If ``'neither'``, the first and last points in the window are excluded\n    from calculations.\n\n    Default ``None`` (``'right'``).\n\nstep : int, default None\n\n    .. versionadded:: 1.5.0\n\n    Evaluate the window at every ``step`` result, equivalent to slicing as\n    ``[::step]``. ``window`` must be an integer. Using a step argument other\n    than None or 1 will produce a result with a different shape than the input.\n\nmethod : str {'single', 'table'}, default 'single'\n\n    .. versionadded:: 1.3.0\n\n    Execute the rolling operation per single column or row (``'single'``)\n    or over the entire object (``'table'``).\n\n    This argument is only implemented when specifying ``engine='numba'``\n    in the method call.\n\nReturns\n-------\npandas.api.typing.Window or pandas.api.typing.Rolling\n    An instance of Window is returned if ``win_type`` is passed. Otherwise,\n    an instance of Rolling is returned.\n\nSee Also\n--------\nexpanding : Provides expanding transformations.\newm : Provides exponential weighted functions.\n\nNotes\n-----\nSee :ref:`Windowing Operations <window.generic>` for further usage details\nand examples.\n\nExamples\n--------\n>>> df = pd.DataFrame({'B': [0, 1, 2, np.nan, 4]})\n>>> df\n     B\n0  0.0\n1  1.0\n2  2.0\n3  NaN\n4  4.0\n\n**window**\n\nRolling sum with a window length of 2 observations.\n\n>>> df.rolling(2).sum()\n     B\n0  NaN\n1  1.0\n2  3.0\n3  NaN\n4  NaN\n\nRolling sum with a window span of 2 seconds.\n\n>>> df_time = pd.DataFrame({'B': [0, 1, 2, np.nan, 4]},\n...                        index=[pd.Timestamp('20130101 09:00:00'),\n...                               pd.Timestamp('20130101 09:00:02'),\n...                               pd.Timestamp('20130101 09:00:03'),\n...                               pd.Timestamp('20130101 09:00:05'),\n...                               pd.Timestamp('20130101 09:00:06')])\n\n>>> df_time\n                       B\n2013-01-01 09:00:00  0.0\n2013-01-01 09:00:02  1.0\n2013-01-01 09:00:03  2.0\n2013-01-01 09:00:05  NaN\n2013-01-01 09:00:06  4.0\n\n>>> df_time.rolling('2s').sum()\n                       B\n2013-01-01 09:00:00  0.0\n2013-01-01 09:00:02  1.0\n2013-01-01 09:00:03  3.0\n2013-01-01 09:00:05  NaN\n2013-01-01 09:00:06  4.0\n\nRolling sum with forward looking windows with 2 observations.\n\n>>> indexer = pd.api.indexers.FixedForwardWindowIndexer(window_size=2)\n>>> df.rolling(window=indexer, min_periods=1).sum()\n     B\n0  1.0\n1  3.0\n2  2.0\n3  4.0\n4  4.0\n\n**min_periods**\n\nRolling sum with a window length of 2 observations, but only needs a minimum of 1\nobservation to calculate a value.\n\n>>> df.rolling(2, min_periods=1).sum()\n     B\n0  0.0\n1  1.0\n2  3.0\n3  2.0\n4  4.0\n\n**center**\n\nRolling sum with the result assigned to the center of the window index.\n\n>>> df.rolling(3, min_periods=1, center=True).sum()\n     B\n0  1.0\n1  3.0\n2  3.0\n3  6.0\n4  4.0\n\n>>> df.rolling(3, min_periods=1, center=False).sum()\n     B\n0  0.0\n1  1.0\n2  3.0\n3  3.0\n4  6.0\n\n**step**\n\nRolling sum with a window length of 2 observations, minimum of 1 observation to\ncalculate a value, and a step of 2.\n\n>>> df.rolling(2, min_periods=1, step=2).sum()\n     B\n0  0.0\n2  3.0\n4  4.0\n\n**win_type**\n\nRolling sum with a window length of 2, using the Scipy ``'gaussian'``\nwindow type. ``std`` is required in the aggregation function.\n\n>>> df.rolling(2, win_type='gaussian').sum(std=3)\n          B\n0       NaN\n1  0.986207\n2  2.958621\n3       NaN\n4       NaN\n\n**on**\n\nRolling sum with a window length of 2 days.\n\n>>> df = pd.DataFrame({\n...     'A': [pd.to_datetime('2020-01-01'),\n...           pd.to_datetime('2020-01-01'),\n...           pd.to_datetime('2020-01-02'),],\n...     'B': [1, 2, 3], },\n...     index=pd.date_range('2020', periods=3))\n\n>>> df\n                    A  B\n2020-01-01 2020-01-01  1\n2020-01-02 2020-01-01  2\n2020-01-03 2020-01-02  3\n\n>>> df.rolling('2D', on='A').sum()\n                    A    B\n2020-01-01 2020-01-01  1.0\n2020-01-02 2020-01-01  3.0\n2020-01-03 2020-01-02  6.0"
  },
  {
    "symbol": "DataFrame.round",
    "signature": "(self, decimals: 'int | dict[IndexLabel, int] | Series' = 0, *args, **kwargs) -> 'DataFrame'",
    "doc": "Round a DataFrame to a variable number of decimal places.\n\nParameters\n----------\ndecimals : int, dict, Series\n    Number of decimal places to round each column to. If an int is\n    given, round each column to the same number of places.\n    Otherwise dict and Series round to variable numbers of places.\n    Column names should be in the keys if `decimals` is a\n    dict-like, or in the index if `decimals` is a Series. Any\n    columns not included in `decimals` will be left as is. Elements\n    of `decimals` which are not columns of the input will be\n    ignored.\n*args\n    Additional keywords have no effect but might be accepted for\n    compatibility with numpy.\n**kwargs\n    Additional keywords have no effect but might be accepted for\n    compatibility with numpy.\n\nReturns\n-------\nDataFrame\n    A DataFrame with the affected columns rounded to the specified\n    number of decimal places.\n\nSee Also\n--------\nnumpy.around : Round a numpy array to the given number of decimals.\nSeries.round : Round a Series to the given number of decimals.\n\nExamples\n--------\n>>> df = pd.DataFrame([(.21, .32), (.01, .67), (.66, .03), (.21, .18)],\n...                   columns=['dogs', 'cats'])\n>>> df\n    dogs  cats\n0  0.21  0.32\n1  0.01  0.67\n2  0.66  0.03\n3  0.21  0.18\n\nBy providing an integer each column is rounded to the same number\nof decimal places\n\n>>> df.round(1)\n    dogs  cats\n0   0.2   0.3\n1   0.0   0.7\n2   0.7   0.0\n3   0.2   0.2\n\nWith a dict, the number of places for specific columns can be\nspecified with the column names as key and the number of decimal\nplaces as value\n\n>>> df.round({'dogs': 1, 'cats': 0})\n    dogs  cats\n0   0.2   0.0\n1   0.0   1.0\n2   0.7   0.0\n3   0.2   0.0\n\nUsing a Series, the number of places for specific columns can be\nspecified with the column names as index and the number of\ndecimal places as value\n\n>>> decimals = pd.Series([0, 1], index=['cats', 'dogs'])\n>>> df.round(decimals)\n    dogs  cats\n0   0.2   0.0\n1   0.0   1.0\n2   0.7   0.0\n3   0.2   0.0"
  },
  {
    "symbol": "DataFrame.rpow",
    "signature": "(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame'",
    "doc": "Get Exponential power of dataframe and other, element-wise (binary operator `rpow`).\n\nEquivalent to ``other ** dataframe``, but with support to substitute a fill_value\nfor missing data in one of the inputs. With reverse version, `pow`.\n\nAmong flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to\narithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.\n\nParameters\n----------\nother : scalar, sequence, Series, dict or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis : {0 or 'index', 1 or 'columns'}\n    Whether to compare by the index (0 or 'index') or columns.\n    (1 or 'columns'). For Series input, axis to match Series index on.\nlevel : int or label\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : float or None, default None\n    Fill existing missing (NaN) values, and any new element needed for\n    successful DataFrame alignment, with this value before computation.\n    If data in both corresponding DataFrame locations is missing\n    the result will be missing.\n\nReturns\n-------\nDataFrame\n    Result of the arithmetic operation.\n\nSee Also\n--------\nDataFrame.add : Add DataFrames.\nDataFrame.sub : Subtract DataFrames.\nDataFrame.mul : Multiply DataFrames.\nDataFrame.div : Divide DataFrames (float division).\nDataFrame.truediv : Divide DataFrames (float division).\nDataFrame.floordiv : Divide DataFrames (integer division).\nDataFrame.mod : Calculate modulo (remainder after division).\nDataFrame.pow : Calculate exponential power.\n\nNotes\n-----\nMismatched indices will be unioned together.\n\nExamples\n--------\n>>> df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n>>> df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\nAdd a scalar with operator version which return the same\nresults.\n\n>>> df + 1\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\n>>> df.add(1)\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\nDivide by constant with reverse version.\n\n>>> df.div(10)\n           angles  degrees\ncircle        0.0     36.0\ntriangle      0.3     18.0\nrectangle     0.4     36.0\n\n>>> df.rdiv(10)\n             angles   degrees\ncircle          inf  0.027778\ntriangle   3.333333  0.055556\nrectangle  2.500000  0.027778\n\nSubtract a list and Series by axis with operator version.\n\n>>> df - [1, 2]\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub([1, 2], axis='columns')\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),\n...        axis='index')\n           angles  degrees\ncircle         -1      359\ntriangle        2      179\nrectangle       3      359\n\nMultiply a dictionary by axis.\n\n>>> df.mul({'angles': 0, 'degrees': 2})\n            angles  degrees\ncircle           0      720\ntriangle         0      360\nrectangle        0      720\n\n>>> df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')\n            angles  degrees\ncircle           0        0\ntriangle         6      360\nrectangle       12     1080\n\nMultiply a DataFrame of different shape with operator version.\n\n>>> other = pd.DataFrame({'angles': [0, 3, 4]},\n...                      index=['circle', 'triangle', 'rectangle'])\n>>> other\n           angles\ncircle          0\ntriangle        3\nrectangle       4\n\n>>> df * other\n           angles  degrees\ncircle          0      NaN\ntriangle        9      NaN\nrectangle      16      NaN\n\n>>> df.mul(other, fill_value=0)\n           angles  degrees\ncircle          0      0.0\ntriangle        9      0.0\nrectangle      16      0.0\n\nDivide by a MultiIndex by level.\n\n>>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],\n...                              'degrees': [360, 180, 360, 360, 540, 720]},\n...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],\n...                                    ['circle', 'triangle', 'rectangle',\n...                                     'square', 'pentagon', 'hexagon']])\n>>> df_multindex\n             angles  degrees\nA circle          0      360\n  triangle        3      180\n  rectangle       4      360\nB square          4      360\n  pentagon        5      540\n  hexagon         6      720\n\n>>> df.div(df_multindex, level=1, fill_value=0)\n             angles  degrees\nA circle        NaN      1.0\n  triangle      1.0      1.0\n  rectangle     1.0      1.0\nB square        0.0      0.0\n  pentagon      0.0      0.0\n  hexagon       0.0      0.0"
  },
  {
    "symbol": "DataFrame.rsub",
    "signature": "(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame'",
    "doc": "Get Subtraction of dataframe and other, element-wise (binary operator `rsub`).\n\nEquivalent to ``other - dataframe``, but with support to substitute a fill_value\nfor missing data in one of the inputs. With reverse version, `sub`.\n\nAmong flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to\narithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.\n\nParameters\n----------\nother : scalar, sequence, Series, dict or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis : {0 or 'index', 1 or 'columns'}\n    Whether to compare by the index (0 or 'index') or columns.\n    (1 or 'columns'). For Series input, axis to match Series index on.\nlevel : int or label\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : float or None, default None\n    Fill existing missing (NaN) values, and any new element needed for\n    successful DataFrame alignment, with this value before computation.\n    If data in both corresponding DataFrame locations is missing\n    the result will be missing.\n\nReturns\n-------\nDataFrame\n    Result of the arithmetic operation.\n\nSee Also\n--------\nDataFrame.add : Add DataFrames.\nDataFrame.sub : Subtract DataFrames.\nDataFrame.mul : Multiply DataFrames.\nDataFrame.div : Divide DataFrames (float division).\nDataFrame.truediv : Divide DataFrames (float division).\nDataFrame.floordiv : Divide DataFrames (integer division).\nDataFrame.mod : Calculate modulo (remainder after division).\nDataFrame.pow : Calculate exponential power.\n\nNotes\n-----\nMismatched indices will be unioned together.\n\nExamples\n--------\n>>> df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n>>> df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\nAdd a scalar with operator version which return the same\nresults.\n\n>>> df + 1\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\n>>> df.add(1)\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\nDivide by constant with reverse version.\n\n>>> df.div(10)\n           angles  degrees\ncircle        0.0     36.0\ntriangle      0.3     18.0\nrectangle     0.4     36.0\n\n>>> df.rdiv(10)\n             angles   degrees\ncircle          inf  0.027778\ntriangle   3.333333  0.055556\nrectangle  2.500000  0.027778\n\nSubtract a list and Series by axis with operator version.\n\n>>> df - [1, 2]\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub([1, 2], axis='columns')\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),\n...        axis='index')\n           angles  degrees\ncircle         -1      359\ntriangle        2      179\nrectangle       3      359\n\nMultiply a dictionary by axis.\n\n>>> df.mul({'angles': 0, 'degrees': 2})\n            angles  degrees\ncircle           0      720\ntriangle         0      360\nrectangle        0      720\n\n>>> df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')\n            angles  degrees\ncircle           0        0\ntriangle         6      360\nrectangle       12     1080\n\nMultiply a DataFrame of different shape with operator version.\n\n>>> other = pd.DataFrame({'angles': [0, 3, 4]},\n...                      index=['circle', 'triangle', 'rectangle'])\n>>> other\n           angles\ncircle          0\ntriangle        3\nrectangle       4\n\n>>> df * other\n           angles  degrees\ncircle          0      NaN\ntriangle        9      NaN\nrectangle      16      NaN\n\n>>> df.mul(other, fill_value=0)\n           angles  degrees\ncircle          0      0.0\ntriangle        9      0.0\nrectangle      16      0.0\n\nDivide by a MultiIndex by level.\n\n>>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],\n...                              'degrees': [360, 180, 360, 360, 540, 720]},\n...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],\n...                                    ['circle', 'triangle', 'rectangle',\n...                                     'square', 'pentagon', 'hexagon']])\n>>> df_multindex\n             angles  degrees\nA circle          0      360\n  triangle        3      180\n  rectangle       4      360\nB square          4      360\n  pentagon        5      540\n  hexagon         6      720\n\n>>> df.div(df_multindex, level=1, fill_value=0)\n             angles  degrees\nA circle        NaN      1.0\n  triangle      1.0      1.0\n  rectangle     1.0      1.0\nB square        0.0      0.0\n  pentagon      0.0      0.0\n  hexagon       0.0      0.0"
  },
  {
    "symbol": "DataFrame.rtruediv",
    "signature": "(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame'",
    "doc": "Get Floating division of dataframe and other, element-wise (binary operator `rtruediv`).\n\nEquivalent to ``other / dataframe``, but with support to substitute a fill_value\nfor missing data in one of the inputs. With reverse version, `truediv`.\n\nAmong flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to\narithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.\n\nParameters\n----------\nother : scalar, sequence, Series, dict or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis : {0 or 'index', 1 or 'columns'}\n    Whether to compare by the index (0 or 'index') or columns.\n    (1 or 'columns'). For Series input, axis to match Series index on.\nlevel : int or label\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : float or None, default None\n    Fill existing missing (NaN) values, and any new element needed for\n    successful DataFrame alignment, with this value before computation.\n    If data in both corresponding DataFrame locations is missing\n    the result will be missing.\n\nReturns\n-------\nDataFrame\n    Result of the arithmetic operation.\n\nSee Also\n--------\nDataFrame.add : Add DataFrames.\nDataFrame.sub : Subtract DataFrames.\nDataFrame.mul : Multiply DataFrames.\nDataFrame.div : Divide DataFrames (float division).\nDataFrame.truediv : Divide DataFrames (float division).\nDataFrame.floordiv : Divide DataFrames (integer division).\nDataFrame.mod : Calculate modulo (remainder after division).\nDataFrame.pow : Calculate exponential power.\n\nNotes\n-----\nMismatched indices will be unioned together.\n\nExamples\n--------\n>>> df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n>>> df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\nAdd a scalar with operator version which return the same\nresults.\n\n>>> df + 1\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\n>>> df.add(1)\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\nDivide by constant with reverse version.\n\n>>> df.div(10)\n           angles  degrees\ncircle        0.0     36.0\ntriangle      0.3     18.0\nrectangle     0.4     36.0\n\n>>> df.rdiv(10)\n             angles   degrees\ncircle          inf  0.027778\ntriangle   3.333333  0.055556\nrectangle  2.500000  0.027778\n\nSubtract a list and Series by axis with operator version.\n\n>>> df - [1, 2]\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub([1, 2], axis='columns')\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),\n...        axis='index')\n           angles  degrees\ncircle         -1      359\ntriangle        2      179\nrectangle       3      359\n\nMultiply a dictionary by axis.\n\n>>> df.mul({'angles': 0, 'degrees': 2})\n            angles  degrees\ncircle           0      720\ntriangle         0      360\nrectangle        0      720\n\n>>> df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')\n            angles  degrees\ncircle           0        0\ntriangle         6      360\nrectangle       12     1080\n\nMultiply a DataFrame of different shape with operator version.\n\n>>> other = pd.DataFrame({'angles': [0, 3, 4]},\n...                      index=['circle', 'triangle', 'rectangle'])\n>>> other\n           angles\ncircle          0\ntriangle        3\nrectangle       4\n\n>>> df * other\n           angles  degrees\ncircle          0      NaN\ntriangle        9      NaN\nrectangle      16      NaN\n\n>>> df.mul(other, fill_value=0)\n           angles  degrees\ncircle          0      0.0\ntriangle        9      0.0\nrectangle      16      0.0\n\nDivide by a MultiIndex by level.\n\n>>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],\n...                              'degrees': [360, 180, 360, 360, 540, 720]},\n...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],\n...                                    ['circle', 'triangle', 'rectangle',\n...                                     'square', 'pentagon', 'hexagon']])\n>>> df_multindex\n             angles  degrees\nA circle          0      360\n  triangle        3      180\n  rectangle       4      360\nB square          4      360\n  pentagon        5      540\n  hexagon         6      720\n\n>>> df.div(df_multindex, level=1, fill_value=0)\n             angles  degrees\nA circle        NaN      1.0\n  triangle      1.0      1.0\n  rectangle     1.0      1.0\nB square        0.0      0.0\n  pentagon      0.0      0.0\n  hexagon       0.0      0.0"
  },
  {
    "symbol": "DataFrame.sample",
    "signature": "(self, n: 'int | None' = None, frac: 'float | None' = None, replace: 'bool_t' = False, weights=None, random_state: 'RandomState | None' = None, axis: 'Axis | None' = None, ignore_index: 'bool_t' = False) -> 'Self'",
    "doc": "Return a random sample of items from an axis of object.\n\nYou can use `random_state` for reproducibility.\n\nParameters\n----------\nn : int, optional\n    Number of items from axis to return. Cannot be used with `frac`.\n    Default = 1 if `frac` = None.\nfrac : float, optional\n    Fraction of axis items to return. Cannot be used with `n`.\nreplace : bool, default False\n    Allow or disallow sampling of the same row more than once.\nweights : str or ndarray-like, optional\n    Default 'None' results in equal probability weighting.\n    If passed a Series, will align with target object on index. Index\n    values in weights not found in sampled object will be ignored and\n    index values in sampled object not in weights will be assigned\n    weights of zero.\n    If called on a DataFrame, will accept the name of a column\n    when axis = 0.\n    Unless weights are a Series, weights must be same length as axis\n    being sampled.\n    If weights do not sum to 1, they will be normalized to sum to 1.\n    Missing values in the weights column will be treated as zero.\n    Infinite values not allowed.\nrandom_state : int, array-like, BitGenerator, np.random.RandomState, np.random.Generator, optional\n    If int, array-like, or BitGenerator, seed for random number generator.\n    If np.random.RandomState or np.random.Generator, use as given.\n\n    .. versionchanged:: 1.4.0\n\n        np.random.Generator objects now accepted\n\naxis : {0 or 'index', 1 or 'columns', None}, default None\n    Axis to sample. Accepts axis number or name. Default is stat axis\n    for given data type. For `Series` this parameter is unused and defaults to `None`.\nignore_index : bool, default False\n    If True, the resulting index will be labeled 0, 1, …, n - 1.\n\n    .. versionadded:: 1.3.0\n\nReturns\n-------\nSeries or DataFrame\n    A new object of same type as caller containing `n` items randomly\n    sampled from the caller object.\n\nSee Also\n--------\nDataFrameGroupBy.sample: Generates random samples from each group of a\n    DataFrame object.\nSeriesGroupBy.sample: Generates random samples from each group of a\n    Series object.\nnumpy.random.choice: Generates a random sample from a given 1-D numpy\n    array.\n\nNotes\n-----\nIf `frac` > 1, `replacement` should be set to `True`.\n\nExamples\n--------\n>>> df = pd.DataFrame({'num_legs': [2, 4, 8, 0],\n...                    'num_wings': [2, 0, 0, 0],\n...                    'num_specimen_seen': [10, 2, 1, 8]},\n...                   index=['falcon', 'dog', 'spider', 'fish'])\n>>> df\n        num_legs  num_wings  num_specimen_seen\nfalcon         2          2                 10\ndog            4          0                  2\nspider         8          0                  1\nfish           0          0                  8\n\nExtract 3 random elements from the ``Series`` ``df['num_legs']``:\nNote that we use `random_state` to ensure the reproducibility of\nthe examples.\n\n>>> df['num_legs'].sample(n=3, random_state=1)\nfish      0\nspider    8\nfalcon    2\nName: num_legs, dtype: int64\n\nA random 50% sample of the ``DataFrame`` with replacement:\n\n>>> df.sample(frac=0.5, replace=True, random_state=1)\n      num_legs  num_wings  num_specimen_seen\ndog          4          0                  2\nfish         0          0                  8\n\nAn upsample sample of the ``DataFrame`` with replacement:\nNote that `replace` parameter has to be `True` for `frac` parameter > 1.\n\n>>> df.sample(frac=2, replace=True, random_state=1)\n        num_legs  num_wings  num_specimen_seen\ndog            4          0                  2\nfish           0          0                  8\nfalcon         2          2                 10\nfalcon         2          2                 10\nfish           0          0                  8\ndog            4          0                  2\nfish           0          0                  8\ndog            4          0                  2\n\nUsing a DataFrame column as weights. Rows with larger value in the\n`num_specimen_seen` column are more likely to be sampled.\n\n>>> df.sample(n=2, weights='num_specimen_seen', random_state=1)\n        num_legs  num_wings  num_specimen_seen\nfalcon         2          2                 10\nfish           0          0                  8"
  },
  {
    "symbol": "DataFrame.select_dtypes",
    "signature": "(self, include=None, exclude=None) -> 'Self'",
    "doc": "Return a subset of the DataFrame's columns based on the column dtypes.\n\nParameters\n----------\ninclude, exclude : scalar or list-like\n    A selection of dtypes or strings to be included/excluded. At least\n    one of these parameters must be supplied.\n\nReturns\n-------\nDataFrame\n    The subset of the frame including the dtypes in ``include`` and\n    excluding the dtypes in ``exclude``.\n\nRaises\n------\nValueError\n    * If both of ``include`` and ``exclude`` are empty\n    * If ``include`` and ``exclude`` have overlapping elements\n    * If any kind of string dtype is passed in.\n\nSee Also\n--------\nDataFrame.dtypes: Return Series with the data type of each column.\n\nNotes\n-----\n* To select all *numeric* types, use ``np.number`` or ``'number'``\n* To select strings you must use the ``object`` dtype, but note that\n  this will return *all* object dtype columns. With\n  ``pd.options.future.infer_string`` enabled, using ``\"str\"`` will\n  work to select all string columns.\n* See the `numpy dtype hierarchy\n  <https://numpy.org/doc/stable/reference/arrays.scalars.html>`__\n* To select datetimes, use ``np.datetime64``, ``'datetime'`` or\n  ``'datetime64'``\n* To select timedeltas, use ``np.timedelta64``, ``'timedelta'`` or\n  ``'timedelta64'``\n* To select Pandas categorical dtypes, use ``'category'``\n* To select Pandas datetimetz dtypes, use ``'datetimetz'``\n  or ``'datetime64[ns, tz]'``\n\nExamples\n--------\n>>> df = pd.DataFrame({'a': [1, 2] * 3,\n...                    'b': [True, False] * 3,\n...                    'c': [1.0, 2.0] * 3})\n>>> df\n        a      b  c\n0       1   True  1.0\n1       2  False  2.0\n2       1   True  1.0\n3       2  False  2.0\n4       1   True  1.0\n5       2  False  2.0\n\n>>> df.select_dtypes(include='bool')\n   b\n0  True\n1  False\n2  True\n3  False\n4  True\n5  False\n\n>>> df.select_dtypes(include=['float64'])\n   c\n0  1.0\n1  2.0\n2  1.0\n3  2.0\n4  1.0\n5  2.0\n\n>>> df.select_dtypes(exclude=['int64'])\n       b    c\n0   True  1.0\n1  False  2.0\n2   True  1.0\n3  False  2.0\n4   True  1.0\n5  False  2.0"
  },
  {
    "symbol": "DataFrame.sem",
    "signature": "(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, ddof: 'int' = 1, numeric_only: 'bool' = False, **kwargs)",
    "doc": "Return unbiased standard error of the mean over requested axis.\n\nNormalized by N-1 by default. This can be changed using the ddof argument\n\nParameters\n----------\naxis : {index (0), columns (1)}\n    For `Series` this parameter is unused and defaults to 0.\n\n    .. warning::\n\n        The behavior of DataFrame.sem with ``axis=None`` is deprecated,\n        in a future version this will reduce over both axes and return a scalar\n        To retain the old behavior, pass axis=0 (or do not pass axis).\n\nskipna : bool, default True\n    Exclude NA/null values. If an entire row/column is NA, the result\n    will be NA.\nddof : int, default 1\n    Delta Degrees of Freedom. The divisor used in calculations is N - ddof,\n    where N represents the number of elements.\nnumeric_only : bool, default False\n    Include only float, int, boolean columns. Not implemented for Series.\n\nReturns\n-------\nSeries or DataFrame (if level specified) \n\n            Examples\n            --------\n            >>> s = pd.Series([1, 2, 3])\n            >>> s.sem().round(6)\n            0.57735\n\n            With a DataFrame\n\n            >>> df = pd.DataFrame({'a': [1, 2], 'b': [2, 3]}, index=['tiger', 'zebra'])\n            >>> df\n                   a   b\n            tiger  1   2\n            zebra  2   3\n            >>> df.sem()\n            a   0.5\n            b   0.5\n            dtype: float64\n\n            Using axis=1\n\n            >>> df.sem(axis=1)\n            tiger   0.5\n            zebra   0.5\n            dtype: float64\n\n            In this case, `numeric_only` should be set to `True`\n            to avoid getting an error.\n\n            >>> df = pd.DataFrame({'a': [1, 2], 'b': ['T', 'Z']},\n            ...                   index=['tiger', 'zebra'])\n            >>> df.sem(numeric_only=True)\n            a   0.5\n            dtype: float64"
  },
  {
    "symbol": "DataFrame.set_axis",
    "signature": "(self, labels, *, axis: 'Axis' = 0, copy: 'bool | None' = None) -> 'DataFrame'",
    "doc": "Assign desired index to given axis.\n\nIndexes for column or row labels can be changed by assigning\na list-like or Index.\n\nParameters\n----------\nlabels : list-like, Index\n    The values for the new index.\n\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    The axis to update. The value 0 identifies the rows. For `Series`\n    this parameter is unused and defaults to 0.\n\ncopy : bool, default True\n    Whether to make a copy of the underlying data.\n\n    .. note::\n        The `copy` keyword will change behavior in pandas 3.0.\n        `Copy-on-Write\n        <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n        will be enabled by default, which means that all methods with a\n        `copy` keyword will use a lazy copy mechanism to defer the copy and\n        ignore the `copy` keyword. The `copy` keyword will be removed in a\n        future version of pandas.\n\n        You can already get the future behavior and improvements through\n        enabling copy on write ``pd.options.mode.copy_on_write = True``\n\nReturns\n-------\nDataFrame\n    An object of type DataFrame.\n\nSee Also\n--------\nDataFrame.rename_axis : Alter the name of the index or columns.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n\n        Change the row labels.\n\n        >>> df.set_axis(['a', 'b', 'c'], axis='index')\n           A  B\n        a  1  4\n        b  2  5\n        c  3  6\n\n        Change the column labels.\n\n        >>> df.set_axis(['I', 'II'], axis='columns')\n           I  II\n        0  1   4\n        1  2   5\n        2  3   6"
  },
  {
    "symbol": "DataFrame.set_flags",
    "signature": "(self, *, copy: 'bool_t' = False, allows_duplicate_labels: 'bool_t | None' = None) -> 'Self'",
    "doc": "Return a new object with updated flags.\n\nParameters\n----------\ncopy : bool, default False\n    Specify if a copy of the object should be made.\n\n    .. note::\n        The `copy` keyword will change behavior in pandas 3.0.\n        `Copy-on-Write\n        <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n        will be enabled by default, which means that all methods with a\n        `copy` keyword will use a lazy copy mechanism to defer the copy and\n        ignore the `copy` keyword. The `copy` keyword will be removed in a\n        future version of pandas.\n\n        You can already get the future behavior and improvements through\n        enabling copy on write ``pd.options.mode.copy_on_write = True``\nallows_duplicate_labels : bool, optional\n    Whether the returned object allows duplicate labels.\n\nReturns\n-------\nSeries or DataFrame\n    The same type as the caller.\n\nSee Also\n--------\nDataFrame.attrs : Global metadata applying to this dataset.\nDataFrame.flags : Global flags applying to this object.\n\nNotes\n-----\nThis method returns a new object that's a view on the same data\nas the input. Mutating the input or the output values will be reflected\nin the other.\n\nThis method is intended to be used in method chains.\n\n\"Flags\" differ from \"metadata\". Flags reflect properties of the\npandas object (the Series or DataFrame). Metadata refer to properties\nof the dataset, and should be stored in :attr:`DataFrame.attrs`.\n\nExamples\n--------\n>>> df = pd.DataFrame({\"A\": [1, 2]})\n>>> df.flags.allows_duplicate_labels\nTrue\n>>> df2 = df.set_flags(allows_duplicate_labels=False)\n>>> df2.flags.allows_duplicate_labels\nFalse"
  },
  {
    "symbol": "DataFrame.set_index",
    "signature": "(self, keys, *, drop: 'bool' = True, append: 'bool' = False, inplace: 'bool' = False, verify_integrity: 'bool' = False) -> 'DataFrame | None'",
    "doc": "Set the DataFrame index using existing columns.\n\nSet the DataFrame index (row labels) using one or more existing\ncolumns or arrays (of the correct length). The index can replace the\nexisting index or expand on it.\n\nParameters\n----------\nkeys : label or array-like or list of labels/arrays\n    This parameter can be either a single column key, a single array of\n    the same length as the calling DataFrame, or a list containing an\n    arbitrary combination of column keys and arrays. Here, \"array\"\n    encompasses :class:`Series`, :class:`Index`, ``np.ndarray``, and\n    instances of :class:`~collections.abc.Iterator`.\ndrop : bool, default True\n    Delete columns to be used as the new index.\nappend : bool, default False\n    Whether to append columns to existing index.\ninplace : bool, default False\n    Whether to modify the DataFrame rather than creating a new one.\nverify_integrity : bool, default False\n    Check the new index for duplicates. Otherwise defer the check until\n    necessary. Setting to False will improve the performance of this\n    method.\n\nReturns\n-------\nDataFrame or None\n    Changed row labels or None if ``inplace=True``.\n\nSee Also\n--------\nDataFrame.reset_index : Opposite of set_index.\nDataFrame.reindex : Change to new indices or expand indices.\nDataFrame.reindex_like : Change to same indices as other DataFrame.\n\nExamples\n--------\n>>> df = pd.DataFrame({'month': [1, 4, 7, 10],\n...                    'year': [2012, 2014, 2013, 2014],\n...                    'sale': [55, 40, 84, 31]})\n>>> df\n   month  year  sale\n0      1  2012    55\n1      4  2014    40\n2      7  2013    84\n3     10  2014    31\n\nSet the index to become the 'month' column:\n\n>>> df.set_index('month')\n       year  sale\nmonth\n1      2012    55\n4      2014    40\n7      2013    84\n10     2014    31\n\nCreate a MultiIndex using columns 'year' and 'month':\n\n>>> df.set_index(['year', 'month'])\n            sale\nyear  month\n2012  1     55\n2014  4     40\n2013  7     84\n2014  10    31\n\nCreate a MultiIndex using an Index and a column:\n\n>>> df.set_index([pd.Index([1, 2, 3, 4]), 'year'])\n         month  sale\n   year\n1  2012  1      55\n2  2014  4      40\n3  2013  7      84\n4  2014  10     31\n\nCreate a MultiIndex using two Series:\n\n>>> s = pd.Series([1, 2, 3, 4])\n>>> df.set_index([s, s**2])\n      month  year  sale\n1 1       1  2012    55\n2 4       4  2014    40\n3 9       7  2013    84\n4 16     10  2014    31"
  },
  {
    "symbol": "DataFrame.shape",
    "signature": "(property)",
    "doc": "\nReturn a tuple representing the dimensionality of the DataFrame.\n\nSee Also\n--------\nndarray.shape : Tuple of array dimensions.\n\nExamples\n--------\n>>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n>>> df.shape\n(2, 2)\n\n>>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4],\n...                    'col3': [5, 6]})\n>>> df.shape\n(2, 3)\n"
  },
  {
    "symbol": "DataFrame.shift",
    "signature": "(self, periods: 'int | Sequence[int]' = 1, freq: 'Frequency | None' = None, axis: 'Axis' = 0, fill_value: 'Hashable' = <no_default>, suffix: 'str | None' = None) -> 'DataFrame'",
    "doc": "Shift index by desired number of periods with an optional time `freq`.\n\nWhen `freq` is not passed, shift the index without realigning the data.\nIf `freq` is passed (in this case, the index must be date or datetime,\nor it will raise a `NotImplementedError`), the index will be\nincreased using the periods and the `freq`. `freq` can be inferred\nwhen specified as \"infer\" as long as either freq or inferred_freq\nattribute is set in the index.\n\nParameters\n----------\nperiods : int or Sequence\n    Number of periods to shift. Can be positive or negative.\n    If an iterable of ints, the data will be shifted once by each int.\n    This is equivalent to shifting by one value at a time and\n    concatenating all resulting frames. The resulting columns will have\n    the shift suffixed to their column names. For multiple periods,\n    axis must not be 1.\nfreq : DateOffset, tseries.offsets, timedelta, or str, optional\n    Offset to use from the tseries module or time rule (e.g. 'EOM').\n    If `freq` is specified then the index values are shifted but the\n    data is not realigned. That is, use `freq` if you would like to\n    extend the index when shifting and preserve the original data.\n    If `freq` is specified as \"infer\" then it will be inferred from\n    the freq or inferred_freq attributes of the index. If neither of\n    those attributes exist, a ValueError is thrown.\naxis : {0 or 'index', 1 or 'columns', None}, default None\n    Shift direction. For `Series` this parameter is unused and defaults to 0.\nfill_value : object, optional\n    The scalar value to use for newly introduced missing values.\n    the default depends on the dtype of `self`.\n    For numeric data, ``np.nan`` is used.\n    For datetime, timedelta, or period data, etc. :attr:`NaT` is used.\n    For extension dtypes, ``self.dtype.na_value`` is used.\nsuffix : str, optional\n    If str and periods is an iterable, this is added after the column\n    name and before the shift value for each shifted column name.\n\nReturns\n-------\nDataFrame\n    Copy of input object, shifted.\n\nSee Also\n--------\nIndex.shift : Shift values of Index.\nDatetimeIndex.shift : Shift values of DatetimeIndex.\nPeriodIndex.shift : Shift values of PeriodIndex.\n\nExamples\n--------\n>>> df = pd.DataFrame({\"Col1\": [10, 20, 15, 30, 45],\n...                    \"Col2\": [13, 23, 18, 33, 48],\n...                    \"Col3\": [17, 27, 22, 37, 52]},\n...                   index=pd.date_range(\"2020-01-01\", \"2020-01-05\"))\n>>> df\n            Col1  Col2  Col3\n2020-01-01    10    13    17\n2020-01-02    20    23    27\n2020-01-03    15    18    22\n2020-01-04    30    33    37\n2020-01-05    45    48    52\n\n>>> df.shift(periods=3)\n            Col1  Col2  Col3\n2020-01-01   NaN   NaN   NaN\n2020-01-02   NaN   NaN   NaN\n2020-01-03   NaN   NaN   NaN\n2020-01-04  10.0  13.0  17.0\n2020-01-05  20.0  23.0  27.0\n\n>>> df.shift(periods=1, axis=\"columns\")\n            Col1  Col2  Col3\n2020-01-01   NaN    10    13\n2020-01-02   NaN    20    23\n2020-01-03   NaN    15    18\n2020-01-04   NaN    30    33\n2020-01-05   NaN    45    48\n\n>>> df.shift(periods=3, fill_value=0)\n            Col1  Col2  Col3\n2020-01-01     0     0     0\n2020-01-02     0     0     0\n2020-01-03     0     0     0\n2020-01-04    10    13    17\n2020-01-05    20    23    27\n\n>>> df.shift(periods=3, freq=\"D\")\n            Col1  Col2  Col3\n2020-01-04    10    13    17\n2020-01-05    20    23    27\n2020-01-06    15    18    22\n2020-01-07    30    33    37\n2020-01-08    45    48    52\n\n>>> df.shift(periods=3, freq=\"infer\")\n            Col1  Col2  Col3\n2020-01-04    10    13    17\n2020-01-05    20    23    27\n2020-01-06    15    18    22\n2020-01-07    30    33    37\n2020-01-08    45    48    52\n\n>>> df['Col1'].shift(periods=[0, 1, 2])\n            Col1_0  Col1_1  Col1_2\n2020-01-01      10     NaN     NaN\n2020-01-02      20    10.0     NaN\n2020-01-03      15    20.0    10.0\n2020-01-04      30    15.0    20.0\n2020-01-05      45    30.0    15.0"
  },
  {
    "symbol": "DataFrame.size",
    "signature": "(property)",
    "doc": "\nReturn an int representing the number of elements in this object.\n\nReturn the number of rows if Series. Otherwise return the number of\nrows times number of columns if DataFrame.\n\nSee Also\n--------\nndarray.size : Number of elements in the array.\n\nExamples\n--------\n>>> s = pd.Series({'a': 1, 'b': 2, 'c': 3})\n>>> s.size\n3\n\n>>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n>>> df.size\n4\n"
  },
  {
    "symbol": "DataFrame.skew",
    "signature": "(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs)",
    "doc": "Return unbiased skew over requested axis.\n\nNormalized by N-1.\n\nParameters\n----------\naxis : {index (0), columns (1)}\n    Axis for the function to be applied on.\n    For `Series` this parameter is unused and defaults to 0.\n\n    For DataFrames, specifying ``axis=None`` will apply the aggregation\n    across both axes.\n\n    .. versionadded:: 2.0.0\n\nskipna : bool, default True\n    Exclude NA/null values when computing the result.\nnumeric_only : bool, default False\n    Include only float, int, boolean columns. Not implemented for Series.\n\n**kwargs\n    Additional keyword arguments to be passed to the function.\n\nReturns\n-------\nSeries or scalar\n\n            Examples\n            --------\n            >>> s = pd.Series([1, 2, 3])\n            >>> s.skew()\n            0.0\n\n            With a DataFrame\n\n            >>> df = pd.DataFrame({'a': [1, 2, 3], 'b': [2, 3, 4], 'c': [1, 3, 5]},\n            ...                   index=['tiger', 'zebra', 'cow'])\n            >>> df\n                    a   b   c\n            tiger   1   2   1\n            zebra   2   3   3\n            cow     3   4   5\n            >>> df.skew()\n            a   0.0\n            b   0.0\n            c   0.0\n            dtype: float64\n\n            Using axis=1\n\n            >>> df.skew(axis=1)\n            tiger   1.732051\n            zebra  -1.732051\n            cow     0.000000\n            dtype: float64\n\n            In this case, `numeric_only` should be set to `True` to avoid\n            getting an error.\n\n            >>> df = pd.DataFrame({'a': [1, 2, 3], 'b': ['T', 'Z', 'X']},\n            ...                   index=['tiger', 'zebra', 'cow'])\n            >>> df.skew(numeric_only=True)\n            a   0.0\n            dtype: float64"
  },
  {
    "symbol": "DataFrame.sort_index",
    "signature": "(self, *, axis: 'Axis' = 0, level: 'IndexLabel | None' = None, ascending: 'bool | Sequence[bool]' = True, inplace: 'bool' = False, kind: 'SortKind' = 'quicksort', na_position: 'NaPosition' = 'last', sort_remaining: 'bool' = True, ignore_index: 'bool' = False, key: 'IndexKeyFunc | None' = None) -> 'DataFrame | None'",
    "doc": "Sort object by labels (along an axis).\n\nReturns a new DataFrame sorted by label if `inplace` argument is\n``False``, otherwise updates the original DataFrame and returns None.\n\nParameters\n----------\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    The axis along which to sort.  The value 0 identifies the rows,\n    and 1 identifies the columns.\nlevel : int or level name or list of ints or list of level names\n    If not None, sort on values in specified index level(s).\nascending : bool or list-like of bools, default True\n    Sort ascending vs. descending. When the index is a MultiIndex the\n    sort direction can be controlled for each level individually.\ninplace : bool, default False\n    Whether to modify the DataFrame rather than creating a new one.\nkind : {'quicksort', 'mergesort', 'heapsort', 'stable'}, default 'quicksort'\n    Choice of sorting algorithm. See also :func:`numpy.sort` for more\n    information. `mergesort` and `stable` are the only stable algorithms. For\n    DataFrames, this option is only applied when sorting on a single\n    column or label.\nna_position : {'first', 'last'}, default 'last'\n    Puts NaNs at the beginning if `first`; `last` puts NaNs at the end.\n    Not implemented for MultiIndex.\nsort_remaining : bool, default True\n    If True and sorting by level and index is multilevel, sort by other\n    levels too (in order) after sorting by specified level.\nignore_index : bool, default False\n    If True, the resulting axis will be labeled 0, 1, …, n - 1.\nkey : callable, optional\n    If not None, apply the key function to the index values\n    before sorting. This is similar to the `key` argument in the\n    builtin :meth:`sorted` function, with the notable difference that\n    this `key` function should be *vectorized*. It should expect an\n    ``Index`` and return an ``Index`` of the same shape. For MultiIndex\n    inputs, the key is applied *per level*.\n\nReturns\n-------\nDataFrame or None\n    The original DataFrame sorted by the labels or None if ``inplace=True``.\n\nSee Also\n--------\nSeries.sort_index : Sort Series by the index.\nDataFrame.sort_values : Sort DataFrame by the value.\nSeries.sort_values : Sort Series by the value.\n\nExamples\n--------\n>>> df = pd.DataFrame([1, 2, 3, 4, 5], index=[100, 29, 234, 1, 150],\n...                   columns=['A'])\n>>> df.sort_index()\n     A\n1    4\n29   2\n100  1\n150  5\n234  3\n\nBy default, it sorts in ascending order, to sort in descending order,\nuse ``ascending=False``\n\n>>> df.sort_index(ascending=False)\n     A\n234  3\n150  5\n100  1\n29   2\n1    4\n\nA key function can be specified which is applied to the index before\nsorting. For a ``MultiIndex`` this is applied to each level separately.\n\n>>> df = pd.DataFrame({\"a\": [1, 2, 3, 4]}, index=['A', 'b', 'C', 'd'])\n>>> df.sort_index(key=lambda x: x.str.lower())\n   a\nA  1\nb  2\nC  3\nd  4"
  },
  {
    "symbol": "DataFrame.sort_values",
    "signature": "(self, by: 'IndexLabel', *, axis: 'Axis' = 0, ascending: 'bool | list[bool] | tuple[bool, ...]' = True, inplace: 'bool' = False, kind: 'SortKind' = 'quicksort', na_position: 'str' = 'last', ignore_index: 'bool' = False, key: 'ValueKeyFunc | None' = None) -> 'DataFrame | None'",
    "doc": "Sort by the values along either axis.\n\nParameters\n----------\nby : str or list of str\n    Name or list of names to sort by.\n\n    - if `axis` is 0 or `'index'` then `by` may contain index\n      levels and/or column labels.\n    - if `axis` is 1 or `'columns'` then `by` may contain column\n      levels and/or index labels.\naxis : \"{0 or 'index', 1 or 'columns'}\", default 0\n     Axis to be sorted.\nascending : bool or list of bool, default True\n     Sort ascending vs. descending. Specify list for multiple sort\n     orders.  If this is a list of bools, must match the length of\n     the by.\ninplace : bool, default False\n     If True, perform operation in-place.\nkind : {'quicksort', 'mergesort', 'heapsort', 'stable'}, default 'quicksort'\n     Choice of sorting algorithm. See also :func:`numpy.sort` for more\n     information. `mergesort` and `stable` are the only stable algorithms. For\n     DataFrames, this option is only applied when sorting on a single\n     column or label.\nna_position : {'first', 'last'}, default 'last'\n     Puts NaNs at the beginning if `first`; `last` puts NaNs at the\n     end.\nignore_index : bool, default False\n     If True, the resulting axis will be labeled 0, 1, …, n - 1.\nkey : callable, optional\n    Apply the key function to the values\n    before sorting. This is similar to the `key` argument in the\n    builtin :meth:`sorted` function, with the notable difference that\n    this `key` function should be *vectorized*. It should expect a\n    ``Series`` and return a Series with the same shape as the input.\n    It will be applied to each column in `by` independently.\n\nReturns\n-------\nDataFrame or None\n    DataFrame with sorted values or None if ``inplace=True``.\n\nSee Also\n--------\nDataFrame.sort_index : Sort a DataFrame by the index.\nSeries.sort_values : Similar method for a Series.\n\nExamples\n--------\n>>> df = pd.DataFrame({\n...     'col1': ['A', 'A', 'B', np.nan, 'D', 'C'],\n...     'col2': [2, 1, 9, 8, 7, 4],\n...     'col3': [0, 1, 9, 4, 2, 3],\n...     'col4': ['a', 'B', 'c', 'D', 'e', 'F']\n... })\n>>> df\n  col1  col2  col3 col4\n0    A     2     0    a\n1    A     1     1    B\n2    B     9     9    c\n3  NaN     8     4    D\n4    D     7     2    e\n5    C     4     3    F\n\nSort by col1\n\n>>> df.sort_values(by=['col1'])\n  col1  col2  col3 col4\n0    A     2     0    a\n1    A     1     1    B\n2    B     9     9    c\n5    C     4     3    F\n4    D     7     2    e\n3  NaN     8     4    D\n\nSort by multiple columns\n\n>>> df.sort_values(by=['col1', 'col2'])\n  col1  col2  col3 col4\n1    A     1     1    B\n0    A     2     0    a\n2    B     9     9    c\n5    C     4     3    F\n4    D     7     2    e\n3  NaN     8     4    D\n\nSort Descending\n\n>>> df.sort_values(by='col1', ascending=False)\n  col1  col2  col3 col4\n4    D     7     2    e\n5    C     4     3    F\n2    B     9     9    c\n0    A     2     0    a\n1    A     1     1    B\n3  NaN     8     4    D\n\nPutting NAs first\n\n>>> df.sort_values(by='col1', ascending=False, na_position='first')\n  col1  col2  col3 col4\n3  NaN     8     4    D\n4    D     7     2    e\n5    C     4     3    F\n2    B     9     9    c\n0    A     2     0    a\n1    A     1     1    B\n\nSorting with a key function\n\n>>> df.sort_values(by='col4', key=lambda col: col.str.lower())\n   col1  col2  col3 col4\n0    A     2     0    a\n1    A     1     1    B\n2    B     9     9    c\n3  NaN     8     4    D\n4    D     7     2    e\n5    C     4     3    F\n\nNatural sort with the key argument,\nusing the `natsort <https://github.com/SethMMorton/natsort>` package.\n\n>>> df = pd.DataFrame({\n...    \"time\": ['0hr', '128hr', '72hr', '48hr', '96hr'],\n...    \"value\": [10, 20, 30, 40, 50]\n... })\n>>> df\n    time  value\n0    0hr     10\n1  128hr     20\n2   72hr     30\n3   48hr     40\n4   96hr     50\n>>> from natsort import index_natsorted\n>>> df.sort_values(\n...     by=\"time\",\n...     key=lambda x: np.argsort(index_natsorted(df[\"time\"]))\n... )\n    time  value\n0    0hr     10\n3   48hr     40\n2   72hr     30\n4   96hr     50\n1  128hr     20"
  },
  {
    "symbol": "DataFrame.squeeze",
    "signature": "(self, axis: 'Axis | None' = None)",
    "doc": "Squeeze 1 dimensional axis objects into scalars.\n\nSeries or DataFrames with a single element are squeezed to a scalar.\nDataFrames with a single column or a single row are squeezed to a\nSeries. Otherwise the object is unchanged.\n\nThis method is most useful when you don't know if your\nobject is a Series or DataFrame, but you do know it has just a single\ncolumn. In that case you can safely call `squeeze` to ensure you have a\nSeries.\n\nParameters\n----------\naxis : {0 or 'index', 1 or 'columns', None}, default None\n    A specific axis to squeeze. By default, all length-1 axes are\n    squeezed. For `Series` this parameter is unused and defaults to `None`.\n\nReturns\n-------\nDataFrame, Series, or scalar\n    The projection after squeezing `axis` or all the axes.\n\nSee Also\n--------\nSeries.iloc : Integer-location based indexing for selecting scalars.\nDataFrame.iloc : Integer-location based indexing for selecting Series.\nSeries.to_frame : Inverse of DataFrame.squeeze for a\n    single-column DataFrame.\n\nExamples\n--------\n>>> primes = pd.Series([2, 3, 5, 7])\n\nSlicing might produce a Series with a single value:\n\n>>> even_primes = primes[primes % 2 == 0]\n>>> even_primes\n0    2\ndtype: int64\n\n>>> even_primes.squeeze()\n2\n\nSqueezing objects with more than one value in every axis does nothing:\n\n>>> odd_primes = primes[primes % 2 == 1]\n>>> odd_primes\n1    3\n2    5\n3    7\ndtype: int64\n\n>>> odd_primes.squeeze()\n1    3\n2    5\n3    7\ndtype: int64\n\nSqueezing is even more effective when used with DataFrames.\n\n>>> df = pd.DataFrame([[1, 2], [3, 4]], columns=['a', 'b'])\n>>> df\n   a  b\n0  1  2\n1  3  4\n\nSlicing a single column will produce a DataFrame with the columns\nhaving only one value:\n\n>>> df_a = df[['a']]\n>>> df_a\n   a\n0  1\n1  3\n\nSo the columns can be squeezed down, resulting in a Series:\n\n>>> df_a.squeeze('columns')\n0    1\n1    3\nName: a, dtype: int64\n\nSlicing a single row from a single column will produce a single\nscalar DataFrame:\n\n>>> df_0a = df.loc[df.index < 1, ['a']]\n>>> df_0a\n   a\n0  1\n\nSqueezing the rows produces a single scalar Series:\n\n>>> df_0a.squeeze('rows')\na    1\nName: 0, dtype: int64\n\nSqueezing all axes will project directly into a scalar:\n\n>>> df_0a.squeeze()\n1"
  },
  {
    "symbol": "DataFrame.stack",
    "signature": "(self, level: 'IndexLabel' = -1, dropna: 'bool | lib.NoDefault' = <no_default>, sort: 'bool | lib.NoDefault' = <no_default>, future_stack: 'bool' = False)",
    "doc": "Stack the prescribed level(s) from columns to index.\n\nReturn a reshaped DataFrame or Series having a multi-level\nindex with one or more new inner-most levels compared to the current\nDataFrame. The new inner-most levels are created by pivoting the\ncolumns of the current dataframe:\n\n  - if the columns have a single level, the output is a Series;\n  - if the columns have multiple levels, the new index\n    level(s) is (are) taken from the prescribed level(s) and\n    the output is a DataFrame.\n\nParameters\n----------\nlevel : int, str, list, default -1\n    Level(s) to stack from the column axis onto the index\n    axis, defined as one index or label, or a list of indices\n    or labels.\ndropna : bool, default True\n    Whether to drop rows in the resulting Frame/Series with\n    missing values. Stacking a column level onto the index\n    axis can create combinations of index and column values\n    that are missing from the original dataframe. See Examples\n    section.\nsort : bool, default True\n    Whether to sort the levels of the resulting MultiIndex.\nfuture_stack : bool, default False\n    Whether to use the new implementation that will replace the current\n    implementation in pandas 3.0. When True, dropna and sort have no impact\n    on the result and must remain unspecified. See :ref:`pandas 2.1.0 Release\n    notes <whatsnew_210.enhancements.new_stack>` for more details.\n\nReturns\n-------\nDataFrame or Series\n    Stacked dataframe or series.\n\nSee Also\n--------\nDataFrame.unstack : Unstack prescribed level(s) from index axis\n     onto column axis.\nDataFrame.pivot : Reshape dataframe from long format to wide\n     format.\nDataFrame.pivot_table : Create a spreadsheet-style pivot table\n     as a DataFrame.\n\nNotes\n-----\nThe function is named by analogy with a collection of books\nbeing reorganized from being side by side on a horizontal\nposition (the columns of the dataframe) to being stacked\nvertically on top of each other (in the index of the\ndataframe).\n\nReference :ref:`the user guide <reshaping.stacking>` for more examples.\n\nExamples\n--------\n**Single level columns**\n\n>>> df_single_level_cols = pd.DataFrame([[0, 1], [2, 3]],\n...                                     index=['cat', 'dog'],\n...                                     columns=['weight', 'height'])\n\nStacking a dataframe with a single level column axis returns a Series:\n\n>>> df_single_level_cols\n     weight height\ncat       0      1\ndog       2      3\n>>> df_single_level_cols.stack(future_stack=True)\ncat  weight    0\n     height    1\ndog  weight    2\n     height    3\ndtype: int64\n\n**Multi level columns: simple case**\n\n>>> multicol1 = pd.MultiIndex.from_tuples([('weight', 'kg'),\n...                                        ('weight', 'pounds')])\n>>> df_multi_level_cols1 = pd.DataFrame([[1, 2], [2, 4]],\n...                                     index=['cat', 'dog'],\n...                                     columns=multicol1)\n\nStacking a dataframe with a multi-level column axis:\n\n>>> df_multi_level_cols1\n     weight\n         kg    pounds\ncat       1        2\ndog       2        4\n>>> df_multi_level_cols1.stack(future_stack=True)\n            weight\ncat kg           1\n    pounds       2\ndog kg           2\n    pounds       4\n\n**Missing values**\n\n>>> multicol2 = pd.MultiIndex.from_tuples([('weight', 'kg'),\n...                                        ('height', 'm')])\n>>> df_multi_level_cols2 = pd.DataFrame([[1.0, 2.0], [3.0, 4.0]],\n...                                     index=['cat', 'dog'],\n...                                     columns=multicol2)\n\nIt is common to have missing values when stacking a dataframe\nwith multi-level columns, as the stacked dataframe typically\nhas more values than the original dataframe. Missing values\nare filled with NaNs:\n\n>>> df_multi_level_cols2\n    weight height\n        kg      m\ncat    1.0    2.0\ndog    3.0    4.0\n>>> df_multi_level_cols2.stack(future_stack=True)\n        weight  height\ncat kg     1.0     NaN\n    m      NaN     2.0\ndog kg     3.0     NaN\n    m      NaN     4.0\n\n**Prescribing the level(s) to be stacked**\n\nThe first parameter controls which level or levels are stacked:\n\n>>> df_multi_level_cols2.stack(0, future_stack=True)\n             kg    m\ncat weight  1.0  NaN\n    height  NaN  2.0\ndog weight  3.0  NaN\n    height  NaN  4.0\n>>> df_multi_level_cols2.stack([0, 1], future_stack=True)\ncat  weight  kg    1.0\n     height  m     2.0\ndog  weight  kg    3.0\n     height  m     4.0\ndtype: float64"
  },
  {
    "symbol": "DataFrame.std",
    "signature": "(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, ddof: 'int' = 1, numeric_only: 'bool' = False, **kwargs)",
    "doc": "Return sample standard deviation over requested axis.\n\nNormalized by N-1 by default. This can be changed using the ddof argument.\n\nParameters\n----------\naxis : {index (0), columns (1)}\n    For `Series` this parameter is unused and defaults to 0.\n\n    .. warning::\n\n        The behavior of DataFrame.std with ``axis=None`` is deprecated,\n        in a future version this will reduce over both axes and return a scalar\n        To retain the old behavior, pass axis=0 (or do not pass axis).\n\nskipna : bool, default True\n    Exclude NA/null values. If an entire row/column is NA, the result\n    will be NA.\nddof : int, default 1\n    Delta Degrees of Freedom. The divisor used in calculations is N - ddof,\n    where N represents the number of elements.\nnumeric_only : bool, default False\n    Include only float, int, boolean columns. Not implemented for Series.\n\nReturns\n-------\nSeries or DataFrame (if level specified) \n\nNotes\n-----\nTo have the same behaviour as `numpy.std`, use `ddof=0` (instead of the\ndefault `ddof=1`)\n\nExamples\n--------\n>>> df = pd.DataFrame({'person_id': [0, 1, 2, 3],\n...                    'age': [21, 25, 62, 43],\n...                    'height': [1.61, 1.87, 1.49, 2.01]}\n...                   ).set_index('person_id')\n>>> df\n           age  height\nperson_id\n0           21    1.61\n1           25    1.87\n2           62    1.49\n3           43    2.01\n\nThe standard deviation of the columns can be found as follows:\n\n>>> df.std()\nage       18.786076\nheight     0.237417\ndtype: float64\n\nAlternatively, `ddof=0` can be set to normalize by N instead of N-1:\n\n>>> df.std(ddof=0)\nage       16.269219\nheight     0.205609\ndtype: float64"
  },
  {
    "symbol": "DataFrame.style",
    "signature": "(property)",
    "doc": "\nReturns a Styler object.\n\nContains methods for building a styled HTML representation of the DataFrame.\n\nSee Also\n--------\nio.formats.style.Styler : Helps style a DataFrame or Series according to the\n    data with HTML and CSS.\n\nExamples\n--------\n>>> df = pd.DataFrame({'A': [1, 2, 3]})\n>>> df.style  # doctest: +SKIP\n\nPlease see\n`Table Visualization <../../user_guide/style.ipynb>`_ for more examples.\n"
  },
  {
    "symbol": "DataFrame.sub",
    "signature": "(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame'",
    "doc": "Get Subtraction of dataframe and other, element-wise (binary operator `sub`).\n\nEquivalent to ``dataframe - other``, but with support to substitute a fill_value\nfor missing data in one of the inputs. With reverse version, `rsub`.\n\nAmong flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to\narithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.\n\nParameters\n----------\nother : scalar, sequence, Series, dict or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis : {0 or 'index', 1 or 'columns'}\n    Whether to compare by the index (0 or 'index') or columns.\n    (1 or 'columns'). For Series input, axis to match Series index on.\nlevel : int or label\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : float or None, default None\n    Fill existing missing (NaN) values, and any new element needed for\n    successful DataFrame alignment, with this value before computation.\n    If data in both corresponding DataFrame locations is missing\n    the result will be missing.\n\nReturns\n-------\nDataFrame\n    Result of the arithmetic operation.\n\nSee Also\n--------\nDataFrame.add : Add DataFrames.\nDataFrame.sub : Subtract DataFrames.\nDataFrame.mul : Multiply DataFrames.\nDataFrame.div : Divide DataFrames (float division).\nDataFrame.truediv : Divide DataFrames (float division).\nDataFrame.floordiv : Divide DataFrames (integer division).\nDataFrame.mod : Calculate modulo (remainder after division).\nDataFrame.pow : Calculate exponential power.\n\nNotes\n-----\nMismatched indices will be unioned together.\n\nExamples\n--------\n>>> df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n>>> df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\nAdd a scalar with operator version which return the same\nresults.\n\n>>> df + 1\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\n>>> df.add(1)\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\nDivide by constant with reverse version.\n\n>>> df.div(10)\n           angles  degrees\ncircle        0.0     36.0\ntriangle      0.3     18.0\nrectangle     0.4     36.0\n\n>>> df.rdiv(10)\n             angles   degrees\ncircle          inf  0.027778\ntriangle   3.333333  0.055556\nrectangle  2.500000  0.027778\n\nSubtract a list and Series by axis with operator version.\n\n>>> df - [1, 2]\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub([1, 2], axis='columns')\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),\n...        axis='index')\n           angles  degrees\ncircle         -1      359\ntriangle        2      179\nrectangle       3      359\n\nMultiply a dictionary by axis.\n\n>>> df.mul({'angles': 0, 'degrees': 2})\n            angles  degrees\ncircle           0      720\ntriangle         0      360\nrectangle        0      720\n\n>>> df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')\n            angles  degrees\ncircle           0        0\ntriangle         6      360\nrectangle       12     1080\n\nMultiply a DataFrame of different shape with operator version.\n\n>>> other = pd.DataFrame({'angles': [0, 3, 4]},\n...                      index=['circle', 'triangle', 'rectangle'])\n>>> other\n           angles\ncircle          0\ntriangle        3\nrectangle       4\n\n>>> df * other\n           angles  degrees\ncircle          0      NaN\ntriangle        9      NaN\nrectangle      16      NaN\n\n>>> df.mul(other, fill_value=0)\n           angles  degrees\ncircle          0      0.0\ntriangle        9      0.0\nrectangle      16      0.0\n\nDivide by a MultiIndex by level.\n\n>>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],\n...                              'degrees': [360, 180, 360, 360, 540, 720]},\n...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],\n...                                    ['circle', 'triangle', 'rectangle',\n...                                     'square', 'pentagon', 'hexagon']])\n>>> df_multindex\n             angles  degrees\nA circle          0      360\n  triangle        3      180\n  rectangle       4      360\nB square          4      360\n  pentagon        5      540\n  hexagon         6      720\n\n>>> df.div(df_multindex, level=1, fill_value=0)\n             angles  degrees\nA circle        NaN      1.0\n  triangle      1.0      1.0\n  rectangle     1.0      1.0\nB square        0.0      0.0\n  pentagon      0.0      0.0\n  hexagon       0.0      0.0"
  },
  {
    "symbol": "DataFrame.subtract",
    "signature": "(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame'",
    "doc": "Get Subtraction of dataframe and other, element-wise (binary operator `sub`).\n\nEquivalent to ``dataframe - other``, but with support to substitute a fill_value\nfor missing data in one of the inputs. With reverse version, `rsub`.\n\nAmong flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to\narithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.\n\nParameters\n----------\nother : scalar, sequence, Series, dict or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis : {0 or 'index', 1 or 'columns'}\n    Whether to compare by the index (0 or 'index') or columns.\n    (1 or 'columns'). For Series input, axis to match Series index on.\nlevel : int or label\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : float or None, default None\n    Fill existing missing (NaN) values, and any new element needed for\n    successful DataFrame alignment, with this value before computation.\n    If data in both corresponding DataFrame locations is missing\n    the result will be missing.\n\nReturns\n-------\nDataFrame\n    Result of the arithmetic operation.\n\nSee Also\n--------\nDataFrame.add : Add DataFrames.\nDataFrame.sub : Subtract DataFrames.\nDataFrame.mul : Multiply DataFrames.\nDataFrame.div : Divide DataFrames (float division).\nDataFrame.truediv : Divide DataFrames (float division).\nDataFrame.floordiv : Divide DataFrames (integer division).\nDataFrame.mod : Calculate modulo (remainder after division).\nDataFrame.pow : Calculate exponential power.\n\nNotes\n-----\nMismatched indices will be unioned together.\n\nExamples\n--------\n>>> df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n>>> df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\nAdd a scalar with operator version which return the same\nresults.\n\n>>> df + 1\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\n>>> df.add(1)\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\nDivide by constant with reverse version.\n\n>>> df.div(10)\n           angles  degrees\ncircle        0.0     36.0\ntriangle      0.3     18.0\nrectangle     0.4     36.0\n\n>>> df.rdiv(10)\n             angles   degrees\ncircle          inf  0.027778\ntriangle   3.333333  0.055556\nrectangle  2.500000  0.027778\n\nSubtract a list and Series by axis with operator version.\n\n>>> df - [1, 2]\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub([1, 2], axis='columns')\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),\n...        axis='index')\n           angles  degrees\ncircle         -1      359\ntriangle        2      179\nrectangle       3      359\n\nMultiply a dictionary by axis.\n\n>>> df.mul({'angles': 0, 'degrees': 2})\n            angles  degrees\ncircle           0      720\ntriangle         0      360\nrectangle        0      720\n\n>>> df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')\n            angles  degrees\ncircle           0        0\ntriangle         6      360\nrectangle       12     1080\n\nMultiply a DataFrame of different shape with operator version.\n\n>>> other = pd.DataFrame({'angles': [0, 3, 4]},\n...                      index=['circle', 'triangle', 'rectangle'])\n>>> other\n           angles\ncircle          0\ntriangle        3\nrectangle       4\n\n>>> df * other\n           angles  degrees\ncircle          0      NaN\ntriangle        9      NaN\nrectangle      16      NaN\n\n>>> df.mul(other, fill_value=0)\n           angles  degrees\ncircle          0      0.0\ntriangle        9      0.0\nrectangle      16      0.0\n\nDivide by a MultiIndex by level.\n\n>>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],\n...                              'degrees': [360, 180, 360, 360, 540, 720]},\n...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],\n...                                    ['circle', 'triangle', 'rectangle',\n...                                     'square', 'pentagon', 'hexagon']])\n>>> df_multindex\n             angles  degrees\nA circle          0      360\n  triangle        3      180\n  rectangle       4      360\nB square          4      360\n  pentagon        5      540\n  hexagon         6      720\n\n>>> df.div(df_multindex, level=1, fill_value=0)\n             angles  degrees\nA circle        NaN      1.0\n  triangle      1.0      1.0\n  rectangle     1.0      1.0\nB square        0.0      0.0\n  pentagon      0.0      0.0\n  hexagon       0.0      0.0"
  },
  {
    "symbol": "DataFrame.sum",
    "signature": "(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, min_count: 'int' = 0, **kwargs)",
    "doc": "Return the sum of the values over the requested axis.\n\nThis is equivalent to the method ``numpy.sum``.\n\nParameters\n----------\naxis : {index (0), columns (1)}\n    Axis for the function to be applied on.\n    For `Series` this parameter is unused and defaults to 0.\n\n    .. warning::\n\n        The behavior of DataFrame.sum with ``axis=None`` is deprecated,\n        in a future version this will reduce over both axes and return a scalar\n        To retain the old behavior, pass axis=0 (or do not pass axis).\n\n    .. versionadded:: 2.0.0\n\nskipna : bool, default True\n    Exclude NA/null values when computing the result.\nnumeric_only : bool, default False\n    Include only float, int, boolean columns. Not implemented for Series.\n\nmin_count : int, default 0\n    The required number of valid values to perform the operation. If fewer than\n    ``min_count`` non-NA values are present the result will be NA.\n**kwargs\n    Additional keyword arguments to be passed to the function.\n\nReturns\n-------\nSeries or scalar\n\nSee Also\n--------\nSeries.sum : Return the sum.\nSeries.min : Return the minimum.\nSeries.max : Return the maximum.\nSeries.idxmin : Return the index of the minimum.\nSeries.idxmax : Return the index of the maximum.\nDataFrame.sum : Return the sum over the requested axis.\nDataFrame.min : Return the minimum over the requested axis.\nDataFrame.max : Return the maximum over the requested axis.\nDataFrame.idxmin : Return the index of the minimum over the requested axis.\nDataFrame.idxmax : Return the index of the maximum over the requested axis.\n\nExamples\n--------\n>>> idx = pd.MultiIndex.from_arrays([\n...     ['warm', 'warm', 'cold', 'cold'],\n...     ['dog', 'falcon', 'fish', 'spider']],\n...     names=['blooded', 'animal'])\n>>> s = pd.Series([4, 2, 0, 8], name='legs', index=idx)\n>>> s\nblooded  animal\nwarm     dog       4\n         falcon    2\ncold     fish      0\n         spider    8\nName: legs, dtype: int64\n\n>>> s.sum()\n14\n\nBy default, the sum of an empty or all-NA Series is ``0``.\n\n>>> pd.Series([], dtype=\"float64\").sum()  # min_count=0 is the default\n0.0\n\nThis can be controlled with the ``min_count`` parameter. For example, if\nyou'd like the sum of an empty series to be NaN, pass ``min_count=1``.\n\n>>> pd.Series([], dtype=\"float64\").sum(min_count=1)\nnan\n\nThanks to the ``skipna`` parameter, ``min_count`` handles all-NA and\nempty series identically.\n\n>>> pd.Series([np.nan]).sum()\n0.0\n\n>>> pd.Series([np.nan]).sum(min_count=1)\nnan"
  },
  {
    "symbol": "DataFrame.swapaxes",
    "signature": "(self, axis1: 'Axis', axis2: 'Axis', copy: 'bool_t | None' = None) -> 'Self'",
    "doc": "Interchange axes and swap values axes appropriately.\n\n.. deprecated:: 2.1.0\n    ``swapaxes`` is deprecated and will be removed.\n    Please use ``transpose`` instead.\n\nReturns\n-------\nsame as input\n\nExamples\n--------\nPlease see examples for :meth:`DataFrame.transpose`."
  },
  {
    "symbol": "DataFrame.swaplevel",
    "signature": "(self, i: 'Axis' = -2, j: 'Axis' = -1, axis: 'Axis' = 0) -> 'DataFrame'",
    "doc": "Swap levels i and j in a :class:`MultiIndex`.\n\nDefault is to swap the two innermost levels of the index.\n\nParameters\n----------\ni, j : int or str\n    Levels of the indices to be swapped. Can pass level name as string.\naxis : {0 or 'index', 1 or 'columns'}, default 0\n            The axis to swap levels on. 0 or 'index' for row-wise, 1 or\n            'columns' for column-wise.\n\nReturns\n-------\nDataFrame\n    DataFrame with levels swapped in MultiIndex.\n\nExamples\n--------\n>>> df = pd.DataFrame(\n...     {\"Grade\": [\"A\", \"B\", \"A\", \"C\"]},\n...     index=[\n...         [\"Final exam\", \"Final exam\", \"Coursework\", \"Coursework\"],\n...         [\"History\", \"Geography\", \"History\", \"Geography\"],\n...         [\"January\", \"February\", \"March\", \"April\"],\n...     ],\n... )\n>>> df\n                                    Grade\nFinal exam  History     January      A\n            Geography   February     B\nCoursework  History     March        A\n            Geography   April        C\n\nIn the following example, we will swap the levels of the indices.\nHere, we will swap the levels column-wise, but levels can be swapped row-wise\nin a similar manner. Note that column-wise is the default behaviour.\nBy not supplying any arguments for i and j, we swap the last and second to\nlast indices.\n\n>>> df.swaplevel()\n                                    Grade\nFinal exam  January     History         A\n            February    Geography       B\nCoursework  March       History         A\n            April       Geography       C\n\nBy supplying one argument, we can choose which index to swap the last\nindex with. We can for example swap the first index with the last one as\nfollows.\n\n>>> df.swaplevel(0)\n                                    Grade\nJanuary     History     Final exam      A\nFebruary    Geography   Final exam      B\nMarch       History     Coursework      A\nApril       Geography   Coursework      C\n\nWe can also define explicitly which indices we want to swap by supplying values\nfor both i and j. Here, we for example swap the first and second indices.\n\n>>> df.swaplevel(0, 1)\n                                    Grade\nHistory     Final exam  January         A\nGeography   Final exam  February        B\nHistory     Coursework  March           A\nGeography   Coursework  April           C"
  },
  {
    "symbol": "DataFrame.tail",
    "signature": "(self, n: 'int' = 5) -> 'Self'",
    "doc": "Return the last `n` rows.\n\nThis function returns last `n` rows from the object based on\nposition. It is useful for quickly verifying data, for example,\nafter sorting or appending rows.\n\nFor negative values of `n`, this function returns all rows except\nthe first `|n|` rows, equivalent to ``df[|n|:]``.\n\nIf n is larger than the number of rows, this function returns all rows.\n\nParameters\n----------\nn : int, default 5\n    Number of rows to select.\n\nReturns\n-------\ntype of caller\n    The last `n` rows of the caller object.\n\nSee Also\n--------\nDataFrame.head : The first `n` rows of the caller object.\n\nExamples\n--------\n>>> df = pd.DataFrame({'animal': ['alligator', 'bee', 'falcon', 'lion',\n...                    'monkey', 'parrot', 'shark', 'whale', 'zebra']})\n>>> df\n      animal\n0  alligator\n1        bee\n2     falcon\n3       lion\n4     monkey\n5     parrot\n6      shark\n7      whale\n8      zebra\n\nViewing the last 5 lines\n\n>>> df.tail()\n   animal\n4  monkey\n5  parrot\n6   shark\n7   whale\n8   zebra\n\nViewing the last `n` lines (three in this case)\n\n>>> df.tail(3)\n  animal\n6  shark\n7  whale\n8  zebra\n\nFor negative values of `n`\n\n>>> df.tail(-3)\n   animal\n3    lion\n4  monkey\n5  parrot\n6   shark\n7   whale\n8   zebra"
  },
  {
    "symbol": "DataFrame.take",
    "signature": "(self, indices, axis: 'Axis' = 0, **kwargs) -> 'Self'",
    "doc": "Return the elements in the given *positional* indices along an axis.\n\nThis means that we are not indexing according to actual values in\nthe index attribute of the object. We are indexing according to the\nactual position of the element in the object.\n\nParameters\n----------\nindices : array-like\n    An array of ints indicating which positions to take.\naxis : {0 or 'index', 1 or 'columns', None}, default 0\n    The axis on which to select elements. ``0`` means that we are\n    selecting rows, ``1`` means that we are selecting columns.\n    For `Series` this parameter is unused and defaults to 0.\n**kwargs\n    For compatibility with :meth:`numpy.take`. Has no effect on the\n    output.\n\nReturns\n-------\nsame type as caller\n    An array-like containing the elements taken from the object.\n\nSee Also\n--------\nDataFrame.loc : Select a subset of a DataFrame by labels.\nDataFrame.iloc : Select a subset of a DataFrame by positions.\nnumpy.take : Take elements from an array along an axis.\n\nExamples\n--------\n>>> df = pd.DataFrame([('falcon', 'bird', 389.0),\n...                    ('parrot', 'bird', 24.0),\n...                    ('lion', 'mammal', 80.5),\n...                    ('monkey', 'mammal', np.nan)],\n...                   columns=['name', 'class', 'max_speed'],\n...                   index=[0, 2, 3, 1])\n>>> df\n     name   class  max_speed\n0  falcon    bird      389.0\n2  parrot    bird       24.0\n3    lion  mammal       80.5\n1  monkey  mammal        NaN\n\nTake elements at positions 0 and 3 along the axis 0 (default).\n\nNote how the actual indices selected (0 and 1) do not correspond to\nour selected indices 0 and 3. That's because we are selecting the 0th\nand 3rd rows, not rows whose indices equal 0 and 3.\n\n>>> df.take([0, 3])\n     name   class  max_speed\n0  falcon    bird      389.0\n1  monkey  mammal        NaN\n\nTake elements at indices 1 and 2 along the axis 1 (column selection).\n\n>>> df.take([1, 2], axis=1)\n    class  max_speed\n0    bird      389.0\n2    bird       24.0\n3  mammal       80.5\n1  mammal        NaN\n\nWe may take elements using negative integers for positive indices,\nstarting from the end of the object, just like with Python lists.\n\n>>> df.take([-1, -2])\n     name   class  max_speed\n1  monkey  mammal        NaN\n3    lion  mammal       80.5"
  },
  {
    "symbol": "DataFrame.to_clipboard",
    "signature": "(self, *, excel: 'bool_t' = True, sep: 'str | None' = None, **kwargs) -> 'None'",
    "doc": "Copy object to the system clipboard.\n\nWrite a text representation of object to the system clipboard.\nThis can be pasted into Excel, for example.\n\nParameters\n----------\nexcel : bool, default True\n    Produce output in a csv format for easy pasting into excel.\n\n    - True, use the provided separator for csv pasting.\n    - False, write a string representation of the object to the clipboard.\n\nsep : str, default ``'\\t'``\n    Field delimiter.\n**kwargs\n    These parameters will be passed to DataFrame.to_csv.\n\nSee Also\n--------\nDataFrame.to_csv : Write a DataFrame to a comma-separated values\n    (csv) file.\nread_clipboard : Read text from clipboard and pass to read_csv.\n\nNotes\n-----\nRequirements for your platform.\n\n  - Linux : `xclip`, or `xsel` (with `PyQt4` modules)\n  - Windows : none\n  - macOS : none\n\nThis method uses the processes developed for the package `pyperclip`. A\nsolution to render any output string format is given in the examples.\n\nExamples\n--------\nCopy the contents of a DataFrame to the clipboard.\n\n>>> df = pd.DataFrame([[1, 2, 3], [4, 5, 6]], columns=['A', 'B', 'C'])\n\n>>> df.to_clipboard(sep=',')  # doctest: +SKIP\n... # Wrote the following to the system clipboard:\n... # ,A,B,C\n... # 0,1,2,3\n... # 1,4,5,6\n\nWe can omit the index by passing the keyword `index` and setting\nit to false.\n\n>>> df.to_clipboard(sep=',', index=False)  # doctest: +SKIP\n... # Wrote the following to the system clipboard:\n... # A,B,C\n... # 1,2,3\n... # 4,5,6\n\nUsing the original `pyperclip` package for any string output format.\n\n.. code-block:: python\n\n   import pyperclip\n   html = df.style.to_html()\n   pyperclip.copy(html)"
  },
  {
    "symbol": "DataFrame.to_csv",
    "signature": "(self, path_or_buf: 'FilePath | WriteBuffer[bytes] | WriteBuffer[str] | None' = None, *, sep: 'str' = ',', na_rep: 'str' = '', float_format: 'str | Callable | None' = None, columns: 'Sequence[Hashable] | None' = None, header: 'bool_t | list[str]' = True, index: 'bool_t' = True, index_label: 'IndexLabel | None' = None, mode: 'str' = 'w', encoding: 'str | None' = None, compression: 'CompressionOptions' = 'infer', quoting: 'int | None' = None, quotechar: 'str' = '\"', lineterminator: 'str | None' = None, chunksize: 'int | None' = None, date_format: 'str | None' = None, doublequote: 'bool_t' = True, escapechar: 'str | None' = None, decimal: 'str' = '.', errors: 'OpenFileErrors' = 'strict', storage_options: 'StorageOptions | None' = None) -> 'str | None'",
    "doc": "Write object to a comma-separated values (csv) file.\n\nParameters\n----------\npath_or_buf : str, path object, file-like object, or None, default None\n    String, path object (implementing os.PathLike[str]), or file-like\n    object implementing a write() function. If None, the result is\n    returned as a string. If a non-binary file object is passed, it should\n    be opened with `newline=''`, disabling universal newlines. If a binary\n    file object is passed, `mode` might need to contain a `'b'`.\nsep : str, default ','\n    String of length 1. Field delimiter for the output file.\nna_rep : str, default ''\n    Missing data representation.\nfloat_format : str, Callable, default None\n    Format string for floating point numbers. If a Callable is given, it takes\n    precedence over other numeric formatting parameters, like decimal.\ncolumns : sequence, optional\n    Columns to write.\nheader : bool or list of str, default True\n    Write out the column names. If a list of strings is given it is\n    assumed to be aliases for the column names.\nindex : bool, default True\n    Write row names (index).\nindex_label : str or sequence, or False, default None\n    Column label for index column(s) if desired. If None is given, and\n    `header` and `index` are True, then the index names are used. A\n    sequence should be given if the object uses MultiIndex. If\n    False do not print fields for index names. Use index_label=False\n    for easier importing in R.\nmode : {'w', 'x', 'a'}, default 'w'\n    Forwarded to either `open(mode=)` or `fsspec.open(mode=)` to control\n    the file opening. Typical values include:\n\n    - 'w', truncate the file first.\n    - 'x', exclusive creation, failing if the file already exists.\n    - 'a', append to the end of file if it exists.\n\nencoding : str, optional\n    A string representing the encoding to use in the output file,\n    defaults to 'utf-8'. `encoding` is not supported if `path_or_buf`\n    is a non-binary file object.\ncompression : str or dict, default 'infer'\n    For on-the-fly compression of the output data. If 'infer' and 'path_or_buf' is\n    path-like, then detect compression from the following extensions: '.gz',\n    '.bz2', '.zip', '.xz', '.zst', '.tar', '.tar.gz', '.tar.xz' or '.tar.bz2'\n    (otherwise no compression).\n    Set to ``None`` for no compression.\n    Can also be a dict with key ``'method'`` set\n    to one of {``'zip'``, ``'gzip'``, ``'bz2'``, ``'zstd'``, ``'xz'``, ``'tar'``} and\n    other key-value pairs are forwarded to\n    ``zipfile.ZipFile``, ``gzip.GzipFile``,\n    ``bz2.BZ2File``, ``zstandard.ZstdCompressor``, ``lzma.LZMAFile`` or\n    ``tarfile.TarFile``, respectively.\n    As an example, the following could be passed for faster compression and to create\n    a reproducible gzip archive:\n    ``compression={'method': 'gzip', 'compresslevel': 1, 'mtime': 1}``.\n\n    .. versionadded:: 1.5.0\n        Added support for `.tar` files.\n\n       May be a dict with key 'method' as compression mode\n       and other entries as additional compression options if\n       compression mode is 'zip'.\n\n       Passing compression options as keys in dict is\n       supported for compression modes 'gzip', 'bz2', 'zstd', and 'zip'.\nquoting : optional constant from csv module\n    Defaults to csv.QUOTE_MINIMAL. If you have set a `float_format`\n    then floats are converted to strings and thus csv.QUOTE_NONNUMERIC\n    will treat them as non-numeric.\nquotechar : str, default '\\\"'\n    String of length 1. Character used to quote fields.\nlineterminator : str, optional\n    The newline character or character sequence to use in the output\n    file. Defaults to `os.linesep`, which depends on the OS in which\n    this method is called ('\\\\n' for linux, '\\\\r\\\\n' for Windows, i.e.).\n\n    .. versionchanged:: 1.5.0\n\n        Previously was line_terminator, changed for consistency with\n        read_csv and the standard library 'csv' module.\n\nchunksize : int or None\n    Rows to write at a time.\ndate_format : str, default None\n    Format string for datetime objects.\ndoublequote : bool, default True\n    Control quoting of `quotechar` inside a field.\nescapechar : str, default None\n    String of length 1. Character used to escape `sep` and `quotechar`\n    when appropriate.\ndecimal : str, default '.'\n    Character recognized as decimal separator. E.g. use ',' for\n    European data.\nerrors : str, default 'strict'\n    Specifies how encoding and decoding errors are to be handled.\n    See the errors argument for :func:`open` for a full list\n    of options.\n\nstorage_options : dict, optional\n    Extra options that make sense for a particular storage connection, e.g.\n    host, port, username, password, etc. For HTTP(S) URLs the key-value pairs\n    are forwarded to ``urllib.request.Request`` as header options. For other\n    URLs (e.g. starting with \"s3://\", and \"gcs://\") the key-value pairs are\n    forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more\n    details, and for more examples on storage options refer `here\n    <https://pandas.pydata.org/docs/user_guide/io.html?\n    highlight=storage_options#reading-writing-remote-files>`_.\n\nReturns\n-------\nNone or str\n    If path_or_buf is None, returns the resulting csv format as a\n    string. Otherwise returns None.\n\nSee Also\n--------\nread_csv : Load a CSV file into a DataFrame.\nto_excel : Write DataFrame to an Excel file.\n\nExamples\n--------\nCreate 'out.csv' containing 'df' without indices\n\n>>> df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n...                    'mask': ['red', 'purple'],\n...                    'weapon': ['sai', 'bo staff']})\n>>> df.to_csv('out.csv', index=False)  # doctest: +SKIP\n\nCreate 'out.zip' containing 'out.csv'\n\n>>> df.to_csv(index=False)\n'name,mask,weapon\\nRaphael,red,sai\\nDonatello,purple,bo staff\\n'\n>>> compression_opts = dict(method='zip',\n...                         archive_name='out.csv')  # doctest: +SKIP\n>>> df.to_csv('out.zip', index=False,\n...           compression=compression_opts)  # doctest: +SKIP\n\nTo write a csv file to a new folder or nested folder you will first\nneed to create it using either Pathlib or os:\n\n>>> from pathlib import Path  # doctest: +SKIP\n>>> filepath = Path('folder/subfolder/out.csv')  # doctest: +SKIP\n>>> filepath.parent.mkdir(parents=True, exist_ok=True)  # doctest: +SKIP\n>>> df.to_csv(filepath)  # doctest: +SKIP\n\n>>> import os  # doctest: +SKIP\n>>> os.makedirs('folder/subfolder', exist_ok=True)  # doctest: +SKIP\n>>> df.to_csv('folder/subfolder/out.csv')  # doctest: +SKIP"
  },
  {
    "symbol": "DataFrame.to_dict",
    "signature": "(self, orient: \"Literal['dict', 'list', 'series', 'split', 'tight', 'records', 'index']\" = 'dict', *, into: 'type[MutableMappingT] | MutableMappingT' = <class 'dict'>, index: 'bool' = True) -> 'MutableMappingT | list[MutableMappingT]'",
    "doc": "Convert the DataFrame to a dictionary.\n\nThe type of the key-value pairs can be customized with the parameters\n(see below).\n\nParameters\n----------\norient : str {'dict', 'list', 'series', 'split', 'tight', 'records', 'index'}\n    Determines the type of the values of the dictionary.\n\n    - 'dict' (default) : dict like {column -> {index -> value}}\n    - 'list' : dict like {column -> [values]}\n    - 'series' : dict like {column -> Series(values)}\n    - 'split' : dict like\n      {'index' -> [index], 'columns' -> [columns], 'data' -> [values]}\n    - 'tight' : dict like\n      {'index' -> [index], 'columns' -> [columns], 'data' -> [values],\n      'index_names' -> [index.names], 'column_names' -> [column.names]}\n    - 'records' : list like\n      [{column -> value}, ... , {column -> value}]\n    - 'index' : dict like {index -> {column -> value}}\n\n    .. versionadded:: 1.4.0\n        'tight' as an allowed value for the ``orient`` argument\n\ninto : class, default dict\n    The collections.abc.MutableMapping subclass used for all Mappings\n    in the return value.  Can be the actual class or an empty\n    instance of the mapping type you want.  If you want a\n    collections.defaultdict, you must pass it initialized.\n\nindex : bool, default True\n    Whether to include the index item (and index_names item if `orient`\n    is 'tight') in the returned dictionary. Can only be ``False``\n    when `orient` is 'split' or 'tight'.\n\n    .. versionadded:: 2.0.0\n\nReturns\n-------\ndict, list or collections.abc.MutableMapping\n    Return a collections.abc.MutableMapping object representing the\n    DataFrame. The resulting transformation depends on the `orient`\n    parameter.\n\nSee Also\n--------\nDataFrame.from_dict: Create a DataFrame from a dictionary.\nDataFrame.to_json: Convert a DataFrame to JSON format.\n\nExamples\n--------\n>>> df = pd.DataFrame({'col1': [1, 2],\n...                    'col2': [0.5, 0.75]},\n...                   index=['row1', 'row2'])\n>>> df\n      col1  col2\nrow1     1  0.50\nrow2     2  0.75\n>>> df.to_dict()\n{'col1': {'row1': 1, 'row2': 2}, 'col2': {'row1': 0.5, 'row2': 0.75}}\n\nYou can specify the return orientation.\n\n>>> df.to_dict('series')\n{'col1': row1    1\n         row2    2\nName: col1, dtype: int64,\n'col2': row1    0.50\n        row2    0.75\nName: col2, dtype: float64}\n\n>>> df.to_dict('split')\n{'index': ['row1', 'row2'], 'columns': ['col1', 'col2'],\n 'data': [[1, 0.5], [2, 0.75]]}\n\n>>> df.to_dict('records')\n[{'col1': 1, 'col2': 0.5}, {'col1': 2, 'col2': 0.75}]\n\n>>> df.to_dict('index')\n{'row1': {'col1': 1, 'col2': 0.5}, 'row2': {'col1': 2, 'col2': 0.75}}\n\n>>> df.to_dict('tight')\n{'index': ['row1', 'row2'], 'columns': ['col1', 'col2'],\n 'data': [[1, 0.5], [2, 0.75]], 'index_names': [None], 'column_names': [None]}\n\nYou can also specify the mapping type.\n\n>>> from collections import OrderedDict, defaultdict\n>>> df.to_dict(into=OrderedDict)\nOrderedDict([('col1', OrderedDict([('row1', 1), ('row2', 2)])),\n             ('col2', OrderedDict([('row1', 0.5), ('row2', 0.75)]))])\n\nIf you want a `defaultdict`, you need to initialize it:\n\n>>> dd = defaultdict(list)\n>>> df.to_dict('records', into=dd)\n[defaultdict(<class 'list'>, {'col1': 1, 'col2': 0.5}),\n defaultdict(<class 'list'>, {'col1': 2, 'col2': 0.75})]"
  },
  {
    "symbol": "DataFrame.to_excel",
    "signature": "(self, excel_writer: 'FilePath | WriteExcelBuffer | ExcelWriter', *, sheet_name: 'str' = 'Sheet1', na_rep: 'str' = '', float_format: 'str | None' = None, columns: 'Sequence[Hashable] | None' = None, header: 'Sequence[Hashable] | bool_t' = True, index: 'bool_t' = True, index_label: 'IndexLabel | None' = None, startrow: 'int' = 0, startcol: 'int' = 0, engine: \"Literal['openpyxl', 'xlsxwriter'] | None\" = None, merge_cells: 'bool_t' = True, inf_rep: 'str' = 'inf', freeze_panes: 'tuple[int, int] | None' = None, storage_options: 'StorageOptions | None' = None, engine_kwargs: 'dict[str, Any] | None' = None) -> 'None'",
    "doc": "Write object to an Excel sheet.\n\nTo write a single object to an Excel .xlsx file it is only necessary to\nspecify a target file name. To write to multiple sheets it is necessary to\ncreate an `ExcelWriter` object with a target file name, and specify a sheet\nin the file to write to.\n\nMultiple sheets may be written to by specifying unique `sheet_name`.\nWith all data written to the file it is necessary to save the changes.\nNote that creating an `ExcelWriter` object with a file name that already\nexists will result in the contents of the existing file being erased.\n\nParameters\n----------\nexcel_writer : path-like, file-like, or ExcelWriter object\n    File path or existing ExcelWriter.\nsheet_name : str, default 'Sheet1'\n    Name of sheet which will contain DataFrame.\nna_rep : str, default ''\n    Missing data representation.\nfloat_format : str, optional\n    Format string for floating point numbers. For example\n    ``float_format=\"%.2f\"`` will format 0.1234 to 0.12.\ncolumns : sequence or list of str, optional\n    Columns to write.\nheader : bool or list of str, default True\n    Write out the column names. If a list of string is given it is\n    assumed to be aliases for the column names.\nindex : bool, default True\n    Write row names (index).\nindex_label : str or sequence, optional\n    Column label for index column(s) if desired. If not specified, and\n    `header` and `index` are True, then the index names are used. A\n    sequence should be given if the DataFrame uses MultiIndex.\nstartrow : int, default 0\n    Upper left cell row to dump data frame.\nstartcol : int, default 0\n    Upper left cell column to dump data frame.\nengine : str, optional\n    Write engine to use, 'openpyxl' or 'xlsxwriter'. You can also set this\n    via the options ``io.excel.xlsx.writer`` or\n    ``io.excel.xlsm.writer``.\n\nmerge_cells : bool, default True\n    Write MultiIndex and Hierarchical Rows as merged cells.\ninf_rep : str, default 'inf'\n    Representation for infinity (there is no native representation for\n    infinity in Excel).\nfreeze_panes : tuple of int (length 2), optional\n    Specifies the one-based bottommost row and rightmost column that\n    is to be frozen.\nstorage_options : dict, optional\n    Extra options that make sense for a particular storage connection, e.g.\n    host, port, username, password, etc. For HTTP(S) URLs the key-value pairs\n    are forwarded to ``urllib.request.Request`` as header options. For other\n    URLs (e.g. starting with \"s3://\", and \"gcs://\") the key-value pairs are\n    forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more\n    details, and for more examples on storage options refer `here\n    <https://pandas.pydata.org/docs/user_guide/io.html?\n    highlight=storage_options#reading-writing-remote-files>`_.\n\n    .. versionadded:: 1.2.0\nengine_kwargs : dict, optional\n    Arbitrary keyword arguments passed to excel engine.\n\nSee Also\n--------\nto_csv : Write DataFrame to a comma-separated values (csv) file.\nExcelWriter : Class for writing DataFrame objects into excel sheets.\nread_excel : Read an Excel file into a pandas DataFrame.\nread_csv : Read a comma-separated values (csv) file into DataFrame.\nio.formats.style.Styler.to_excel : Add styles to Excel sheet.\n\nNotes\n-----\nFor compatibility with :meth:`~DataFrame.to_csv`,\nto_excel serializes lists and dicts to strings before writing.\n\nOnce a workbook has been saved it is not possible to write further\ndata without rewriting the whole workbook.\n\nExamples\n--------\n\nCreate, write to and save a workbook:\n\n>>> df1 = pd.DataFrame([['a', 'b'], ['c', 'd']],\n...                    index=['row 1', 'row 2'],\n...                    columns=['col 1', 'col 2'])\n>>> df1.to_excel(\"output.xlsx\")  # doctest: +SKIP\n\nTo specify the sheet name:\n\n>>> df1.to_excel(\"output.xlsx\",\n...              sheet_name='Sheet_name_1')  # doctest: +SKIP\n\nIf you wish to write to more than one sheet in the workbook, it is\nnecessary to specify an ExcelWriter object:\n\n>>> df2 = df1.copy()\n>>> with pd.ExcelWriter('output.xlsx') as writer:  # doctest: +SKIP\n...     df1.to_excel(writer, sheet_name='Sheet_name_1')\n...     df2.to_excel(writer, sheet_name='Sheet_name_2')\n\nExcelWriter can also be used to append to an existing Excel file:\n\n>>> with pd.ExcelWriter('output.xlsx',\n...                     mode='a') as writer:  # doctest: +SKIP\n...     df1.to_excel(writer, sheet_name='Sheet_name_3')\n\nTo set the library that is used to write the Excel file,\nyou can pass the `engine` keyword (the default engine is\nautomatically chosen depending on the file extension):\n\n>>> df1.to_excel('output1.xlsx', engine='xlsxwriter')  # doctest: +SKIP"
  },
  {
    "symbol": "DataFrame.to_feather",
    "signature": "(self, path: 'FilePath | WriteBuffer[bytes]', **kwargs) -> 'None'",
    "doc": "Write a DataFrame to the binary Feather format.\n\nParameters\n----------\npath : str, path object, file-like object\n    String, path object (implementing ``os.PathLike[str]``), or file-like\n    object implementing a binary ``write()`` function. If a string or a path,\n    it will be used as Root Directory path when writing a partitioned dataset.\n**kwargs :\n    Additional keywords passed to :func:`pyarrow.feather.write_feather`.\n    This includes the `compression`, `compression_level`, `chunksize`\n    and `version` keywords.\n\nNotes\n-----\nThis function writes the dataframe as a `feather file\n<https://arrow.apache.org/docs/python/feather.html>`_. Requires a default\nindex. For saving the DataFrame with your custom index use a method that\nsupports custom indices e.g. `to_parquet`.\n\nExamples\n--------\n>>> df = pd.DataFrame([[1, 2, 3], [4, 5, 6]])\n>>> df.to_feather(\"file.feather\")  # doctest: +SKIP"
  },
  {
    "symbol": "DataFrame.to_gbq",
    "signature": "(self, destination_table: 'str', *, project_id: 'str | None' = None, chunksize: 'int | None' = None, reauth: 'bool' = False, if_exists: 'ToGbqIfexist' = 'fail', auth_local_webserver: 'bool' = True, table_schema: 'list[dict[str, str]] | None' = None, location: 'str | None' = None, progress_bar: 'bool' = True, credentials=None) -> 'None'",
    "doc": "Write a DataFrame to a Google BigQuery table.\n\n.. deprecated:: 2.2.0\n\n   Please use ``pandas_gbq.to_gbq`` instead.\n\nThis function requires the `pandas-gbq package\n<https://pandas-gbq.readthedocs.io>`__.\n\nSee the `How to authenticate with Google BigQuery\n<https://pandas-gbq.readthedocs.io/en/latest/howto/authentication.html>`__\nguide for authentication instructions.\n\nParameters\n----------\ndestination_table : str\n    Name of table to be written, in the form ``dataset.tablename``.\nproject_id : str, optional\n    Google BigQuery Account project ID. Optional when available from\n    the environment.\nchunksize : int, optional\n    Number of rows to be inserted in each chunk from the dataframe.\n    Set to ``None`` to load the whole dataframe at once.\nreauth : bool, default False\n    Force Google BigQuery to re-authenticate the user. This is useful\n    if multiple accounts are used.\nif_exists : str, default 'fail'\n    Behavior when the destination table exists. Value can be one of:\n\n    ``'fail'``\n        If table exists raise pandas_gbq.gbq.TableCreationError.\n    ``'replace'``\n        If table exists, drop it, recreate it, and insert data.\n    ``'append'``\n        If table exists, insert data. Create if does not exist.\nauth_local_webserver : bool, default True\n    Use the `local webserver flow`_ instead of the `console flow`_\n    when getting user credentials.\n\n    .. _local webserver flow:\n        https://google-auth-oauthlib.readthedocs.io/en/latest/reference/google_auth_oauthlib.flow.html#google_auth_oauthlib.flow.InstalledAppFlow.run_local_server\n    .. _console flow:\n        https://google-auth-oauthlib.readthedocs.io/en/latest/reference/google_auth_oauthlib.flow.html#google_auth_oauthlib.flow.InstalledAppFlow.run_console\n\n    *New in version 0.2.0 of pandas-gbq*.\n\n    .. versionchanged:: 1.5.0\n       Default value is changed to ``True``. Google has deprecated the\n       ``auth_local_webserver = False`` `\"out of band\" (copy-paste)\n       flow\n       <https://developers.googleblog.com/2022/02/making-oauth-flows-safer.html?m=1#disallowed-oob>`_.\ntable_schema : list of dicts, optional\n    List of BigQuery table fields to which according DataFrame\n    columns conform to, e.g. ``[{'name': 'col1', 'type':\n    'STRING'},...]``. If schema is not provided, it will be\n    generated according to dtypes of DataFrame columns. See\n    BigQuery API documentation on available names of a field.\n\n    *New in version 0.3.1 of pandas-gbq*.\nlocation : str, optional\n    Location where the load job should run. See the `BigQuery locations\n    documentation\n    <https://cloud.google.com/bigquery/docs/dataset-locations>`__ for a\n    list of available locations. The location must match that of the\n    target dataset.\n\n    *New in version 0.5.0 of pandas-gbq*.\nprogress_bar : bool, default True\n    Use the library `tqdm` to show the progress bar for the upload,\n    chunk by chunk.\n\n    *New in version 0.5.0 of pandas-gbq*.\ncredentials : google.auth.credentials.Credentials, optional\n    Credentials for accessing Google APIs. Use this parameter to\n    override default credentials, such as to use Compute Engine\n    :class:`google.auth.compute_engine.Credentials` or Service\n    Account :class:`google.oauth2.service_account.Credentials`\n    directly.\n\n    *New in version 0.8.0 of pandas-gbq*.\n\nSee Also\n--------\npandas_gbq.to_gbq : This function in the pandas-gbq library.\nread_gbq : Read a DataFrame from Google BigQuery.\n\nExamples\n--------\nExample taken from `Google BigQuery documentation\n<https://cloud.google.com/bigquery/docs/samples/bigquery-pandas-gbq-to-gbq-simple>`_\n\n>>> project_id = \"my-project\"\n>>> table_id = 'my_dataset.my_table'\n>>> df = pd.DataFrame({\n...                   \"my_string\": [\"a\", \"b\", \"c\"],\n...                   \"my_int64\": [1, 2, 3],\n...                   \"my_float64\": [4.0, 5.0, 6.0],\n...                   \"my_bool1\": [True, False, True],\n...                   \"my_bool2\": [False, True, False],\n...                   \"my_dates\": pd.date_range(\"now\", periods=3),\n...                   }\n...                   )\n\n>>> df.to_gbq(table_id, project_id=project_id)  # doctest: +SKIP"
  },
  {
    "symbol": "DataFrame.to_hdf",
    "signature": "(self, path_or_buf: 'FilePath | HDFStore', *, key: 'str', mode: \"Literal['a', 'w', 'r+']\" = 'a', complevel: 'int | None' = None, complib: \"Literal['zlib', 'lzo', 'bzip2', 'blosc'] | None\" = None, append: 'bool_t' = False, format: \"Literal['fixed', 'table'] | None\" = None, index: 'bool_t' = True, min_itemsize: 'int | dict[str, int] | None' = None, nan_rep=None, dropna: 'bool_t | None' = None, data_columns: 'Literal[True] | list[str] | None' = None, errors: 'OpenFileErrors' = 'strict', encoding: 'str' = 'UTF-8') -> 'None'",
    "doc": "Write the contained data to an HDF5 file using HDFStore.\n\nHierarchical Data Format (HDF) is self-describing, allowing an\napplication to interpret the structure and contents of a file with\nno outside information. One HDF file can hold a mix of related objects\nwhich can be accessed as a group or as individual objects.\n\nIn order to add another DataFrame or Series to an existing HDF file\nplease use append mode and a different a key.\n\n.. warning::\n\n   One can store a subclass of ``DataFrame`` or ``Series`` to HDF5,\n   but the type of the subclass is lost upon storing.\n\nFor more information see the :ref:`user guide <io.hdf5>`.\n\nParameters\n----------\npath_or_buf : str or pandas.HDFStore\n    File path or HDFStore object.\nkey : str\n    Identifier for the group in the store.\nmode : {'a', 'w', 'r+'}, default 'a'\n    Mode to open file:\n\n    - 'w': write, a new file is created (an existing file with\n      the same name would be deleted).\n    - 'a': append, an existing file is opened for reading and\n      writing, and if the file does not exist it is created.\n    - 'r+': similar to 'a', but the file must already exist.\ncomplevel : {0-9}, default None\n    Specifies a compression level for data.\n    A value of 0 or None disables compression.\ncomplib : {'zlib', 'lzo', 'bzip2', 'blosc'}, default 'zlib'\n    Specifies the compression library to be used.\n    These additional compressors for Blosc are supported\n    (default if no compressor specified: 'blosc:blosclz'):\n    {'blosc:blosclz', 'blosc:lz4', 'blosc:lz4hc', 'blosc:snappy',\n    'blosc:zlib', 'blosc:zstd'}.\n    Specifying a compression library which is not available issues\n    a ValueError.\nappend : bool, default False\n    For Table formats, append the input data to the existing.\nformat : {'fixed', 'table', None}, default 'fixed'\n    Possible values:\n\n    - 'fixed': Fixed format. Fast writing/reading. Not-appendable,\n      nor searchable.\n    - 'table': Table format. Write as a PyTables Table structure\n      which may perform worse but allow more flexible operations\n      like searching / selecting subsets of the data.\n    - If None, pd.get_option('io.hdf.default_format') is checked,\n      followed by fallback to \"fixed\".\nindex : bool, default True\n    Write DataFrame index as a column.\nmin_itemsize : dict or int, optional\n    Map column names to minimum string sizes for columns.\nnan_rep : Any, optional\n    How to represent null values as str.\n    Not allowed with append=True.\ndropna : bool, default False, optional\n    Remove missing values.\ndata_columns : list of columns or True, optional\n    List of columns to create as indexed data columns for on-disk\n    queries, or True to use all columns. By default only the axes\n    of the object are indexed. See\n    :ref:`Query via data columns<io.hdf5-query-data-columns>`. for\n    more information.\n    Applicable only to format='table'.\nerrors : str, default 'strict'\n    Specifies how encoding and decoding errors are to be handled.\n    See the errors argument for :func:`open` for a full list\n    of options.\nencoding : str, default \"UTF-8\"\n\nSee Also\n--------\nread_hdf : Read from HDF file.\nDataFrame.to_orc : Write a DataFrame to the binary orc format.\nDataFrame.to_parquet : Write a DataFrame to the binary parquet format.\nDataFrame.to_sql : Write to a SQL table.\nDataFrame.to_feather : Write out feather-format for DataFrames.\nDataFrame.to_csv : Write out to a csv file.\n\nExamples\n--------\n>>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]},\n...                   index=['a', 'b', 'c'])  # doctest: +SKIP\n>>> df.to_hdf('data.h5', key='df', mode='w')  # doctest: +SKIP\n\nWe can add another object to the same file:\n\n>>> s = pd.Series([1, 2, 3, 4])  # doctest: +SKIP\n>>> s.to_hdf('data.h5', key='s')  # doctest: +SKIP\n\nReading from HDF file:\n\n>>> pd.read_hdf('data.h5', 'df')  # doctest: +SKIP\nA  B\na  1  4\nb  2  5\nc  3  6\n>>> pd.read_hdf('data.h5', 's')  # doctest: +SKIP\n0    1\n1    2\n2    3\n3    4\ndtype: int64"
  },
  {
    "symbol": "DataFrame.to_html",
    "signature": "(self, buf: 'FilePath | WriteBuffer[str] | None' = None, *, columns: 'Axes | None' = None, col_space: 'ColspaceArgType | None' = None, header: 'bool' = True, index: 'bool' = True, na_rep: 'str' = 'NaN', formatters: 'FormattersType | None' = None, float_format: 'FloatFormatType | None' = None, sparsify: 'bool | None' = None, index_names: 'bool' = True, justify: 'str | None' = None, max_rows: 'int | None' = None, max_cols: 'int | None' = None, show_dimensions: 'bool | str' = False, decimal: 'str' = '.', bold_rows: 'bool' = True, classes: 'str | list | tuple | None' = None, escape: 'bool' = True, notebook: 'bool' = False, border: 'int | bool | None' = None, table_id: 'str | None' = None, render_links: 'bool' = False, encoding: 'str | None' = None) -> 'str | None'",
    "doc": "Render a DataFrame as an HTML table.\n\n        Parameters\n        ----------\n        buf : str, Path or StringIO-like, optional, default None\n            Buffer to write to. If None, the output is returned as a string.\n        columns : array-like, optional, default None\n            The subset of columns to write. Writes all columns by default.\n        col_space : str or int, list or dict of int or str, optional\n            The minimum width of each column in CSS length units.  An int is assumed to be px units..\n        header : bool, optional\n            Whether to print column labels, default True.\n        index : bool, optional, default True\n            Whether to print index (row) labels.\n        na_rep : str, optional, default 'NaN'\n            String representation of ``NaN`` to use.\n        formatters : list, tuple or dict of one-param. functions, optional\n            Formatter functions to apply to columns' elements by position or\n            name.\n            The result of each function must be a unicode string.\n            List/tuple must be of length equal to the number of columns.\n        float_format : one-parameter function, optional, default None\n            Formatter function to apply to columns' elements if they are\n            floats. This function must return a unicode string and will be\n            applied only to the non-``NaN`` elements, with ``NaN`` being\n            handled by ``na_rep``.\n        sparsify : bool, optional, default True\n            Set to False for a DataFrame with a hierarchical index to print\n            every multiindex key at each row.\n        index_names : bool, optional, default True\n            Prints the names of the indexes.\n        justify : str, default None\n            How to justify the column labels. If None uses the option from\n            the print configuration (controlled by set_option), 'right' out\n            of the box. Valid values are\n\n            * left\n            * right\n            * center\n            * justify\n            * justify-all\n            * start\n            * end\n            * inherit\n            * match-parent\n            * initial\n            * unset.\n        max_rows : int, optional\n            Maximum number of rows to display in the console.\n        max_cols : int, optional\n            Maximum number of columns to display in the console.\n        show_dimensions : bool, default False\n            Display DataFrame dimensions (number of rows by number of columns).\n        decimal : str, default '.'\n            Character recognized as decimal separator, e.g. ',' in Europe.\n    \nbold_rows : bool, default True\n    Make the row labels bold in the output.\nclasses : str or list or tuple, default None\n    CSS class(es) to apply to the resulting html table.\nescape : bool, default True\n    Convert the characters <, >, and & to HTML-safe sequences.\nnotebook : {True, False}, default False\n    Whether the generated HTML is for IPython Notebook.\nborder : int\n    A ``border=border`` attribute is included in the opening\n    `<table>` tag. Default ``pd.options.display.html.border``.\ntable_id : str, optional\n    A css id is included in the opening `<table>` tag if specified.\nrender_links : bool, default False\n    Convert URLs to HTML links.\nencoding : str, default \"utf-8\"\n    Set character encoding.\n\n        Returns\n        -------\n        str or None\n            If buf is None, returns the result as a string. Otherwise returns\n            None.\n    \nSee Also\n--------\nto_string : Convert DataFrame to a string.\n\nExamples\n--------\n>>> df = pd.DataFrame(data={'col1': [1, 2], 'col2': [4, 3]})\n>>> html_string = '''<table border=\"1\" class=\"dataframe\">\n...   <thead>\n...     <tr style=\"text-align: right;\">\n...       <th></th>\n...       <th>col1</th>\n...       <th>col2</th>\n...     </tr>\n...   </thead>\n...   <tbody>\n...     <tr>\n...       <th>0</th>\n...       <td>1</td>\n...       <td>4</td>\n...     </tr>\n...     <tr>\n...       <th>1</th>\n...       <td>2</td>\n...       <td>3</td>\n...     </tr>\n...   </tbody>\n... </table>'''\n>>> assert html_string == df.to_html()"
  },
  {
    "symbol": "DataFrame.to_json",
    "signature": "(self, path_or_buf: 'FilePath | WriteBuffer[bytes] | WriteBuffer[str] | None' = None, *, orient: \"Literal['split', 'records', 'index', 'table', 'columns', 'values'] | None\" = None, date_format: 'str | None' = None, double_precision: 'int' = 10, force_ascii: 'bool_t' = True, date_unit: 'TimeUnit' = 'ms', default_handler: 'Callable[[Any], JSONSerializable] | None' = None, lines: 'bool_t' = False, compression: 'CompressionOptions' = 'infer', index: 'bool_t | None' = None, indent: 'int | None' = None, storage_options: 'StorageOptions | None' = None, mode: \"Literal['a', 'w']\" = 'w') -> 'str | None'",
    "doc": "Convert the object to a JSON string.\n\nNote NaN's and None will be converted to null and datetime objects\nwill be converted to UNIX timestamps.\n\nParameters\n----------\npath_or_buf : str, path object, file-like object, or None, default None\n    String, path object (implementing os.PathLike[str]), or file-like\n    object implementing a write() function. If None, the result is\n    returned as a string.\norient : str\n    Indication of expected JSON string format.\n\n    * Series:\n\n        - default is 'index'\n        - allowed values are: {'split', 'records', 'index', 'table'}.\n\n    * DataFrame:\n\n        - default is 'columns'\n        - allowed values are: {'split', 'records', 'index', 'columns',\n          'values', 'table'}.\n\n    * The format of the JSON string:\n\n        - 'split' : dict like {'index' -> [index], 'columns' -> [columns],\n          'data' -> [values]}\n        - 'records' : list like [{column -> value}, ... , {column -> value}]\n        - 'index' : dict like {index -> {column -> value}}\n        - 'columns' : dict like {column -> {index -> value}}\n        - 'values' : just the values array\n        - 'table' : dict like {'schema': {schema}, 'data': {data}}\n\n        Describing the data, where data component is like ``orient='records'``.\n\ndate_format : {None, 'epoch', 'iso'}\n    Type of date conversion. 'epoch' = epoch milliseconds,\n    'iso' = ISO8601. The default depends on the `orient`. For\n    ``orient='table'``, the default is 'iso'. For all other orients,\n    the default is 'epoch'.\ndouble_precision : int, default 10\n    The number of decimal places to use when encoding\n    floating point values. The possible maximal value is 15.\n    Passing double_precision greater than 15 will raise a ValueError.\nforce_ascii : bool, default True\n    Force encoded string to be ASCII.\ndate_unit : str, default 'ms' (milliseconds)\n    The time unit to encode to, governs timestamp and ISO8601\n    precision.  One of 's', 'ms', 'us', 'ns' for second, millisecond,\n    microsecond, and nanosecond respectively.\ndefault_handler : callable, default None\n    Handler to call if object cannot otherwise be converted to a\n    suitable format for JSON. Should receive a single argument which is\n    the object to convert and return a serialisable object.\nlines : bool, default False\n    If 'orient' is 'records' write out line-delimited json format. Will\n    throw ValueError if incorrect 'orient' since others are not\n    list-like.\ncompression : str or dict, default 'infer'\n    For on-the-fly compression of the output data. If 'infer' and 'path_or_buf' is\n    path-like, then detect compression from the following extensions: '.gz',\n    '.bz2', '.zip', '.xz', '.zst', '.tar', '.tar.gz', '.tar.xz' or '.tar.bz2'\n    (otherwise no compression).\n    Set to ``None`` for no compression.\n    Can also be a dict with key ``'method'`` set\n    to one of {``'zip'``, ``'gzip'``, ``'bz2'``, ``'zstd'``, ``'xz'``, ``'tar'``} and\n    other key-value pairs are forwarded to\n    ``zipfile.ZipFile``, ``gzip.GzipFile``,\n    ``bz2.BZ2File``, ``zstandard.ZstdCompressor``, ``lzma.LZMAFile`` or\n    ``tarfile.TarFile``, respectively.\n    As an example, the following could be passed for faster compression and to create\n    a reproducible gzip archive:\n    ``compression={'method': 'gzip', 'compresslevel': 1, 'mtime': 1}``.\n\n    .. versionadded:: 1.5.0\n        Added support for `.tar` files.\n\n    .. versionchanged:: 1.4.0 Zstandard support.\n\nindex : bool or None, default None\n    The index is only used when 'orient' is 'split', 'index', 'column',\n    or 'table'. Of these, 'index' and 'column' do not support\n    `index=False`.\n\nindent : int, optional\n   Length of whitespace used to indent each record.\n\nstorage_options : dict, optional\n    Extra options that make sense for a particular storage connection, e.g.\n    host, port, username, password, etc. For HTTP(S) URLs the key-value pairs\n    are forwarded to ``urllib.request.Request`` as header options. For other\n    URLs (e.g. starting with \"s3://\", and \"gcs://\") the key-value pairs are\n    forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more\n    details, and for more examples on storage options refer `here\n    <https://pandas.pydata.org/docs/user_guide/io.html?\n    highlight=storage_options#reading-writing-remote-files>`_.\n\nmode : str, default 'w' (writing)\n    Specify the IO mode for output when supplying a path_or_buf.\n    Accepted args are 'w' (writing) and 'a' (append) only.\n    mode='a' is only supported when lines is True and orient is 'records'.\n\nReturns\n-------\nNone or str\n    If path_or_buf is None, returns the resulting json format as a\n    string. Otherwise returns None.\n\nSee Also\n--------\nread_json : Convert a JSON string to pandas object.\n\nNotes\n-----\nThe behavior of ``indent=0`` varies from the stdlib, which does not\nindent the output but does insert newlines. Currently, ``indent=0``\nand the default ``indent=None`` are equivalent in pandas, though this\nmay change in a future release.\n\n``orient='table'`` contains a 'pandas_version' field under 'schema'.\nThis stores the version of `pandas` used in the latest revision of the\nschema.\n\nExamples\n--------\n>>> from json import loads, dumps\n>>> df = pd.DataFrame(\n...     [[\"a\", \"b\"], [\"c\", \"d\"]],\n...     index=[\"row 1\", \"row 2\"],\n...     columns=[\"col 1\", \"col 2\"],\n... )\n\n>>> result = df.to_json(orient=\"split\")\n>>> parsed = loads(result)\n>>> dumps(parsed, indent=4)  # doctest: +SKIP\n{\n    \"columns\": [\n        \"col 1\",\n        \"col 2\"\n    ],\n    \"index\": [\n        \"row 1\",\n        \"row 2\"\n    ],\n    \"data\": [\n        [\n            \"a\",\n            \"b\"\n        ],\n        [\n            \"c\",\n            \"d\"\n        ]\n    ]\n}\n\nEncoding/decoding a Dataframe using ``'records'`` formatted JSON.\nNote that index labels are not preserved with this encoding.\n\n>>> result = df.to_json(orient=\"records\")\n>>> parsed = loads(result)\n>>> dumps(parsed, indent=4)  # doctest: +SKIP\n[\n    {\n        \"col 1\": \"a\",\n        \"col 2\": \"b\"\n    },\n    {\n        \"col 1\": \"c\",\n        \"col 2\": \"d\"\n    }\n]\n\nEncoding/decoding a Dataframe using ``'index'`` formatted JSON:\n\n>>> result = df.to_json(orient=\"index\")\n>>> parsed = loads(result)\n>>> dumps(parsed, indent=4)  # doctest: +SKIP\n{\n    \"row 1\": {\n        \"col 1\": \"a\",\n        \"col 2\": \"b\"\n    },\n    \"row 2\": {\n        \"col 1\": \"c\",\n        \"col 2\": \"d\"\n    }\n}\n\nEncoding/decoding a Dataframe using ``'columns'`` formatted JSON:\n\n>>> result = df.to_json(orient=\"columns\")\n>>> parsed = loads(result)\n>>> dumps(parsed, indent=4)  # doctest: +SKIP\n{\n    \"col 1\": {\n        \"row 1\": \"a\",\n        \"row 2\": \"c\"\n    },\n    \"col 2\": {\n        \"row 1\": \"b\",\n        \"row 2\": \"d\"\n    }\n}\n\nEncoding/decoding a Dataframe using ``'values'`` formatted JSON:\n\n>>> result = df.to_json(orient=\"values\")\n>>> parsed = loads(result)\n>>> dumps(parsed, indent=4)  # doctest: +SKIP\n[\n    [\n        \"a\",\n        \"b\"\n    ],\n    [\n        \"c\",\n        \"d\"\n    ]\n]\n\nEncoding with Table Schema:\n\n>>> result = df.to_json(orient=\"table\")\n>>> parsed = loads(result)\n>>> dumps(parsed, indent=4)  # doctest: +SKIP\n{\n    \"schema\": {\n        \"fields\": [\n            {\n                \"name\": \"index\",\n                \"type\": \"string\"\n            },\n            {\n                \"name\": \"col 1\",\n                \"type\": \"string\"\n            },\n            {\n                \"name\": \"col 2\",\n                \"type\": \"string\"\n            }\n        ],\n        \"primaryKey\": [\n            \"index\"\n        ],\n        \"pandas_version\": \"1.4.0\"\n    },\n    \"data\": [\n        {\n            \"index\": \"row 1\",\n            \"col 1\": \"a\",\n            \"col 2\": \"b\"\n        },\n        {\n            \"index\": \"row 2\",\n            \"col 1\": \"c\",\n            \"col 2\": \"d\"\n        }\n    ]\n}"
  },
  {
    "symbol": "DataFrame.to_latex",
    "signature": "(self, buf: 'FilePath | WriteBuffer[str] | None' = None, *, columns: 'Sequence[Hashable] | None' = None, header: 'bool_t | SequenceNotStr[str]' = True, index: 'bool_t' = True, na_rep: 'str' = 'NaN', formatters: 'FormattersType | None' = None, float_format: 'FloatFormatType | None' = None, sparsify: 'bool_t | None' = None, index_names: 'bool_t' = True, bold_rows: 'bool_t' = False, column_format: 'str | None' = None, longtable: 'bool_t | None' = None, escape: 'bool_t | None' = None, encoding: 'str | None' = None, decimal: 'str' = '.', multicolumn: 'bool_t | None' = None, multicolumn_format: 'str | None' = None, multirow: 'bool_t | None' = None, caption: 'str | tuple[str, str] | None' = None, label: 'str | None' = None, position: 'str | None' = None) -> 'str | None'",
    "doc": "Render object to a LaTeX tabular, longtable, or nested table.\n\nRequires ``\\usepackage{{booktabs}}``.  The output can be copy/pasted\ninto a main LaTeX document or read from an external file\nwith ``\\input{{table.tex}}``.\n\n.. versionchanged:: 2.0.0\n   Refactored to use the Styler implementation via jinja2 templating.\n\nParameters\n----------\nbuf : str, Path or StringIO-like, optional, default None\n    Buffer to write to. If None, the output is returned as a string.\ncolumns : list of label, optional\n    The subset of columns to write. Writes all columns by default.\nheader : bool or list of str, default True\n    Write out the column names. If a list of strings is given,\n    it is assumed to be aliases for the column names.\nindex : bool, default True\n    Write row names (index).\nna_rep : str, default 'NaN'\n    Missing data representation.\nformatters : list of functions or dict of {{str: function}}, optional\n    Formatter functions to apply to columns' elements by position or\n    name. The result of each function must be a unicode string.\n    List must be of length equal to the number of columns.\nfloat_format : one-parameter function or str, optional, default None\n    Formatter for floating point numbers. For example\n    ``float_format=\"%.2f\"`` and ``float_format=\"{{:0.2f}}\".format`` will\n    both result in 0.1234 being formatted as 0.12.\nsparsify : bool, optional\n    Set to False for a DataFrame with a hierarchical index to print\n    every multiindex key at each row. By default, the value will be\n    read from the config module.\nindex_names : bool, default True\n    Prints the names of the indexes.\nbold_rows : bool, default False\n    Make the row labels bold in the output.\ncolumn_format : str, optional\n    The columns format as specified in `LaTeX table format\n    <https://en.wikibooks.org/wiki/LaTeX/Tables>`__ e.g. 'rcl' for 3\n    columns. By default, 'l' will be used for all columns except\n    columns of numbers, which default to 'r'.\nlongtable : bool, optional\n    Use a longtable environment instead of tabular. Requires\n    adding a \\usepackage{{longtable}} to your LaTeX preamble.\n    By default, the value will be read from the pandas config\n    module, and set to `True` if the option ``styler.latex.environment`` is\n    `\"longtable\"`.\n\n    .. versionchanged:: 2.0.0\n       The pandas option affecting this argument has changed.\nescape : bool, optional\n    By default, the value will be read from the pandas config\n    module and set to `True` if the option ``styler.format.escape`` is\n    `\"latex\"`. When set to False prevents from escaping latex special\n    characters in column names.\n\n    .. versionchanged:: 2.0.0\n       The pandas option affecting this argument has changed, as has the\n       default value to `False`.\nencoding : str, optional\n    A string representing the encoding to use in the output file,\n    defaults to 'utf-8'.\ndecimal : str, default '.'\n    Character recognized as decimal separator, e.g. ',' in Europe.\nmulticolumn : bool, default True\n    Use \\multicolumn to enhance MultiIndex columns.\n    The default will be read from the config module, and is set\n    as the option ``styler.sparse.columns``.\n\n    .. versionchanged:: 2.0.0\n       The pandas option affecting this argument has changed.\nmulticolumn_format : str, default 'r'\n    The alignment for multicolumns, similar to `column_format`\n    The default will be read from the config module, and is set as the option\n    ``styler.latex.multicol_align``.\n\n    .. versionchanged:: 2.0.0\n       The pandas option affecting this argument has changed, as has the\n       default value to \"r\".\nmultirow : bool, default True\n    Use \\multirow to enhance MultiIndex rows. Requires adding a\n    \\usepackage{{multirow}} to your LaTeX preamble. Will print\n    centered labels (instead of top-aligned) across the contained\n    rows, separating groups via clines. The default will be read\n    from the pandas config module, and is set as the option\n    ``styler.sparse.index``.\n\n    .. versionchanged:: 2.0.0\n       The pandas option affecting this argument has changed, as has the\n       default value to `True`.\ncaption : str or tuple, optional\n    Tuple (full_caption, short_caption),\n    which results in ``\\caption[short_caption]{{full_caption}}``;\n    if a single string is passed, no short caption will be set.\nlabel : str, optional\n    The LaTeX label to be placed inside ``\\label{{}}`` in the output.\n    This is used with ``\\ref{{}}`` in the main ``.tex`` file.\n\nposition : str, optional\n    The LaTeX positional argument for tables, to be placed after\n    ``\\begin{{}}`` in the output.\n\nReturns\n-------\nstr or None\n    If buf is None, returns the result as a string. Otherwise returns None.\n\nSee Also\n--------\nio.formats.style.Styler.to_latex : Render a DataFrame to LaTeX\n    with conditional formatting.\nDataFrame.to_string : Render a DataFrame to a console-friendly\n    tabular output.\nDataFrame.to_html : Render a DataFrame as an HTML table.\n\nNotes\n-----\nAs of v2.0.0 this method has changed to use the Styler implementation as\npart of :meth:`.Styler.to_latex` via ``jinja2`` templating. This means\nthat ``jinja2`` is a requirement, and needs to be installed, for this method\nto function. It is advised that users switch to using Styler, since that\nimplementation is more frequently updated and contains much more\nflexibility with the output.\n\nExamples\n--------\nConvert a general DataFrame to LaTeX with formatting:\n\n>>> df = pd.DataFrame(dict(name=['Raphael', 'Donatello'],\n...                        age=[26, 45],\n...                        height=[181.23, 177.65]))\n>>> print(df.to_latex(index=False,\n...                   formatters={\"name\": str.upper},\n...                   float_format=\"{:.1f}\".format,\n... ))  # doctest: +SKIP\n\\begin{tabular}{lrr}\n\\toprule\nname & age & height \\\\\n\\midrule\nRAPHAEL & 26 & 181.2 \\\\\nDONATELLO & 45 & 177.7 \\\\\n\\bottomrule\n\\end{tabular}"
  },
  {
    "symbol": "DataFrame.to_markdown",
    "signature": "(self, buf: 'FilePath | WriteBuffer[str] | None' = None, *, mode: 'str' = 'wt', index: 'bool' = True, storage_options: 'StorageOptions | None' = None, **kwargs) -> 'str | None'",
    "doc": "Print DataFrame in Markdown-friendly format.\n\nParameters\n----------\nbuf : str, Path or StringIO-like, optional, default None\n    Buffer to write to. If None, the output is returned as a string.\nmode : str, optional\n    Mode in which file is opened, \"wt\" by default.\nindex : bool, optional, default True\n    Add index (row) labels.\n\nstorage_options : dict, optional\n    Extra options that make sense for a particular storage connection, e.g.\n    host, port, username, password, etc. For HTTP(S) URLs the key-value pairs\n    are forwarded to ``urllib.request.Request`` as header options. For other\n    URLs (e.g. starting with \"s3://\", and \"gcs://\") the key-value pairs are\n    forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more\n    details, and for more examples on storage options refer `here\n    <https://pandas.pydata.org/docs/user_guide/io.html?\n    highlight=storage_options#reading-writing-remote-files>`_.\n\n**kwargs\n    These parameters will be passed to `tabulate                 <https://pypi.org/project/tabulate>`_.\n\nReturns\n-------\nstr\n    DataFrame in Markdown-friendly format.\n\nNotes\n-----\nRequires the `tabulate <https://pypi.org/project/tabulate>`_ package.\n\nExamples\n        --------\n        >>> df = pd.DataFrame(\n        ...     data={\"animal_1\": [\"elk\", \"pig\"], \"animal_2\": [\"dog\", \"quetzal\"]}\n        ... )\n        >>> print(df.to_markdown())\n        |    | animal_1   | animal_2   |\n        |---:|:-----------|:-----------|\n        |  0 | elk        | dog        |\n        |  1 | pig        | quetzal    |\n\n        Output markdown with a tabulate option.\n\n        >>> print(df.to_markdown(tablefmt=\"grid\"))\n        +----+------------+------------+\n        |    | animal_1   | animal_2   |\n        +====+============+============+\n        |  0 | elk        | dog        |\n        +----+------------+------------+\n        |  1 | pig        | quetzal    |\n        +----+------------+------------+"
  },
  {
    "symbol": "DataFrame.to_numpy",
    "signature": "(self, dtype: 'npt.DTypeLike | None' = None, copy: 'bool' = False, na_value: 'object' = <no_default>) -> 'np.ndarray'",
    "doc": "Convert the DataFrame to a NumPy array.\n\nBy default, the dtype of the returned array will be the common NumPy\ndtype of all types in the DataFrame. For example, if the dtypes are\n``float16`` and ``float32``, the results dtype will be ``float32``.\nThis may require copying data and coercing values, which may be\nexpensive.\n\nParameters\n----------\ndtype : str or numpy.dtype, optional\n    The dtype to pass to :meth:`numpy.asarray`.\ncopy : bool, default False\n    Whether to ensure that the returned value is not a view on\n    another array. Note that ``copy=False`` does not *ensure* that\n    ``to_numpy()`` is no-copy. Rather, ``copy=True`` ensure that\n    a copy is made, even if not strictly necessary.\nna_value : Any, optional\n    The value to use for missing values. The default value depends\n    on `dtype` and the dtypes of the DataFrame columns.\n\nReturns\n-------\nnumpy.ndarray\n\nSee Also\n--------\nSeries.to_numpy : Similar method for Series.\n\nExamples\n--------\n>>> pd.DataFrame({\"A\": [1, 2], \"B\": [3, 4]}).to_numpy()\narray([[1, 3],\n       [2, 4]])\n\nWith heterogeneous data, the lowest common type will have to\nbe used.\n\n>>> df = pd.DataFrame({\"A\": [1, 2], \"B\": [3.0, 4.5]})\n>>> df.to_numpy()\narray([[1. , 3. ],\n       [2. , 4.5]])\n\nFor a mix of numeric and non-numeric types, the output array will\nhave object dtype.\n\n>>> df['C'] = pd.date_range('2000', periods=2)\n>>> df.to_numpy()\narray([[1, 3.0, Timestamp('2000-01-01 00:00:00')],\n       [2, 4.5, Timestamp('2000-01-02 00:00:00')]], dtype=object)"
  },
  {
    "symbol": "DataFrame.to_orc",
    "signature": "(self, path: 'FilePath | WriteBuffer[bytes] | None' = None, *, engine: \"Literal['pyarrow']\" = 'pyarrow', index: 'bool | None' = None, engine_kwargs: 'dict[str, Any] | None' = None) -> 'bytes | None'",
    "doc": "Write a DataFrame to the ORC format.\n\n.. versionadded:: 1.5.0\n\nParameters\n----------\npath : str, file-like object or None, default None\n    If a string, it will be used as Root Directory path\n    when writing a partitioned dataset. By file-like object,\n    we refer to objects with a write() method, such as a file handle\n    (e.g. via builtin open function). If path is None,\n    a bytes object is returned.\nengine : {'pyarrow'}, default 'pyarrow'\n    ORC library to use.\nindex : bool, optional\n    If ``True``, include the dataframe's index(es) in the file output.\n    If ``False``, they will not be written to the file.\n    If ``None``, similar to ``infer`` the dataframe's index(es)\n    will be saved. However, instead of being saved as values,\n    the RangeIndex will be stored as a range in the metadata so it\n    doesn't require much space and is faster. Other indexes will\n    be included as columns in the file output.\nengine_kwargs : dict[str, Any] or None, default None\n    Additional keyword arguments passed to :func:`pyarrow.orc.write_table`.\n\nReturns\n-------\nbytes if no path argument is provided else None\n\nRaises\n------\nNotImplementedError\n    Dtype of one or more columns is category, unsigned integers, interval,\n    period or sparse.\nValueError\n    engine is not pyarrow.\n\nSee Also\n--------\nread_orc : Read a ORC file.\nDataFrame.to_parquet : Write a parquet file.\nDataFrame.to_csv : Write a csv file.\nDataFrame.to_sql : Write to a sql table.\nDataFrame.to_hdf : Write to hdf.\n\nNotes\n-----\n* Before using this function you should read the :ref:`user guide about\n  ORC <io.orc>` and :ref:`install optional dependencies <install.warn_orc>`.\n* This function requires `pyarrow <https://arrow.apache.org/docs/python/>`_\n  library.\n* For supported dtypes please refer to `supported ORC features in Arrow\n  <https://arrow.apache.org/docs/cpp/orc.html#data-types>`__.\n* Currently timezones in datetime columns are not preserved when a\n  dataframe is converted into ORC files.\n\nExamples\n--------\n>>> df = pd.DataFrame(data={'col1': [1, 2], 'col2': [4, 3]})\n>>> df.to_orc('df.orc')  # doctest: +SKIP\n>>> pd.read_orc('df.orc')  # doctest: +SKIP\n   col1  col2\n0     1     4\n1     2     3\n\nIf you want to get a buffer to the orc content you can write it to io.BytesIO\n\n>>> import io\n>>> b = io.BytesIO(df.to_orc())  # doctest: +SKIP\n>>> b.seek(0)  # doctest: +SKIP\n0\n>>> content = b.read()  # doctest: +SKIP"
  },
  {
    "symbol": "DataFrame.to_parquet",
    "signature": "(self, path: 'FilePath | WriteBuffer[bytes] | None' = None, *, engine: \"Literal['auto', 'pyarrow', 'fastparquet']\" = 'auto', compression: 'str | None' = 'snappy', index: 'bool | None' = None, partition_cols: 'list[str] | None' = None, storage_options: 'StorageOptions | None' = None, **kwargs) -> 'bytes | None'",
    "doc": "Write a DataFrame to the binary parquet format.\n\nThis function writes the dataframe as a `parquet file\n<https://parquet.apache.org/>`_. You can choose different parquet\nbackends, and have the option of compression. See\n:ref:`the user guide <io.parquet>` for more details.\n\nParameters\n----------\npath : str, path object, file-like object, or None, default None\n    String, path object (implementing ``os.PathLike[str]``), or file-like\n    object implementing a binary ``write()`` function. If None, the result is\n    returned as bytes. If a string or path, it will be used as Root Directory\n    path when writing a partitioned dataset.\nengine : {'auto', 'pyarrow', 'fastparquet'}, default 'auto'\n    Parquet library to use. If 'auto', then the option\n    ``io.parquet.engine`` is used. The default ``io.parquet.engine``\n    behavior is to try 'pyarrow', falling back to 'fastparquet' if\n    'pyarrow' is unavailable.\ncompression : str or None, default 'snappy'\n    Name of the compression to use. Use ``None`` for no compression.\n    Supported options: 'snappy', 'gzip', 'brotli', 'lz4', 'zstd'.\nindex : bool, default None\n    If ``True``, include the dataframe's index(es) in the file output.\n    If ``False``, they will not be written to the file.\n    If ``None``, similar to ``True`` the dataframe's index(es)\n    will be saved. However, instead of being saved as values,\n    the RangeIndex will be stored as a range in the metadata so it\n    doesn't require much space and is faster. Other indexes will\n    be included as columns in the file output.\npartition_cols : list, optional, default None\n    Column names by which to partition the dataset.\n    Columns are partitioned in the order they are given.\n    Must be None if path is not a string.\nstorage_options : dict, optional\n    Extra options that make sense for a particular storage connection, e.g.\n    host, port, username, password, etc. For HTTP(S) URLs the key-value pairs\n    are forwarded to ``urllib.request.Request`` as header options. For other\n    URLs (e.g. starting with \"s3://\", and \"gcs://\") the key-value pairs are\n    forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more\n    details, and for more examples on storage options refer `here\n    <https://pandas.pydata.org/docs/user_guide/io.html?\n    highlight=storage_options#reading-writing-remote-files>`_.\n\n**kwargs\n    Additional arguments passed to the parquet library. See\n    :ref:`pandas io <io.parquet>` for more details.\n\nReturns\n-------\nbytes if no path argument is provided else None\n\nSee Also\n--------\nread_parquet : Read a parquet file.\nDataFrame.to_orc : Write an orc file.\nDataFrame.to_csv : Write a csv file.\nDataFrame.to_sql : Write to a sql table.\nDataFrame.to_hdf : Write to hdf.\n\nNotes\n-----\nThis function requires either the `fastparquet\n<https://pypi.org/project/fastparquet>`_ or `pyarrow\n<https://arrow.apache.org/docs/python/>`_ library.\n\nExamples\n--------\n>>> df = pd.DataFrame(data={'col1': [1, 2], 'col2': [3, 4]})\n>>> df.to_parquet('df.parquet.gzip',\n...               compression='gzip')  # doctest: +SKIP\n>>> pd.read_parquet('df.parquet.gzip')  # doctest: +SKIP\n   col1  col2\n0     1     3\n1     2     4\n\nIf you want to get a buffer to the parquet content you can use a io.BytesIO\nobject, as long as you don't use partition_cols, which creates multiple files.\n\n>>> import io\n>>> f = io.BytesIO()\n>>> df.to_parquet(f)\n>>> f.seek(0)\n0\n>>> content = f.read()"
  },
  {
    "symbol": "DataFrame.to_period",
    "signature": "(self, freq: 'Frequency | None' = None, axis: 'Axis' = 0, copy: 'bool | None' = None) -> 'DataFrame'",
    "doc": "Convert DataFrame from DatetimeIndex to PeriodIndex.\n\nConvert DataFrame from DatetimeIndex to PeriodIndex with desired\nfrequency (inferred from index if not passed).\n\nParameters\n----------\nfreq : str, default\n    Frequency of the PeriodIndex.\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    The axis to convert (the index by default).\ncopy : bool, default True\n    If False then underlying input data is not copied.\n\n    .. note::\n        The `copy` keyword will change behavior in pandas 3.0.\n        `Copy-on-Write\n        <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n        will be enabled by default, which means that all methods with a\n        `copy` keyword will use a lazy copy mechanism to defer the copy and\n        ignore the `copy` keyword. The `copy` keyword will be removed in a\n        future version of pandas.\n\n        You can already get the future behavior and improvements through\n        enabling copy on write ``pd.options.mode.copy_on_write = True``\n\nReturns\n-------\nDataFrame\n    The DataFrame has a PeriodIndex.\n\nExamples\n--------\n>>> idx = pd.to_datetime(\n...     [\n...         \"2001-03-31 00:00:00\",\n...         \"2002-05-31 00:00:00\",\n...         \"2003-08-31 00:00:00\",\n...     ]\n... )\n\n>>> idx\nDatetimeIndex(['2001-03-31', '2002-05-31', '2003-08-31'],\ndtype='datetime64[ns]', freq=None)\n\n>>> idx.to_period(\"M\")\nPeriodIndex(['2001-03', '2002-05', '2003-08'], dtype='period[M]')\n\nFor the yearly frequency\n\n>>> idx.to_period(\"Y\")\nPeriodIndex(['2001', '2002', '2003'], dtype='period[Y-DEC]')"
  },
  {
    "symbol": "DataFrame.to_pickle",
    "signature": "(self, path: 'FilePath | WriteBuffer[bytes]', *, compression: 'CompressionOptions' = 'infer', protocol: 'int' = 5, storage_options: 'StorageOptions | None' = None) -> 'None'",
    "doc": "Pickle (serialize) object to file.\n\nParameters\n----------\npath : str, path object, or file-like object\n    String, path object (implementing ``os.PathLike[str]``), or file-like\n    object implementing a binary ``write()`` function. File path where\n    the pickled object will be stored.\ncompression : str or dict, default 'infer'\n    For on-the-fly compression of the output data. If 'infer' and 'path' is\n    path-like, then detect compression from the following extensions: '.gz',\n    '.bz2', '.zip', '.xz', '.zst', '.tar', '.tar.gz', '.tar.xz' or '.tar.bz2'\n    (otherwise no compression).\n    Set to ``None`` for no compression.\n    Can also be a dict with key ``'method'`` set\n    to one of {``'zip'``, ``'gzip'``, ``'bz2'``, ``'zstd'``, ``'xz'``, ``'tar'``} and\n    other key-value pairs are forwarded to\n    ``zipfile.ZipFile``, ``gzip.GzipFile``,\n    ``bz2.BZ2File``, ``zstandard.ZstdCompressor``, ``lzma.LZMAFile`` or\n    ``tarfile.TarFile``, respectively.\n    As an example, the following could be passed for faster compression and to create\n    a reproducible gzip archive:\n    ``compression={'method': 'gzip', 'compresslevel': 1, 'mtime': 1}``.\n\n    .. versionadded:: 1.5.0\n        Added support for `.tar` files.\nprotocol : int\n    Int which indicates which protocol should be used by the pickler,\n    default HIGHEST_PROTOCOL (see [1]_ paragraph 12.1.2). The possible\n    values are 0, 1, 2, 3, 4, 5. A negative value for the protocol\n    parameter is equivalent to setting its value to HIGHEST_PROTOCOL.\n\n    .. [1] https://docs.python.org/3/library/pickle.html.\n\nstorage_options : dict, optional\n    Extra options that make sense for a particular storage connection, e.g.\n    host, port, username, password, etc. For HTTP(S) URLs the key-value pairs\n    are forwarded to ``urllib.request.Request`` as header options. For other\n    URLs (e.g. starting with \"s3://\", and \"gcs://\") the key-value pairs are\n    forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more\n    details, and for more examples on storage options refer `here\n    <https://pandas.pydata.org/docs/user_guide/io.html?\n    highlight=storage_options#reading-writing-remote-files>`_.\n\nSee Also\n--------\nread_pickle : Load pickled pandas object (or any object) from file.\nDataFrame.to_hdf : Write DataFrame to an HDF5 file.\nDataFrame.to_sql : Write DataFrame to a SQL database.\nDataFrame.to_parquet : Write a DataFrame to the binary parquet format.\n\nExamples\n--------\n>>> original_df = pd.DataFrame({\"foo\": range(5), \"bar\": range(5, 10)})  # doctest: +SKIP\n>>> original_df  # doctest: +SKIP\n   foo  bar\n0    0    5\n1    1    6\n2    2    7\n3    3    8\n4    4    9\n>>> original_df.to_pickle(\"./dummy.pkl\")  # doctest: +SKIP\n\n>>> unpickled_df = pd.read_pickle(\"./dummy.pkl\")  # doctest: +SKIP\n>>> unpickled_df  # doctest: +SKIP\n   foo  bar\n0    0    5\n1    1    6\n2    2    7\n3    3    8\n4    4    9"
  },
  {
    "symbol": "DataFrame.to_records",
    "signature": "(self, index: 'bool' = True, column_dtypes=None, index_dtypes=None) -> 'np.rec.recarray'",
    "doc": "Convert DataFrame to a NumPy record array.\n\nIndex will be included as the first field of the record array if\nrequested.\n\nParameters\n----------\nindex : bool, default True\n    Include index in resulting record array, stored in 'index'\n    field or using the index label, if set.\ncolumn_dtypes : str, type, dict, default None\n    If a string or type, the data type to store all columns. If\n    a dictionary, a mapping of column names and indices (zero-indexed)\n    to specific data types.\nindex_dtypes : str, type, dict, default None\n    If a string or type, the data type to store all index levels. If\n    a dictionary, a mapping of index level names and indices\n    (zero-indexed) to specific data types.\n\n    This mapping is applied only if `index=True`.\n\nReturns\n-------\nnumpy.rec.recarray\n    NumPy ndarray with the DataFrame labels as fields and each row\n    of the DataFrame as entries.\n\nSee Also\n--------\nDataFrame.from_records: Convert structured or record ndarray\n    to DataFrame.\nnumpy.rec.recarray: An ndarray that allows field access using\n    attributes, analogous to typed columns in a\n    spreadsheet.\n\nExamples\n--------\n>>> df = pd.DataFrame({'A': [1, 2], 'B': [0.5, 0.75]},\n...                   index=['a', 'b'])\n>>> df\n   A     B\na  1  0.50\nb  2  0.75\n>>> df.to_records()\nrec.array([('a', 1, 0.5 ), ('b', 2, 0.75)],\n          dtype=[('index', 'O'), ('A', '<i8'), ('B', '<f8')])\n\nIf the DataFrame index has no label then the recarray field name\nis set to 'index'. If the index has a label then this is used as the\nfield name:\n\n>>> df.index = df.index.rename(\"I\")\n>>> df.to_records()\nrec.array([('a', 1, 0.5 ), ('b', 2, 0.75)],\n          dtype=[('I', 'O'), ('A', '<i8'), ('B', '<f8')])\n\nThe index can be excluded from the record array:\n\n>>> df.to_records(index=False)\nrec.array([(1, 0.5 ), (2, 0.75)],\n          dtype=[('A', '<i8'), ('B', '<f8')])\n\nData types can be specified for the columns:\n\n>>> df.to_records(column_dtypes={\"A\": \"int32\"})\nrec.array([('a', 1, 0.5 ), ('b', 2, 0.75)],\n          dtype=[('I', 'O'), ('A', '<i4'), ('B', '<f8')])\n\nAs well as for the index:\n\n>>> df.to_records(index_dtypes=\"<S2\")\nrec.array([(b'a', 1, 0.5 ), (b'b', 2, 0.75)],\n          dtype=[('I', 'S2'), ('A', '<i8'), ('B', '<f8')])\n\n>>> index_dtypes = f\"<S{df.index.str.len().max()}\"\n>>> df.to_records(index_dtypes=index_dtypes)\nrec.array([(b'a', 1, 0.5 ), (b'b', 2, 0.75)],\n          dtype=[('I', 'S1'), ('A', '<i8'), ('B', '<f8')])"
  },
  {
    "symbol": "DataFrame.to_sql",
    "signature": "(self, name: 'str', con, *, schema: 'str | None' = None, if_exists: \"Literal['fail', 'replace', 'append']\" = 'fail', index: 'bool_t' = True, index_label: 'IndexLabel | None' = None, chunksize: 'int | None' = None, dtype: 'DtypeArg | None' = None, method: \"Literal['multi'] | Callable | None\" = None) -> 'int | None'",
    "doc": "Write records stored in a DataFrame to a SQL database.\n\nDatabases supported by SQLAlchemy [1]_ are supported. Tables can be\nnewly created, appended to, or overwritten.\n\nParameters\n----------\nname : str\n    Name of SQL table.\ncon : sqlalchemy.engine.(Engine or Connection) or sqlite3.Connection\n    Using SQLAlchemy makes it possible to use any DB supported by that\n    library. Legacy support is provided for sqlite3.Connection objects. The user\n    is responsible for engine disposal and connection closure for the SQLAlchemy\n    connectable. See `here                 <https://docs.sqlalchemy.org/en/20/core/connections.html>`_.\n    If passing a sqlalchemy.engine.Connection which is already in a transaction,\n    the transaction will not be committed.  If passing a sqlite3.Connection,\n    it will not be possible to roll back the record insertion.\n\nschema : str, optional\n    Specify the schema (if database flavor supports this). If None, use\n    default schema.\nif_exists : {'fail', 'replace', 'append'}, default 'fail'\n    How to behave if the table already exists.\n\n    * fail: Raise a ValueError.\n    * replace: Drop the table before inserting new values.\n    * append: Insert new values to the existing table.\n\nindex : bool, default True\n    Write DataFrame index as a column. Uses `index_label` as the column\n    name in the table. Creates a table index for this column.\nindex_label : str or sequence, default None\n    Column label for index column(s). If None is given (default) and\n    `index` is True, then the index names are used.\n    A sequence should be given if the DataFrame uses MultiIndex.\nchunksize : int, optional\n    Specify the number of rows in each batch to be written at a time.\n    By default, all rows will be written at once.\ndtype : dict or scalar, optional\n    Specifying the datatype for columns. If a dictionary is used, the\n    keys should be the column names and the values should be the\n    SQLAlchemy types or strings for the sqlite3 legacy mode. If a\n    scalar is provided, it will be applied to all columns.\nmethod : {None, 'multi', callable}, optional\n    Controls the SQL insertion clause used:\n\n    * None : Uses standard SQL ``INSERT`` clause (one per row).\n    * 'multi': Pass multiple values in a single ``INSERT`` clause.\n    * callable with signature ``(pd_table, conn, keys, data_iter)``.\n\n    Details and a sample callable implementation can be found in the\n    section :ref:`insert method <io.sql.method>`.\n\nReturns\n-------\nNone or int\n    Number of rows affected by to_sql. None is returned if the callable\n    passed into ``method`` does not return an integer number of rows.\n\n    The number of returned rows affected is the sum of the ``rowcount``\n    attribute of ``sqlite3.Cursor`` or SQLAlchemy connectable which may not\n    reflect the exact number of written rows as stipulated in the\n    `sqlite3 <https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.rowcount>`__ or\n    `SQLAlchemy <https://docs.sqlalchemy.org/en/20/core/connections.html#sqlalchemy.engine.CursorResult.rowcount>`__.\n\n    .. versionadded:: 1.4.0\n\nRaises\n------\nValueError\n    When the table already exists and `if_exists` is 'fail' (the\n    default).\n\nSee Also\n--------\nread_sql : Read a DataFrame from a table.\n\nNotes\n-----\nTimezone aware datetime columns will be written as\n``Timestamp with timezone`` type with SQLAlchemy if supported by the\ndatabase. Otherwise, the datetimes will be stored as timezone unaware\ntimestamps local to the original timezone.\n\nNot all datastores support ``method=\"multi\"``. Oracle, for example,\ndoes not support multi-value insert.\n\nReferences\n----------\n.. [1] https://docs.sqlalchemy.org\n.. [2] https://www.python.org/dev/peps/pep-0249/\n\nExamples\n--------\nCreate an in-memory SQLite database.\n\n>>> from sqlalchemy import create_engine\n>>> engine = create_engine('sqlite://', echo=False)\n\nCreate a table from scratch with 3 rows.\n\n>>> df = pd.DataFrame({'name' : ['User 1', 'User 2', 'User 3']})\n>>> df\n     name\n0  User 1\n1  User 2\n2  User 3\n\n>>> df.to_sql(name='users', con=engine)\n3\n>>> from sqlalchemy import text\n>>> with engine.connect() as conn:\n...    conn.execute(text(\"SELECT * FROM users\")).fetchall()\n[(0, 'User 1'), (1, 'User 2'), (2, 'User 3')]\n\nAn `sqlalchemy.engine.Connection` can also be passed to `con`:\n\n>>> with engine.begin() as connection:\n...     df1 = pd.DataFrame({'name' : ['User 4', 'User 5']})\n...     df1.to_sql(name='users', con=connection, if_exists='append')\n2\n\nThis is allowed to support operations that require that the same\nDBAPI connection is used for the entire operation.\n\n>>> df2 = pd.DataFrame({'name' : ['User 6', 'User 7']})\n>>> df2.to_sql(name='users', con=engine, if_exists='append')\n2\n>>> with engine.connect() as conn:\n...    conn.execute(text(\"SELECT * FROM users\")).fetchall()\n[(0, 'User 1'), (1, 'User 2'), (2, 'User 3'),\n (0, 'User 4'), (1, 'User 5'), (0, 'User 6'),\n (1, 'User 7')]\n\nOverwrite the table with just ``df2``.\n\n>>> df2.to_sql(name='users', con=engine, if_exists='replace',\n...            index_label='id')\n2\n>>> with engine.connect() as conn:\n...    conn.execute(text(\"SELECT * FROM users\")).fetchall()\n[(0, 'User 6'), (1, 'User 7')]\n\nUse ``method`` to define a callable insertion method to do nothing\nif there's a primary key conflict on a table in a PostgreSQL database.\n\n>>> from sqlalchemy.dialects.postgresql import insert\n>>> def insert_on_conflict_nothing(table, conn, keys, data_iter):\n...     # \"a\" is the primary key in \"conflict_table\"\n...     data = [dict(zip(keys, row)) for row in data_iter]\n...     stmt = insert(table.table).values(data).on_conflict_do_nothing(index_elements=[\"a\"])\n...     result = conn.execute(stmt)\n...     return result.rowcount\n>>> df_conflict.to_sql(name=\"conflict_table\", con=conn, if_exists=\"append\", method=insert_on_conflict_nothing)  # doctest: +SKIP\n0\n\nFor MySQL, a callable to update columns ``b`` and ``c`` if there's a conflict\non a primary key.\n\n>>> from sqlalchemy.dialects.mysql import insert\n>>> def insert_on_conflict_update(table, conn, keys, data_iter):\n...     # update columns \"b\" and \"c\" on primary key conflict\n...     data = [dict(zip(keys, row)) for row in data_iter]\n...     stmt = (\n...         insert(table.table)\n...         .values(data)\n...     )\n...     stmt = stmt.on_duplicate_key_update(b=stmt.inserted.b, c=stmt.inserted.c)\n...     result = conn.execute(stmt)\n...     return result.rowcount\n>>> df_conflict.to_sql(name=\"conflict_table\", con=conn, if_exists=\"append\", method=insert_on_conflict_update)  # doctest: +SKIP\n2\n\nSpecify the dtype (especially useful for integers with missing values).\nNotice that while pandas is forced to store the data as floating point,\nthe database supports nullable integers. When fetching the data with\nPython, we get back integer scalars.\n\n>>> df = pd.DataFrame({\"A\": [1, None, 2]})\n>>> df\n     A\n0  1.0\n1  NaN\n2  2.0\n\n>>> from sqlalchemy.types import Integer\n>>> df.to_sql(name='integers', con=engine, index=False,\n...           dtype={\"A\": Integer()})\n3\n\n>>> with engine.connect() as conn:\n...   conn.execute(text(\"SELECT * FROM integers\")).fetchall()\n[(1,), (None,), (2,)]"
  },
  {
    "symbol": "DataFrame.to_stata",
    "signature": "(self, path: 'FilePath | WriteBuffer[bytes]', *, convert_dates: 'dict[Hashable, str] | None' = None, write_index: 'bool' = True, byteorder: 'ToStataByteorder | None' = None, time_stamp: 'datetime.datetime | None' = None, data_label: 'str | None' = None, variable_labels: 'dict[Hashable, str] | None' = None, version: 'int | None' = 114, convert_strl: 'Sequence[Hashable] | None' = None, compression: 'CompressionOptions' = 'infer', storage_options: 'StorageOptions | None' = None, value_labels: 'dict[Hashable, dict[float, str]] | None' = None) -> 'None'",
    "doc": "Export DataFrame object to Stata dta format.\n\nWrites the DataFrame to a Stata dataset file.\n\"dta\" files contain a Stata dataset.\n\nParameters\n----------\npath : str, path object, or buffer\n    String, path object (implementing ``os.PathLike[str]``), or file-like\n    object implementing a binary ``write()`` function.\n\nconvert_dates : dict\n    Dictionary mapping columns containing datetime types to stata\n    internal format to use when writing the dates. Options are 'tc',\n    'td', 'tm', 'tw', 'th', 'tq', 'ty'. Column can be either an integer\n    or a name. Datetime columns that do not have a conversion type\n    specified will be converted to 'tc'. Raises NotImplementedError if\n    a datetime column has timezone information.\nwrite_index : bool\n    Write the index to Stata dataset.\nbyteorder : str\n    Can be \">\", \"<\", \"little\", or \"big\". default is `sys.byteorder`.\ntime_stamp : datetime\n    A datetime to use as file creation date.  Default is the current\n    time.\ndata_label : str, optional\n    A label for the data set.  Must be 80 characters or smaller.\nvariable_labels : dict\n    Dictionary containing columns as keys and variable labels as\n    values. Each label must be 80 characters or smaller.\nversion : {114, 117, 118, 119, None}, default 114\n    Version to use in the output dta file. Set to None to let pandas\n    decide between 118 or 119 formats depending on the number of\n    columns in the frame. Version 114 can be read by Stata 10 and\n    later. Version 117 can be read by Stata 13 or later. Version 118\n    is supported in Stata 14 and later. Version 119 is supported in\n    Stata 15 and later. Version 114 limits string variables to 244\n    characters or fewer while versions 117 and later allow strings\n    with lengths up to 2,000,000 characters. Versions 118 and 119\n    support Unicode characters, and version 119 supports more than\n    32,767 variables.\n\n    Version 119 should usually only be used when the number of\n    variables exceeds the capacity of dta format 118. Exporting\n    smaller datasets in format 119 may have unintended consequences,\n    and, as of November 2020, Stata SE cannot read version 119 files.\n\nconvert_strl : list, optional\n    List of column names to convert to string columns to Stata StrL\n    format. Only available if version is 117.  Storing strings in the\n    StrL format can produce smaller dta files if strings have more than\n    8 characters and values are repeated.\ncompression : str or dict, default 'infer'\n    For on-the-fly compression of the output data. If 'infer' and 'path' is\n    path-like, then detect compression from the following extensions: '.gz',\n    '.bz2', '.zip', '.xz', '.zst', '.tar', '.tar.gz', '.tar.xz' or '.tar.bz2'\n    (otherwise no compression).\n    Set to ``None`` for no compression.\n    Can also be a dict with key ``'method'`` set\n    to one of {``'zip'``, ``'gzip'``, ``'bz2'``, ``'zstd'``, ``'xz'``, ``'tar'``} and\n    other key-value pairs are forwarded to\n    ``zipfile.ZipFile``, ``gzip.GzipFile``,\n    ``bz2.BZ2File``, ``zstandard.ZstdCompressor``, ``lzma.LZMAFile`` or\n    ``tarfile.TarFile``, respectively.\n    As an example, the following could be passed for faster compression and to create\n    a reproducible gzip archive:\n    ``compression={'method': 'gzip', 'compresslevel': 1, 'mtime': 1}``.\n\n    .. versionadded:: 1.5.0\n        Added support for `.tar` files.\n\n    .. versionchanged:: 1.4.0 Zstandard support.\n\nstorage_options : dict, optional\n    Extra options that make sense for a particular storage connection, e.g.\n    host, port, username, password, etc. For HTTP(S) URLs the key-value pairs\n    are forwarded to ``urllib.request.Request`` as header options. For other\n    URLs (e.g. starting with \"s3://\", and \"gcs://\") the key-value pairs are\n    forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more\n    details, and for more examples on storage options refer `here\n    <https://pandas.pydata.org/docs/user_guide/io.html?\n    highlight=storage_options#reading-writing-remote-files>`_.\n\nvalue_labels : dict of dicts\n    Dictionary containing columns as keys and dictionaries of column value\n    to labels as values. Labels for a single variable must be 32,000\n    characters or smaller.\n\n    .. versionadded:: 1.4.0\n\nRaises\n------\nNotImplementedError\n    * If datetimes contain timezone information\n    * Column dtype is not representable in Stata\nValueError\n    * Columns listed in convert_dates are neither datetime64[ns]\n      or datetime.datetime\n    * Column listed in convert_dates is not in DataFrame\n    * Categorical label contains more than 32,000 characters\n\nSee Also\n--------\nread_stata : Import Stata data files.\nio.stata.StataWriter : Low-level writer for Stata data files.\nio.stata.StataWriter117 : Low-level writer for version 117 files.\n\nExamples\n--------\n>>> df = pd.DataFrame({'animal': ['falcon', 'parrot', 'falcon',\n...                               'parrot'],\n...                    'speed': [350, 18, 361, 15]})\n>>> df.to_stata('animals.dta')  # doctest: +SKIP"
  },
  {
    "symbol": "DataFrame.to_string",
    "signature": "(self, buf: 'FilePath | WriteBuffer[str] | None' = None, *, columns: 'Axes | None' = None, col_space: 'int | list[int] | dict[Hashable, int] | None' = None, header: 'bool | SequenceNotStr[str]' = True, index: 'bool' = True, na_rep: 'str' = 'NaN', formatters: 'fmt.FormattersType | None' = None, float_format: 'fmt.FloatFormatType | None' = None, sparsify: 'bool | None' = None, index_names: 'bool' = True, justify: 'str | None' = None, max_rows: 'int | None' = None, max_cols: 'int | None' = None, show_dimensions: 'bool' = False, decimal: 'str' = '.', line_width: 'int | None' = None, min_rows: 'int | None' = None, max_colwidth: 'int | None' = None, encoding: 'str | None' = None) -> 'str | None'",
    "doc": "Render a DataFrame to a console-friendly tabular output.\n\n        Parameters\n        ----------\n        buf : str, Path or StringIO-like, optional, default None\n            Buffer to write to. If None, the output is returned as a string.\n        columns : array-like, optional, default None\n            The subset of columns to write. Writes all columns by default.\n        col_space : int, list or dict of int, optional\n            The minimum width of each column. If a list of ints is given every integers corresponds with one column. If a dict is given, the key references the column, while the value defines the space to use..\n        header : bool or list of str, optional\n            Write out the column names. If a list of columns is given, it is assumed to be aliases for the column names.\n        index : bool, optional, default True\n            Whether to print index (row) labels.\n        na_rep : str, optional, default 'NaN'\n            String representation of ``NaN`` to use.\n        formatters : list, tuple or dict of one-param. functions, optional\n            Formatter functions to apply to columns' elements by position or\n            name.\n            The result of each function must be a unicode string.\n            List/tuple must be of length equal to the number of columns.\n        float_format : one-parameter function, optional, default None\n            Formatter function to apply to columns' elements if they are\n            floats. This function must return a unicode string and will be\n            applied only to the non-``NaN`` elements, with ``NaN`` being\n            handled by ``na_rep``.\n        sparsify : bool, optional, default True\n            Set to False for a DataFrame with a hierarchical index to print\n            every multiindex key at each row.\n        index_names : bool, optional, default True\n            Prints the names of the indexes.\n        justify : str, default None\n            How to justify the column labels. If None uses the option from\n            the print configuration (controlled by set_option), 'right' out\n            of the box. Valid values are\n\n            * left\n            * right\n            * center\n            * justify\n            * justify-all\n            * start\n            * end\n            * inherit\n            * match-parent\n            * initial\n            * unset.\n        max_rows : int, optional\n            Maximum number of rows to display in the console.\n        max_cols : int, optional\n            Maximum number of columns to display in the console.\n        show_dimensions : bool, default False\n            Display DataFrame dimensions (number of rows by number of columns).\n        decimal : str, default '.'\n            Character recognized as decimal separator, e.g. ',' in Europe.\n    \nline_width : int, optional\n    Width to wrap a line in characters.\nmin_rows : int, optional\n    The number of rows to display in the console in a truncated repr\n    (when number of rows is above `max_rows`).\nmax_colwidth : int, optional\n    Max width to truncate each column in characters. By default, no limit.\nencoding : str, default \"utf-8\"\n    Set character encoding.\n\n        Returns\n        -------\n        str or None\n            If buf is None, returns the result as a string. Otherwise returns\n            None.\n    \nSee Also\n--------\nto_html : Convert DataFrame to HTML.\n\nExamples\n--------\n>>> d = {'col1': [1, 2, 3], 'col2': [4, 5, 6]}\n>>> df = pd.DataFrame(d)\n>>> print(df.to_string())\n   col1  col2\n0     1     4\n1     2     5\n2     3     6"
  },
  {
    "symbol": "DataFrame.to_timestamp",
    "signature": "(self, freq: 'Frequency | None' = None, how: 'ToTimestampHow' = 'start', axis: 'Axis' = 0, copy: 'bool | None' = None) -> 'DataFrame'",
    "doc": "Cast to DatetimeIndex of timestamps, at *beginning* of period.\n\nParameters\n----------\nfreq : str, default frequency of PeriodIndex\n    Desired frequency.\nhow : {'s', 'e', 'start', 'end'}\n    Convention for converting period to timestamp; start of period\n    vs. end.\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    The axis to convert (the index by default).\ncopy : bool, default True\n    If False then underlying input data is not copied.\n\n    .. note::\n        The `copy` keyword will change behavior in pandas 3.0.\n        `Copy-on-Write\n        <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n        will be enabled by default, which means that all methods with a\n        `copy` keyword will use a lazy copy mechanism to defer the copy and\n        ignore the `copy` keyword. The `copy` keyword will be removed in a\n        future version of pandas.\n\n        You can already get the future behavior and improvements through\n        enabling copy on write ``pd.options.mode.copy_on_write = True``\n\nReturns\n-------\nDataFrame\n    The DataFrame has a DatetimeIndex.\n\nExamples\n--------\n>>> idx = pd.PeriodIndex(['2023', '2024'], freq='Y')\n>>> d = {'col1': [1, 2], 'col2': [3, 4]}\n>>> df1 = pd.DataFrame(data=d, index=idx)\n>>> df1\n      col1   col2\n2023     1      3\n2024     2      4\n\nThe resulting timestamps will be at the beginning of the year in this case\n\n>>> df1 = df1.to_timestamp()\n>>> df1\n            col1   col2\n2023-01-01     1      3\n2024-01-01     2      4\n>>> df1.index\nDatetimeIndex(['2023-01-01', '2024-01-01'], dtype='datetime64[ns]', freq=None)\n\nUsing `freq` which is the offset that the Timestamps will have\n\n>>> df2 = pd.DataFrame(data=d, index=idx)\n>>> df2 = df2.to_timestamp(freq='M')\n>>> df2\n            col1   col2\n2023-01-31     1      3\n2024-01-31     2      4\n>>> df2.index\nDatetimeIndex(['2023-01-31', '2024-01-31'], dtype='datetime64[ns]', freq=None)"
  },
  {
    "symbol": "DataFrame.to_xarray",
    "signature": "(self)",
    "doc": "Return an xarray object from the pandas object.\n\nReturns\n-------\nxarray.DataArray or xarray.Dataset\n    Data in the pandas structure converted to Dataset if the object is\n    a DataFrame, or a DataArray if the object is a Series.\n\nSee Also\n--------\nDataFrame.to_hdf : Write DataFrame to an HDF5 file.\nDataFrame.to_parquet : Write a DataFrame to the binary parquet format.\n\nNotes\n-----\nSee the `xarray docs <https://xarray.pydata.org/en/stable/>`__\n\nExamples\n--------\n>>> df = pd.DataFrame([('falcon', 'bird', 389.0, 2),\n...                    ('parrot', 'bird', 24.0, 2),\n...                    ('lion', 'mammal', 80.5, 4),\n...                    ('monkey', 'mammal', np.nan, 4)],\n...                   columns=['name', 'class', 'max_speed',\n...                            'num_legs'])\n>>> df\n     name   class  max_speed  num_legs\n0  falcon    bird      389.0         2\n1  parrot    bird       24.0         2\n2    lion  mammal       80.5         4\n3  monkey  mammal        NaN         4\n\n>>> df.to_xarray()  # doctest: +SKIP\n<xarray.Dataset>\nDimensions:    (index: 4)\nCoordinates:\n  * index      (index) int64 32B 0 1 2 3\nData variables:\n    name       (index) object 32B 'falcon' 'parrot' 'lion' 'monkey'\n    class      (index) object 32B 'bird' 'bird' 'mammal' 'mammal'\n    max_speed  (index) float64 32B 389.0 24.0 80.5 nan\n    num_legs   (index) int64 32B 2 2 4 4\n\n>>> df['max_speed'].to_xarray()  # doctest: +SKIP\n<xarray.DataArray 'max_speed' (index: 4)>\narray([389. ,  24. ,  80.5,   nan])\nCoordinates:\n  * index    (index) int64 0 1 2 3\n\n>>> dates = pd.to_datetime(['2018-01-01', '2018-01-01',\n...                         '2018-01-02', '2018-01-02'])\n>>> df_multiindex = pd.DataFrame({'date': dates,\n...                               'animal': ['falcon', 'parrot',\n...                                          'falcon', 'parrot'],\n...                               'speed': [350, 18, 361, 15]})\n>>> df_multiindex = df_multiindex.set_index(['date', 'animal'])\n\n>>> df_multiindex\n                   speed\ndate       animal\n2018-01-01 falcon    350\n           parrot     18\n2018-01-02 falcon    361\n           parrot     15\n\n>>> df_multiindex.to_xarray()  # doctest: +SKIP\n<xarray.Dataset>\nDimensions:  (date: 2, animal: 2)\nCoordinates:\n  * date     (date) datetime64[ns] 2018-01-01 2018-01-02\n  * animal   (animal) object 'falcon' 'parrot'\nData variables:\n    speed    (date, animal) int64 350 18 361 15"
  },
  {
    "symbol": "DataFrame.to_xml",
    "signature": "(self, path_or_buffer: 'FilePath | WriteBuffer[bytes] | WriteBuffer[str] | None' = None, *, index: 'bool' = True, root_name: 'str | None' = 'data', row_name: 'str | None' = 'row', na_rep: 'str | None' = None, attr_cols: 'list[str] | None' = None, elem_cols: 'list[str] | None' = None, namespaces: 'dict[str | None, str] | None' = None, prefix: 'str | None' = None, encoding: 'str' = 'utf-8', xml_declaration: 'bool | None' = True, pretty_print: 'bool | None' = True, parser: 'XMLParsers | None' = 'lxml', stylesheet: 'FilePath | ReadBuffer[str] | ReadBuffer[bytes] | None' = None, compression: 'CompressionOptions' = 'infer', storage_options: 'StorageOptions | None' = None) -> 'str | None'",
    "doc": "Render a DataFrame to an XML document.\n\n.. versionadded:: 1.3.0\n\nParameters\n----------\npath_or_buffer : str, path object, file-like object, or None, default None\n    String, path object (implementing ``os.PathLike[str]``), or file-like\n    object implementing a ``write()`` function. If None, the result is returned\n    as a string.\nindex : bool, default True\n    Whether to include index in XML document.\nroot_name : str, default 'data'\n    The name of root element in XML document.\nrow_name : str, default 'row'\n    The name of row element in XML document.\nna_rep : str, optional\n    Missing data representation.\nattr_cols : list-like, optional\n    List of columns to write as attributes in row element.\n    Hierarchical columns will be flattened with underscore\n    delimiting the different levels.\nelem_cols : list-like, optional\n    List of columns to write as children in row element. By default,\n    all columns output as children of row element. Hierarchical\n    columns will be flattened with underscore delimiting the\n    different levels.\nnamespaces : dict, optional\n    All namespaces to be defined in root element. Keys of dict\n    should be prefix names and values of dict corresponding URIs.\n    Default namespaces should be given empty string key. For\n    example, ::\n\n        namespaces = {\"\": \"https://example.com\"}\n\nprefix : str, optional\n    Namespace prefix to be used for every element and/or attribute\n    in document. This should be one of the keys in ``namespaces``\n    dict.\nencoding : str, default 'utf-8'\n    Encoding of the resulting document.\nxml_declaration : bool, default True\n    Whether to include the XML declaration at start of document.\npretty_print : bool, default True\n    Whether output should be pretty printed with indentation and\n    line breaks.\nparser : {'lxml','etree'}, default 'lxml'\n    Parser module to use for building of tree. Only 'lxml' and\n    'etree' are supported. With 'lxml', the ability to use XSLT\n    stylesheet is supported.\nstylesheet : str, path object or file-like object, optional\n    A URL, file-like object, or a raw string containing an XSLT\n    script used to transform the raw XML output. Script should use\n    layout of elements and attributes from original output. This\n    argument requires ``lxml`` to be installed. Only XSLT 1.0\n    scripts and not later versions is currently supported.\ncompression : str or dict, default 'infer'\n    For on-the-fly compression of the output data. If 'infer' and 'path_or_buffer' is\n    path-like, then detect compression from the following extensions: '.gz',\n    '.bz2', '.zip', '.xz', '.zst', '.tar', '.tar.gz', '.tar.xz' or '.tar.bz2'\n    (otherwise no compression).\n    Set to ``None`` for no compression.\n    Can also be a dict with key ``'method'`` set\n    to one of {``'zip'``, ``'gzip'``, ``'bz2'``, ``'zstd'``, ``'xz'``, ``'tar'``} and\n    other key-value pairs are forwarded to\n    ``zipfile.ZipFile``, ``gzip.GzipFile``,\n    ``bz2.BZ2File``, ``zstandard.ZstdCompressor``, ``lzma.LZMAFile`` or\n    ``tarfile.TarFile``, respectively.\n    As an example, the following could be passed for faster compression and to create\n    a reproducible gzip archive:\n    ``compression={'method': 'gzip', 'compresslevel': 1, 'mtime': 1}``.\n\n    .. versionadded:: 1.5.0\n        Added support for `.tar` files.\n\n    .. versionchanged:: 1.4.0 Zstandard support.\n\nstorage_options : dict, optional\n    Extra options that make sense for a particular storage connection, e.g.\n    host, port, username, password, etc. For HTTP(S) URLs the key-value pairs\n    are forwarded to ``urllib.request.Request`` as header options. For other\n    URLs (e.g. starting with \"s3://\", and \"gcs://\") the key-value pairs are\n    forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more\n    details, and for more examples on storage options refer `here\n    <https://pandas.pydata.org/docs/user_guide/io.html?\n    highlight=storage_options#reading-writing-remote-files>`_.\n\nReturns\n-------\nNone or str\n    If ``io`` is None, returns the resulting XML format as a\n    string. Otherwise returns None.\n\nSee Also\n--------\nto_json : Convert the pandas object to a JSON string.\nto_html : Convert DataFrame to a html.\n\nExamples\n--------\n>>> df = pd.DataFrame({'shape': ['square', 'circle', 'triangle'],\n...                    'degrees': [360, 360, 180],\n...                    'sides': [4, np.nan, 3]})\n\n>>> df.to_xml()  # doctest: +SKIP\n<?xml version='1.0' encoding='utf-8'?>\n<data>\n  <row>\n    <index>0</index>\n    <shape>square</shape>\n    <degrees>360</degrees>\n    <sides>4.0</sides>\n  </row>\n  <row>\n    <index>1</index>\n    <shape>circle</shape>\n    <degrees>360</degrees>\n    <sides/>\n  </row>\n  <row>\n    <index>2</index>\n    <shape>triangle</shape>\n    <degrees>180</degrees>\n    <sides>3.0</sides>\n  </row>\n</data>\n\n>>> df.to_xml(attr_cols=[\n...           'index', 'shape', 'degrees', 'sides'\n...           ])  # doctest: +SKIP\n<?xml version='1.0' encoding='utf-8'?>\n<data>\n  <row index=\"0\" shape=\"square\" degrees=\"360\" sides=\"4.0\"/>\n  <row index=\"1\" shape=\"circle\" degrees=\"360\"/>\n  <row index=\"2\" shape=\"triangle\" degrees=\"180\" sides=\"3.0\"/>\n</data>\n\n>>> df.to_xml(namespaces={\"doc\": \"https://example.com\"},\n...           prefix=\"doc\")  # doctest: +SKIP\n<?xml version='1.0' encoding='utf-8'?>\n<doc:data xmlns:doc=\"https://example.com\">\n  <doc:row>\n    <doc:index>0</doc:index>\n    <doc:shape>square</doc:shape>\n    <doc:degrees>360</doc:degrees>\n    <doc:sides>4.0</doc:sides>\n  </doc:row>\n  <doc:row>\n    <doc:index>1</doc:index>\n    <doc:shape>circle</doc:shape>\n    <doc:degrees>360</doc:degrees>\n    <doc:sides/>\n  </doc:row>\n  <doc:row>\n    <doc:index>2</doc:index>\n    <doc:shape>triangle</doc:shape>\n    <doc:degrees>180</doc:degrees>\n    <doc:sides>3.0</doc:sides>\n  </doc:row>\n</doc:data>"
  },
  {
    "symbol": "DataFrame.transform",
    "signature": "(self, func: 'AggFuncType', axis: 'Axis' = 0, *args, **kwargs) -> 'DataFrame'",
    "doc": "Call ``func`` on self producing a DataFrame with the same axis shape as self.\n\nParameters\n----------\nfunc : function, str, list-like or dict-like\n    Function to use for transforming the data. If a function, must either\n    work when passed a DataFrame or when passed to DataFrame.apply. If func\n    is both list-like and dict-like, dict-like behavior takes precedence.\n\n    Accepted combinations are:\n\n    - function\n    - string function name\n    - list-like of functions and/or function names, e.g. ``[np.exp, 'sqrt']``\n    - dict-like of axis labels -> functions, function names or list-like of such.\naxis : {0 or 'index', 1 or 'columns'}, default 0\n        If 0 or 'index': apply function to each column.\n        If 1 or 'columns': apply function to each row.\n*args\n    Positional arguments to pass to `func`.\n**kwargs\n    Keyword arguments to pass to `func`.\n\nReturns\n-------\nDataFrame\n    A DataFrame that must have the same length as self.\n\nRaises\n------\nValueError : If the returned DataFrame has a different length than self.\n\nSee Also\n--------\nDataFrame.agg : Only perform aggregating type operations.\nDataFrame.apply : Invoke function on a DataFrame.\n\nNotes\n-----\nFunctions that mutate the passed object can produce unexpected\nbehavior or errors and are not supported. See :ref:`gotchas.udf-mutation`\nfor more details.\n\nExamples\n--------\n>>> df = pd.DataFrame({'A': range(3), 'B': range(1, 4)})\n>>> df\n   A  B\n0  0  1\n1  1  2\n2  2  3\n>>> df.transform(lambda x: x + 1)\n   A  B\n0  1  2\n1  2  3\n2  3  4\n\nEven though the resulting DataFrame must have the same length as the\ninput DataFrame, it is possible to provide several input functions:\n\n>>> s = pd.Series(range(3))\n>>> s\n0    0\n1    1\n2    2\ndtype: int64\n>>> s.transform([np.sqrt, np.exp])\n       sqrt        exp\n0  0.000000   1.000000\n1  1.000000   2.718282\n2  1.414214   7.389056\n\nYou can call transform on a GroupBy object:\n\n>>> df = pd.DataFrame({\n...     \"Date\": [\n...         \"2015-05-08\", \"2015-05-07\", \"2015-05-06\", \"2015-05-05\",\n...         \"2015-05-08\", \"2015-05-07\", \"2015-05-06\", \"2015-05-05\"],\n...     \"Data\": [5, 8, 6, 1, 50, 100, 60, 120],\n... })\n>>> df\n         Date  Data\n0  2015-05-08     5\n1  2015-05-07     8\n2  2015-05-06     6\n3  2015-05-05     1\n4  2015-05-08    50\n5  2015-05-07   100\n6  2015-05-06    60\n7  2015-05-05   120\n>>> df.groupby('Date')['Data'].transform('sum')\n0     55\n1    108\n2     66\n3    121\n4     55\n5    108\n6     66\n7    121\nName: Data, dtype: int64\n\n>>> df = pd.DataFrame({\n...     \"c\": [1, 1, 1, 2, 2, 2, 2],\n...     \"type\": [\"m\", \"n\", \"o\", \"m\", \"m\", \"n\", \"n\"]\n... })\n>>> df\n   c type\n0  1    m\n1  1    n\n2  1    o\n3  2    m\n4  2    m\n5  2    n\n6  2    n\n>>> df['size'] = df.groupby('c')['type'].transform(len)\n>>> df\n   c type size\n0  1    m    3\n1  1    n    3\n2  1    o    3\n3  2    m    4\n4  2    m    4\n5  2    n    4\n6  2    n    4"
  },
  {
    "symbol": "DataFrame.transpose",
    "signature": "(self, *args, copy: 'bool' = False) -> 'DataFrame'",
    "doc": "Transpose index and columns.\n\nReflect the DataFrame over its main diagonal by writing rows as columns\nand vice-versa. The property :attr:`.T` is an accessor to the method\n:meth:`transpose`.\n\nParameters\n----------\n*args : tuple, optional\n    Accepted for compatibility with NumPy.\ncopy : bool, default False\n    Whether to copy the data after transposing, even for DataFrames\n    with a single dtype.\n\n    Note that a copy is always required for mixed dtype DataFrames,\n    or for DataFrames with any extension types.\n\n    .. note::\n        The `copy` keyword will change behavior in pandas 3.0.\n        `Copy-on-Write\n        <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n        will be enabled by default, which means that all methods with a\n        `copy` keyword will use a lazy copy mechanism to defer the copy and\n        ignore the `copy` keyword. The `copy` keyword will be removed in a\n        future version of pandas.\n\n        You can already get the future behavior and improvements through\n        enabling copy on write ``pd.options.mode.copy_on_write = True``\n\nReturns\n-------\nDataFrame\n    The transposed DataFrame.\n\nSee Also\n--------\nnumpy.transpose : Permute the dimensions of a given array.\n\nNotes\n-----\nTransposing a DataFrame with mixed dtypes will result in a homogeneous\nDataFrame with the `object` dtype. In such a case, a copy of the data\nis always made.\n\nExamples\n--------\n**Square DataFrame with homogeneous dtype**\n\n>>> d1 = {'col1': [1, 2], 'col2': [3, 4]}\n>>> df1 = pd.DataFrame(data=d1)\n>>> df1\n   col1  col2\n0     1     3\n1     2     4\n\n>>> df1_transposed = df1.T  # or df1.transpose()\n>>> df1_transposed\n      0  1\ncol1  1  2\ncol2  3  4\n\nWhen the dtype is homogeneous in the original DataFrame, we get a\ntransposed DataFrame with the same dtype:\n\n>>> df1.dtypes\ncol1    int64\ncol2    int64\ndtype: object\n>>> df1_transposed.dtypes\n0    int64\n1    int64\ndtype: object\n\n**Non-square DataFrame with mixed dtypes**\n\n>>> d2 = {'name': ['Alice', 'Bob'],\n...       'score': [9.5, 8],\n...       'employed': [False, True],\n...       'kids': [0, 0]}\n>>> df2 = pd.DataFrame(data=d2)\n>>> df2\n    name  score  employed  kids\n0  Alice    9.5     False     0\n1    Bob    8.0      True     0\n\n>>> df2_transposed = df2.T  # or df2.transpose()\n>>> df2_transposed\n              0     1\nname      Alice   Bob\nscore       9.5   8.0\nemployed  False  True\nkids          0     0\n\nWhen the DataFrame has mixed dtypes, we get a transposed DataFrame with\nthe `object` dtype:\n\n>>> df2.dtypes\nname         object\nscore       float64\nemployed       bool\nkids          int64\ndtype: object\n>>> df2_transposed.dtypes\n0    object\n1    object\ndtype: object"
  },
  {
    "symbol": "DataFrame.truediv",
    "signature": "(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame'",
    "doc": "Get Floating division of dataframe and other, element-wise (binary operator `truediv`).\n\nEquivalent to ``dataframe / other``, but with support to substitute a fill_value\nfor missing data in one of the inputs. With reverse version, `rtruediv`.\n\nAmong flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to\narithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.\n\nParameters\n----------\nother : scalar, sequence, Series, dict or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis : {0 or 'index', 1 or 'columns'}\n    Whether to compare by the index (0 or 'index') or columns.\n    (1 or 'columns'). For Series input, axis to match Series index on.\nlevel : int or label\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : float or None, default None\n    Fill existing missing (NaN) values, and any new element needed for\n    successful DataFrame alignment, with this value before computation.\n    If data in both corresponding DataFrame locations is missing\n    the result will be missing.\n\nReturns\n-------\nDataFrame\n    Result of the arithmetic operation.\n\nSee Also\n--------\nDataFrame.add : Add DataFrames.\nDataFrame.sub : Subtract DataFrames.\nDataFrame.mul : Multiply DataFrames.\nDataFrame.div : Divide DataFrames (float division).\nDataFrame.truediv : Divide DataFrames (float division).\nDataFrame.floordiv : Divide DataFrames (integer division).\nDataFrame.mod : Calculate modulo (remainder after division).\nDataFrame.pow : Calculate exponential power.\n\nNotes\n-----\nMismatched indices will be unioned together.\n\nExamples\n--------\n>>> df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n>>> df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\nAdd a scalar with operator version which return the same\nresults.\n\n>>> df + 1\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\n>>> df.add(1)\n           angles  degrees\ncircle          1      361\ntriangle        4      181\nrectangle       5      361\n\nDivide by constant with reverse version.\n\n>>> df.div(10)\n           angles  degrees\ncircle        0.0     36.0\ntriangle      0.3     18.0\nrectangle     0.4     36.0\n\n>>> df.rdiv(10)\n             angles   degrees\ncircle          inf  0.027778\ntriangle   3.333333  0.055556\nrectangle  2.500000  0.027778\n\nSubtract a list and Series by axis with operator version.\n\n>>> df - [1, 2]\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub([1, 2], axis='columns')\n           angles  degrees\ncircle         -1      358\ntriangle        2      178\nrectangle       3      358\n\n>>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),\n...        axis='index')\n           angles  degrees\ncircle         -1      359\ntriangle        2      179\nrectangle       3      359\n\nMultiply a dictionary by axis.\n\n>>> df.mul({'angles': 0, 'degrees': 2})\n            angles  degrees\ncircle           0      720\ntriangle         0      360\nrectangle        0      720\n\n>>> df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')\n            angles  degrees\ncircle           0        0\ntriangle         6      360\nrectangle       12     1080\n\nMultiply a DataFrame of different shape with operator version.\n\n>>> other = pd.DataFrame({'angles': [0, 3, 4]},\n...                      index=['circle', 'triangle', 'rectangle'])\n>>> other\n           angles\ncircle          0\ntriangle        3\nrectangle       4\n\n>>> df * other\n           angles  degrees\ncircle          0      NaN\ntriangle        9      NaN\nrectangle      16      NaN\n\n>>> df.mul(other, fill_value=0)\n           angles  degrees\ncircle          0      0.0\ntriangle        9      0.0\nrectangle      16      0.0\n\nDivide by a MultiIndex by level.\n\n>>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],\n...                              'degrees': [360, 180, 360, 360, 540, 720]},\n...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],\n...                                    ['circle', 'triangle', 'rectangle',\n...                                     'square', 'pentagon', 'hexagon']])\n>>> df_multindex\n             angles  degrees\nA circle          0      360\n  triangle        3      180\n  rectangle       4      360\nB square          4      360\n  pentagon        5      540\n  hexagon         6      720\n\n>>> df.div(df_multindex, level=1, fill_value=0)\n             angles  degrees\nA circle        NaN      1.0\n  triangle      1.0      1.0\n  rectangle     1.0      1.0\nB square        0.0      0.0\n  pentagon      0.0      0.0\n  hexagon       0.0      0.0"
  },
  {
    "symbol": "DataFrame.truncate",
    "signature": "(self, before=None, after=None, axis: 'Axis | None' = None, copy: 'bool_t | None' = None) -> 'Self'",
    "doc": "Truncate a Series or DataFrame before and after some index value.\n\nThis is a useful shorthand for boolean indexing based on index\nvalues above or below certain thresholds.\n\nParameters\n----------\nbefore : date, str, int\n    Truncate all rows before this index value.\nafter : date, str, int\n    Truncate all rows after this index value.\naxis : {0 or 'index', 1 or 'columns'}, optional\n    Axis to truncate. Truncates the index (rows) by default.\n    For `Series` this parameter is unused and defaults to 0.\ncopy : bool, default is True,\n    Return a copy of the truncated section.\n\n    .. note::\n        The `copy` keyword will change behavior in pandas 3.0.\n        `Copy-on-Write\n        <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n        will be enabled by default, which means that all methods with a\n        `copy` keyword will use a lazy copy mechanism to defer the copy and\n        ignore the `copy` keyword. The `copy` keyword will be removed in a\n        future version of pandas.\n\n        You can already get the future behavior and improvements through\n        enabling copy on write ``pd.options.mode.copy_on_write = True``\n\nReturns\n-------\ntype of caller\n    The truncated Series or DataFrame.\n\nSee Also\n--------\nDataFrame.loc : Select a subset of a DataFrame by label.\nDataFrame.iloc : Select a subset of a DataFrame by position.\n\nNotes\n-----\nIf the index being truncated contains only datetime values,\n`before` and `after` may be specified as strings instead of\nTimestamps.\n\nExamples\n--------\n>>> df = pd.DataFrame({'A': ['a', 'b', 'c', 'd', 'e'],\n...                    'B': ['f', 'g', 'h', 'i', 'j'],\n...                    'C': ['k', 'l', 'm', 'n', 'o']},\n...                   index=[1, 2, 3, 4, 5])\n>>> df\n   A  B  C\n1  a  f  k\n2  b  g  l\n3  c  h  m\n4  d  i  n\n5  e  j  o\n\n>>> df.truncate(before=2, after=4)\n   A  B  C\n2  b  g  l\n3  c  h  m\n4  d  i  n\n\nThe columns of a DataFrame can be truncated.\n\n>>> df.truncate(before=\"A\", after=\"B\", axis=\"columns\")\n   A  B\n1  a  f\n2  b  g\n3  c  h\n4  d  i\n5  e  j\n\nFor Series, only rows can be truncated.\n\n>>> df['A'].truncate(before=2, after=4)\n2    b\n3    c\n4    d\nName: A, dtype: object\n\nThe index values in ``truncate`` can be datetimes or string\ndates.\n\n>>> dates = pd.date_range('2016-01-01', '2016-02-01', freq='s')\n>>> df = pd.DataFrame(index=dates, data={'A': 1})\n>>> df.tail()\n                     A\n2016-01-31 23:59:56  1\n2016-01-31 23:59:57  1\n2016-01-31 23:59:58  1\n2016-01-31 23:59:59  1\n2016-02-01 00:00:00  1\n\n>>> df.truncate(before=pd.Timestamp('2016-01-05'),\n...             after=pd.Timestamp('2016-01-10')).tail()\n                     A\n2016-01-09 23:59:56  1\n2016-01-09 23:59:57  1\n2016-01-09 23:59:58  1\n2016-01-09 23:59:59  1\n2016-01-10 00:00:00  1\n\nBecause the index is a DatetimeIndex containing only dates, we can\nspecify `before` and `after` as strings. They will be coerced to\nTimestamps before truncation.\n\n>>> df.truncate('2016-01-05', '2016-01-10').tail()\n                     A\n2016-01-09 23:59:56  1\n2016-01-09 23:59:57  1\n2016-01-09 23:59:58  1\n2016-01-09 23:59:59  1\n2016-01-10 00:00:00  1\n\nNote that ``truncate`` assumes a 0 value for any unspecified time\ncomponent (midnight). This differs from partial string slicing, which\nreturns any partially matching dates.\n\n>>> df.loc['2016-01-05':'2016-01-10', :].tail()\n                     A\n2016-01-10 23:59:55  1\n2016-01-10 23:59:56  1\n2016-01-10 23:59:57  1\n2016-01-10 23:59:58  1\n2016-01-10 23:59:59  1"
  },
  {
    "symbol": "DataFrame.tz_convert",
    "signature": "(self, tz, axis: 'Axis' = 0, level=None, copy: 'bool_t | None' = None) -> 'Self'",
    "doc": "Convert tz-aware axis to target time zone.\n\nParameters\n----------\ntz : str or tzinfo object or None\n    Target time zone. Passing ``None`` will convert to\n    UTC and remove the timezone information.\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    The axis to convert\nlevel : int, str, default None\n    If axis is a MultiIndex, convert a specific level. Otherwise\n    must be None.\ncopy : bool, default True\n    Also make a copy of the underlying data.\n\n    .. note::\n        The `copy` keyword will change behavior in pandas 3.0.\n        `Copy-on-Write\n        <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n        will be enabled by default, which means that all methods with a\n        `copy` keyword will use a lazy copy mechanism to defer the copy and\n        ignore the `copy` keyword. The `copy` keyword will be removed in a\n        future version of pandas.\n\n        You can already get the future behavior and improvements through\n        enabling copy on write ``pd.options.mode.copy_on_write = True``\n\nReturns\n-------\nSeries/DataFrame\n    Object with time zone converted axis.\n\nRaises\n------\nTypeError\n    If the axis is tz-naive.\n\nExamples\n--------\nChange to another time zone:\n\n>>> s = pd.Series(\n...     [1],\n...     index=pd.DatetimeIndex(['2018-09-15 01:30:00+02:00']),\n... )\n>>> s.tz_convert('Asia/Shanghai')\n2018-09-15 07:30:00+08:00    1\ndtype: int64\n\nPass None to convert to UTC and get a tz-naive index:\n\n>>> s = pd.Series([1],\n...               index=pd.DatetimeIndex(['2018-09-15 01:30:00+02:00']))\n>>> s.tz_convert(None)\n2018-09-14 23:30:00    1\ndtype: int64"
  },
  {
    "symbol": "DataFrame.tz_localize",
    "signature": "(self, tz, axis: 'Axis' = 0, level=None, copy: 'bool_t | None' = None, ambiguous: 'TimeAmbiguous' = 'raise', nonexistent: 'TimeNonexistent' = 'raise') -> 'Self'",
    "doc": "Localize tz-naive index of a Series or DataFrame to target time zone.\n\nThis operation localizes the Index. To localize the values in a\ntimezone-naive Series, use :meth:`Series.dt.tz_localize`.\n\nParameters\n----------\ntz : str or tzinfo or None\n    Time zone to localize. Passing ``None`` will remove the\n    time zone information and preserve local time.\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    The axis to localize\nlevel : int, str, default None\n    If axis ia a MultiIndex, localize a specific level. Otherwise\n    must be None.\ncopy : bool, default True\n    Also make a copy of the underlying data.\n\n    .. note::\n        The `copy` keyword will change behavior in pandas 3.0.\n        `Copy-on-Write\n        <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n        will be enabled by default, which means that all methods with a\n        `copy` keyword will use a lazy copy mechanism to defer the copy and\n        ignore the `copy` keyword. The `copy` keyword will be removed in a\n        future version of pandas.\n\n        You can already get the future behavior and improvements through\n        enabling copy on write ``pd.options.mode.copy_on_write = True``\nambiguous : 'infer', bool-ndarray, 'NaT', default 'raise'\n    When clocks moved backward due to DST, ambiguous times may arise.\n    For example in Central European Time (UTC+01), when going from\n    03:00 DST to 02:00 non-DST, 02:30:00 local time occurs both at\n    00:30:00 UTC and at 01:30:00 UTC. In such a situation, the\n    `ambiguous` parameter dictates how ambiguous times should be\n    handled.\n\n    - 'infer' will attempt to infer fall dst-transition hours based on\n      order\n    - bool-ndarray where True signifies a DST time, False designates\n      a non-DST time (note that this flag is only applicable for\n      ambiguous times)\n    - 'NaT' will return NaT where there are ambiguous times\n    - 'raise' will raise an AmbiguousTimeError if there are ambiguous\n      times.\nnonexistent : str, default 'raise'\n    A nonexistent time does not exist in a particular timezone\n    where clocks moved forward due to DST. Valid values are:\n\n    - 'shift_forward' will shift the nonexistent time forward to the\n      closest existing time\n    - 'shift_backward' will shift the nonexistent time backward to the\n      closest existing time\n    - 'NaT' will return NaT where there are nonexistent times\n    - timedelta objects will shift nonexistent times by the timedelta\n    - 'raise' will raise an NonExistentTimeError if there are\n      nonexistent times.\n\nReturns\n-------\nSeries/DataFrame\n    Same type as the input.\n\nRaises\n------\nTypeError\n    If the TimeSeries is tz-aware and tz is not None.\n\nExamples\n--------\nLocalize local times:\n\n>>> s = pd.Series(\n...     [1],\n...     index=pd.DatetimeIndex(['2018-09-15 01:30:00']),\n... )\n>>> s.tz_localize('CET')\n2018-09-15 01:30:00+02:00    1\ndtype: int64\n\nPass None to convert to tz-naive index and preserve local time:\n\n>>> s = pd.Series([1],\n...               index=pd.DatetimeIndex(['2018-09-15 01:30:00+02:00']))\n>>> s.tz_localize(None)\n2018-09-15 01:30:00    1\ndtype: int64\n\nBe careful with DST changes. When there is sequential data, pandas\ncan infer the DST time:\n\n>>> s = pd.Series(range(7),\n...               index=pd.DatetimeIndex(['2018-10-28 01:30:00',\n...                                       '2018-10-28 02:00:00',\n...                                       '2018-10-28 02:30:00',\n...                                       '2018-10-28 02:00:00',\n...                                       '2018-10-28 02:30:00',\n...                                       '2018-10-28 03:00:00',\n...                                       '2018-10-28 03:30:00']))\n>>> s.tz_localize('CET', ambiguous='infer')\n2018-10-28 01:30:00+02:00    0\n2018-10-28 02:00:00+02:00    1\n2018-10-28 02:30:00+02:00    2\n2018-10-28 02:00:00+01:00    3\n2018-10-28 02:30:00+01:00    4\n2018-10-28 03:00:00+01:00    5\n2018-10-28 03:30:00+01:00    6\ndtype: int64\n\nIn some cases, inferring the DST is impossible. In such cases, you can\npass an ndarray to the ambiguous parameter to set the DST explicitly\n\n>>> s = pd.Series(range(3),\n...               index=pd.DatetimeIndex(['2018-10-28 01:20:00',\n...                                       '2018-10-28 02:36:00',\n...                                       '2018-10-28 03:46:00']))\n>>> s.tz_localize('CET', ambiguous=np.array([True, True, False]))\n2018-10-28 01:20:00+02:00    0\n2018-10-28 02:36:00+02:00    1\n2018-10-28 03:46:00+01:00    2\ndtype: int64\n\nIf the DST transition causes nonexistent times, you can shift these\ndates forward or backward with a timedelta object or `'shift_forward'`\nor `'shift_backward'`.\n\n>>> s = pd.Series(range(2),\n...               index=pd.DatetimeIndex(['2015-03-29 02:30:00',\n...                                       '2015-03-29 03:30:00']))\n>>> s.tz_localize('Europe/Warsaw', nonexistent='shift_forward')\n2015-03-29 03:00:00+02:00    0\n2015-03-29 03:30:00+02:00    1\ndtype: int64\n>>> s.tz_localize('Europe/Warsaw', nonexistent='shift_backward')\n2015-03-29 01:59:59.999999999+01:00    0\n2015-03-29 03:30:00+02:00              1\ndtype: int64\n>>> s.tz_localize('Europe/Warsaw', nonexistent=pd.Timedelta('1h'))\n2015-03-29 03:30:00+02:00    0\n2015-03-29 03:30:00+02:00    1\ndtype: int64"
  },
  {
    "symbol": "DataFrame.unstack",
    "signature": "(self, level: 'IndexLabel' = -1, fill_value=None, sort: 'bool' = True)",
    "doc": "Pivot a level of the (necessarily hierarchical) index labels.\n\nReturns a DataFrame having a new level of column labels whose inner-most level\nconsists of the pivoted index labels.\n\nIf the index is not a MultiIndex, the output will be a Series\n(the analogue of stack when the columns are not a MultiIndex).\n\nParameters\n----------\nlevel : int, str, or list of these, default -1 (last level)\n    Level(s) of index to unstack, can pass level name.\nfill_value : int, str or dict\n    Replace NaN with this value if the unstack produces missing values.\nsort : bool, default True\n    Sort the level(s) in the resulting MultiIndex columns.\n\nReturns\n-------\nSeries or DataFrame\n\nSee Also\n--------\nDataFrame.pivot : Pivot a table based on column values.\nDataFrame.stack : Pivot a level of the column labels (inverse operation\n    from `unstack`).\n\nNotes\n-----\nReference :ref:`the user guide <reshaping.stacking>` for more examples.\n\nExamples\n--------\n>>> index = pd.MultiIndex.from_tuples([('one', 'a'), ('one', 'b'),\n...                                    ('two', 'a'), ('two', 'b')])\n>>> s = pd.Series(np.arange(1.0, 5.0), index=index)\n>>> s\none  a   1.0\n     b   2.0\ntwo  a   3.0\n     b   4.0\ndtype: float64\n\n>>> s.unstack(level=-1)\n     a   b\none  1.0  2.0\ntwo  3.0  4.0\n\n>>> s.unstack(level=0)\n   one  two\na  1.0   3.0\nb  2.0   4.0\n\n>>> df = s.unstack(level=0)\n>>> df.unstack()\none  a  1.0\n     b  2.0\ntwo  a  3.0\n     b  4.0\ndtype: float64"
  },
  {
    "symbol": "DataFrame.update",
    "signature": "(self, other, join: 'UpdateJoin' = 'left', overwrite: 'bool' = True, filter_func=None, errors: 'IgnoreRaise' = 'ignore') -> 'None'",
    "doc": "Modify in place using non-NA values from another DataFrame.\n\nAligns on indices. There is no return value.\n\nParameters\n----------\nother : DataFrame, or object coercible into a DataFrame\n    Should have at least one matching index/column label\n    with the original DataFrame. If a Series is passed,\n    its name attribute must be set, and that will be\n    used as the column name to align with the original DataFrame.\njoin : {'left'}, default 'left'\n    Only left join is implemented, keeping the index and columns of the\n    original object.\noverwrite : bool, default True\n    How to handle non-NA values for overlapping keys:\n\n    * True: overwrite original DataFrame's values\n      with values from `other`.\n    * False: only update values that are NA in\n      the original DataFrame.\n\nfilter_func : callable(1d-array) -> bool 1d-array, optional\n    Can choose to replace values other than NA. Return True for values\n    that should be updated.\nerrors : {'raise', 'ignore'}, default 'ignore'\n    If 'raise', will raise a ValueError if the DataFrame and `other`\n    both contain non-NA data in the same place.\n\nReturns\n-------\nNone\n    This method directly changes calling object.\n\nRaises\n------\nValueError\n    * When `errors='raise'` and there's overlapping non-NA data.\n    * When `errors` is not either `'ignore'` or `'raise'`\nNotImplementedError\n    * If `join != 'left'`\n\nSee Also\n--------\ndict.update : Similar method for dictionaries.\nDataFrame.merge : For column(s)-on-column(s) operations.\n\nExamples\n--------\n>>> df = pd.DataFrame({'A': [1, 2, 3],\n...                    'B': [400, 500, 600]})\n>>> new_df = pd.DataFrame({'B': [4, 5, 6],\n...                        'C': [7, 8, 9]})\n>>> df.update(new_df)\n>>> df\n   A  B\n0  1  4\n1  2  5\n2  3  6\n\nThe DataFrame's length does not increase as a result of the update,\nonly values at matching index/column labels are updated.\n\n>>> df = pd.DataFrame({'A': ['a', 'b', 'c'],\n...                    'B': ['x', 'y', 'z']})\n>>> new_df = pd.DataFrame({'B': ['d', 'e', 'f', 'g', 'h', 'i']})\n>>> df.update(new_df)\n>>> df\n   A  B\n0  a  d\n1  b  e\n2  c  f\n\n>>> df = pd.DataFrame({'A': ['a', 'b', 'c'],\n...                    'B': ['x', 'y', 'z']})\n>>> new_df = pd.DataFrame({'B': ['d', 'f']}, index=[0, 2])\n>>> df.update(new_df)\n>>> df\n   A  B\n0  a  d\n1  b  y\n2  c  f\n\nFor Series, its name attribute must be set.\n\n>>> df = pd.DataFrame({'A': ['a', 'b', 'c'],\n...                    'B': ['x', 'y', 'z']})\n>>> new_column = pd.Series(['d', 'e', 'f'], name='B')\n>>> df.update(new_column)\n>>> df\n   A  B\n0  a  d\n1  b  e\n2  c  f\n\nIf `other` contains NaNs the corresponding values are not updated\nin the original dataframe.\n\n>>> df = pd.DataFrame({'A': [1, 2, 3],\n...                    'B': [400., 500., 600.]})\n>>> new_df = pd.DataFrame({'B': [4, np.nan, 6]})\n>>> df.update(new_df)\n>>> df\n   A      B\n0  1    4.0\n1  2  500.0\n2  3    6.0"
  },
  {
    "symbol": "DataFrame.value_counts",
    "signature": "(self, subset: 'IndexLabel | None' = None, normalize: 'bool' = False, sort: 'bool' = True, ascending: 'bool' = False, dropna: 'bool' = True) -> 'Series'",
    "doc": "Return a Series containing the frequency of each distinct row in the Dataframe.\n\nParameters\n----------\nsubset : label or list of labels, optional\n    Columns to use when counting unique combinations.\nnormalize : bool, default False\n    Return proportions rather than frequencies.\nsort : bool, default True\n    Sort by frequencies when True. Sort by DataFrame column values when False.\nascending : bool, default False\n    Sort in ascending order.\ndropna : bool, default True\n    Don't include counts of rows that contain NA values.\n\n    .. versionadded:: 1.3.0\n\nReturns\n-------\nSeries\n\nSee Also\n--------\nSeries.value_counts: Equivalent method on Series.\n\nNotes\n-----\nThe returned Series will have a MultiIndex with one level per input\ncolumn but an Index (non-multi) for a single label. By default, rows\nthat contain any NA values are omitted from the result. By default,\nthe resulting Series will be in descending order so that the first\nelement is the most frequently-occurring row.\n\nExamples\n--------\n>>> df = pd.DataFrame({'num_legs': [2, 4, 4, 6],\n...                    'num_wings': [2, 0, 0, 0]},\n...                   index=['falcon', 'dog', 'cat', 'ant'])\n>>> df\n        num_legs  num_wings\nfalcon         2          2\ndog            4          0\ncat            4          0\nant            6          0\n\n>>> df.value_counts()\nnum_legs  num_wings\n4         0            2\n2         2            1\n6         0            1\nName: count, dtype: int64\n\n>>> df.value_counts(sort=False)\nnum_legs  num_wings\n2         2            1\n4         0            2\n6         0            1\nName: count, dtype: int64\n\n>>> df.value_counts(ascending=True)\nnum_legs  num_wings\n2         2            1\n6         0            1\n4         0            2\nName: count, dtype: int64\n\n>>> df.value_counts(normalize=True)\nnum_legs  num_wings\n4         0            0.50\n2         2            0.25\n6         0            0.25\nName: proportion, dtype: float64\n\nWith `dropna` set to `False` we can also count rows with NA values.\n\n>>> df = pd.DataFrame({'first_name': ['John', 'Anne', 'John', 'Beth'],\n...                    'middle_name': ['Smith', pd.NA, pd.NA, 'Louise']})\n>>> df\n  first_name middle_name\n0       John       Smith\n1       Anne        <NA>\n2       John        <NA>\n3       Beth      Louise\n\n>>> df.value_counts()\nfirst_name  middle_name\nBeth        Louise         1\nJohn        Smith          1\nName: count, dtype: int64\n\n>>> df.value_counts(dropna=False)\nfirst_name  middle_name\nAnne        NaN            1\nBeth        Louise         1\nJohn        Smith          1\n            NaN            1\nName: count, dtype: int64\n\n>>> df.value_counts(\"first_name\")\nfirst_name\nJohn    2\nAnne    1\nBeth    1\nName: count, dtype: int64"
  },
  {
    "symbol": "DataFrame.values",
    "signature": "(property)",
    "doc": "\nReturn a Numpy representation of the DataFrame.\n\n.. warning::\n\n   We recommend using :meth:`DataFrame.to_numpy` instead.\n\nOnly the values in the DataFrame will be returned, the axes labels\nwill be removed.\n\nReturns\n-------\nnumpy.ndarray\n    The values of the DataFrame.\n\nSee Also\n--------\nDataFrame.to_numpy : Recommended alternative to this method.\nDataFrame.index : Retrieve the index labels.\nDataFrame.columns : Retrieving the column names.\n\nNotes\n-----\nThe dtype will be a lower-common-denominator dtype (implicit\nupcasting); that is to say if the dtypes (even of numeric types)\nare mixed, the one that accommodates all will be chosen. Use this\nwith care if you are not dealing with the blocks.\n\ne.g. If the dtypes are float16 and float32, dtype will be upcast to\nfloat32.  If dtypes are int32 and uint8, dtype will be upcast to\nint32. By :func:`numpy.find_common_type` convention, mixing int64\nand uint64 will result in a float64 dtype.\n\nExamples\n--------\nA DataFrame where all columns are the same type (e.g., int64) results\nin an array of the same type.\n\n>>> df = pd.DataFrame({'age':    [ 3,  29],\n...                    'height': [94, 170],\n...                    'weight': [31, 115]})\n>>> df\n   age  height  weight\n0    3      94      31\n1   29     170     115\n>>> df.dtypes\nage       int64\nheight    int64\nweight    int64\ndtype: object\n>>> df.values\narray([[  3,  94,  31],\n       [ 29, 170, 115]])\n\nA DataFrame with mixed type columns(e.g., str/object, int64, float32)\nresults in an ndarray of the broadest type that accommodates these\nmixed types (e.g., object).\n\n>>> df2 = pd.DataFrame([('parrot',   24.0, 'second'),\n...                     ('lion',     80.5, 1),\n...                     ('monkey', np.nan, None)],\n...                   columns=('name', 'max_speed', 'rank'))\n>>> df2.dtypes\nname          object\nmax_speed    float64\nrank          object\ndtype: object\n>>> df2.values\narray([['parrot', 24.0, 'second'],\n       ['lion', 80.5, 1],\n       ['monkey', nan, None]], dtype=object)\n"
  },
  {
    "symbol": "DataFrame.var",
    "signature": "(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, ddof: 'int' = 1, numeric_only: 'bool' = False, **kwargs)",
    "doc": "Return unbiased variance over requested axis.\n\nNormalized by N-1 by default. This can be changed using the ddof argument.\n\nParameters\n----------\naxis : {index (0), columns (1)}\n    For `Series` this parameter is unused and defaults to 0.\n\n    .. warning::\n\n        The behavior of DataFrame.var with ``axis=None`` is deprecated,\n        in a future version this will reduce over both axes and return a scalar\n        To retain the old behavior, pass axis=0 (or do not pass axis).\n\nskipna : bool, default True\n    Exclude NA/null values. If an entire row/column is NA, the result\n    will be NA.\nddof : int, default 1\n    Delta Degrees of Freedom. The divisor used in calculations is N - ddof,\n    where N represents the number of elements.\nnumeric_only : bool, default False\n    Include only float, int, boolean columns. Not implemented for Series.\n\nReturns\n-------\nSeries or DataFrame (if level specified) \n\nExamples\n--------\n>>> df = pd.DataFrame({'person_id': [0, 1, 2, 3],\n...                    'age': [21, 25, 62, 43],\n...                    'height': [1.61, 1.87, 1.49, 2.01]}\n...                   ).set_index('person_id')\n>>> df\n           age  height\nperson_id\n0           21    1.61\n1           25    1.87\n2           62    1.49\n3           43    2.01\n\n>>> df.var()\nage       352.916667\nheight      0.056367\ndtype: float64\n\nAlternatively, ``ddof=0`` can be set to normalize by N instead of N-1:\n\n>>> df.var(ddof=0)\nage       264.687500\nheight      0.042275\ndtype: float64"
  },
  {
    "symbol": "DataFrame.where",
    "signature": "(self, cond, other=nan, *, inplace: 'bool_t' = False, axis: 'Axis | None' = None, level: 'Level | None' = None) -> 'Self | None'",
    "doc": "Replace values where the condition is False.\n\nParameters\n----------\ncond : bool Series/DataFrame, array-like, or callable\n    Where `cond` is True, keep the original value. Where\n    False, replace with corresponding value from `other`.\n    If `cond` is callable, it is computed on the Series/DataFrame and\n    should return boolean Series/DataFrame or array. The callable must\n    not change input Series/DataFrame (though pandas doesn't check it).\nother : scalar, Series/DataFrame, or callable\n    Entries where `cond` is False are replaced with\n    corresponding value from `other`.\n    If other is callable, it is computed on the Series/DataFrame and\n    should return scalar or Series/DataFrame. The callable must not\n    change input Series/DataFrame (though pandas doesn't check it).\n    If not specified, entries will be filled with the corresponding\n    NULL value (``np.nan`` for numpy dtypes, ``pd.NA`` for extension\n    dtypes).\ninplace : bool, default False\n    Whether to perform the operation in place on the data.\naxis : int, default None\n    Alignment axis if needed. For `Series` this parameter is\n    unused and defaults to 0.\nlevel : int, default None\n    Alignment level if needed.\n\nReturns\n-------\nSame type as caller or None if ``inplace=True``.\n\nSee Also\n--------\n:func:`DataFrame.mask` : Return an object of same shape as\n    self.\n\nNotes\n-----\nThe where method is an application of the if-then idiom. For each\nelement in the calling DataFrame, if ``cond`` is ``True`` the\nelement is used; otherwise the corresponding element from the DataFrame\n``other`` is used. If the axis of ``other`` does not align with axis of\n``cond`` Series/DataFrame, the misaligned index positions will be filled with\nFalse.\n\nThe signature for :func:`DataFrame.where` differs from\n:func:`numpy.where`. Roughly ``df1.where(m, df2)`` is equivalent to\n``np.where(m, df1, df2)``.\n\nFor further details and examples see the ``where`` documentation in\n:ref:`indexing <indexing.where_mask>`.\n\nThe dtype of the object takes precedence. The fill value is casted to\nthe object's dtype, if this can be done losslessly.\n\nExamples\n--------\n>>> s = pd.Series(range(5))\n>>> s.where(s > 0)\n0    NaN\n1    1.0\n2    2.0\n3    3.0\n4    4.0\ndtype: float64\n>>> s.mask(s > 0)\n0    0.0\n1    NaN\n2    NaN\n3    NaN\n4    NaN\ndtype: float64\n\n>>> s = pd.Series(range(5))\n>>> t = pd.Series([True, False])\n>>> s.where(t, 99)\n0     0\n1    99\n2    99\n3    99\n4    99\ndtype: int64\n>>> s.mask(t, 99)\n0    99\n1     1\n2    99\n3    99\n4    99\ndtype: int64\n\n>>> s.where(s > 1, 10)\n0    10\n1    10\n2    2\n3    3\n4    4\ndtype: int64\n>>> s.mask(s > 1, 10)\n0     0\n1     1\n2    10\n3    10\n4    10\ndtype: int64\n\n>>> df = pd.DataFrame(np.arange(10).reshape(-1, 2), columns=['A', 'B'])\n>>> df\n   A  B\n0  0  1\n1  2  3\n2  4  5\n3  6  7\n4  8  9\n>>> m = df % 3 == 0\n>>> df.where(m, -df)\n   A  B\n0  0 -1\n1 -2  3\n2 -4 -5\n3  6 -7\n4 -8  9\n>>> df.where(m, -df) == np.where(m, df, -df)\n      A     B\n0  True  True\n1  True  True\n2  True  True\n3  True  True\n4  True  True\n>>> df.where(m, -df) == df.mask(~m, -df)\n      A     B\n0  True  True\n1  True  True\n2  True  True\n3  True  True\n4  True  True"
  },
  {
    "symbol": "DataFrame.xs",
    "signature": "(self, key: 'IndexLabel', axis: 'Axis' = 0, level: 'IndexLabel | None' = None, drop_level: 'bool_t' = True) -> 'Self'",
    "doc": "Return cross-section from the Series/DataFrame.\n\nThis method takes a `key` argument to select data at a particular\nlevel of a MultiIndex.\n\nParameters\n----------\nkey : label or tuple of label\n    Label contained in the index, or partially in a MultiIndex.\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    Axis to retrieve cross-section on.\nlevel : object, defaults to first n levels (n=1 or len(key))\n    In case of a key partially contained in a MultiIndex, indicate\n    which levels are used. Levels can be referred by label or position.\ndrop_level : bool, default True\n    If False, returns object with same levels as self.\n\nReturns\n-------\nSeries or DataFrame\n    Cross-section from the original Series or DataFrame\n    corresponding to the selected index levels.\n\nSee Also\n--------\nDataFrame.loc : Access a group of rows and columns\n    by label(s) or a boolean array.\nDataFrame.iloc : Purely integer-location based indexing\n    for selection by position.\n\nNotes\n-----\n`xs` can not be used to set values.\n\nMultiIndex Slicers is a generic way to get/set values on\nany level or levels.\nIt is a superset of `xs` functionality, see\n:ref:`MultiIndex Slicers <advanced.mi_slicers>`.\n\nExamples\n--------\n>>> d = {'num_legs': [4, 4, 2, 2],\n...      'num_wings': [0, 0, 2, 2],\n...      'class': ['mammal', 'mammal', 'mammal', 'bird'],\n...      'animal': ['cat', 'dog', 'bat', 'penguin'],\n...      'locomotion': ['walks', 'walks', 'flies', 'walks']}\n>>> df = pd.DataFrame(data=d)\n>>> df = df.set_index(['class', 'animal', 'locomotion'])\n>>> df\n                           num_legs  num_wings\nclass  animal  locomotion\nmammal cat     walks              4          0\n       dog     walks              4          0\n       bat     flies              2          2\nbird   penguin walks              2          2\n\nGet values at specified index\n\n>>> df.xs('mammal')\n                   num_legs  num_wings\nanimal locomotion\ncat    walks              4          0\ndog    walks              4          0\nbat    flies              2          2\n\nGet values at several indexes\n\n>>> df.xs(('mammal', 'dog', 'walks'))\nnum_legs     4\nnum_wings    0\nName: (mammal, dog, walks), dtype: int64\n\nGet values at specified index and level\n\n>>> df.xs('cat', level=1)\n                   num_legs  num_wings\nclass  locomotion\nmammal walks              4          0\n\nGet values at several indexes and levels\n\n>>> df.xs(('bird', 'walks'),\n...       level=[0, 'locomotion'])\n         num_legs  num_wings\nanimal\npenguin         2          2\n\nGet values at specified column and axis\n\n>>> df.xs('num_wings', axis=1)\nclass   animal   locomotion\nmammal  cat      walks         0\n        dog      walks         0\n        bat      flies         2\nbird    penguin  walks         2\nName: num_wings, dtype: int64"
  },
  {
    "symbol": "Index",
    "signature": "(data=None, dtype=None, copy: 'bool' = False, name=None, tupleize_cols: 'bool' = True) -> 'Self'",
    "doc": "Immutable sequence used for indexing and alignment.\n\nThe basic object storing axis labels for all pandas objects.\n\n.. versionchanged:: 2.0.0\n\n   Index can hold all numpy numeric dtypes (except float16). Previously only\n   int64/uint64/float64 dtypes were accepted.\n\nParameters\n----------\ndata : array-like (1-dimensional)\ndtype : str, numpy.dtype, or ExtensionDtype, optional\n    Data type for the output Index. If not specified, this will be\n    inferred from `data`.\n    See the :ref:`user guide <basics.dtypes>` for more usages.\ncopy : bool, default False\n    Copy input data.\nname : object\n    Name to be stored in the index.\ntupleize_cols : bool (default: True)\n    When True, attempt to create a MultiIndex if possible.\n\nSee Also\n--------\nRangeIndex : Index implementing a monotonic integer range.\nCategoricalIndex : Index of :class:`Categorical` s.\nMultiIndex : A multi-level, or hierarchical Index.\nIntervalIndex : An Index of :class:`Interval` s.\nDatetimeIndex : Index of datetime64 data.\nTimedeltaIndex : Index of timedelta64 data.\nPeriodIndex : Index of Period data.\n\nNotes\n-----\nAn Index instance can **only** contain hashable objects.\nAn Index instance *can not* hold numpy float16 dtype.\n\nExamples\n--------\n>>> pd.Index([1, 2, 3])\nIndex([1, 2, 3], dtype='int64')\n\n>>> pd.Index(list('abc'))\nIndex(['a', 'b', 'c'], dtype='object')\n\n>>> pd.Index([1, 2, 3], dtype=\"uint8\")\nIndex([1, 2, 3], dtype='uint8')"
  },
  {
    "symbol": "Index.T",
    "signature": "(property)",
    "doc": "\n        Return the transpose, which is by definition self.\n\n        Examples\n        --------\n        For Series:\n\n        >>> s = pd.Series(['Ant', 'Bear', 'Cow'])\n        >>> s\n        0     Ant\n        1    Bear\n        2     Cow\n        dtype: object\n        >>> s.T\n        0     Ant\n        1    Bear\n        2     Cow\n        dtype: object\n\n        For Index:\n\n        >>> idx = pd.Index([1, 2, 3])\n        >>> idx.T\n        Index([1, 2, 3], dtype='int64')\n        "
  },
  {
    "symbol": "Index.all",
    "signature": "(self, *args, **kwargs)",
    "doc": "Return whether all elements are Truthy.\n\nParameters\n----------\n*args\n    Required for compatibility with numpy.\n**kwargs\n    Required for compatibility with numpy.\n\nReturns\n-------\nbool or array-like (if axis is specified)\n    A single element array-like may be converted to bool.\n\nSee Also\n--------\nIndex.any : Return whether any element in an Index is True.\nSeries.any : Return whether any element in a Series is True.\nSeries.all : Return whether all elements in a Series are True.\n\nNotes\n-----\nNot a Number (NaN), positive infinity and negative infinity\nevaluate to True because these are not equal to zero.\n\nExamples\n--------\nTrue, because nonzero integers are considered True.\n\n>>> pd.Index([1, 2, 3]).all()\nTrue\n\nFalse, because ``0`` is considered False.\n\n>>> pd.Index([0, 1, 2]).all()\nFalse"
  },
  {
    "symbol": "Index.any",
    "signature": "(self, *args, **kwargs)",
    "doc": "Return whether any element is Truthy.\n\nParameters\n----------\n*args\n    Required for compatibility with numpy.\n**kwargs\n    Required for compatibility with numpy.\n\nReturns\n-------\nbool or array-like (if axis is specified)\n    A single element array-like may be converted to bool.\n\nSee Also\n--------\nIndex.all : Return whether all elements are True.\nSeries.all : Return whether all elements are True.\n\nNotes\n-----\nNot a Number (NaN), positive infinity and negative infinity\nevaluate to True because these are not equal to zero.\n\nExamples\n--------\n>>> index = pd.Index([0, 1, 2])\n>>> index.any()\nTrue\n\n>>> index = pd.Index([0, 0, 0])\n>>> index.any()\nFalse"
  },
  {
    "symbol": "Index.append",
    "signature": "(self, other: 'Index | Sequence[Index]') -> 'Index'",
    "doc": "Append a collection of Index options together.\n\nParameters\n----------\nother : Index or list/tuple of indices\n\nReturns\n-------\nIndex\n\nExamples\n--------\n>>> idx = pd.Index([1, 2, 3])\n>>> idx.append(pd.Index([4]))\nIndex([1, 2, 3, 4], dtype='int64')"
  },
  {
    "symbol": "Index.argmax",
    "signature": "(self, axis=None, skipna: 'bool' = True, *args, **kwargs) -> 'int'",
    "doc": "Return int position of the largest value in the Series.\n\nIf the maximum is achieved in multiple locations,\nthe first row position is returned.\n\nParameters\n----------\naxis : {None}\n    Unused. Parameter needed for compatibility with DataFrame.\nskipna : bool, default True\n    Exclude NA/null values when showing the result.\n*args, **kwargs\n    Additional arguments and keywords for compatibility with NumPy.\n\nReturns\n-------\nint\n    Row position of the maximum value.\n\nSee Also\n--------\nSeries.argmax : Return position of the maximum value.\nSeries.argmin : Return position of the minimum value.\nnumpy.ndarray.argmax : Equivalent method for numpy arrays.\nSeries.idxmax : Return index label of the maximum values.\nSeries.idxmin : Return index label of the minimum values.\n\nExamples\n--------\nConsider dataset containing cereal calories\n\n>>> s = pd.Series({'Corn Flakes': 100.0, 'Almond Delight': 110.0,\n...                'Cinnamon Toast Crunch': 120.0, 'Cocoa Puff': 110.0})\n>>> s\nCorn Flakes              100.0\nAlmond Delight           110.0\nCinnamon Toast Crunch    120.0\nCocoa Puff               110.0\ndtype: float64\n\n>>> s.argmax()\n2\n>>> s.argmin()\n0\n\nThe maximum cereal calories is the third element and\nthe minimum cereal calories is the first element,\nsince series is zero-indexed."
  },
  {
    "symbol": "Index.argmin",
    "signature": "(self, axis=None, skipna: 'bool' = True, *args, **kwargs) -> 'int'",
    "doc": "Return int position of the smallest value in the Series.\n\nIf the minimum is achieved in multiple locations,\nthe first row position is returned.\n\nParameters\n----------\naxis : {None}\n    Unused. Parameter needed for compatibility with DataFrame.\nskipna : bool, default True\n    Exclude NA/null values when showing the result.\n*args, **kwargs\n    Additional arguments and keywords for compatibility with NumPy.\n\nReturns\n-------\nint\n    Row position of the minimum value.\n\nSee Also\n--------\nSeries.argmin : Return position of the minimum value.\nSeries.argmax : Return position of the maximum value.\nnumpy.ndarray.argmin : Equivalent method for numpy arrays.\nSeries.idxmax : Return index label of the maximum values.\nSeries.idxmin : Return index label of the minimum values.\n\nExamples\n--------\nConsider dataset containing cereal calories\n\n>>> s = pd.Series({'Corn Flakes': 100.0, 'Almond Delight': 110.0,\n...                'Cinnamon Toast Crunch': 120.0, 'Cocoa Puff': 110.0})\n>>> s\nCorn Flakes              100.0\nAlmond Delight           110.0\nCinnamon Toast Crunch    120.0\nCocoa Puff               110.0\ndtype: float64\n\n>>> s.argmax()\n2\n>>> s.argmin()\n0\n\nThe maximum cereal calories is the third element and\nthe minimum cereal calories is the first element,\nsince series is zero-indexed."
  },
  {
    "symbol": "Index.argsort",
    "signature": "(self, *args, **kwargs) -> 'npt.NDArray[np.intp]'",
    "doc": "Return the integer indices that would sort the index.\n\nParameters\n----------\n*args\n    Passed to `numpy.ndarray.argsort`.\n**kwargs\n    Passed to `numpy.ndarray.argsort`.\n\nReturns\n-------\nnp.ndarray[np.intp]\n    Integer indices that would sort the index if used as\n    an indexer.\n\nSee Also\n--------\nnumpy.argsort : Similar method for NumPy arrays.\nIndex.sort_values : Return sorted copy of Index.\n\nExamples\n--------\n>>> idx = pd.Index(['b', 'a', 'd', 'c'])\n>>> idx\nIndex(['b', 'a', 'd', 'c'], dtype='object')\n\n>>> order = idx.argsort()\n>>> order\narray([1, 0, 3, 2])\n\n>>> idx[order]\nIndex(['a', 'b', 'c', 'd'], dtype='object')"
  },
  {
    "symbol": "Index.array",
    "signature": "(property)",
    "doc": "\nThe ExtensionArray of the data backing this Series or Index.\n\nReturns\n-------\nExtensionArray\n    An ExtensionArray of the values stored within. For extension\n    types, this is the actual array. For NumPy native types, this\n    is a thin (no copy) wrapper around :class:`numpy.ndarray`.\n\n    ``.array`` differs from ``.values``, which may require converting\n    the data to a different form.\n\nSee Also\n--------\nIndex.to_numpy : Similar method that always returns a NumPy array.\nSeries.to_numpy : Similar method that always returns a NumPy array.\n\nNotes\n-----\nThis table lays out the different array types for each extension\ndtype within pandas.\n\n================== =============================\ndtype              array type\n================== =============================\ncategory           Categorical\nperiod             PeriodArray\ninterval           IntervalArray\nIntegerNA          IntegerArray\nstring             StringArray\nboolean            BooleanArray\ndatetime64[ns, tz] DatetimeArray\n================== =============================\n\nFor any 3rd-party extension types, the array type will be an\nExtensionArray.\n\nFor all remaining dtypes ``.array`` will be a\n:class:`arrays.NumpyExtensionArray` wrapping the actual ndarray\nstored within. If you absolutely need a NumPy array (possibly with\ncopying / coercing data), then use :meth:`Series.to_numpy` instead.\n\nExamples\n--------\nFor regular NumPy types like int, and float, a NumpyExtensionArray\nis returned.\n\n>>> pd.Series([1, 2, 3]).array\n<NumpyExtensionArray>\n[1, 2, 3]\nLength: 3, dtype: int64\n\nFor extension types, like Categorical, the actual ExtensionArray\nis returned\n\n>>> ser = pd.Series(pd.Categorical(['a', 'b', 'a']))\n>>> ser.array\n['a', 'b', 'a']\nCategories (2, object): ['a', 'b']\n"
  },
  {
    "symbol": "Index.asof",
    "signature": "(self, label)",
    "doc": "Return the label from the index, or, if not present, the previous one.\n\nAssuming that the index is sorted, return the passed index label if it\nis in the index, or return the previous index label if the passed one\nis not in the index.\n\nParameters\n----------\nlabel : object\n    The label up to which the method returns the latest index label.\n\nReturns\n-------\nobject\n    The passed label if it is in the index. The previous label if the\n    passed label is not in the sorted index or `NaN` if there is no\n    such label.\n\nSee Also\n--------\nSeries.asof : Return the latest value in a Series up to the\n    passed index.\nmerge_asof : Perform an asof merge (similar to left join but it\n    matches on nearest key rather than equal key).\nIndex.get_loc : An `asof` is a thin wrapper around `get_loc`\n    with method='pad'.\n\nExamples\n--------\n`Index.asof` returns the latest index label up to the passed label.\n\n>>> idx = pd.Index(['2013-12-31', '2014-01-02', '2014-01-03'])\n>>> idx.asof('2014-01-01')\n'2013-12-31'\n\nIf the label is in the index, the method returns the passed label.\n\n>>> idx.asof('2014-01-02')\n'2014-01-02'\n\nIf all of the labels in the index are later than the passed label,\nNaN is returned.\n\n>>> idx.asof('1999-01-02')\nnan\n\nIf the index is not sorted, an error is raised.\n\n>>> idx_not_sorted = pd.Index(['2013-12-31', '2015-01-02',\n...                            '2014-01-03'])\n>>> idx_not_sorted.asof('2013-12-31')\nTraceback (most recent call last):\nValueError: index must be monotonic increasing or decreasing"
  },
  {
    "symbol": "Index.asof_locs",
    "signature": "(self, where: 'Index', mask: 'npt.NDArray[np.bool_]') -> 'npt.NDArray[np.intp]'",
    "doc": "Return the locations (indices) of labels in the index.\n\nAs in the :meth:`pandas.Index.asof`, if the label (a particular entry in\n``where``) is not in the index, the latest index label up to the\npassed label is chosen and its index returned.\n\nIf all of the labels in the index are later than a label in ``where``,\n-1 is returned.\n\n``mask`` is used to ignore ``NA`` values in the index during calculation.\n\nParameters\n----------\nwhere : Index\n    An Index consisting of an array of timestamps.\nmask : np.ndarray[bool]\n    Array of booleans denoting where values in the original\n    data are not ``NA``.\n\nReturns\n-------\nnp.ndarray[np.intp]\n    An array of locations (indices) of the labels from the index\n    which correspond to the return values of :meth:`pandas.Index.asof`\n    for every element in ``where``.\n\nSee Also\n--------\nIndex.asof : Return the label from the index, or, if not present, the\n    previous one.\n\nExamples\n--------\n>>> idx = pd.date_range('2023-06-01', periods=3, freq='D')\n>>> where = pd.DatetimeIndex(['2023-05-30 00:12:00', '2023-06-01 00:00:00',\n...                           '2023-06-02 23:59:59'])\n>>> mask = np.ones(3, dtype=bool)\n>>> idx.asof_locs(where, mask)\narray([-1,  0,  1])\n\nWe can use ``mask`` to ignore certain values in the index during calculation.\n\n>>> mask[1] = False\n>>> idx.asof_locs(where, mask)\narray([-1,  0,  0])"
  },
  {
    "symbol": "Index.astype",
    "signature": "(self, dtype, copy: 'bool' = True)",
    "doc": "Create an Index with values cast to dtypes.\n\nThe class of a new Index is determined by dtype. When conversion is\nimpossible, a TypeError exception is raised.\n\nParameters\n----------\ndtype : numpy dtype or pandas type\n    Note that any signed integer `dtype` is treated as ``'int64'``,\n    and any unsigned integer `dtype` is treated as ``'uint64'``,\n    regardless of the size.\ncopy : bool, default True\n    By default, astype always returns a newly allocated object.\n    If copy is set to False and internal requirements on dtype are\n    satisfied, the original data is used to create a new Index\n    or the original Index is returned.\n\nReturns\n-------\nIndex\n    Index with values cast to specified dtype.\n\nExamples\n--------\n>>> idx = pd.Index([1, 2, 3])\n>>> idx\nIndex([1, 2, 3], dtype='int64')\n>>> idx.astype('float')\nIndex([1.0, 2.0, 3.0], dtype='float64')"
  },
  {
    "symbol": "Index.copy",
    "signature": "(self, name: 'Hashable | None' = None, deep: 'bool' = False) -> 'Self'",
    "doc": "Make a copy of this object.\n\nName is set on the new object.\n\nParameters\n----------\nname : Label, optional\n    Set name for new object.\ndeep : bool, default False\n\nReturns\n-------\nIndex\n    Index refer to new object which is a copy of this object.\n\nNotes\n-----\nIn most cases, there should be no functional difference from using\n``deep``, but if ``deep`` is passed it will attempt to deepcopy.\n\nExamples\n--------\n>>> idx = pd.Index(['a', 'b', 'c'])\n>>> new_idx = idx.copy()\n>>> idx is new_idx\nFalse"
  },
  {
    "symbol": "Index.delete",
    "signature": "(self, loc) -> 'Self'",
    "doc": "Make new Index with passed location(-s) deleted.\n\nParameters\n----------\nloc : int or list of int\n    Location of item(-s) which will be deleted.\n    Use a list of locations to delete more than one value at the same time.\n\nReturns\n-------\nIndex\n    Will be same type as self, except for RangeIndex.\n\nSee Also\n--------\nnumpy.delete : Delete any rows and column from NumPy array (ndarray).\n\nExamples\n--------\n>>> idx = pd.Index(['a', 'b', 'c'])\n>>> idx.delete(1)\nIndex(['a', 'c'], dtype='object')\n\n>>> idx = pd.Index(['a', 'b', 'c'])\n>>> idx.delete([0, 2])\nIndex(['b'], dtype='object')"
  },
  {
    "symbol": "Index.diff",
    "signature": "(self, periods: 'int' = 1) -> 'Index'",
    "doc": "Computes the difference between consecutive values in the Index object.\n\nIf periods is greater than 1, computes the difference between values that\nare `periods` number of positions apart.\n\nParameters\n----------\nperiods : int, optional\n    The number of positions between the current and previous\n    value to compute the difference with. Default is 1.\n\nReturns\n-------\nIndex\n    A new Index object with the computed differences.\n\nExamples\n--------\n>>> import pandas as pd\n>>> idx = pd.Index([10, 20, 30, 40, 50])\n>>> idx.diff()\nIndex([nan, 10.0, 10.0, 10.0, 10.0], dtype='float64')"
  },
  {
    "symbol": "Index.difference",
    "signature": "(self, other, sort=None)",
    "doc": "Return a new Index with elements of index not in `other`.\n\nThis is the set difference of two Index objects.\n\nParameters\n----------\nother : Index or array-like\nsort : bool or None, default None\n    Whether to sort the resulting index. By default, the\n    values are attempted to be sorted, but any TypeError from\n    incomparable elements is caught by pandas.\n\n    * None : Attempt to sort the result, but catch any TypeErrors\n      from comparing incomparable elements.\n    * False : Do not sort the result.\n    * True : Sort the result (which may raise TypeError).\n\nReturns\n-------\nIndex\n\nExamples\n--------\n>>> idx1 = pd.Index([2, 1, 3, 4])\n>>> idx2 = pd.Index([3, 4, 5, 6])\n>>> idx1.difference(idx2)\nIndex([1, 2], dtype='int64')\n>>> idx1.difference(idx2, sort=False)\nIndex([2, 1], dtype='int64')"
  },
  {
    "symbol": "Index.drop",
    "signature": "(self, labels: 'Index | np.ndarray | Iterable[Hashable]', errors: 'IgnoreRaise' = 'raise') -> 'Index'",
    "doc": "Make new Index with passed list of labels deleted.\n\nParameters\n----------\nlabels : array-like or scalar\nerrors : {'ignore', 'raise'}, default 'raise'\n    If 'ignore', suppress error and existing labels are dropped.\n\nReturns\n-------\nIndex\n    Will be same type as self, except for RangeIndex.\n\nRaises\n------\nKeyError\n    If not all of the labels are found in the selected axis\n\nExamples\n--------\n>>> idx = pd.Index(['a', 'b', 'c'])\n>>> idx.drop(['a'])\nIndex(['b', 'c'], dtype='object')"
  },
  {
    "symbol": "Index.drop_duplicates",
    "signature": "(self, *, keep: 'DropKeep' = 'first') -> 'Self'",
    "doc": "Return Index with duplicate values removed.\n\nParameters\n----------\nkeep : {'first', 'last', ``False``}, default 'first'\n    - 'first' : Drop duplicates except for the first occurrence.\n    - 'last' : Drop duplicates except for the last occurrence.\n    - ``False`` : Drop all duplicates.\n\nReturns\n-------\nIndex\n\nSee Also\n--------\nSeries.drop_duplicates : Equivalent method on Series.\nDataFrame.drop_duplicates : Equivalent method on DataFrame.\nIndex.duplicated : Related method on Index, indicating duplicate\n    Index values.\n\nExamples\n--------\nGenerate an pandas.Index with duplicate values.\n\n>>> idx = pd.Index(['lama', 'cow', 'lama', 'beetle', 'lama', 'hippo'])\n\nThe `keep` parameter controls  which duplicate values are removed.\nThe value 'first' keeps the first occurrence for each\nset of duplicated entries. The default value of keep is 'first'.\n\n>>> idx.drop_duplicates(keep='first')\nIndex(['lama', 'cow', 'beetle', 'hippo'], dtype='object')\n\nThe value 'last' keeps the last occurrence for each set of duplicated\nentries.\n\n>>> idx.drop_duplicates(keep='last')\nIndex(['cow', 'beetle', 'lama', 'hippo'], dtype='object')\n\nThe value ``False`` discards all sets of duplicated entries.\n\n>>> idx.drop_duplicates(keep=False)\nIndex(['cow', 'beetle', 'hippo'], dtype='object')"
  },
  {
    "symbol": "Index.droplevel",
    "signature": "(self, level: 'IndexLabel' = 0)",
    "doc": "Return index with requested level(s) removed.\n\nIf resulting index has only 1 level left, the result will be\nof Index type, not MultiIndex. The original index is not modified inplace.\n\nParameters\n----------\nlevel : int, str, or list-like, default 0\n    If a string is given, must be the name of a level\n    If list-like, elements must be names or indexes of levels.\n\nReturns\n-------\nIndex or MultiIndex\n\nExamples\n--------\n>>> mi = pd.MultiIndex.from_arrays(\n... [[1, 2], [3, 4], [5, 6]], names=['x', 'y', 'z'])\n>>> mi\nMultiIndex([(1, 3, 5),\n            (2, 4, 6)],\n           names=['x', 'y', 'z'])\n\n>>> mi.droplevel()\nMultiIndex([(3, 5),\n            (4, 6)],\n           names=['y', 'z'])\n\n>>> mi.droplevel(2)\nMultiIndex([(1, 3),\n            (2, 4)],\n           names=['x', 'y'])\n\n>>> mi.droplevel('z')\nMultiIndex([(1, 3),\n            (2, 4)],\n           names=['x', 'y'])\n\n>>> mi.droplevel(['x', 'y'])\nIndex([5, 6], dtype='int64', name='z')"
  },
  {
    "symbol": "Index.dropna",
    "signature": "(self, how: 'AnyAll' = 'any') -> 'Self'",
    "doc": "Return Index without NA/NaN values.\n\nParameters\n----------\nhow : {'any', 'all'}, default 'any'\n    If the Index is a MultiIndex, drop the value when any or all levels\n    are NaN.\n\nReturns\n-------\nIndex\n\nExamples\n--------\n>>> idx = pd.Index([1, np.nan, 3])\n>>> idx.dropna()\nIndex([1.0, 3.0], dtype='float64')"
  },
  {
    "symbol": "Index.dtype",
    "signature": "(property)",
    "doc": "\nReturn the dtype object of the underlying data.\n\nExamples\n--------\n>>> idx = pd.Index([1, 2, 3])\n>>> idx\nIndex([1, 2, 3], dtype='int64')\n>>> idx.dtype\ndtype('int64')\n"
  },
  {
    "symbol": "Index.duplicated",
    "signature": "(self, keep: 'DropKeep' = 'first') -> 'npt.NDArray[np.bool_]'",
    "doc": "Indicate duplicate index values.\n\nDuplicated values are indicated as ``True`` values in the resulting\narray. Either all duplicates, all except the first, or all except the\nlast occurrence of duplicates can be indicated.\n\nParameters\n----------\nkeep : {'first', 'last', False}, default 'first'\n    The value or values in a set of duplicates to mark as missing.\n\n    - 'first' : Mark duplicates as ``True`` except for the first\n      occurrence.\n    - 'last' : Mark duplicates as ``True`` except for the last\n      occurrence.\n    - ``False`` : Mark all duplicates as ``True``.\n\nReturns\n-------\nnp.ndarray[bool]\n\nSee Also\n--------\nSeries.duplicated : Equivalent method on pandas.Series.\nDataFrame.duplicated : Equivalent method on pandas.DataFrame.\nIndex.drop_duplicates : Remove duplicate values from Index.\n\nExamples\n--------\nBy default, for each set of duplicated values, the first occurrence is\nset to False and all others to True:\n\n>>> idx = pd.Index(['lama', 'cow', 'lama', 'beetle', 'lama'])\n>>> idx.duplicated()\narray([False, False,  True, False,  True])\n\nwhich is equivalent to\n\n>>> idx.duplicated(keep='first')\narray([False, False,  True, False,  True])\n\nBy using 'last', the last occurrence of each set of duplicated values\nis set on False and all others on True:\n\n>>> idx.duplicated(keep='last')\narray([ True, False,  True, False, False])\n\nBy setting keep on ``False``, all duplicates are True:\n\n>>> idx.duplicated(keep=False)\narray([ True, False,  True, False,  True])"
  },
  {
    "symbol": "Index.equals",
    "signature": "(self, other: 'Any') -> 'bool'",
    "doc": "Determine if two Index object are equal.\n\nThe things that are being compared are:\n\n* The elements inside the Index object.\n* The order of the elements inside the Index object.\n\nParameters\n----------\nother : Any\n    The other object to compare against.\n\nReturns\n-------\nbool\n    True if \"other\" is an Index and it has the same elements and order\n    as the calling index; False otherwise.\n\nExamples\n--------\n>>> idx1 = pd.Index([1, 2, 3])\n>>> idx1\nIndex([1, 2, 3], dtype='int64')\n>>> idx1.equals(pd.Index([1, 2, 3]))\nTrue\n\nThe elements inside are compared\n\n>>> idx2 = pd.Index([\"1\", \"2\", \"3\"])\n>>> idx2\nIndex(['1', '2', '3'], dtype='object')\n\n>>> idx1.equals(idx2)\nFalse\n\nThe order is compared\n\n>>> ascending_idx = pd.Index([1, 2, 3])\n>>> ascending_idx\nIndex([1, 2, 3], dtype='int64')\n>>> descending_idx = pd.Index([3, 2, 1])\n>>> descending_idx\nIndex([3, 2, 1], dtype='int64')\n>>> ascending_idx.equals(descending_idx)\nFalse\n\nThe dtype is *not* compared\n\n>>> int64_idx = pd.Index([1, 2, 3], dtype='int64')\n>>> int64_idx\nIndex([1, 2, 3], dtype='int64')\n>>> uint64_idx = pd.Index([1, 2, 3], dtype='uint64')\n>>> uint64_idx\nIndex([1, 2, 3], dtype='uint64')\n>>> int64_idx.equals(uint64_idx)\nTrue"
  },
  {
    "symbol": "Index.factorize",
    "signature": "(self, sort: 'bool' = False, use_na_sentinel: 'bool' = True) -> 'tuple[npt.NDArray[np.intp], Index]'",
    "doc": "Encode the object as an enumerated type or categorical variable.\n\nThis method is useful for obtaining a numeric representation of an\narray when all that matters is identifying distinct values. `factorize`\nis available as both a top-level function :func:`pandas.factorize`,\nand as a method :meth:`Series.factorize` and :meth:`Index.factorize`.\n\nParameters\n----------\nsort : bool, default False\n    Sort `uniques` and shuffle `codes` to maintain the\n    relationship.\n\nuse_na_sentinel : bool, default True\n    If True, the sentinel -1 will be used for NaN values. If False,\n    NaN values will be encoded as non-negative integers and will not drop the\n    NaN from the uniques of the values.\n\n    .. versionadded:: 1.5.0\n\nReturns\n-------\ncodes : ndarray\n    An integer ndarray that's an indexer into `uniques`.\n    ``uniques.take(codes)`` will have the same values as `values`.\nuniques : ndarray, Index, or Categorical\n    The unique valid values. When `values` is Categorical, `uniques`\n    is a Categorical. When `values` is some other pandas object, an\n    `Index` is returned. Otherwise, a 1-D ndarray is returned.\n\n    .. note::\n\n       Even if there's a missing value in `values`, `uniques` will\n       *not* contain an entry for it.\n\nSee Also\n--------\ncut : Discretize continuous-valued array.\nunique : Find the unique value in an array.\n\nNotes\n-----\nReference :ref:`the user guide <reshaping.factorize>` for more examples.\n\nExamples\n--------\nThese examples all show factorize as a top-level method like\n``pd.factorize(values)``. The results are identical for methods like\n:meth:`Series.factorize`.\n\n>>> codes, uniques = pd.factorize(np.array(['b', 'b', 'a', 'c', 'b'], dtype=\"O\"))\n>>> codes\narray([0, 0, 1, 2, 0])\n>>> uniques\narray(['b', 'a', 'c'], dtype=object)\n\nWith ``sort=True``, the `uniques` will be sorted, and `codes` will be\nshuffled so that the relationship is the maintained.\n\n>>> codes, uniques = pd.factorize(np.array(['b', 'b', 'a', 'c', 'b'], dtype=\"O\"),\n...                               sort=True)\n>>> codes\narray([1, 1, 0, 2, 1])\n>>> uniques\narray(['a', 'b', 'c'], dtype=object)\n\nWhen ``use_na_sentinel=True`` (the default), missing values are indicated in\nthe `codes` with the sentinel value ``-1`` and missing values are not\nincluded in `uniques`.\n\n>>> codes, uniques = pd.factorize(np.array(['b', None, 'a', 'c', 'b'], dtype=\"O\"))\n>>> codes\narray([ 0, -1,  1,  2,  0])\n>>> uniques\narray(['b', 'a', 'c'], dtype=object)\n\nThus far, we've only factorized lists (which are internally coerced to\nNumPy arrays). When factorizing pandas objects, the type of `uniques`\nwill differ. For Categoricals, a `Categorical` is returned.\n\n>>> cat = pd.Categorical(['a', 'a', 'c'], categories=['a', 'b', 'c'])\n>>> codes, uniques = pd.factorize(cat)\n>>> codes\narray([0, 0, 1])\n>>> uniques\n['a', 'c']\nCategories (3, object): ['a', 'b', 'c']\n\nNotice that ``'b'`` is in ``uniques.categories``, despite not being\npresent in ``cat.values``.\n\nFor all other pandas objects, an Index of the appropriate type is\nreturned.\n\n>>> cat = pd.Series(['a', 'a', 'c'])\n>>> codes, uniques = pd.factorize(cat)\n>>> codes\narray([0, 0, 1])\n>>> uniques\nIndex(['a', 'c'], dtype='object')\n\nIf NaN is in the values, and we want to include NaN in the uniques of the\nvalues, it can be achieved by setting ``use_na_sentinel=False``.\n\n>>> values = np.array([1, 2, 1, np.nan])\n>>> codes, uniques = pd.factorize(values)  # default: use_na_sentinel=True\n>>> codes\narray([ 0,  1,  0, -1])\n>>> uniques\narray([1., 2.])\n\n>>> codes, uniques = pd.factorize(values, use_na_sentinel=False)\n>>> codes\narray([0, 1, 0, 2])\n>>> uniques\narray([ 1.,  2., nan])"
  },
  {
    "symbol": "Index.fillna",
    "signature": "(self, value=None, downcast=<no_default>)",
    "doc": "Fill NA/NaN values with the specified value.\n\nParameters\n----------\nvalue : scalar\n    Scalar value to use to fill holes (e.g. 0).\n    This value cannot be a list-likes.\ndowncast : dict, default is None\n    A dict of item->dtype of what to downcast if possible,\n    or the string 'infer' which will try to downcast to an appropriate\n    equal type (e.g. float64 to int64 if possible).\n\n    .. deprecated:: 2.1.0\n\nReturns\n-------\nIndex\n\nSee Also\n--------\nDataFrame.fillna : Fill NaN values of a DataFrame.\nSeries.fillna : Fill NaN Values of a Series.\n\nExamples\n--------\n>>> idx = pd.Index([np.nan, np.nan, 3])\n>>> idx.fillna(0)\nIndex([0.0, 0.0, 3.0], dtype='float64')"
  },
  {
    "symbol": "Index.format",
    "signature": "(self, name: 'bool' = False, formatter: 'Callable | None' = None, na_rep: 'str_t' = 'NaN') -> 'list[str_t]'",
    "doc": "Render a string representation of the Index."
  },
  {
    "symbol": "Index.get_indexer",
    "signature": "(self, target, method: 'ReindexMethod | None' = None, limit: 'int | None' = None, tolerance=None) -> 'npt.NDArray[np.intp]'",
    "doc": "Compute indexer and mask for new index given the current index.\n\nThe indexer should be then used as an input to ndarray.take to align the\ncurrent data to the new index.\n\nParameters\n----------\ntarget : Index\nmethod : {None, 'pad'/'ffill', 'backfill'/'bfill', 'nearest'}, optional\n    * default: exact matches only.\n    * pad / ffill: find the PREVIOUS index value if no exact match.\n    * backfill / bfill: use NEXT index value if no exact match\n    * nearest: use the NEAREST index value if no exact match. Tied\n      distances are broken by preferring the larger index value.\nlimit : int, optional\n    Maximum number of consecutive labels in ``target`` to match for\n    inexact matches.\ntolerance : optional\n    Maximum distance between original and new labels for inexact\n    matches. The values of the index at the matching locations must\n    satisfy the equation ``abs(index[indexer] - target) <= tolerance``.\n\n    Tolerance may be a scalar value, which applies the same tolerance\n    to all values, or list-like, which applies variable tolerance per\n    element. List-like includes list, tuple, array, Series, and must be\n    the same size as the index and its dtype must exactly match the\n    index's type.\n\nReturns\n-------\nnp.ndarray[np.intp]\n    Integers from 0 to n - 1 indicating that the index at these\n    positions matches the corresponding target values. Missing values\n    in the target are marked by -1.\n\nNotes\n-----\nReturns -1 for unmatched values, for further explanation see the\nexample below.\n\nExamples\n--------\n>>> index = pd.Index(['c', 'a', 'b'])\n>>> index.get_indexer(['a', 'b', 'x'])\narray([ 1,  2, -1])\n\nNotice that the return value is an array of locations in ``index``\nand ``x`` is marked by -1, as it is not in ``index``."
  },
  {
    "symbol": "Index.get_indexer_for",
    "signature": "(self, target) -> 'npt.NDArray[np.intp]'",
    "doc": "Guaranteed return of an indexer even when non-unique.\n\nThis dispatches to get_indexer or get_indexer_non_unique\nas appropriate.\n\nReturns\n-------\nnp.ndarray[np.intp]\n    List of indices.\n\nExamples\n--------\n>>> idx = pd.Index([np.nan, 'var1', np.nan])\n>>> idx.get_indexer_for([np.nan])\narray([0, 2])"
  },
  {
    "symbol": "Index.get_indexer_non_unique",
    "signature": "(self, target) -> 'tuple[npt.NDArray[np.intp], npt.NDArray[np.intp]]'",
    "doc": "Compute indexer and mask for new index given the current index.\n\nThe indexer should be then used as an input to ndarray.take to align the\ncurrent data to the new index.\n\nParameters\n----------\ntarget : Index\n\nReturns\n-------\nindexer : np.ndarray[np.intp]\n    Integers from 0 to n - 1 indicating that the index at these\n    positions matches the corresponding target values. Missing values\n    in the target are marked by -1.\nmissing : np.ndarray[np.intp]\n    An indexer into the target of the values not found.\n    These correspond to the -1 in the indexer array.\n\nExamples\n--------\n>>> index = pd.Index(['c', 'b', 'a', 'b', 'b'])\n>>> index.get_indexer_non_unique(['b', 'b'])\n(array([1, 3, 4, 1, 3, 4]), array([], dtype=int64))\n\nIn the example below there are no matched values.\n\n>>> index = pd.Index(['c', 'b', 'a', 'b', 'b'])\n>>> index.get_indexer_non_unique(['q', 'r', 't'])\n(array([-1, -1, -1]), array([0, 1, 2]))\n\nFor this reason, the returned ``indexer`` contains only integers equal to -1.\nIt demonstrates that there's no match between the index and the ``target``\nvalues at these positions. The mask [0, 1, 2] in the return value shows that\nthe first, second, and third elements are missing.\n\nNotice that the return value is a tuple contains two items. In the example\nbelow the first item is an array of locations in ``index``. The second\nitem is a mask shows that the first and third elements are missing.\n\n>>> index = pd.Index(['c', 'b', 'a', 'b', 'b'])\n>>> index.get_indexer_non_unique(['f', 'b', 's'])\n(array([-1,  1,  3,  4, -1]), array([0, 2]))"
  },
  {
    "symbol": "Index.get_level_values",
    "signature": "(self, level) -> 'Index'",
    "doc": "Return an Index of values for requested level.\n\nThis is primarily useful to get an individual level of values from a\nMultiIndex, but is provided on Index as well for compatibility.\n\nParameters\n----------\nlevel : int or str\n    It is either the integer position or the name of the level.\n\nReturns\n-------\nIndex\n    Calling object, as there is only one level in the Index.\n\nSee Also\n--------\nMultiIndex.get_level_values : Get values for a level of a MultiIndex.\n\nNotes\n-----\nFor Index, level should be 0, since there are no multiple levels.\n\nExamples\n--------\n>>> idx = pd.Index(list('abc'))\n>>> idx\nIndex(['a', 'b', 'c'], dtype='object')\n\nGet level values by supplying `level` as integer:\n\n>>> idx.get_level_values(0)\nIndex(['a', 'b', 'c'], dtype='object')"
  },
  {
    "symbol": "Index.get_loc",
    "signature": "(self, key)",
    "doc": "Get integer location, slice or boolean mask for requested label.\n\nParameters\n----------\nkey : label\n\nReturns\n-------\nint if unique index, slice if monotonic index, else mask\n\nExamples\n--------\n>>> unique_index = pd.Index(list('abc'))\n>>> unique_index.get_loc('b')\n1\n\n>>> monotonic_index = pd.Index(list('abbc'))\n>>> monotonic_index.get_loc('b')\nslice(1, 3, None)\n\n>>> non_monotonic_index = pd.Index(list('abcb'))\n>>> non_monotonic_index.get_loc('b')\narray([False,  True, False,  True])"
  },
  {
    "symbol": "Index.get_slice_bound",
    "signature": "(self, label, side: \"Literal['left', 'right']\") -> 'int'",
    "doc": "Calculate slice bound that corresponds to given label.\n\nReturns leftmost (one-past-the-rightmost if ``side=='right'``) position\nof given label.\n\nParameters\n----------\nlabel : object\nside : {'left', 'right'}\n\nReturns\n-------\nint\n    Index of label.\n\nSee Also\n--------\nIndex.get_loc : Get integer location, slice or boolean mask for requested\n    label.\n\nExamples\n--------\n>>> idx = pd.RangeIndex(5)\n>>> idx.get_slice_bound(3, 'left')\n3\n\n>>> idx.get_slice_bound(3, 'right')\n4\n\nIf ``label`` is non-unique in the index, an error will be raised.\n\n>>> idx_duplicate = pd.Index(['a', 'b', 'a', 'c', 'd'])\n>>> idx_duplicate.get_slice_bound('a', 'left')\nTraceback (most recent call last):\nKeyError: Cannot get left slice bound for non-unique label: 'a'"
  },
  {
    "symbol": "Index.groupby",
    "signature": "(self, values) -> 'PrettyDict[Hashable, np.ndarray]'",
    "doc": "Group the index labels by a given array of values.\n\nParameters\n----------\nvalues : array\n    Values used to determine the groups.\n\nReturns\n-------\ndict\n    {group name -> group labels}"
  },
  {
    "symbol": "Index.has_duplicates",
    "signature": "(property)",
    "doc": "\nCheck if the Index has duplicate values.\n\nReturns\n-------\nbool\n    Whether or not the Index has duplicate values.\n\nSee Also\n--------\nIndex.is_unique : Inverse method that checks if it has unique values.\n\nExamples\n--------\n>>> idx = pd.Index([1, 5, 7, 7])\n>>> idx.has_duplicates\nTrue\n\n>>> idx = pd.Index([1, 5, 7])\n>>> idx.has_duplicates\nFalse\n\n>>> idx = pd.Index([\"Watermelon\", \"Orange\", \"Apple\",\n...                 \"Watermelon\"]).astype(\"category\")\n>>> idx.has_duplicates\nTrue\n\n>>> idx = pd.Index([\"Orange\", \"Apple\",\n...                 \"Watermelon\"]).astype(\"category\")\n>>> idx.has_duplicates\nFalse\n"
  },
  {
    "symbol": "Index.hasnans",
    "signature": "(property)",
    "doc": "\nReturn True if there are any NaNs.\n\nEnables various performance speedups.\n\nReturns\n-------\nbool\n\nExamples\n--------\n>>> s = pd.Series([1, 2, 3], index=['a', 'b', None])\n>>> s\na    1\nb    2\nNone 3\ndtype: int64\n>>> s.index.hasnans\nTrue\n"
  },
  {
    "symbol": "Index.holds_integer",
    "signature": "(self) -> 'bool'",
    "doc": "Whether the type is an integer type.\n\n.. deprecated:: 2.0.0\n    Use `pandas.api.types.infer_dtype` instead"
  },
  {
    "symbol": "Index.identical",
    "signature": "(self, other) -> 'bool'",
    "doc": "Similar to equals, but checks that object attributes and types are also equal.\n\nReturns\n-------\nbool\n    If two Index objects have equal elements and same type True,\n    otherwise False.\n\nExamples\n--------\n>>> idx1 = pd.Index(['1', '2', '3'])\n>>> idx2 = pd.Index(['1', '2', '3'])\n>>> idx2.identical(idx1)\nTrue\n\n>>> idx1 = pd.Index(['1', '2', '3'], name=\"A\")\n>>> idx2 = pd.Index(['1', '2', '3'], name=\"B\")\n>>> idx2.identical(idx1)\nFalse"
  },
  {
    "symbol": "Index.infer_objects",
    "signature": "(self, copy: 'bool' = True) -> 'Index'",
    "doc": "If we have an object dtype, try to infer a non-object dtype.\n\nParameters\n----------\ncopy : bool, default True\n    Whether to make a copy in cases where no inference occurs."
  },
  {
    "symbol": "Index.inferred_type",
    "signature": "(property)",
    "doc": "\nReturn a string of the type inferred from the values.\n\nExamples\n--------\n>>> idx = pd.Index([1, 2, 3])\n>>> idx\nIndex([1, 2, 3], dtype='int64')\n>>> idx.inferred_type\n'integer'\n"
  },
  {
    "symbol": "Index.insert",
    "signature": "(self, loc: 'int', item) -> 'Index'",
    "doc": "Make new Index inserting new item at location.\n\nFollows Python numpy.insert semantics for negative values.\n\nParameters\n----------\nloc : int\nitem : object\n\nReturns\n-------\nIndex\n\nExamples\n--------\n>>> idx = pd.Index(['a', 'b', 'c'])\n>>> idx.insert(1, 'x')\nIndex(['a', 'x', 'b', 'c'], dtype='object')"
  },
  {
    "symbol": "Index.intersection",
    "signature": "(self, other, sort: 'bool' = False)",
    "doc": "Form the intersection of two Index objects.\n\nThis returns a new Index with elements common to the index and `other`.\n\nParameters\n----------\nother : Index or array-like\nsort : True, False or None, default False\n    Whether to sort the resulting index.\n\n    * None : sort the result, except when `self` and `other` are equal\n      or when the values cannot be compared.\n    * False : do not sort the result.\n    * True : Sort the result (which may raise TypeError).\n\nReturns\n-------\nIndex\n\nExamples\n--------\n>>> idx1 = pd.Index([1, 2, 3, 4])\n>>> idx2 = pd.Index([3, 4, 5, 6])\n>>> idx1.intersection(idx2)\nIndex([3, 4], dtype='int64')"
  },
  {
    "symbol": "Index.is_",
    "signature": "(self, other) -> 'bool'",
    "doc": "More flexible, faster check like ``is`` but that works through views.\n\nNote: this is *not* the same as ``Index.identical()``, which checks\nthat metadata is also the same.\n\nParameters\n----------\nother : object\n    Other object to compare against.\n\nReturns\n-------\nbool\n    True if both have same underlying data, False otherwise.\n\nSee Also\n--------\nIndex.identical : Works like ``Index.is_`` but also checks metadata.\n\nExamples\n--------\n>>> idx1 = pd.Index(['1', '2', '3'])\n>>> idx1.is_(idx1.view())\nTrue\n\n>>> idx1.is_(idx1.copy())\nFalse"
  },
  {
    "symbol": "Index.is_boolean",
    "signature": "(self) -> 'bool'",
    "doc": "Check if the Index only consists of booleans.\n\n.. deprecated:: 2.0.0\n    Use `pandas.api.types.is_bool_dtype` instead.\n\nReturns\n-------\nbool\n    Whether or not the Index only consists of booleans.\n\nSee Also\n--------\nis_integer : Check if the Index only consists of integers (deprecated).\nis_floating : Check if the Index is a floating type (deprecated).\nis_numeric : Check if the Index only consists of numeric data (deprecated).\nis_object : Check if the Index is of the object dtype (deprecated).\nis_categorical : Check if the Index holds categorical data.\nis_interval : Check if the Index holds Interval objects (deprecated).\n\nExamples\n--------\n>>> idx = pd.Index([True, False, True])\n>>> idx.is_boolean()  # doctest: +SKIP\nTrue\n\n>>> idx = pd.Index([\"True\", \"False\", \"True\"])\n>>> idx.is_boolean()  # doctest: +SKIP\nFalse\n\n>>> idx = pd.Index([True, False, \"True\"])\n>>> idx.is_boolean()  # doctest: +SKIP\nFalse"
  },
  {
    "symbol": "Index.is_categorical",
    "signature": "(self) -> 'bool'",
    "doc": "Check if the Index holds categorical data.\n\n.. deprecated:: 2.0.0\n      Use `isinstance(index.dtype, pd.CategoricalDtype)` instead.\n\nReturns\n-------\nbool\n    True if the Index is categorical.\n\nSee Also\n--------\nCategoricalIndex : Index for categorical data.\nis_boolean : Check if the Index only consists of booleans (deprecated).\nis_integer : Check if the Index only consists of integers (deprecated).\nis_floating : Check if the Index is a floating type (deprecated).\nis_numeric : Check if the Index only consists of numeric data (deprecated).\nis_object : Check if the Index is of the object dtype. (deprecated).\nis_interval : Check if the Index holds Interval objects (deprecated).\n\nExamples\n--------\n>>> idx = pd.Index([\"Watermelon\", \"Orange\", \"Apple\",\n...                 \"Watermelon\"]).astype(\"category\")\n>>> idx.is_categorical()  # doctest: +SKIP\nTrue\n\n>>> idx = pd.Index([1, 3, 5, 7])\n>>> idx.is_categorical()  # doctest: +SKIP\nFalse\n\n>>> s = pd.Series([\"Peter\", \"Victor\", \"Elisabeth\", \"Mar\"])\n>>> s\n0        Peter\n1       Victor\n2    Elisabeth\n3          Mar\ndtype: object\n>>> s.index.is_categorical()  # doctest: +SKIP\nFalse"
  },
  {
    "symbol": "Index.is_floating",
    "signature": "(self) -> 'bool'",
    "doc": "Check if the Index is a floating type.\n\n.. deprecated:: 2.0.0\n    Use `pandas.api.types.is_float_dtype` instead\n\nThe Index may consist of only floats, NaNs, or a mix of floats,\nintegers, or NaNs.\n\nReturns\n-------\nbool\n    Whether or not the Index only consists of only consists of floats, NaNs, or\n    a mix of floats, integers, or NaNs.\n\nSee Also\n--------\nis_boolean : Check if the Index only consists of booleans (deprecated).\nis_integer : Check if the Index only consists of integers (deprecated).\nis_numeric : Check if the Index only consists of numeric data (deprecated).\nis_object : Check if the Index is of the object dtype. (deprecated).\nis_categorical : Check if the Index holds categorical data (deprecated).\nis_interval : Check if the Index holds Interval objects (deprecated).\n\nExamples\n--------\n>>> idx = pd.Index([1.0, 2.0, 3.0, 4.0])\n>>> idx.is_floating()  # doctest: +SKIP\nTrue\n\n>>> idx = pd.Index([1.0, 2.0, np.nan, 4.0])\n>>> idx.is_floating()  # doctest: +SKIP\nTrue\n\n>>> idx = pd.Index([1, 2, 3, 4, np.nan])\n>>> idx.is_floating()  # doctest: +SKIP\nTrue\n\n>>> idx = pd.Index([1, 2, 3, 4])\n>>> idx.is_floating()  # doctest: +SKIP\nFalse"
  },
  {
    "symbol": "Index.is_integer",
    "signature": "(self) -> 'bool'",
    "doc": "Check if the Index only consists of integers.\n\n.. deprecated:: 2.0.0\n    Use `pandas.api.types.is_integer_dtype` instead.\n\nReturns\n-------\nbool\n    Whether or not the Index only consists of integers.\n\nSee Also\n--------\nis_boolean : Check if the Index only consists of booleans (deprecated).\nis_floating : Check if the Index is a floating type (deprecated).\nis_numeric : Check if the Index only consists of numeric data (deprecated).\nis_object : Check if the Index is of the object dtype. (deprecated).\nis_categorical : Check if the Index holds categorical data (deprecated).\nis_interval : Check if the Index holds Interval objects (deprecated).\n\nExamples\n--------\n>>> idx = pd.Index([1, 2, 3, 4])\n>>> idx.is_integer()  # doctest: +SKIP\nTrue\n\n>>> idx = pd.Index([1.0, 2.0, 3.0, 4.0])\n>>> idx.is_integer()  # doctest: +SKIP\nFalse\n\n>>> idx = pd.Index([\"Apple\", \"Mango\", \"Watermelon\"])\n>>> idx.is_integer()  # doctest: +SKIP\nFalse"
  },
  {
    "symbol": "Index.is_interval",
    "signature": "(self) -> 'bool'",
    "doc": "Check if the Index holds Interval objects.\n\n.. deprecated:: 2.0.0\n    Use `isinstance(index.dtype, pd.IntervalDtype)` instead.\n\nReturns\n-------\nbool\n    Whether or not the Index holds Interval objects.\n\nSee Also\n--------\nIntervalIndex : Index for Interval objects.\nis_boolean : Check if the Index only consists of booleans (deprecated).\nis_integer : Check if the Index only consists of integers (deprecated).\nis_floating : Check if the Index is a floating type (deprecated).\nis_numeric : Check if the Index only consists of numeric data (deprecated).\nis_object : Check if the Index is of the object dtype. (deprecated).\nis_categorical : Check if the Index holds categorical data (deprecated).\n\nExamples\n--------\n>>> idx = pd.Index([pd.Interval(left=0, right=5),\n...                 pd.Interval(left=5, right=10)])\n>>> idx.is_interval()  # doctest: +SKIP\nTrue\n\n>>> idx = pd.Index([1, 3, 5, 7])\n>>> idx.is_interval()  # doctest: +SKIP\nFalse"
  },
  {
    "symbol": "Index.is_monotonic_decreasing",
    "signature": "(property)",
    "doc": "\nReturn a boolean if the values are equal or decreasing.\n\nReturns\n-------\nbool\n\nSee Also\n--------\nIndex.is_monotonic_increasing : Check if the values are equal or increasing.\n\nExamples\n--------\n>>> pd.Index([3, 2, 1]).is_monotonic_decreasing\nTrue\n>>> pd.Index([3, 2, 2]).is_monotonic_decreasing\nTrue\n>>> pd.Index([3, 1, 2]).is_monotonic_decreasing\nFalse\n"
  },
  {
    "symbol": "Index.is_monotonic_increasing",
    "signature": "(property)",
    "doc": "\nReturn a boolean if the values are equal or increasing.\n\nReturns\n-------\nbool\n\nSee Also\n--------\nIndex.is_monotonic_decreasing : Check if the values are equal or decreasing.\n\nExamples\n--------\n>>> pd.Index([1, 2, 3]).is_monotonic_increasing\nTrue\n>>> pd.Index([1, 2, 2]).is_monotonic_increasing\nTrue\n>>> pd.Index([1, 3, 2]).is_monotonic_increasing\nFalse\n"
  },
  {
    "symbol": "Index.is_numeric",
    "signature": "(self) -> 'bool'",
    "doc": "Check if the Index only consists of numeric data.\n\n.. deprecated:: 2.0.0\n    Use `pandas.api.types.is_numeric_dtype` instead.\n\nReturns\n-------\nbool\n    Whether or not the Index only consists of numeric data.\n\nSee Also\n--------\nis_boolean : Check if the Index only consists of booleans (deprecated).\nis_integer : Check if the Index only consists of integers (deprecated).\nis_floating : Check if the Index is a floating type (deprecated).\nis_object : Check if the Index is of the object dtype. (deprecated).\nis_categorical : Check if the Index holds categorical data (deprecated).\nis_interval : Check if the Index holds Interval objects (deprecated).\n\nExamples\n--------\n>>> idx = pd.Index([1.0, 2.0, 3.0, 4.0])\n>>> idx.is_numeric()  # doctest: +SKIP\nTrue\n\n>>> idx = pd.Index([1, 2, 3, 4.0])\n>>> idx.is_numeric()  # doctest: +SKIP\nTrue\n\n>>> idx = pd.Index([1, 2, 3, 4])\n>>> idx.is_numeric()  # doctest: +SKIP\nTrue\n\n>>> idx = pd.Index([1, 2, 3, 4.0, np.nan])\n>>> idx.is_numeric()  # doctest: +SKIP\nTrue\n\n>>> idx = pd.Index([1, 2, 3, 4.0, np.nan, \"Apple\"])\n>>> idx.is_numeric()  # doctest: +SKIP\nFalse"
  },
  {
    "symbol": "Index.is_object",
    "signature": "(self) -> 'bool'",
    "doc": "Check if the Index is of the object dtype.\n\n.. deprecated:: 2.0.0\n   Use `pandas.api.types.is_object_dtype` instead.\n\nReturns\n-------\nbool\n    Whether or not the Index is of the object dtype.\n\nSee Also\n--------\nis_boolean : Check if the Index only consists of booleans (deprecated).\nis_integer : Check if the Index only consists of integers (deprecated).\nis_floating : Check if the Index is a floating type (deprecated).\nis_numeric : Check if the Index only consists of numeric data (deprecated).\nis_categorical : Check if the Index holds categorical data (deprecated).\nis_interval : Check if the Index holds Interval objects (deprecated).\n\nExamples\n--------\n>>> idx = pd.Index([\"Apple\", \"Mango\", \"Watermelon\"])\n>>> idx.is_object()  # doctest: +SKIP\nTrue\n\n>>> idx = pd.Index([\"Apple\", \"Mango\", 2.0])\n>>> idx.is_object()  # doctest: +SKIP\nTrue\n\n>>> idx = pd.Index([\"Watermelon\", \"Orange\", \"Apple\",\n...                 \"Watermelon\"]).astype(\"category\")\n>>> idx.is_object()  # doctest: +SKIP\nFalse\n\n>>> idx = pd.Index([1.0, 2.0, 3.0, 4.0])\n>>> idx.is_object()  # doctest: +SKIP\nFalse"
  },
  {
    "symbol": "Index.is_unique",
    "signature": "(property)",
    "doc": "\nReturn if the index has unique values.\n\nReturns\n-------\nbool\n\nSee Also\n--------\nIndex.has_duplicates : Inverse method that checks if it has duplicate values.\n\nExamples\n--------\n>>> idx = pd.Index([1, 5, 7, 7])\n>>> idx.is_unique\nFalse\n\n>>> idx = pd.Index([1, 5, 7])\n>>> idx.is_unique\nTrue\n\n>>> idx = pd.Index([\"Watermelon\", \"Orange\", \"Apple\",\n...                 \"Watermelon\"]).astype(\"category\")\n>>> idx.is_unique\nFalse\n\n>>> idx = pd.Index([\"Orange\", \"Apple\",\n...                 \"Watermelon\"]).astype(\"category\")\n>>> idx.is_unique\nTrue\n"
  },
  {
    "symbol": "Index.isin",
    "signature": "(self, values, level=None) -> 'npt.NDArray[np.bool_]'",
    "doc": "Return a boolean array where the index values are in `values`.\n\nCompute boolean array of whether each index value is found in the\npassed set of values. The length of the returned boolean array matches\nthe length of the index.\n\nParameters\n----------\nvalues : set or list-like\n    Sought values.\nlevel : str or int, optional\n    Name or position of the index level to use (if the index is a\n    `MultiIndex`).\n\nReturns\n-------\nnp.ndarray[bool]\n    NumPy array of boolean values.\n\nSee Also\n--------\nSeries.isin : Same for Series.\nDataFrame.isin : Same method for DataFrames.\n\nNotes\n-----\nIn the case of `MultiIndex` you must either specify `values` as a\nlist-like object containing tuples that are the same length as the\nnumber of levels, or specify `level`. Otherwise it will raise a\n``ValueError``.\n\nIf `level` is specified:\n\n- if it is the name of one *and only one* index level, use that level;\n- otherwise it should be a number indicating level position.\n\nExamples\n--------\n>>> idx = pd.Index([1,2,3])\n>>> idx\nIndex([1, 2, 3], dtype='int64')\n\nCheck whether each index value in a list of values.\n\n>>> idx.isin([1, 4])\narray([ True, False, False])\n\n>>> midx = pd.MultiIndex.from_arrays([[1,2,3],\n...                                  ['red', 'blue', 'green']],\n...                                  names=('number', 'color'))\n>>> midx\nMultiIndex([(1,   'red'),\n            (2,  'blue'),\n            (3, 'green')],\n           names=['number', 'color'])\n\nCheck whether the strings in the 'color' level of the MultiIndex\nare in a list of colors.\n\n>>> midx.isin(['red', 'orange', 'yellow'], level='color')\narray([ True, False, False])\n\nTo check across the levels of a MultiIndex, pass a list of tuples:\n\n>>> midx.isin([(1, 'red'), (3, 'red')])\narray([ True, False, False])"
  },
  {
    "symbol": "Index.isna",
    "signature": "(self) -> 'npt.NDArray[np.bool_]'",
    "doc": "Detect missing values.\n\nReturn a boolean same-sized object indicating if the values are NA.\nNA values, such as ``None``, :attr:`numpy.NaN` or :attr:`pd.NaT`, get\nmapped to ``True`` values.\nEverything else get mapped to ``False`` values. Characters such as\nempty strings `''` or :attr:`numpy.inf` are not considered NA values.\n\nReturns\n-------\nnumpy.ndarray[bool]\n    A boolean array of whether my values are NA.\n\nSee Also\n--------\nIndex.notna : Boolean inverse of isna.\nIndex.dropna : Omit entries with missing values.\nisna : Top-level isna.\nSeries.isna : Detect missing values in Series object.\n\nExamples\n--------\nShow which entries in a pandas.Index are NA. The result is an\narray.\n\n>>> idx = pd.Index([5.2, 6.0, np.nan])\n>>> idx\nIndex([5.2, 6.0, nan], dtype='float64')\n>>> idx.isna()\narray([False, False,  True])\n\nEmpty strings are not considered NA values. None is considered an NA\nvalue.\n\n>>> idx = pd.Index(['black', '', 'red', None])\n>>> idx\nIndex(['black', '', 'red', None], dtype='object')\n>>> idx.isna()\narray([False, False, False,  True])\n\nFor datetimes, `NaT` (Not a Time) is considered as an NA value.\n\n>>> idx = pd.DatetimeIndex([pd.Timestamp('1940-04-25'),\n...                         pd.Timestamp(''), None, pd.NaT])\n>>> idx\nDatetimeIndex(['1940-04-25', 'NaT', 'NaT', 'NaT'],\n              dtype='datetime64[ns]', freq=None)\n>>> idx.isna()\narray([False,  True,  True,  True])"
  },
  {
    "symbol": "Index.isnull",
    "signature": "(self) -> 'npt.NDArray[np.bool_]'",
    "doc": "Detect missing values.\n\nReturn a boolean same-sized object indicating if the values are NA.\nNA values, such as ``None``, :attr:`numpy.NaN` or :attr:`pd.NaT`, get\nmapped to ``True`` values.\nEverything else get mapped to ``False`` values. Characters such as\nempty strings `''` or :attr:`numpy.inf` are not considered NA values.\n\nReturns\n-------\nnumpy.ndarray[bool]\n    A boolean array of whether my values are NA.\n\nSee Also\n--------\nIndex.notna : Boolean inverse of isna.\nIndex.dropna : Omit entries with missing values.\nisna : Top-level isna.\nSeries.isna : Detect missing values in Series object.\n\nExamples\n--------\nShow which entries in a pandas.Index are NA. The result is an\narray.\n\n>>> idx = pd.Index([5.2, 6.0, np.nan])\n>>> idx\nIndex([5.2, 6.0, nan], dtype='float64')\n>>> idx.isna()\narray([False, False,  True])\n\nEmpty strings are not considered NA values. None is considered an NA\nvalue.\n\n>>> idx = pd.Index(['black', '', 'red', None])\n>>> idx\nIndex(['black', '', 'red', None], dtype='object')\n>>> idx.isna()\narray([False, False, False,  True])\n\nFor datetimes, `NaT` (Not a Time) is considered as an NA value.\n\n>>> idx = pd.DatetimeIndex([pd.Timestamp('1940-04-25'),\n...                         pd.Timestamp(''), None, pd.NaT])\n>>> idx\nDatetimeIndex(['1940-04-25', 'NaT', 'NaT', 'NaT'],\n              dtype='datetime64[ns]', freq=None)\n>>> idx.isna()\narray([False,  True,  True,  True])"
  },
  {
    "symbol": "Index.item",
    "signature": "(self)",
    "doc": "Return the first element of the underlying data as a Python scalar.\n\nReturns\n-------\nscalar\n    The first element of Series or Index.\n\nRaises\n------\nValueError\n    If the data is not length = 1.\n\nExamples\n--------\n>>> s = pd.Series([1])\n>>> s.item()\n1\n\nFor an index:\n\n>>> s = pd.Series([1], index=['a'])\n>>> s.index.item()\n'a'"
  },
  {
    "symbol": "Index.join",
    "signature": "(self, other: 'Index', *, how: 'JoinHow' = 'left', level: 'Level | None' = None, return_indexers: 'bool' = False, sort: 'bool' = False) -> 'Index | tuple[Index, npt.NDArray[np.intp] | None, npt.NDArray[np.intp] | None]'",
    "doc": "Compute join_index and indexers to conform data structures to the new index.\n\nParameters\n----------\nother : Index\nhow : {'left', 'right', 'inner', 'outer'}\nlevel : int or level name, default None\nreturn_indexers : bool, default False\nsort : bool, default False\n    Sort the join keys lexicographically in the result Index. If False,\n    the order of the join keys depends on the join type (how keyword).\n\nReturns\n-------\njoin_index, (left_indexer, right_indexer)\n\nExamples\n--------\n>>> idx1 = pd.Index([1, 2, 3])\n>>> idx2 = pd.Index([4, 5, 6])\n>>> idx1.join(idx2, how='outer')\nIndex([1, 2, 3, 4, 5, 6], dtype='int64')"
  },
  {
    "symbol": "Index.map",
    "signature": "(self, mapper, na_action: \"Literal['ignore'] | None\" = None)",
    "doc": "Map values using an input mapping or function.\n\nParameters\n----------\nmapper : function, dict, or Series\n    Mapping correspondence.\nna_action : {None, 'ignore'}\n    If 'ignore', propagate NA values, without passing them to the\n    mapping correspondence.\n\nReturns\n-------\nUnion[Index, MultiIndex]\n    The output of the mapping function applied to the index.\n    If the function returns a tuple with more than one element\n    a MultiIndex will be returned.\n\nExamples\n--------\n>>> idx = pd.Index([1, 2, 3])\n>>> idx.map({1: 'a', 2: 'b', 3: 'c'})\nIndex(['a', 'b', 'c'], dtype='object')\n\nUsing `map` with a function:\n\n>>> idx = pd.Index([1, 2, 3])\n>>> idx.map('I am a {}'.format)\nIndex(['I am a 1', 'I am a 2', 'I am a 3'], dtype='object')\n\n>>> idx = pd.Index(['a', 'b', 'c'])\n>>> idx.map(lambda x: x.upper())\nIndex(['A', 'B', 'C'], dtype='object')"
  },
  {
    "symbol": "Index.max",
    "signature": "(self, axis=None, skipna: 'bool' = True, *args, **kwargs)",
    "doc": "Return the maximum value of the Index.\n\nParameters\n----------\naxis : int, optional\n    For compatibility with NumPy. Only 0 or None are allowed.\nskipna : bool, default True\n    Exclude NA/null values when showing the result.\n*args, **kwargs\n    Additional arguments and keywords for compatibility with NumPy.\n\nReturns\n-------\nscalar\n    Maximum value.\n\nSee Also\n--------\nIndex.min : Return the minimum value in an Index.\nSeries.max : Return the maximum value in a Series.\nDataFrame.max : Return the maximum values in a DataFrame.\n\nExamples\n--------\n>>> idx = pd.Index([3, 2, 1])\n>>> idx.max()\n3\n\n>>> idx = pd.Index(['c', 'b', 'a'])\n>>> idx.max()\n'c'\n\nFor a MultiIndex, the maximum is determined lexicographically.\n\n>>> idx = pd.MultiIndex.from_product([('a', 'b'), (2, 1)])\n>>> idx.max()\n('b', 2)"
  },
  {
    "symbol": "Index.memory_usage",
    "signature": "(self, deep: 'bool' = False) -> 'int'",
    "doc": "Memory usage of the values.\n\nParameters\n----------\ndeep : bool, default False\n    Introspect the data deeply, interrogate\n    `object` dtypes for system-level memory consumption.\n\nReturns\n-------\nbytes used\n\nSee Also\n--------\nnumpy.ndarray.nbytes : Total bytes consumed by the elements of the\n    array.\n\nNotes\n-----\nMemory usage does not include memory consumed by elements that\nare not components of the array if deep=False or if used on PyPy\n\nExamples\n--------\n>>> idx = pd.Index([1, 2, 3])\n>>> idx.memory_usage()\n24"
  },
  {
    "symbol": "Index.min",
    "signature": "(self, axis=None, skipna: 'bool' = True, *args, **kwargs)",
    "doc": "Return the minimum value of the Index.\n\nParameters\n----------\naxis : {None}\n    Dummy argument for consistency with Series.\nskipna : bool, default True\n    Exclude NA/null values when showing the result.\n*args, **kwargs\n    Additional arguments and keywords for compatibility with NumPy.\n\nReturns\n-------\nscalar\n    Minimum value.\n\nSee Also\n--------\nIndex.max : Return the maximum value of the object.\nSeries.min : Return the minimum value in a Series.\nDataFrame.min : Return the minimum values in a DataFrame.\n\nExamples\n--------\n>>> idx = pd.Index([3, 2, 1])\n>>> idx.min()\n1\n\n>>> idx = pd.Index(['c', 'b', 'a'])\n>>> idx.min()\n'a'\n\nFor a MultiIndex, the minimum is determined lexicographically.\n\n>>> idx = pd.MultiIndex.from_product([('a', 'b'), (2, 1)])\n>>> idx.min()\n('a', 1)"
  },
  {
    "symbol": "Index.name",
    "signature": "(property)",
    "doc": "\nReturn Index or MultiIndex name.\n\nExamples\n--------\n>>> idx = pd.Index([1, 2, 3], name='x')\n>>> idx\nIndex([1, 2, 3], dtype='int64',  name='x')\n>>> idx.name\n'x'\n"
  },
  {
    "symbol": "Index.names",
    "signature": "(property)",
    "doc": ""
  },
  {
    "symbol": "Index.nbytes",
    "signature": "(property)",
    "doc": "\nReturn the number of bytes in the underlying data.\n\nExamples\n--------\nFor Series:\n\n>>> s = pd.Series(['Ant', 'Bear', 'Cow'])\n>>> s\n0     Ant\n1    Bear\n2     Cow\ndtype: object\n>>> s.nbytes\n24\n\nFor Index:\n\n>>> idx = pd.Index([1, 2, 3])\n>>> idx\nIndex([1, 2, 3], dtype='int64')\n>>> idx.nbytes\n24\n"
  },
  {
    "symbol": "Index.ndim",
    "signature": "(property)",
    "doc": "\nNumber of dimensions of the underlying data, by definition 1.\n\nExamples\n--------\n>>> s = pd.Series(['Ant', 'Bear', 'Cow'])\n>>> s\n0     Ant\n1    Bear\n2     Cow\ndtype: object\n>>> s.ndim\n1\n\nFor Index:\n\n>>> idx = pd.Index([1, 2, 3])\n>>> idx\nIndex([1, 2, 3], dtype='int64')\n>>> idx.ndim\n1\n"
  },
  {
    "symbol": "Index.nlevels",
    "signature": "(property)",
    "doc": "\nNumber of levels.\n"
  },
  {
    "symbol": "Index.notna",
    "signature": "(self) -> 'npt.NDArray[np.bool_]'",
    "doc": "Detect existing (non-missing) values.\n\nReturn a boolean same-sized object indicating if the values are not NA.\nNon-missing values get mapped to ``True``. Characters such as empty\nstrings ``''`` or :attr:`numpy.inf` are not considered NA values.\nNA values, such as None or :attr:`numpy.NaN`, get mapped to ``False``\nvalues.\n\nReturns\n-------\nnumpy.ndarray[bool]\n    Boolean array to indicate which entries are not NA.\n\nSee Also\n--------\nIndex.notnull : Alias of notna.\nIndex.isna: Inverse of notna.\nnotna : Top-level notna.\n\nExamples\n--------\nShow which entries in an Index are not NA. The result is an\narray.\n\n>>> idx = pd.Index([5.2, 6.0, np.nan])\n>>> idx\nIndex([5.2, 6.0, nan], dtype='float64')\n>>> idx.notna()\narray([ True,  True, False])\n\nEmpty strings are not considered NA values. None is considered a NA\nvalue.\n\n>>> idx = pd.Index(['black', '', 'red', None])\n>>> idx\nIndex(['black', '', 'red', None], dtype='object')\n>>> idx.notna()\narray([ True,  True,  True, False])"
  },
  {
    "symbol": "Index.notnull",
    "signature": "(self) -> 'npt.NDArray[np.bool_]'",
    "doc": "Detect existing (non-missing) values.\n\nReturn a boolean same-sized object indicating if the values are not NA.\nNon-missing values get mapped to ``True``. Characters such as empty\nstrings ``''`` or :attr:`numpy.inf` are not considered NA values.\nNA values, such as None or :attr:`numpy.NaN`, get mapped to ``False``\nvalues.\n\nReturns\n-------\nnumpy.ndarray[bool]\n    Boolean array to indicate which entries are not NA.\n\nSee Also\n--------\nIndex.notnull : Alias of notna.\nIndex.isna: Inverse of notna.\nnotna : Top-level notna.\n\nExamples\n--------\nShow which entries in an Index are not NA. The result is an\narray.\n\n>>> idx = pd.Index([5.2, 6.0, np.nan])\n>>> idx\nIndex([5.2, 6.0, nan], dtype='float64')\n>>> idx.notna()\narray([ True,  True, False])\n\nEmpty strings are not considered NA values. None is considered a NA\nvalue.\n\n>>> idx = pd.Index(['black', '', 'red', None])\n>>> idx\nIndex(['black', '', 'red', None], dtype='object')\n>>> idx.notna()\narray([ True,  True,  True, False])"
  },
  {
    "symbol": "Index.nunique",
    "signature": "(self, dropna: 'bool' = True) -> 'int'",
    "doc": "Return number of unique elements in the object.\n\nExcludes NA values by default.\n\nParameters\n----------\ndropna : bool, default True\n    Don't include NaN in the count.\n\nReturns\n-------\nint\n\nSee Also\n--------\nDataFrame.nunique: Method nunique for DataFrame.\nSeries.count: Count non-NA/null observations in the Series.\n\nExamples\n--------\n>>> s = pd.Series([1, 3, 5, 7, 7])\n>>> s\n0    1\n1    3\n2    5\n3    7\n4    7\ndtype: int64\n\n>>> s.nunique()\n4"
  },
  {
    "symbol": "Index.putmask",
    "signature": "(self, mask, value) -> 'Index'",
    "doc": "Return a new Index of the values set with the mask.\n\nReturns\n-------\nIndex\n\nSee Also\n--------\nnumpy.ndarray.putmask : Changes elements of an array\n    based on conditional and input values.\n\nExamples\n--------\n>>> idx1 = pd.Index([1, 2, 3])\n>>> idx2 = pd.Index([5, 6, 7])\n>>> idx1.putmask([True, False, False], idx2)\nIndex([5, 2, 3], dtype='int64')"
  },
  {
    "symbol": "Index.ravel",
    "signature": "(self, order: 'str_t' = 'C') -> 'Self'",
    "doc": "Return a view on self.\n\nReturns\n-------\nIndex\n\nSee Also\n--------\nnumpy.ndarray.ravel : Return a flattened array.\n\nExamples\n--------\n>>> s = pd.Series([1, 2, 3], index=['a', 'b', 'c'])\n>>> s.index.ravel()\nIndex(['a', 'b', 'c'], dtype='object')"
  },
  {
    "symbol": "Index.reindex",
    "signature": "(self, target, method: 'ReindexMethod | None' = None, level=None, limit: 'int | None' = None, tolerance: 'float | None' = None) -> 'tuple[Index, npt.NDArray[np.intp] | None]'",
    "doc": "Create index with target's values.\n\nParameters\n----------\ntarget : an iterable\nmethod : {None, 'pad'/'ffill', 'backfill'/'bfill', 'nearest'}, optional\n    * default: exact matches only.\n    * pad / ffill: find the PREVIOUS index value if no exact match.\n    * backfill / bfill: use NEXT index value if no exact match\n    * nearest: use the NEAREST index value if no exact match. Tied\n      distances are broken by preferring the larger index value.\nlevel : int, optional\n    Level of multiindex.\nlimit : int, optional\n    Maximum number of consecutive labels in ``target`` to match for\n    inexact matches.\ntolerance : int or float, optional\n    Maximum distance between original and new labels for inexact\n    matches. The values of the index at the matching locations must\n    satisfy the equation ``abs(index[indexer] - target) <= tolerance``.\n\n    Tolerance may be a scalar value, which applies the same tolerance\n    to all values, or list-like, which applies variable tolerance per\n    element. List-like includes list, tuple, array, Series, and must be\n    the same size as the index and its dtype must exactly match the\n    index's type.\n\nReturns\n-------\nnew_index : pd.Index\n    Resulting index.\nindexer : np.ndarray[np.intp] or None\n    Indices of output values in original index.\n\nRaises\n------\nTypeError\n    If ``method`` passed along with ``level``.\nValueError\n    If non-unique multi-index\nValueError\n    If non-unique index and ``method`` or ``limit`` passed.\n\nSee Also\n--------\nSeries.reindex : Conform Series to new index with optional filling logic.\nDataFrame.reindex : Conform DataFrame to new index with optional filling logic.\n\nExamples\n--------\n>>> idx = pd.Index(['car', 'bike', 'train', 'tractor'])\n>>> idx\nIndex(['car', 'bike', 'train', 'tractor'], dtype='object')\n>>> idx.reindex(['car', 'bike'])\n(Index(['car', 'bike'], dtype='object'), array([0, 1]))"
  },
  {
    "symbol": "Index.rename",
    "signature": "(self, name, *, inplace: 'bool' = False) -> 'Self | None'",
    "doc": "Alter Index or MultiIndex name.\n\nAble to set new names without level. Defaults to returning new index.\nLength of names must match number of levels in MultiIndex.\n\nParameters\n----------\nname : label or list of labels\n    Name(s) to set.\ninplace : bool, default False\n    Modifies the object directly, instead of creating a new Index or\n    MultiIndex.\n\nReturns\n-------\nIndex or None\n    The same type as the caller or None if ``inplace=True``.\n\nSee Also\n--------\nIndex.set_names : Able to set new names partially and by level.\n\nExamples\n--------\n>>> idx = pd.Index(['A', 'C', 'A', 'B'], name='score')\n>>> idx.rename('grade')\nIndex(['A', 'C', 'A', 'B'], dtype='object', name='grade')\n\n>>> idx = pd.MultiIndex.from_product([['python', 'cobra'],\n...                                   [2018, 2019]],\n...                                   names=['kind', 'year'])\n>>> idx\nMultiIndex([('python', 2018),\n            ('python', 2019),\n            ( 'cobra', 2018),\n            ( 'cobra', 2019)],\n           names=['kind', 'year'])\n>>> idx.rename(['species', 'year'])\nMultiIndex([('python', 2018),\n            ('python', 2019),\n            ( 'cobra', 2018),\n            ( 'cobra', 2019)],\n           names=['species', 'year'])\n>>> idx.rename('species')\nTraceback (most recent call last):\nTypeError: Must pass list-like as `names`."
  },
  {
    "symbol": "Index.repeat",
    "signature": "(self, repeats, axis: 'None' = None) -> 'Self'",
    "doc": "Repeat elements of a Index.\n\nReturns a new Index where each element of the current Index\nis repeated consecutively a given number of times.\n\nParameters\n----------\nrepeats : int or array of ints\n    The number of repetitions for each element. This should be a\n    non-negative integer. Repeating 0 times will return an empty\n    Index.\naxis : None\n    Must be ``None``. Has no effect but is accepted for compatibility\n    with numpy.\n\nReturns\n-------\nIndex\n    Newly created Index with repeated elements.\n\nSee Also\n--------\nSeries.repeat : Equivalent function for Series.\nnumpy.repeat : Similar method for :class:`numpy.ndarray`.\n\nExamples\n--------\n>>> idx = pd.Index(['a', 'b', 'c'])\n>>> idx\nIndex(['a', 'b', 'c'], dtype='object')\n>>> idx.repeat(2)\nIndex(['a', 'a', 'b', 'b', 'c', 'c'], dtype='object')\n>>> idx.repeat([1, 2, 3])\nIndex(['a', 'b', 'b', 'c', 'c', 'c'], dtype='object')"
  },
  {
    "symbol": "Index.round",
    "signature": "(self, decimals: 'int' = 0) -> 'Self'",
    "doc": "Round each value in the Index to the given number of decimals.\n\nParameters\n----------\ndecimals : int, optional\n    Number of decimal places to round to. If decimals is negative,\n    it specifies the number of positions to the left of the decimal point.\n\nReturns\n-------\nIndex\n    A new Index with the rounded values.\n\nExamples\n--------\n>>> import pandas as pd\n>>> idx = pd.Index([10.1234, 20.5678, 30.9123, 40.4567, 50.7890])\n>>> idx.round(decimals=2)\nIndex([10.12, 20.57, 30.91, 40.46, 50.79], dtype='float64')"
  },
  {
    "symbol": "Index.searchsorted",
    "signature": "(self, value: 'NumpyValueArrayLike | ExtensionArray', side: \"Literal['left', 'right']\" = 'left', sorter: 'NumpySorter | None' = None) -> 'npt.NDArray[np.intp] | np.intp'",
    "doc": "Find indices where elements should be inserted to maintain order.\n\nFind the indices into a sorted Index `self` such that, if the\ncorresponding elements in `value` were inserted before the indices,\nthe order of `self` would be preserved.\n\n.. note::\n\n    The Index *must* be monotonically sorted, otherwise\n    wrong locations will likely be returned. Pandas does *not*\n    check this for you.\n\nParameters\n----------\nvalue : array-like or scalar\n    Values to insert into `self`.\nside : {'left', 'right'}, optional\n    If 'left', the index of the first suitable location found is given.\n    If 'right', return the last such index.  If there is no suitable\n    index, return either 0 or N (where N is the length of `self`).\nsorter : 1-D array-like, optional\n    Optional array of integer indices that sort `self` into ascending\n    order. They are typically the result of ``np.argsort``.\n\nReturns\n-------\nint or array of int\n    A scalar or array of insertion points with the\n    same shape as `value`.\n\nSee Also\n--------\nsort_values : Sort by the values along either axis.\nnumpy.searchsorted : Similar method from NumPy.\n\nNotes\n-----\nBinary search is used to find the required insertion points.\n\nExamples\n--------\n>>> ser = pd.Series([1, 2, 3])\n>>> ser\n0    1\n1    2\n2    3\ndtype: int64\n\n>>> ser.searchsorted(4)\n3\n\n>>> ser.searchsorted([0, 4])\narray([0, 3])\n\n>>> ser.searchsorted([1, 3], side='left')\narray([0, 2])\n\n>>> ser.searchsorted([1, 3], side='right')\narray([1, 3])\n\n>>> ser = pd.Series(pd.to_datetime(['3/11/2000', '3/12/2000', '3/13/2000']))\n>>> ser\n0   2000-03-11\n1   2000-03-12\n2   2000-03-13\ndtype: datetime64[ns]\n\n>>> ser.searchsorted('3/14/2000')\n3\n\n>>> ser = pd.Categorical(\n...     ['apple', 'bread', 'bread', 'cheese', 'milk'], ordered=True\n... )\n>>> ser\n['apple', 'bread', 'bread', 'cheese', 'milk']\nCategories (4, object): ['apple' < 'bread' < 'cheese' < 'milk']\n\n>>> ser.searchsorted('bread')\n1\n\n>>> ser.searchsorted(['bread'], side='right')\narray([3])\n\nIf the values are not monotonically sorted, wrong locations\nmay be returned:\n\n>>> ser = pd.Series([2, 1, 3])\n>>> ser\n0    2\n1    1\n2    3\ndtype: int64\n\n>>> ser.searchsorted(1)  # doctest: +SKIP\n0  # wrong result, correct would be 1"
  },
  {
    "symbol": "Index.set_names",
    "signature": "(self, names, *, level=None, inplace: 'bool' = False) -> 'Self | None'",
    "doc": "Set Index or MultiIndex name.\n\nAble to set new names partially and by level.\n\nParameters\n----------\n\nnames : label or list of label or dict-like for MultiIndex\n    Name(s) to set.\n\n    .. versionchanged:: 1.3.0\n\nlevel : int, label or list of int or label, optional\n    If the index is a MultiIndex and names is not dict-like, level(s) to set\n    (None for all levels). Otherwise level must be None.\n\n    .. versionchanged:: 1.3.0\n\ninplace : bool, default False\n    Modifies the object directly, instead of creating a new Index or\n    MultiIndex.\n\nReturns\n-------\nIndex or None\n    The same type as the caller or None if ``inplace=True``.\n\nSee Also\n--------\nIndex.rename : Able to set new names without level.\n\nExamples\n--------\n>>> idx = pd.Index([1, 2, 3, 4])\n>>> idx\nIndex([1, 2, 3, 4], dtype='int64')\n>>> idx.set_names('quarter')\nIndex([1, 2, 3, 4], dtype='int64', name='quarter')\n\n>>> idx = pd.MultiIndex.from_product([['python', 'cobra'],\n...                                   [2018, 2019]])\n>>> idx\nMultiIndex([('python', 2018),\n            ('python', 2019),\n            ( 'cobra', 2018),\n            ( 'cobra', 2019)],\n           )\n>>> idx = idx.set_names(['kind', 'year'])\n>>> idx.set_names('species', level=0)\nMultiIndex([('python', 2018),\n            ('python', 2019),\n            ( 'cobra', 2018),\n            ( 'cobra', 2019)],\n           names=['species', 'year'])\n\nWhen renaming levels with a dict, levels can not be passed.\n\n>>> idx.set_names({'kind': 'snake'})\nMultiIndex([('python', 2018),\n            ('python', 2019),\n            ( 'cobra', 2018),\n            ( 'cobra', 2019)],\n           names=['snake', 'year'])"
  },
  {
    "symbol": "Index.shape",
    "signature": "(property)",
    "doc": "\nReturn a tuple of the shape of the underlying data.\n\nExamples\n--------\n>>> idx = pd.Index([1, 2, 3])\n>>> idx\nIndex([1, 2, 3], dtype='int64')\n>>> idx.shape\n(3,)\n"
  },
  {
    "symbol": "Index.shift",
    "signature": "(self, periods: 'int' = 1, freq=None)",
    "doc": "Shift index by desired number of time frequency increments.\n\nThis method is for shifting the values of datetime-like indexes\nby a specified time increment a given number of times.\n\nParameters\n----------\nperiods : int, default 1\n    Number of periods (or increments) to shift by,\n    can be positive or negative.\nfreq : pandas.DateOffset, pandas.Timedelta or str, optional\n    Frequency increment to shift by.\n    If None, the index is shifted by its own `freq` attribute.\n    Offset aliases are valid strings, e.g., 'D', 'W', 'M' etc.\n\nReturns\n-------\npandas.Index\n    Shifted index.\n\nSee Also\n--------\nSeries.shift : Shift values of Series.\n\nNotes\n-----\nThis method is only implemented for datetime-like index classes,\ni.e., DatetimeIndex, PeriodIndex and TimedeltaIndex.\n\nExamples\n--------\nPut the first 5 month starts of 2011 into an index.\n\n>>> month_starts = pd.date_range('1/1/2011', periods=5, freq='MS')\n>>> month_starts\nDatetimeIndex(['2011-01-01', '2011-02-01', '2011-03-01', '2011-04-01',\n               '2011-05-01'],\n              dtype='datetime64[ns]', freq='MS')\n\nShift the index by 10 days.\n\n>>> month_starts.shift(10, freq='D')\nDatetimeIndex(['2011-01-11', '2011-02-11', '2011-03-11', '2011-04-11',\n               '2011-05-11'],\n              dtype='datetime64[ns]', freq=None)\n\nThe default value of `freq` is the `freq` attribute of the index,\nwhich is 'MS' (month start) in this example.\n\n>>> month_starts.shift(10)\nDatetimeIndex(['2011-11-01', '2011-12-01', '2012-01-01', '2012-02-01',\n               '2012-03-01'],\n              dtype='datetime64[ns]', freq='MS')"
  },
  {
    "symbol": "Index.size",
    "signature": "(property)",
    "doc": "\nReturn the number of elements in the underlying data.\n\nExamples\n--------\nFor Series:\n\n>>> s = pd.Series(['Ant', 'Bear', 'Cow'])\n>>> s\n0     Ant\n1    Bear\n2     Cow\ndtype: object\n>>> s.size\n3\n\nFor Index:\n\n>>> idx = pd.Index([1, 2, 3])\n>>> idx\nIndex([1, 2, 3], dtype='int64')\n>>> idx.size\n3\n"
  },
  {
    "symbol": "Index.slice_indexer",
    "signature": "(self, start: 'Hashable | None' = None, end: 'Hashable | None' = None, step: 'int | None' = None) -> 'slice'",
    "doc": "Compute the slice indexer for input labels and step.\n\nIndex needs to be ordered and unique.\n\nParameters\n----------\nstart : label, default None\n    If None, defaults to the beginning.\nend : label, default None\n    If None, defaults to the end.\nstep : int, default None\n\nReturns\n-------\nslice\n\nRaises\n------\nKeyError : If key does not exist, or key is not unique and index is\n    not ordered.\n\nNotes\n-----\nThis function assumes that the data is sorted, so use at your own peril\n\nExamples\n--------\nThis is a method on all index types. For example you can do:\n\n>>> idx = pd.Index(list('abcd'))\n>>> idx.slice_indexer(start='b', end='c')\nslice(1, 3, None)\n\n>>> idx = pd.MultiIndex.from_arrays([list('abcd'), list('efgh')])\n>>> idx.slice_indexer(start='b', end=('c', 'g'))\nslice(1, 3, None)"
  },
  {
    "symbol": "Index.slice_locs",
    "signature": "(self, start=None, end=None, step=None) -> 'tuple[int, int]'",
    "doc": "Compute slice locations for input labels.\n\nParameters\n----------\nstart : label, default None\n    If None, defaults to the beginning.\nend : label, default None\n    If None, defaults to the end.\nstep : int, defaults None\n    If None, defaults to 1.\n\nReturns\n-------\ntuple[int, int]\n\nSee Also\n--------\nIndex.get_loc : Get location for a single label.\n\nNotes\n-----\nThis method only works if the index is monotonic or unique.\n\nExamples\n--------\n>>> idx = pd.Index(list('abcd'))\n>>> idx.slice_locs(start='b', end='c')\n(1, 3)"
  },
  {
    "symbol": "Index.sort",
    "signature": "(self, *args, **kwargs)",
    "doc": "Use sort_values instead."
  },
  {
    "symbol": "Index.sort_values",
    "signature": "(self, *, return_indexer: 'bool' = False, ascending: 'bool' = True, na_position: 'NaPosition' = 'last', key: 'Callable | None' = None) -> 'Self | tuple[Self, np.ndarray]'",
    "doc": "Return a sorted copy of the index.\n\nReturn a sorted copy of the index, and optionally return the indices\nthat sorted the index itself.\n\nParameters\n----------\nreturn_indexer : bool, default False\n    Should the indices that would sort the index be returned.\nascending : bool, default True\n    Should the index values be sorted in an ascending order.\nna_position : {'first' or 'last'}, default 'last'\n    Argument 'first' puts NaNs at the beginning, 'last' puts NaNs at\n    the end.\nkey : callable, optional\n    If not None, apply the key function to the index values\n    before sorting. This is similar to the `key` argument in the\n    builtin :meth:`sorted` function, with the notable difference that\n    this `key` function should be *vectorized*. It should expect an\n    ``Index`` and return an ``Index`` of the same shape.\n\nReturns\n-------\nsorted_index : pandas.Index\n    Sorted copy of the index.\nindexer : numpy.ndarray, optional\n    The indices that the index itself was sorted by.\n\nSee Also\n--------\nSeries.sort_values : Sort values of a Series.\nDataFrame.sort_values : Sort values in a DataFrame.\n\nExamples\n--------\n>>> idx = pd.Index([10, 100, 1, 1000])\n>>> idx\nIndex([10, 100, 1, 1000], dtype='int64')\n\nSort values in ascending order (default behavior).\n\n>>> idx.sort_values()\nIndex([1, 10, 100, 1000], dtype='int64')\n\nSort values in descending order, and also get the indices `idx` was\nsorted by.\n\n>>> idx.sort_values(ascending=False, return_indexer=True)\n(Index([1000, 100, 10, 1], dtype='int64'), array([3, 1, 0, 2]))"
  },
  {
    "symbol": "Index.sortlevel",
    "signature": "(self, level=None, ascending: 'bool | list[bool]' = True, sort_remaining=None, na_position: 'NaPosition' = 'first')",
    "doc": "For internal compatibility with the Index API.\n\nSort the Index. This is for compat with MultiIndex\n\nParameters\n----------\nascending : bool, default True\n    False to sort in descending order\nna_position : {'first' or 'last'}, default 'first'\n    Argument 'first' puts NaNs at the beginning, 'last' puts NaNs at\n    the end.\n\n    .. versionadded:: 2.1.0\n\nlevel, sort_remaining are compat parameters\n\nReturns\n-------\nIndex"
  },
  {
    "symbol": "Index.symmetric_difference",
    "signature": "(self, other, result_name=None, sort=None)",
    "doc": "Compute the symmetric difference of two Index objects.\n\nParameters\n----------\nother : Index or array-like\nresult_name : str\nsort : bool or None, default None\n    Whether to sort the resulting index. By default, the\n    values are attempted to be sorted, but any TypeError from\n    incomparable elements is caught by pandas.\n\n    * None : Attempt to sort the result, but catch any TypeErrors\n      from comparing incomparable elements.\n    * False : Do not sort the result.\n    * True : Sort the result (which may raise TypeError).\n\nReturns\n-------\nIndex\n\nNotes\n-----\n``symmetric_difference`` contains elements that appear in either\n``idx1`` or ``idx2`` but not both. Equivalent to the Index created by\n``idx1.difference(idx2) | idx2.difference(idx1)`` with duplicates\ndropped.\n\nExamples\n--------\n>>> idx1 = pd.Index([1, 2, 3, 4])\n>>> idx2 = pd.Index([2, 3, 4, 5])\n>>> idx1.symmetric_difference(idx2)\nIndex([1, 5], dtype='int64')"
  },
  {
    "symbol": "Index.take",
    "signature": "(self, indices, axis: 'Axis' = 0, allow_fill: 'bool' = True, fill_value=None, **kwargs) -> 'Self'",
    "doc": "Return a new Index of the values selected by the indices.\n\nFor internal compatibility with numpy arrays.\n\nParameters\n----------\nindices : array-like\n    Indices to be taken.\naxis : int, optional\n    The axis over which to select values, always 0.\nallow_fill : bool, default True\nfill_value : scalar, default None\n    If allow_fill=True and fill_value is not None, indices specified by\n    -1 are regarded as NA. If Index doesn't hold NA, raise ValueError.\n\nReturns\n-------\nIndex\n    An index formed of elements at the given indices. Will be the same\n    type as self, except for RangeIndex.\n\nSee Also\n--------\nnumpy.ndarray.take: Return an array formed from the\n    elements of a at the given indices.\n\nExamples\n--------\n>>> idx = pd.Index(['a', 'b', 'c'])\n>>> idx.take([2, 2, 1, 2])\nIndex(['c', 'c', 'b', 'c'], dtype='object')"
  },
  {
    "symbol": "Index.to_flat_index",
    "signature": "(self) -> 'Self'",
    "doc": "Identity method.\n\nThis is implemented for compatibility with subclass implementations\nwhen chaining.\n\nReturns\n-------\npd.Index\n    Caller.\n\nSee Also\n--------\nMultiIndex.to_flat_index : Subclass implementation."
  },
  {
    "symbol": "Index.to_frame",
    "signature": "(self, index: 'bool' = True, name: 'Hashable' = <no_default>) -> 'DataFrame'",
    "doc": "Create a DataFrame with a column containing the Index.\n\nParameters\n----------\nindex : bool, default True\n    Set the index of the returned DataFrame as the original Index.\n\nname : object, defaults to index.name\n    The passed name should substitute for the index name (if it has\n    one).\n\nReturns\n-------\nDataFrame\n    DataFrame containing the original Index data.\n\nSee Also\n--------\nIndex.to_series : Convert an Index to a Series.\nSeries.to_frame : Convert Series to DataFrame.\n\nExamples\n--------\n>>> idx = pd.Index(['Ant', 'Bear', 'Cow'], name='animal')\n>>> idx.to_frame()\n       animal\nanimal\nAnt       Ant\nBear     Bear\nCow       Cow\n\nBy default, the original Index is reused. To enforce a new Index:\n\n>>> idx.to_frame(index=False)\n    animal\n0   Ant\n1  Bear\n2   Cow\n\nTo override the name of the resulting column, specify `name`:\n\n>>> idx.to_frame(index=False, name='zoo')\n    zoo\n0   Ant\n1  Bear\n2   Cow"
  },
  {
    "symbol": "Index.to_list",
    "signature": "(self)",
    "doc": "Return a list of the values.\n\nThese are each a scalar type, which is a Python scalar\n(for str, int, float) or a pandas scalar\n(for Timestamp/Timedelta/Interval/Period)\n\nReturns\n-------\nlist\n\nSee Also\n--------\nnumpy.ndarray.tolist : Return the array as an a.ndim-levels deep\n    nested list of Python scalars.\n\nExamples\n--------\nFor Series\n\n>>> s = pd.Series([1, 2, 3])\n>>> s.to_list()\n[1, 2, 3]\n\nFor Index:\n\n>>> idx = pd.Index([1, 2, 3])\n>>> idx\nIndex([1, 2, 3], dtype='int64')\n\n>>> idx.to_list()\n[1, 2, 3]"
  },
  {
    "symbol": "Index.to_numpy",
    "signature": "(self, dtype: 'npt.DTypeLike | None' = None, copy: 'bool' = False, na_value: 'object' = <no_default>, **kwargs) -> 'np.ndarray'",
    "doc": "A NumPy ndarray representing the values in this Series or Index.\n\nParameters\n----------\ndtype : str or numpy.dtype, optional\n    The dtype to pass to :meth:`numpy.asarray`.\ncopy : bool, default False\n    Whether to ensure that the returned value is not a view on\n    another array. Note that ``copy=False`` does not *ensure* that\n    ``to_numpy()`` is no-copy. Rather, ``copy=True`` ensure that\n    a copy is made, even if not strictly necessary.\nna_value : Any, optional\n    The value to use for missing values. The default value depends\n    on `dtype` and the type of the array.\n**kwargs\n    Additional keywords passed through to the ``to_numpy`` method\n    of the underlying array (for extension arrays).\n\nReturns\n-------\nnumpy.ndarray\n\nSee Also\n--------\nSeries.array : Get the actual data stored within.\nIndex.array : Get the actual data stored within.\nDataFrame.to_numpy : Similar method for DataFrame.\n\nNotes\n-----\nThe returned array will be the same up to equality (values equal\nin `self` will be equal in the returned array; likewise for values\nthat are not equal). When `self` contains an ExtensionArray, the\ndtype may be different. For example, for a category-dtype Series,\n``to_numpy()`` will return a NumPy array and the categorical dtype\nwill be lost.\n\nFor NumPy dtypes, this will be a reference to the actual data stored\nin this Series or Index (assuming ``copy=False``). Modifying the result\nin place will modify the data stored in the Series or Index (not that\nwe recommend doing that).\n\nFor extension types, ``to_numpy()`` *may* require copying data and\ncoercing the result to a NumPy type (possibly object), which may be\nexpensive. When you need a no-copy reference to the underlying data,\n:attr:`Series.array` should be used instead.\n\nThis table lays out the different dtypes and default return types of\n``to_numpy()`` for various dtypes within pandas.\n\n================== ================================\ndtype              array type\n================== ================================\ncategory[T]        ndarray[T] (same dtype as input)\nperiod             ndarray[object] (Periods)\ninterval           ndarray[object] (Intervals)\nIntegerNA          ndarray[object]\ndatetime64[ns]     datetime64[ns]\ndatetime64[ns, tz] ndarray[object] (Timestamps)\n================== ================================\n\nExamples\n--------\n>>> ser = pd.Series(pd.Categorical(['a', 'b', 'a']))\n>>> ser.to_numpy()\narray(['a', 'b', 'a'], dtype=object)\n\nSpecify the `dtype` to control how datetime-aware data is represented.\nUse ``dtype=object`` to return an ndarray of pandas :class:`Timestamp`\nobjects, each with the correct ``tz``.\n\n>>> ser = pd.Series(pd.date_range('2000', periods=2, tz=\"CET\"))\n>>> ser.to_numpy(dtype=object)\narray([Timestamp('2000-01-01 00:00:00+0100', tz='CET'),\n       Timestamp('2000-01-02 00:00:00+0100', tz='CET')],\n      dtype=object)\n\nOr ``dtype='datetime64[ns]'`` to return an ndarray of native\ndatetime64 values. The values are converted to UTC and the timezone\ninfo is dropped.\n\n>>> ser.to_numpy(dtype=\"datetime64[ns]\")\n... # doctest: +ELLIPSIS\narray(['1999-12-31T23:00:00.000000000', '2000-01-01T23:00:00...'],\n      dtype='datetime64[ns]')"
  },
  {
    "symbol": "Index.to_series",
    "signature": "(self, index=None, name: 'Hashable | None' = None) -> 'Series'",
    "doc": "Create a Series with both index and values equal to the index keys.\n\nUseful with map for returning an indexer based on an index.\n\nParameters\n----------\nindex : Index, optional\n    Index of resulting Series. If None, defaults to original index.\nname : str, optional\n    Name of resulting Series. If None, defaults to name of original\n    index.\n\nReturns\n-------\nSeries\n    The dtype will be based on the type of the Index values.\n\nSee Also\n--------\nIndex.to_frame : Convert an Index to a DataFrame.\nSeries.to_frame : Convert Series to DataFrame.\n\nExamples\n--------\n>>> idx = pd.Index(['Ant', 'Bear', 'Cow'], name='animal')\n\nBy default, the original index and original name is reused.\n\n>>> idx.to_series()\nanimal\nAnt      Ant\nBear    Bear\nCow      Cow\nName: animal, dtype: object\n\nTo enforce a new index, specify new labels to ``index``:\n\n>>> idx.to_series(index=[0, 1, 2])\n0     Ant\n1    Bear\n2     Cow\nName: animal, dtype: object\n\nTo override the name of the resulting column, specify ``name``:\n\n>>> idx.to_series(name='zoo')\nanimal\nAnt      Ant\nBear    Bear\nCow      Cow\nName: zoo, dtype: object"
  },
  {
    "symbol": "Index.tolist",
    "signature": "(self)",
    "doc": "Return a list of the values.\n\nThese are each a scalar type, which is a Python scalar\n(for str, int, float) or a pandas scalar\n(for Timestamp/Timedelta/Interval/Period)\n\nReturns\n-------\nlist\n\nSee Also\n--------\nnumpy.ndarray.tolist : Return the array as an a.ndim-levels deep\n    nested list of Python scalars.\n\nExamples\n--------\nFor Series\n\n>>> s = pd.Series([1, 2, 3])\n>>> s.to_list()\n[1, 2, 3]\n\nFor Index:\n\n>>> idx = pd.Index([1, 2, 3])\n>>> idx\nIndex([1, 2, 3], dtype='int64')\n\n>>> idx.to_list()\n[1, 2, 3]"
  },
  {
    "symbol": "Index.transpose",
    "signature": "(self, *args, **kwargs) -> 'Self'",
    "doc": "Return the transpose, which is by definition self.\n\nReturns\n-------\n%(klass)s"
  },
  {
    "symbol": "Index.union",
    "signature": "(self, other, sort=None)",
    "doc": "Form the union of two Index objects.\n\nIf the Index objects are incompatible, both Index objects will be\ncast to dtype('object') first.\n\nParameters\n----------\nother : Index or array-like\nsort : bool or None, default None\n    Whether to sort the resulting Index.\n\n    * None : Sort the result, except when\n\n      1. `self` and `other` are equal.\n      2. `self` or `other` has length 0.\n      3. Some values in `self` or `other` cannot be compared.\n         A RuntimeWarning is issued in this case.\n\n    * False : do not sort the result.\n    * True : Sort the result (which may raise TypeError).\n\nReturns\n-------\nIndex\n\nExamples\n--------\nUnion matching dtypes\n\n>>> idx1 = pd.Index([1, 2, 3, 4])\n>>> idx2 = pd.Index([3, 4, 5, 6])\n>>> idx1.union(idx2)\nIndex([1, 2, 3, 4, 5, 6], dtype='int64')\n\nUnion mismatched dtypes\n\n>>> idx1 = pd.Index(['a', 'b', 'c', 'd'])\n>>> idx2 = pd.Index([1, 2, 3, 4])\n>>> idx1.union(idx2)\nIndex(['a', 'b', 'c', 'd', 1, 2, 3, 4], dtype='object')\n\nMultiIndex case\n\n>>> idx1 = pd.MultiIndex.from_arrays(\n...     [[1, 1, 2, 2], [\"Red\", \"Blue\", \"Red\", \"Blue\"]]\n... )\n>>> idx1\nMultiIndex([(1,  'Red'),\n    (1, 'Blue'),\n    (2,  'Red'),\n    (2, 'Blue')],\n   )\n>>> idx2 = pd.MultiIndex.from_arrays(\n...     [[3, 3, 2, 2], [\"Red\", \"Green\", \"Red\", \"Green\"]]\n... )\n>>> idx2\nMultiIndex([(3,   'Red'),\n    (3, 'Green'),\n    (2,   'Red'),\n    (2, 'Green')],\n   )\n>>> idx1.union(idx2)\nMultiIndex([(1,  'Blue'),\n    (1,   'Red'),\n    (2,  'Blue'),\n    (2, 'Green'),\n    (2,   'Red'),\n    (3, 'Green'),\n    (3,   'Red')],\n   )\n>>> idx1.union(idx2, sort=False)\nMultiIndex([(1,   'Red'),\n    (1,  'Blue'),\n    (2,   'Red'),\n    (2,  'Blue'),\n    (3,   'Red'),\n    (3, 'Green'),\n    (2, 'Green')],\n   )"
  },
  {
    "symbol": "Index.unique",
    "signature": "(self, level: 'Hashable | None' = None) -> 'Self'",
    "doc": "Return unique values in the index.\n\nUnique values are returned in order of appearance, this does NOT sort.\n\nParameters\n----------\nlevel : int or hashable, optional\n    Only return values from specified level (for MultiIndex).\n    If int, gets the level by integer position, else by level name.\n\nReturns\n-------\nIndex\n\nSee Also\n--------\nunique : Numpy array of unique values in that column.\nSeries.unique : Return unique values of Series object.\n\nExamples\n--------\n>>> idx = pd.Index([1, 1, 2, 3, 3])\n>>> idx.unique()\nIndex([1, 2, 3], dtype='int64')"
  },
  {
    "symbol": "Index.value_counts",
    "signature": "(self, normalize: 'bool' = False, sort: 'bool' = True, ascending: 'bool' = False, bins=None, dropna: 'bool' = True) -> 'Series'",
    "doc": "Return a Series containing counts of unique values.\n\nThe resulting object will be in descending order so that the\nfirst element is the most frequently-occurring element.\nExcludes NA values by default.\n\nParameters\n----------\nnormalize : bool, default False\n    If True then the object returned will contain the relative\n    frequencies of the unique values.\nsort : bool, default True\n    Sort by frequencies when True. Preserve the order of the data when False.\nascending : bool, default False\n    Sort in ascending order.\nbins : int, optional\n    Rather than count values, group them into half-open bins,\n    a convenience for ``pd.cut``, only works with numeric data.\ndropna : bool, default True\n    Don't include counts of NaN.\n\nReturns\n-------\nSeries\n\nSee Also\n--------\nSeries.count: Number of non-NA elements in a Series.\nDataFrame.count: Number of non-NA elements in a DataFrame.\nDataFrame.value_counts: Equivalent method on DataFrames.\n\nExamples\n--------\n>>> index = pd.Index([3, 1, 2, 3, 4, np.nan])\n>>> index.value_counts()\n3.0    2\n1.0    1\n2.0    1\n4.0    1\nName: count, dtype: int64\n\nWith `normalize` set to `True`, returns the relative frequency by\ndividing all values by the sum of values.\n\n>>> s = pd.Series([3, 1, 2, 3, 4, np.nan])\n>>> s.value_counts(normalize=True)\n3.0    0.4\n1.0    0.2\n2.0    0.2\n4.0    0.2\nName: proportion, dtype: float64\n\n**bins**\n\nBins can be useful for going from a continuous variable to a\ncategorical variable; instead of counting unique\napparitions of values, divide the index in the specified\nnumber of half-open bins.\n\n>>> s.value_counts(bins=3)\n(0.996, 2.0]    2\n(2.0, 3.0]      2\n(3.0, 4.0]      1\nName: count, dtype: int64\n\n**dropna**\n\nWith `dropna` set to `False` we can also see NaN index values.\n\n>>> s.value_counts(dropna=False)\n3.0    2\n1.0    1\n2.0    1\n4.0    1\nNaN    1\nName: count, dtype: int64"
  },
  {
    "symbol": "Index.values",
    "signature": "(property)",
    "doc": "\nReturn an array representing the data in the Index.\n\n.. warning::\n\n   We recommend using :attr:`Index.array` or\n   :meth:`Index.to_numpy`, depending on whether you need\n   a reference to the underlying data or a NumPy array.\n\nReturns\n-------\narray: numpy.ndarray or ExtensionArray\n\nSee Also\n--------\nIndex.array : Reference to the underlying data.\nIndex.to_numpy : A NumPy array representing the underlying data.\n\nExamples\n--------\nFor :class:`pandas.Index`:\n\n>>> idx = pd.Index([1, 2, 3])\n>>> idx\nIndex([1, 2, 3], dtype='int64')\n>>> idx.values\narray([1, 2, 3])\n\nFor :class:`pandas.IntervalIndex`:\n\n>>> idx = pd.interval_range(start=0, end=5)\n>>> idx.values\n<IntervalArray>\n[(0, 1], (1, 2], (2, 3], (3, 4], (4, 5]]\nLength: 5, dtype: interval[int64, right]\n"
  },
  {
    "symbol": "Index.view",
    "signature": "(self, cls=None)",
    "doc": ""
  },
  {
    "symbol": "Index.where",
    "signature": "(self, cond, other=None) -> 'Index'",
    "doc": "Replace values where the condition is False.\n\nThe replacement is taken from other.\n\nParameters\n----------\ncond : bool array-like with the same length as self\n    Condition to select the values on.\nother : scalar, or array-like, default None\n    Replacement if the condition is False.\n\nReturns\n-------\npandas.Index\n    A copy of self with values replaced from other\n    where the condition is False.\n\nSee Also\n--------\nSeries.where : Same method for Series.\nDataFrame.where : Same method for DataFrame.\n\nExamples\n--------\n>>> idx = pd.Index(['car', 'bike', 'train', 'tractor'])\n>>> idx\nIndex(['car', 'bike', 'train', 'tractor'], dtype='object')\n>>> idx.where(idx.isin(['car', 'train']), 'other')\nIndex(['car', 'other', 'train', 'other'], dtype='object')"
  },
  {
    "symbol": "MultiIndex",
    "signature": "(levels=None, codes=None, sortorder=None, names=None, dtype=None, copy: 'bool' = False, name=None, verify_integrity: 'bool' = True) -> 'Self'",
    "doc": "A multi-level, or hierarchical, index object for pandas objects.\n\nParameters\n----------\nlevels : sequence of arrays\n    The unique labels for each level.\ncodes : sequence of arrays\n    Integers for each level designating which label at each location.\nsortorder : optional int\n    Level of sortedness (must be lexicographically sorted by that\n    level).\nnames : optional sequence of objects\n    Names for each of the index levels. (name is accepted for compat).\ncopy : bool, default False\n    Copy the meta-data.\nverify_integrity : bool, default True\n    Check that the levels/codes are consistent and valid.\n\nAttributes\n----------\nnames\nlevels\ncodes\nnlevels\nlevshape\ndtypes\n\nMethods\n-------\nfrom_arrays\nfrom_tuples\nfrom_product\nfrom_frame\nset_levels\nset_codes\nto_frame\nto_flat_index\nsortlevel\ndroplevel\nswaplevel\nreorder_levels\nremove_unused_levels\nget_level_values\nget_indexer\nget_loc\nget_locs\nget_loc_level\ndrop\n\nSee Also\n--------\nMultiIndex.from_arrays  : Convert list of arrays to MultiIndex.\nMultiIndex.from_product : Create a MultiIndex from the cartesian product\n                          of iterables.\nMultiIndex.from_tuples  : Convert list of tuples to a MultiIndex.\nMultiIndex.from_frame   : Make a MultiIndex from a DataFrame.\nIndex : The base pandas Index type.\n\nNotes\n-----\nSee the `user guide\n<https://pandas.pydata.org/pandas-docs/stable/user_guide/advanced.html>`__\nfor more.\n\nExamples\n--------\nA new ``MultiIndex`` is typically constructed using one of the helper\nmethods :meth:`MultiIndex.from_arrays`, :meth:`MultiIndex.from_product`\nand :meth:`MultiIndex.from_tuples`. For example (using ``.from_arrays``):\n\n>>> arrays = [[1, 1, 2, 2], ['red', 'blue', 'red', 'blue']]\n>>> pd.MultiIndex.from_arrays(arrays, names=('number', 'color'))\nMultiIndex([(1,  'red'),\n            (1, 'blue'),\n            (2,  'red'),\n            (2, 'blue')],\n           names=['number', 'color'])\n\nSee further examples for how to construct a MultiIndex in the doc strings\nof the mentioned helper methods."
  },
  {
    "symbol": "MultiIndex.T",
    "signature": "(property)",
    "doc": "\n        Return the transpose, which is by definition self.\n\n        Examples\n        --------\n        For Series:\n\n        >>> s = pd.Series(['Ant', 'Bear', 'Cow'])\n        >>> s\n        0     Ant\n        1    Bear\n        2     Cow\n        dtype: object\n        >>> s.T\n        0     Ant\n        1    Bear\n        2     Cow\n        dtype: object\n\n        For Index:\n\n        >>> idx = pd.Index([1, 2, 3])\n        >>> idx.T\n        Index([1, 2, 3], dtype='int64')\n        "
  },
  {
    "symbol": "MultiIndex.all",
    "signature": "(self, *args, **kwargs)",
    "doc": "Return whether all elements are Truthy.\n\nParameters\n----------\n*args\n    Required for compatibility with numpy.\n**kwargs\n    Required for compatibility with numpy.\n\nReturns\n-------\nbool or array-like (if axis is specified)\n    A single element array-like may be converted to bool.\n\nSee Also\n--------\nIndex.any : Return whether any element in an Index is True.\nSeries.any : Return whether any element in a Series is True.\nSeries.all : Return whether all elements in a Series are True.\n\nNotes\n-----\nNot a Number (NaN), positive infinity and negative infinity\nevaluate to True because these are not equal to zero.\n\nExamples\n--------\nTrue, because nonzero integers are considered True.\n\n>>> pd.Index([1, 2, 3]).all()\nTrue\n\nFalse, because ``0`` is considered False.\n\n>>> pd.Index([0, 1, 2]).all()\nFalse"
  },
  {
    "symbol": "MultiIndex.any",
    "signature": "(self, *args, **kwargs)",
    "doc": "Return whether any element is Truthy.\n\nParameters\n----------\n*args\n    Required for compatibility with numpy.\n**kwargs\n    Required for compatibility with numpy.\n\nReturns\n-------\nbool or array-like (if axis is specified)\n    A single element array-like may be converted to bool.\n\nSee Also\n--------\nIndex.all : Return whether all elements are True.\nSeries.all : Return whether all elements are True.\n\nNotes\n-----\nNot a Number (NaN), positive infinity and negative infinity\nevaluate to True because these are not equal to zero.\n\nExamples\n--------\n>>> index = pd.Index([0, 1, 2])\n>>> index.any()\nTrue\n\n>>> index = pd.Index([0, 0, 0])\n>>> index.any()\nFalse"
  },
  {
    "symbol": "MultiIndex.append",
    "signature": "(self, other)",
    "doc": "Append a collection of Index options together.\n\nParameters\n----------\nother : Index or list/tuple of indices\n\nReturns\n-------\nIndex\n    The combined index.\n\nExamples\n--------\n>>> mi = pd.MultiIndex.from_arrays([['a'], ['b']])\n>>> mi\nMultiIndex([('a', 'b')],\n           )\n>>> mi.append(mi)\nMultiIndex([('a', 'b'), ('a', 'b')],\n           )"
  },
  {
    "symbol": "MultiIndex.argmax",
    "signature": "(self, axis=None, skipna: 'bool' = True, *args, **kwargs) -> 'int'",
    "doc": "Return int position of the largest value in the Series.\n\nIf the maximum is achieved in multiple locations,\nthe first row position is returned.\n\nParameters\n----------\naxis : {None}\n    Unused. Parameter needed for compatibility with DataFrame.\nskipna : bool, default True\n    Exclude NA/null values when showing the result.\n*args, **kwargs\n    Additional arguments and keywords for compatibility with NumPy.\n\nReturns\n-------\nint\n    Row position of the maximum value.\n\nSee Also\n--------\nSeries.argmax : Return position of the maximum value.\nSeries.argmin : Return position of the minimum value.\nnumpy.ndarray.argmax : Equivalent method for numpy arrays.\nSeries.idxmax : Return index label of the maximum values.\nSeries.idxmin : Return index label of the minimum values.\n\nExamples\n--------\nConsider dataset containing cereal calories\n\n>>> s = pd.Series({'Corn Flakes': 100.0, 'Almond Delight': 110.0,\n...                'Cinnamon Toast Crunch': 120.0, 'Cocoa Puff': 110.0})\n>>> s\nCorn Flakes              100.0\nAlmond Delight           110.0\nCinnamon Toast Crunch    120.0\nCocoa Puff               110.0\ndtype: float64\n\n>>> s.argmax()\n2\n>>> s.argmin()\n0\n\nThe maximum cereal calories is the third element and\nthe minimum cereal calories is the first element,\nsince series is zero-indexed."
  },
  {
    "symbol": "MultiIndex.argmin",
    "signature": "(self, axis=None, skipna: 'bool' = True, *args, **kwargs) -> 'int'",
    "doc": "Return int position of the smallest value in the Series.\n\nIf the minimum is achieved in multiple locations,\nthe first row position is returned.\n\nParameters\n----------\naxis : {None}\n    Unused. Parameter needed for compatibility with DataFrame.\nskipna : bool, default True\n    Exclude NA/null values when showing the result.\n*args, **kwargs\n    Additional arguments and keywords for compatibility with NumPy.\n\nReturns\n-------\nint\n    Row position of the minimum value.\n\nSee Also\n--------\nSeries.argmin : Return position of the minimum value.\nSeries.argmax : Return position of the maximum value.\nnumpy.ndarray.argmin : Equivalent method for numpy arrays.\nSeries.idxmax : Return index label of the maximum values.\nSeries.idxmin : Return index label of the minimum values.\n\nExamples\n--------\nConsider dataset containing cereal calories\n\n>>> s = pd.Series({'Corn Flakes': 100.0, 'Almond Delight': 110.0,\n...                'Cinnamon Toast Crunch': 120.0, 'Cocoa Puff': 110.0})\n>>> s\nCorn Flakes              100.0\nAlmond Delight           110.0\nCinnamon Toast Crunch    120.0\nCocoa Puff               110.0\ndtype: float64\n\n>>> s.argmax()\n2\n>>> s.argmin()\n0\n\nThe maximum cereal calories is the third element and\nthe minimum cereal calories is the first element,\nsince series is zero-indexed."
  },
  {
    "symbol": "MultiIndex.argsort",
    "signature": "(self, *args, na_position: 'str' = 'last', **kwargs) -> 'npt.NDArray[np.intp]'",
    "doc": "Return the integer indices that would sort the index.\n\nParameters\n----------\n*args\n    Passed to `numpy.ndarray.argsort`.\n**kwargs\n    Passed to `numpy.ndarray.argsort`.\n\nReturns\n-------\nnp.ndarray[np.intp]\n    Integer indices that would sort the index if used as\n    an indexer.\n\nSee Also\n--------\nnumpy.argsort : Similar method for NumPy arrays.\nIndex.sort_values : Return sorted copy of Index.\n\nExamples\n--------\n>>> idx = pd.Index(['b', 'a', 'd', 'c'])\n>>> idx\nIndex(['b', 'a', 'd', 'c'], dtype='object')\n\n>>> order = idx.argsort()\n>>> order\narray([1, 0, 3, 2])\n\n>>> idx[order]\nIndex(['a', 'b', 'c', 'd'], dtype='object')"
  },
  {
    "symbol": "MultiIndex.array",
    "signature": "(property)",
    "doc": "\nRaises a ValueError for `MultiIndex` because there's no single\narray backing a MultiIndex.\n\nRaises\n------\nValueError\n"
  },
  {
    "symbol": "MultiIndex.asof",
    "signature": "(self, label)",
    "doc": "Return the label from the index, or, if not present, the previous one.\n\nAssuming that the index is sorted, return the passed index label if it\nis in the index, or return the previous index label if the passed one\nis not in the index.\n\nParameters\n----------\nlabel : object\n    The label up to which the method returns the latest index label.\n\nReturns\n-------\nobject\n    The passed label if it is in the index. The previous label if the\n    passed label is not in the sorted index or `NaN` if there is no\n    such label.\n\nSee Also\n--------\nSeries.asof : Return the latest value in a Series up to the\n    passed index.\nmerge_asof : Perform an asof merge (similar to left join but it\n    matches on nearest key rather than equal key).\nIndex.get_loc : An `asof` is a thin wrapper around `get_loc`\n    with method='pad'.\n\nExamples\n--------\n`Index.asof` returns the latest index label up to the passed label.\n\n>>> idx = pd.Index(['2013-12-31', '2014-01-02', '2014-01-03'])\n>>> idx.asof('2014-01-01')\n'2013-12-31'\n\nIf the label is in the index, the method returns the passed label.\n\n>>> idx.asof('2014-01-02')\n'2014-01-02'\n\nIf all of the labels in the index are later than the passed label,\nNaN is returned.\n\n>>> idx.asof('1999-01-02')\nnan\n\nIf the index is not sorted, an error is raised.\n\n>>> idx_not_sorted = pd.Index(['2013-12-31', '2015-01-02',\n...                            '2014-01-03'])\n>>> idx_not_sorted.asof('2013-12-31')\nTraceback (most recent call last):\nValueError: index must be monotonic increasing or decreasing"
  },
  {
    "symbol": "MultiIndex.asof_locs",
    "signature": "(self, where: 'Index', mask: 'npt.NDArray[np.bool_]') -> 'npt.NDArray[np.intp]'",
    "doc": "Return the locations (indices) of labels in the index.\n\nAs in the :meth:`pandas.Index.asof`, if the label (a particular entry in\n``where``) is not in the index, the latest index label up to the\npassed label is chosen and its index returned.\n\nIf all of the labels in the index are later than a label in ``where``,\n-1 is returned.\n\n``mask`` is used to ignore ``NA`` values in the index during calculation.\n\nParameters\n----------\nwhere : Index\n    An Index consisting of an array of timestamps.\nmask : np.ndarray[bool]\n    Array of booleans denoting where values in the original\n    data are not ``NA``.\n\nReturns\n-------\nnp.ndarray[np.intp]\n    An array of locations (indices) of the labels from the index\n    which correspond to the return values of :meth:`pandas.Index.asof`\n    for every element in ``where``.\n\nSee Also\n--------\nIndex.asof : Return the label from the index, or, if not present, the\n    previous one.\n\nExamples\n--------\n>>> idx = pd.date_range('2023-06-01', periods=3, freq='D')\n>>> where = pd.DatetimeIndex(['2023-05-30 00:12:00', '2023-06-01 00:00:00',\n...                           '2023-06-02 23:59:59'])\n>>> mask = np.ones(3, dtype=bool)\n>>> idx.asof_locs(where, mask)\narray([-1,  0,  1])\n\nWe can use ``mask`` to ignore certain values in the index during calculation.\n\n>>> mask[1] = False\n>>> idx.asof_locs(where, mask)\narray([-1,  0,  0])"
  },
  {
    "symbol": "MultiIndex.astype",
    "signature": "(self, dtype, copy: 'bool' = True)",
    "doc": "Create an Index with values cast to dtypes.\n\nThe class of a new Index is determined by dtype. When conversion is\nimpossible, a TypeError exception is raised.\n\nParameters\n----------\ndtype : numpy dtype or pandas type\n    Note that any signed integer `dtype` is treated as ``'int64'``,\n    and any unsigned integer `dtype` is treated as ``'uint64'``,\n    regardless of the size.\ncopy : bool, default True\n    By default, astype always returns a newly allocated object.\n    If copy is set to False and internal requirements on dtype are\n    satisfied, the original data is used to create a new Index\n    or the original Index is returned.\n\nReturns\n-------\nIndex\n    Index with values cast to specified dtype.\n\nExamples\n--------\n>>> idx = pd.Index([1, 2, 3])\n>>> idx\nIndex([1, 2, 3], dtype='int64')\n>>> idx.astype('float')\nIndex([1.0, 2.0, 3.0], dtype='float64')"
  },
  {
    "symbol": "MultiIndex.codes",
    "signature": "(property)",
    "doc": ""
  },
  {
    "symbol": "MultiIndex.copy",
    "signature": "(self, names=None, deep: 'bool' = False, name=None) -> 'Self'",
    "doc": "Make a copy of this object.\n\nNames, dtype, levels and codes can be passed and will be set on new copy.\n\nParameters\n----------\nnames : sequence, optional\ndeep : bool, default False\nname : Label\n    Kept for compatibility with 1-dimensional Index. Should not be used.\n\nReturns\n-------\nMultiIndex\n\nNotes\n-----\nIn most cases, there should be no functional difference from using\n``deep``, but if ``deep`` is passed it will attempt to deepcopy.\nThis could be potentially expensive on large MultiIndex objects.\n\nExamples\n--------\n>>> mi = pd.MultiIndex.from_arrays([['a'], ['b'], ['c']])\n>>> mi\nMultiIndex([('a', 'b', 'c')],\n           )\n>>> mi.copy()\nMultiIndex([('a', 'b', 'c')],\n           )"
  },
  {
    "symbol": "MultiIndex.delete",
    "signature": "(self, loc) -> 'MultiIndex'",
    "doc": "Make new index with passed location deleted\n\nReturns\n-------\nnew_index : MultiIndex"
  },
  {
    "symbol": "MultiIndex.diff",
    "signature": "(self, periods: 'int' = 1) -> 'Index'",
    "doc": "Computes the difference between consecutive values in the Index object.\n\nIf periods is greater than 1, computes the difference between values that\nare `periods` number of positions apart.\n\nParameters\n----------\nperiods : int, optional\n    The number of positions between the current and previous\n    value to compute the difference with. Default is 1.\n\nReturns\n-------\nIndex\n    A new Index object with the computed differences.\n\nExamples\n--------\n>>> import pandas as pd\n>>> idx = pd.Index([10, 20, 30, 40, 50])\n>>> idx.diff()\nIndex([nan, 10.0, 10.0, 10.0, 10.0], dtype='float64')"
  },
  {
    "symbol": "MultiIndex.difference",
    "signature": "(self, other, sort=None)",
    "doc": "Return a new Index with elements of index not in `other`.\n\nThis is the set difference of two Index objects.\n\nParameters\n----------\nother : Index or array-like\nsort : bool or None, default None\n    Whether to sort the resulting index. By default, the\n    values are attempted to be sorted, but any TypeError from\n    incomparable elements is caught by pandas.\n\n    * None : Attempt to sort the result, but catch any TypeErrors\n      from comparing incomparable elements.\n    * False : Do not sort the result.\n    * True : Sort the result (which may raise TypeError).\n\nReturns\n-------\nIndex\n\nExamples\n--------\n>>> idx1 = pd.Index([2, 1, 3, 4])\n>>> idx2 = pd.Index([3, 4, 5, 6])\n>>> idx1.difference(idx2)\nIndex([1, 2], dtype='int64')\n>>> idx1.difference(idx2, sort=False)\nIndex([2, 1], dtype='int64')"
  },
  {
    "symbol": "MultiIndex.drop",
    "signature": "(self, codes, level: 'Index | np.ndarray | Iterable[Hashable] | None' = None, errors: 'IgnoreRaise' = 'raise') -> 'MultiIndex'",
    "doc": "Make a new :class:`pandas.MultiIndex` with the passed list of codes deleted.\n\nParameters\n----------\ncodes : array-like\n    Must be a list of tuples when ``level`` is not specified.\nlevel : int or level name, default None\nerrors : str, default 'raise'\n\nReturns\n-------\nMultiIndex\n\nExamples\n--------\n>>> idx = pd.MultiIndex.from_product([(0, 1, 2), ('green', 'purple')],\n...                                  names=[\"number\", \"color\"])\n>>> idx\nMultiIndex([(0,  'green'),\n            (0, 'purple'),\n            (1,  'green'),\n            (1, 'purple'),\n            (2,  'green'),\n            (2, 'purple')],\n           names=['number', 'color'])\n>>> idx.drop([(1, 'green'), (2, 'purple')])\nMultiIndex([(0,  'green'),\n            (0, 'purple'),\n            (1, 'purple'),\n            (2,  'green')],\n           names=['number', 'color'])\n\nWe can also drop from a specific level.\n\n>>> idx.drop('green', level='color')\nMultiIndex([(0, 'purple'),\n            (1, 'purple'),\n            (2, 'purple')],\n           names=['number', 'color'])\n\n>>> idx.drop([1, 2], level=0)\nMultiIndex([(0,  'green'),\n            (0, 'purple')],\n           names=['number', 'color'])"
  },
  {
    "symbol": "MultiIndex.drop_duplicates",
    "signature": "(self, *, keep: 'DropKeep' = 'first') -> 'Self'",
    "doc": "Return Index with duplicate values removed.\n\nParameters\n----------\nkeep : {'first', 'last', ``False``}, default 'first'\n    - 'first' : Drop duplicates except for the first occurrence.\n    - 'last' : Drop duplicates except for the last occurrence.\n    - ``False`` : Drop all duplicates.\n\nReturns\n-------\nIndex\n\nSee Also\n--------\nSeries.drop_duplicates : Equivalent method on Series.\nDataFrame.drop_duplicates : Equivalent method on DataFrame.\nIndex.duplicated : Related method on Index, indicating duplicate\n    Index values.\n\nExamples\n--------\nGenerate an pandas.Index with duplicate values.\n\n>>> idx = pd.Index(['lama', 'cow', 'lama', 'beetle', 'lama', 'hippo'])\n\nThe `keep` parameter controls  which duplicate values are removed.\nThe value 'first' keeps the first occurrence for each\nset of duplicated entries. The default value of keep is 'first'.\n\n>>> idx.drop_duplicates(keep='first')\nIndex(['lama', 'cow', 'beetle', 'hippo'], dtype='object')\n\nThe value 'last' keeps the last occurrence for each set of duplicated\nentries.\n\n>>> idx.drop_duplicates(keep='last')\nIndex(['cow', 'beetle', 'lama', 'hippo'], dtype='object')\n\nThe value ``False`` discards all sets of duplicated entries.\n\n>>> idx.drop_duplicates(keep=False)\nIndex(['cow', 'beetle', 'hippo'], dtype='object')"
  },
  {
    "symbol": "MultiIndex.droplevel",
    "signature": "(self, level: 'IndexLabel' = 0)",
    "doc": "Return index with requested level(s) removed.\n\nIf resulting index has only 1 level left, the result will be\nof Index type, not MultiIndex. The original index is not modified inplace.\n\nParameters\n----------\nlevel : int, str, or list-like, default 0\n    If a string is given, must be the name of a level\n    If list-like, elements must be names or indexes of levels.\n\nReturns\n-------\nIndex or MultiIndex\n\nExamples\n--------\n>>> mi = pd.MultiIndex.from_arrays(\n... [[1, 2], [3, 4], [5, 6]], names=['x', 'y', 'z'])\n>>> mi\nMultiIndex([(1, 3, 5),\n            (2, 4, 6)],\n           names=['x', 'y', 'z'])\n\n>>> mi.droplevel()\nMultiIndex([(3, 5),\n            (4, 6)],\n           names=['y', 'z'])\n\n>>> mi.droplevel(2)\nMultiIndex([(1, 3),\n            (2, 4)],\n           names=['x', 'y'])\n\n>>> mi.droplevel('z')\nMultiIndex([(1, 3),\n            (2, 4)],\n           names=['x', 'y'])\n\n>>> mi.droplevel(['x', 'y'])\nIndex([5, 6], dtype='int64', name='z')"
  },
  {
    "symbol": "MultiIndex.dropna",
    "signature": "(self, how: 'AnyAll' = 'any') -> 'MultiIndex'",
    "doc": "Return Index without NA/NaN values.\n\nParameters\n----------\nhow : {'any', 'all'}, default 'any'\n    If the Index is a MultiIndex, drop the value when any or all levels\n    are NaN.\n\nReturns\n-------\nIndex\n\nExamples\n--------\n>>> idx = pd.Index([1, np.nan, 3])\n>>> idx.dropna()\nIndex([1.0, 3.0], dtype='float64')"
  },
  {
    "symbol": "MultiIndex.dtype",
    "signature": "(property)",
    "doc": ""
  },
  {
    "symbol": "MultiIndex.dtypes",
    "signature": "(property)",
    "doc": "\nReturn the dtypes as a Series for the underlying MultiIndex.\n\nExamples\n--------\n>>> idx = pd.MultiIndex.from_product([(0, 1, 2), ('green', 'purple')],\n...                                  names=['number', 'color'])\n>>> idx\nMultiIndex([(0,  'green'),\n            (0, 'purple'),\n            (1,  'green'),\n            (1, 'purple'),\n            (2,  'green'),\n            (2, 'purple')],\n           names=['number', 'color'])\n>>> idx.dtypes\nnumber     int64\ncolor     object\ndtype: object\n"
  },
  {
    "symbol": "MultiIndex.duplicated",
    "signature": "(self, keep: 'DropKeep' = 'first') -> 'npt.NDArray[np.bool_]'",
    "doc": "Indicate duplicate index values.\n\nDuplicated values are indicated as ``True`` values in the resulting\narray. Either all duplicates, all except the first, or all except the\nlast occurrence of duplicates can be indicated.\n\nParameters\n----------\nkeep : {'first', 'last', False}, default 'first'\n    The value or values in a set of duplicates to mark as missing.\n\n    - 'first' : Mark duplicates as ``True`` except for the first\n      occurrence.\n    - 'last' : Mark duplicates as ``True`` except for the last\n      occurrence.\n    - ``False`` : Mark all duplicates as ``True``.\n\nReturns\n-------\nnp.ndarray[bool]\n\nSee Also\n--------\nSeries.duplicated : Equivalent method on pandas.Series.\nDataFrame.duplicated : Equivalent method on pandas.DataFrame.\nIndex.drop_duplicates : Remove duplicate values from Index.\n\nExamples\n--------\nBy default, for each set of duplicated values, the first occurrence is\nset to False and all others to True:\n\n>>> idx = pd.Index(['lama', 'cow', 'lama', 'beetle', 'lama'])\n>>> idx.duplicated()\narray([False, False,  True, False,  True])\n\nwhich is equivalent to\n\n>>> idx.duplicated(keep='first')\narray([False, False,  True, False,  True])\n\nBy using 'last', the last occurrence of each set of duplicated values\nis set on False and all others on True:\n\n>>> idx.duplicated(keep='last')\narray([ True, False,  True, False, False])\n\nBy setting keep on ``False``, all duplicates are True:\n\n>>> idx.duplicated(keep=False)\narray([ True, False,  True, False,  True])"
  },
  {
    "symbol": "MultiIndex.empty",
    "signature": "(property)",
    "doc": ""
  },
  {
    "symbol": "MultiIndex.equal_levels",
    "signature": "(self, other: 'MultiIndex') -> 'bool'",
    "doc": "Return True if the levels of both MultiIndex objects are the same"
  },
  {
    "symbol": "MultiIndex.equals",
    "signature": "(self, other: 'object') -> 'bool'",
    "doc": "Determines if two MultiIndex objects have the same labeling information\n(the levels themselves do not necessarily have to be the same)\n\nSee Also\n--------\nequal_levels"
  },
  {
    "symbol": "MultiIndex.factorize",
    "signature": "(self, sort: 'bool' = False, use_na_sentinel: 'bool' = True) -> 'tuple[npt.NDArray[np.intp], Index]'",
    "doc": "Encode the object as an enumerated type or categorical variable.\n\nThis method is useful for obtaining a numeric representation of an\narray when all that matters is identifying distinct values. `factorize`\nis available as both a top-level function :func:`pandas.factorize`,\nand as a method :meth:`Series.factorize` and :meth:`Index.factorize`.\n\nParameters\n----------\nsort : bool, default False\n    Sort `uniques` and shuffle `codes` to maintain the\n    relationship.\n\nuse_na_sentinel : bool, default True\n    If True, the sentinel -1 will be used for NaN values. If False,\n    NaN values will be encoded as non-negative integers and will not drop the\n    NaN from the uniques of the values.\n\n    .. versionadded:: 1.5.0\n\nReturns\n-------\ncodes : ndarray\n    An integer ndarray that's an indexer into `uniques`.\n    ``uniques.take(codes)`` will have the same values as `values`.\nuniques : ndarray, Index, or Categorical\n    The unique valid values. When `values` is Categorical, `uniques`\n    is a Categorical. When `values` is some other pandas object, an\n    `Index` is returned. Otherwise, a 1-D ndarray is returned.\n\n    .. note::\n\n       Even if there's a missing value in `values`, `uniques` will\n       *not* contain an entry for it.\n\nSee Also\n--------\ncut : Discretize continuous-valued array.\nunique : Find the unique value in an array.\n\nNotes\n-----\nReference :ref:`the user guide <reshaping.factorize>` for more examples.\n\nExamples\n--------\nThese examples all show factorize as a top-level method like\n``pd.factorize(values)``. The results are identical for methods like\n:meth:`Series.factorize`.\n\n>>> codes, uniques = pd.factorize(np.array(['b', 'b', 'a', 'c', 'b'], dtype=\"O\"))\n>>> codes\narray([0, 0, 1, 2, 0])\n>>> uniques\narray(['b', 'a', 'c'], dtype=object)\n\nWith ``sort=True``, the `uniques` will be sorted, and `codes` will be\nshuffled so that the relationship is the maintained.\n\n>>> codes, uniques = pd.factorize(np.array(['b', 'b', 'a', 'c', 'b'], dtype=\"O\"),\n...                               sort=True)\n>>> codes\narray([1, 1, 0, 2, 1])\n>>> uniques\narray(['a', 'b', 'c'], dtype=object)\n\nWhen ``use_na_sentinel=True`` (the default), missing values are indicated in\nthe `codes` with the sentinel value ``-1`` and missing values are not\nincluded in `uniques`.\n\n>>> codes, uniques = pd.factorize(np.array(['b', None, 'a', 'c', 'b'], dtype=\"O\"))\n>>> codes\narray([ 0, -1,  1,  2,  0])\n>>> uniques\narray(['b', 'a', 'c'], dtype=object)\n\nThus far, we've only factorized lists (which are internally coerced to\nNumPy arrays). When factorizing pandas objects, the type of `uniques`\nwill differ. For Categoricals, a `Categorical` is returned.\n\n>>> cat = pd.Categorical(['a', 'a', 'c'], categories=['a', 'b', 'c'])\n>>> codes, uniques = pd.factorize(cat)\n>>> codes\narray([0, 0, 1])\n>>> uniques\n['a', 'c']\nCategories (3, object): ['a', 'b', 'c']\n\nNotice that ``'b'`` is in ``uniques.categories``, despite not being\npresent in ``cat.values``.\n\nFor all other pandas objects, an Index of the appropriate type is\nreturned.\n\n>>> cat = pd.Series(['a', 'a', 'c'])\n>>> codes, uniques = pd.factorize(cat)\n>>> codes\narray([0, 0, 1])\n>>> uniques\nIndex(['a', 'c'], dtype='object')\n\nIf NaN is in the values, and we want to include NaN in the uniques of the\nvalues, it can be achieved by setting ``use_na_sentinel=False``.\n\n>>> values = np.array([1, 2, 1, np.nan])\n>>> codes, uniques = pd.factorize(values)  # default: use_na_sentinel=True\n>>> codes\narray([ 0,  1,  0, -1])\n>>> uniques\narray([1., 2.])\n\n>>> codes, uniques = pd.factorize(values, use_na_sentinel=False)\n>>> codes\narray([0, 1, 0, 2])\n>>> uniques\narray([ 1.,  2., nan])"
  },
  {
    "symbol": "MultiIndex.fillna",
    "signature": "(self, value=None, downcast=None)",
    "doc": "fillna is not implemented for MultiIndex"
  },
  {
    "symbol": "MultiIndex.format",
    "signature": "(self, name: 'bool | None' = None, formatter: 'Callable | None' = None, na_rep: 'str | None' = None, names: 'bool' = False, space: 'int' = 2, sparsify=None, adjoin: 'bool' = True) -> 'list'",
    "doc": "Render a string representation of the Index."
  },
  {
    "symbol": "MultiIndex.from_arrays",
    "signature": "(arrays, sortorder: 'int | None' = None, names: 'Sequence[Hashable] | Hashable | lib.NoDefault' = <no_default>) -> 'MultiIndex'",
    "doc": "Convert arrays to MultiIndex.\n\nParameters\n----------\narrays : list / sequence of array-likes\n    Each array-like gives one level's value for each data point.\n    len(arrays) is the number of levels.\nsortorder : int or None\n    Level of sortedness (must be lexicographically sorted by that\n    level).\nnames : list / sequence of str, optional\n    Names for the levels in the index.\n\nReturns\n-------\nMultiIndex\n\nSee Also\n--------\nMultiIndex.from_tuples : Convert list of tuples to MultiIndex.\nMultiIndex.from_product : Make a MultiIndex from cartesian product\n                          of iterables.\nMultiIndex.from_frame : Make a MultiIndex from a DataFrame.\n\nExamples\n--------\n>>> arrays = [[1, 1, 2, 2], ['red', 'blue', 'red', 'blue']]\n>>> pd.MultiIndex.from_arrays(arrays, names=('number', 'color'))\nMultiIndex([(1,  'red'),\n            (1, 'blue'),\n            (2,  'red'),\n            (2, 'blue')],\n           names=['number', 'color'])"
  },
  {
    "symbol": "MultiIndex.from_frame",
    "signature": "(df: 'DataFrame', sortorder: 'int | None' = None, names: 'Sequence[Hashable] | Hashable | None' = None) -> 'MultiIndex'",
    "doc": "Make a MultiIndex from a DataFrame.\n\nParameters\n----------\ndf : DataFrame\n    DataFrame to be converted to MultiIndex.\nsortorder : int, optional\n    Level of sortedness (must be lexicographically sorted by that\n    level).\nnames : list-like, optional\n    If no names are provided, use the column names, or tuple of column\n    names if the columns is a MultiIndex. If a sequence, overwrite\n    names with the given sequence.\n\nReturns\n-------\nMultiIndex\n    The MultiIndex representation of the given DataFrame.\n\nSee Also\n--------\nMultiIndex.from_arrays : Convert list of arrays to MultiIndex.\nMultiIndex.from_tuples : Convert list of tuples to MultiIndex.\nMultiIndex.from_product : Make a MultiIndex from cartesian product\n                          of iterables.\n\nExamples\n--------\n>>> df = pd.DataFrame([['HI', 'Temp'], ['HI', 'Precip'],\n...                    ['NJ', 'Temp'], ['NJ', 'Precip']],\n...                   columns=['a', 'b'])\n>>> df\n      a       b\n0    HI    Temp\n1    HI  Precip\n2    NJ    Temp\n3    NJ  Precip\n\n>>> pd.MultiIndex.from_frame(df)\nMultiIndex([('HI',   'Temp'),\n            ('HI', 'Precip'),\n            ('NJ',   'Temp'),\n            ('NJ', 'Precip')],\n           names=['a', 'b'])\n\nUsing explicit names, instead of the column names\n\n>>> pd.MultiIndex.from_frame(df, names=['state', 'observation'])\nMultiIndex([('HI',   'Temp'),\n            ('HI', 'Precip'),\n            ('NJ',   'Temp'),\n            ('NJ', 'Precip')],\n           names=['state', 'observation'])"
  },
  {
    "symbol": "MultiIndex.from_product",
    "signature": "(iterables: 'Sequence[Iterable[Hashable]]', sortorder: 'int | None' = None, names: 'Sequence[Hashable] | Hashable | lib.NoDefault' = <no_default>) -> 'MultiIndex'",
    "doc": "Make a MultiIndex from the cartesian product of multiple iterables.\n\nParameters\n----------\niterables : list / sequence of iterables\n    Each iterable has unique labels for each level of the index.\nsortorder : int or None\n    Level of sortedness (must be lexicographically sorted by that\n    level).\nnames : list / sequence of str, optional\n    Names for the levels in the index.\n    If not explicitly provided, names will be inferred from the\n    elements of iterables if an element has a name attribute.\n\nReturns\n-------\nMultiIndex\n\nSee Also\n--------\nMultiIndex.from_arrays : Convert list of arrays to MultiIndex.\nMultiIndex.from_tuples : Convert list of tuples to MultiIndex.\nMultiIndex.from_frame : Make a MultiIndex from a DataFrame.\n\nExamples\n--------\n>>> numbers = [0, 1, 2]\n>>> colors = ['green', 'purple']\n>>> pd.MultiIndex.from_product([numbers, colors],\n...                            names=['number', 'color'])\nMultiIndex([(0,  'green'),\n            (0, 'purple'),\n            (1,  'green'),\n            (1, 'purple'),\n            (2,  'green'),\n            (2, 'purple')],\n           names=['number', 'color'])"
  },
  {
    "symbol": "MultiIndex.from_tuples",
    "signature": "(tuples: 'Iterable[tuple[Hashable, ...]]', sortorder: 'int | None' = None, names: 'Sequence[Hashable] | Hashable | None' = None) -> 'MultiIndex'",
    "doc": "Convert list of tuples to MultiIndex.\n\nParameters\n----------\ntuples : list / sequence of tuple-likes\n    Each tuple is the index of one row/column.\nsortorder : int or None\n    Level of sortedness (must be lexicographically sorted by that\n    level).\nnames : list / sequence of str, optional\n    Names for the levels in the index.\n\nReturns\n-------\nMultiIndex\n\nSee Also\n--------\nMultiIndex.from_arrays : Convert list of arrays to MultiIndex.\nMultiIndex.from_product : Make a MultiIndex from cartesian product\n                          of iterables.\nMultiIndex.from_frame : Make a MultiIndex from a DataFrame.\n\nExamples\n--------\n>>> tuples = [(1, 'red'), (1, 'blue'),\n...           (2, 'red'), (2, 'blue')]\n>>> pd.MultiIndex.from_tuples(tuples, names=('number', 'color'))\nMultiIndex([(1,  'red'),\n            (1, 'blue'),\n            (2,  'red'),\n            (2, 'blue')],\n           names=['number', 'color'])"
  },
  {
    "symbol": "MultiIndex.get_indexer",
    "signature": "(self, target, method: 'ReindexMethod | None' = None, limit: 'int | None' = None, tolerance=None) -> 'npt.NDArray[np.intp]'",
    "doc": "Compute indexer and mask for new index given the current index.\n\nThe indexer should be then used as an input to ndarray.take to align the\ncurrent data to the new index.\n\nParameters\n----------\ntarget : Index\nmethod : {None, 'pad'/'ffill', 'backfill'/'bfill', 'nearest'}, optional\n    * default: exact matches only.\n    * pad / ffill: find the PREVIOUS index value if no exact match.\n    * backfill / bfill: use NEXT index value if no exact match\n    * nearest: use the NEAREST index value if no exact match. Tied\n      distances are broken by preferring the larger index value.\nlimit : int, optional\n    Maximum number of consecutive labels in ``target`` to match for\n    inexact matches.\ntolerance : optional\n    Maximum distance between original and new labels for inexact\n    matches. The values of the index at the matching locations must\n    satisfy the equation ``abs(index[indexer] - target) <= tolerance``.\n\n    Tolerance may be a scalar value, which applies the same tolerance\n    to all values, or list-like, which applies variable tolerance per\n    element. List-like includes list, tuple, array, Series, and must be\n    the same size as the index and its dtype must exactly match the\n    index's type.\n\nReturns\n-------\nnp.ndarray[np.intp]\n    Integers from 0 to n - 1 indicating that the index at these\n    positions matches the corresponding target values. Missing values\n    in the target are marked by -1.\n\nNotes\n-----\nReturns -1 for unmatched values, for further explanation see the\nexample below.\n\nExamples\n--------\n>>> index = pd.Index(['c', 'a', 'b'])\n>>> index.get_indexer(['a', 'b', 'x'])\narray([ 1,  2, -1])\n\nNotice that the return value is an array of locations in ``index``\nand ``x`` is marked by -1, as it is not in ``index``."
  },
  {
    "symbol": "MultiIndex.get_indexer_for",
    "signature": "(self, target) -> 'npt.NDArray[np.intp]'",
    "doc": "Guaranteed return of an indexer even when non-unique.\n\nThis dispatches to get_indexer or get_indexer_non_unique\nas appropriate.\n\nReturns\n-------\nnp.ndarray[np.intp]\n    List of indices.\n\nExamples\n--------\n>>> idx = pd.Index([np.nan, 'var1', np.nan])\n>>> idx.get_indexer_for([np.nan])\narray([0, 2])"
  },
  {
    "symbol": "MultiIndex.get_indexer_non_unique",
    "signature": "(self, target) -> 'tuple[npt.NDArray[np.intp], npt.NDArray[np.intp]]'",
    "doc": "Compute indexer and mask for new index given the current index.\n\nThe indexer should be then used as an input to ndarray.take to align the\ncurrent data to the new index.\n\nParameters\n----------\ntarget : Index\n\nReturns\n-------\nindexer : np.ndarray[np.intp]\n    Integers from 0 to n - 1 indicating that the index at these\n    positions matches the corresponding target values. Missing values\n    in the target are marked by -1.\nmissing : np.ndarray[np.intp]\n    An indexer into the target of the values not found.\n    These correspond to the -1 in the indexer array.\n\nExamples\n--------\n>>> index = pd.Index(['c', 'b', 'a', 'b', 'b'])\n>>> index.get_indexer_non_unique(['b', 'b'])\n(array([1, 3, 4, 1, 3, 4]), array([], dtype=int64))\n\nIn the example below there are no matched values.\n\n>>> index = pd.Index(['c', 'b', 'a', 'b', 'b'])\n>>> index.get_indexer_non_unique(['q', 'r', 't'])\n(array([-1, -1, -1]), array([0, 1, 2]))\n\nFor this reason, the returned ``indexer`` contains only integers equal to -1.\nIt demonstrates that there's no match between the index and the ``target``\nvalues at these positions. The mask [0, 1, 2] in the return value shows that\nthe first, second, and third elements are missing.\n\nNotice that the return value is a tuple contains two items. In the example\nbelow the first item is an array of locations in ``index``. The second\nitem is a mask shows that the first and third elements are missing.\n\n>>> index = pd.Index(['c', 'b', 'a', 'b', 'b'])\n>>> index.get_indexer_non_unique(['f', 'b', 's'])\n(array([-1,  1,  3,  4, -1]), array([0, 2]))"
  },
  {
    "symbol": "MultiIndex.get_level_values",
    "signature": "(self, level) -> 'Index'",
    "doc": "Return vector of label values for requested level.\n\nLength of returned vector is equal to the length of the index.\n\nParameters\n----------\nlevel : int or str\n    ``level`` is either the integer position of the level in the\n    MultiIndex, or the name of the level.\n\nReturns\n-------\nIndex\n    Values is a level of this MultiIndex converted to\n    a single :class:`Index` (or subclass thereof).\n\nNotes\n-----\nIf the level contains missing values, the result may be casted to\n``float`` with missing values specified as ``NaN``. This is because\nthe level is converted to a regular ``Index``.\n\nExamples\n--------\nCreate a MultiIndex:\n\n>>> mi = pd.MultiIndex.from_arrays((list('abc'), list('def')))\n>>> mi.names = ['level_1', 'level_2']\n\nGet level values by supplying level as either integer or name:\n\n>>> mi.get_level_values(0)\nIndex(['a', 'b', 'c'], dtype='object', name='level_1')\n>>> mi.get_level_values('level_2')\nIndex(['d', 'e', 'f'], dtype='object', name='level_2')\n\nIf a level contains missing values, the return type of the level\nmay be cast to ``float``.\n\n>>> pd.MultiIndex.from_arrays([[1, None, 2], [3, 4, 5]]).dtypes\nlevel_0    int64\nlevel_1    int64\ndtype: object\n>>> pd.MultiIndex.from_arrays([[1, None, 2], [3, 4, 5]]).get_level_values(0)\nIndex([1.0, nan, 2.0], dtype='float64')"
  },
  {
    "symbol": "MultiIndex.get_loc",
    "signature": "(self, key)",
    "doc": "Get location for a label or a tuple of labels.\n\nThe location is returned as an integer/slice or boolean\nmask.\n\nParameters\n----------\nkey : label or tuple of labels (one for each level)\n\nReturns\n-------\nint, slice object or boolean mask\n    If the key is past the lexsort depth, the return may be a\n    boolean mask array, otherwise it is always a slice or int.\n\nSee Also\n--------\nIndex.get_loc : The get_loc method for (single-level) index.\nMultiIndex.slice_locs : Get slice location given start label(s) and\n                        end label(s).\nMultiIndex.get_locs : Get location for a label/slice/list/mask or a\n                      sequence of such.\n\nNotes\n-----\nThe key cannot be a slice, list of same-level labels, a boolean mask,\nor a sequence of such. If you want to use those, use\n:meth:`MultiIndex.get_locs` instead.\n\nExamples\n--------\n>>> mi = pd.MultiIndex.from_arrays([list('abb'), list('def')])\n\n>>> mi.get_loc('b')\nslice(1, 3, None)\n\n>>> mi.get_loc(('b', 'e'))\n1"
  },
  {
    "symbol": "MultiIndex.get_loc_level",
    "signature": "(self, key, level: 'IndexLabel' = 0, drop_level: 'bool' = True)",
    "doc": "Get location and sliced index for requested label(s)/level(s).\n\nParameters\n----------\nkey : label or sequence of labels\nlevel : int/level name or list thereof, optional\ndrop_level : bool, default True\n    If ``False``, the resulting index will not drop any level.\n\nReturns\n-------\ntuple\n    A 2-tuple where the elements :\n\n    Element 0: int, slice object or boolean array.\n\n    Element 1: The resulting sliced multiindex/index. If the key\n    contains all levels, this will be ``None``.\n\nSee Also\n--------\nMultiIndex.get_loc  : Get location for a label or a tuple of labels.\nMultiIndex.get_locs : Get location for a label/slice/list/mask or a\n                      sequence of such.\n\nExamples\n--------\n>>> mi = pd.MultiIndex.from_arrays([list('abb'), list('def')],\n...                                names=['A', 'B'])\n\n>>> mi.get_loc_level('b')\n(slice(1, 3, None), Index(['e', 'f'], dtype='object', name='B'))\n\n>>> mi.get_loc_level('e', level='B')\n(array([False,  True, False]), Index(['b'], dtype='object', name='A'))\n\n>>> mi.get_loc_level(['b', 'e'])\n(1, None)"
  },
  {
    "symbol": "MultiIndex.get_locs",
    "signature": "(self, seq) -> 'npt.NDArray[np.intp]'",
    "doc": "Get location for a sequence of labels.\n\nParameters\n----------\nseq : label, slice, list, mask or a sequence of such\n   You should use one of the above for each level.\n   If a level should not be used, set it to ``slice(None)``.\n\nReturns\n-------\nnumpy.ndarray\n    NumPy array of integers suitable for passing to iloc.\n\nSee Also\n--------\nMultiIndex.get_loc : Get location for a label or a tuple of labels.\nMultiIndex.slice_locs : Get slice location given start label(s) and\n                        end label(s).\n\nExamples\n--------\n>>> mi = pd.MultiIndex.from_arrays([list('abb'), list('def')])\n\n>>> mi.get_locs('b')  # doctest: +SKIP\narray([1, 2], dtype=int64)\n\n>>> mi.get_locs([slice(None), ['e', 'f']])  # doctest: +SKIP\narray([1, 2], dtype=int64)\n\n>>> mi.get_locs([[True, False, True], slice('e', 'f')])  # doctest: +SKIP\narray([2], dtype=int64)"
  },
  {
    "symbol": "MultiIndex.get_slice_bound",
    "signature": "(self, label: 'Hashable | Sequence[Hashable]', side: \"Literal['left', 'right']\") -> 'int'",
    "doc": "For an ordered MultiIndex, compute slice bound\nthat corresponds to given label.\n\nReturns leftmost (one-past-the-rightmost if `side=='right') position\nof given label.\n\nParameters\n----------\nlabel : object or tuple of objects\nside : {'left', 'right'}\n\nReturns\n-------\nint\n    Index of label.\n\nNotes\n-----\nThis method only works if level 0 index of the MultiIndex is lexsorted.\n\nExamples\n--------\n>>> mi = pd.MultiIndex.from_arrays([list('abbc'), list('gefd')])\n\nGet the locations from the leftmost 'b' in the first level\nuntil the end of the multiindex:\n\n>>> mi.get_slice_bound('b', side=\"left\")\n1\n\nLike above, but if you get the locations from the rightmost\n'b' in the first level and 'f' in the second level:\n\n>>> mi.get_slice_bound(('b','f'), side=\"right\")\n3\n\nSee Also\n--------\nMultiIndex.get_loc : Get location for a label or a tuple of labels.\nMultiIndex.get_locs : Get location for a label/slice/list/mask or a\n                      sequence of such."
  },
  {
    "symbol": "MultiIndex.groupby",
    "signature": "(self, values) -> 'PrettyDict[Hashable, np.ndarray]'",
    "doc": "Group the index labels by a given array of values.\n\nParameters\n----------\nvalues : array\n    Values used to determine the groups.\n\nReturns\n-------\ndict\n    {group name -> group labels}"
  },
  {
    "symbol": "MultiIndex.has_duplicates",
    "signature": "(property)",
    "doc": "\nCheck if the Index has duplicate values.\n\nReturns\n-------\nbool\n    Whether or not the Index has duplicate values.\n\nSee Also\n--------\nIndex.is_unique : Inverse method that checks if it has unique values.\n\nExamples\n--------\n>>> idx = pd.Index([1, 5, 7, 7])\n>>> idx.has_duplicates\nTrue\n\n>>> idx = pd.Index([1, 5, 7])\n>>> idx.has_duplicates\nFalse\n\n>>> idx = pd.Index([\"Watermelon\", \"Orange\", \"Apple\",\n...                 \"Watermelon\"]).astype(\"category\")\n>>> idx.has_duplicates\nTrue\n\n>>> idx = pd.Index([\"Orange\", \"Apple\",\n...                 \"Watermelon\"]).astype(\"category\")\n>>> idx.has_duplicates\nFalse\n"
  },
  {
    "symbol": "MultiIndex.hasnans",
    "signature": "(property)",
    "doc": "\nReturn True if there are any NaNs.\n\nEnables various performance speedups.\n\nReturns\n-------\nbool\n\nExamples\n--------\n>>> s = pd.Series([1, 2, 3], index=['a', 'b', None])\n>>> s\na    1\nb    2\nNone 3\ndtype: int64\n>>> s.index.hasnans\nTrue\n"
  },
  {
    "symbol": "MultiIndex.holds_integer",
    "signature": "(self) -> 'bool'",
    "doc": "Whether the type is an integer type.\n\n.. deprecated:: 2.0.0\n    Use `pandas.api.types.infer_dtype` instead"
  },
  {
    "symbol": "MultiIndex.identical",
    "signature": "(self, other) -> 'bool'",
    "doc": "Similar to equals, but checks that object attributes and types are also equal.\n\nReturns\n-------\nbool\n    If two Index objects have equal elements and same type True,\n    otherwise False.\n\nExamples\n--------\n>>> idx1 = pd.Index(['1', '2', '3'])\n>>> idx2 = pd.Index(['1', '2', '3'])\n>>> idx2.identical(idx1)\nTrue\n\n>>> idx1 = pd.Index(['1', '2', '3'], name=\"A\")\n>>> idx2 = pd.Index(['1', '2', '3'], name=\"B\")\n>>> idx2.identical(idx1)\nFalse"
  },
  {
    "symbol": "MultiIndex.infer_objects",
    "signature": "(self, copy: 'bool' = True) -> 'Index'",
    "doc": "If we have an object dtype, try to infer a non-object dtype.\n\nParameters\n----------\ncopy : bool, default True\n    Whether to make a copy in cases where no inference occurs."
  },
  {
    "symbol": "MultiIndex.inferred_type",
    "signature": "(property)",
    "doc": ""
  },
  {
    "symbol": "MultiIndex.insert",
    "signature": "(self, loc: 'int', item) -> 'MultiIndex'",
    "doc": "Make new MultiIndex inserting new item at location\n\nParameters\n----------\nloc : int\nitem : tuple\n    Must be same length as number of levels in the MultiIndex\n\nReturns\n-------\nnew_index : Index"
  },
  {
    "symbol": "MultiIndex.intersection",
    "signature": "(self, other, sort: 'bool' = False)",
    "doc": "Form the intersection of two Index objects.\n\nThis returns a new Index with elements common to the index and `other`.\n\nParameters\n----------\nother : Index or array-like\nsort : True, False or None, default False\n    Whether to sort the resulting index.\n\n    * None : sort the result, except when `self` and `other` are equal\n      or when the values cannot be compared.\n    * False : do not sort the result.\n    * True : Sort the result (which may raise TypeError).\n\nReturns\n-------\nIndex\n\nExamples\n--------\n>>> idx1 = pd.Index([1, 2, 3, 4])\n>>> idx2 = pd.Index([3, 4, 5, 6])\n>>> idx1.intersection(idx2)\nIndex([3, 4], dtype='int64')"
  },
  {
    "symbol": "MultiIndex.is_",
    "signature": "(self, other) -> 'bool'",
    "doc": "More flexible, faster check like ``is`` but that works through views.\n\nNote: this is *not* the same as ``Index.identical()``, which checks\nthat metadata is also the same.\n\nParameters\n----------\nother : object\n    Other object to compare against.\n\nReturns\n-------\nbool\n    True if both have same underlying data, False otherwise.\n\nSee Also\n--------\nIndex.identical : Works like ``Index.is_`` but also checks metadata.\n\nExamples\n--------\n>>> idx1 = pd.Index(['1', '2', '3'])\n>>> idx1.is_(idx1.view())\nTrue\n\n>>> idx1.is_(idx1.copy())\nFalse"
  },
  {
    "symbol": "MultiIndex.is_boolean",
    "signature": "(self) -> 'bool'",
    "doc": "Check if the Index only consists of booleans.\n\n.. deprecated:: 2.0.0\n    Use `pandas.api.types.is_bool_dtype` instead.\n\nReturns\n-------\nbool\n    Whether or not the Index only consists of booleans.\n\nSee Also\n--------\nis_integer : Check if the Index only consists of integers (deprecated).\nis_floating : Check if the Index is a floating type (deprecated).\nis_numeric : Check if the Index only consists of numeric data (deprecated).\nis_object : Check if the Index is of the object dtype (deprecated).\nis_categorical : Check if the Index holds categorical data.\nis_interval : Check if the Index holds Interval objects (deprecated).\n\nExamples\n--------\n>>> idx = pd.Index([True, False, True])\n>>> idx.is_boolean()  # doctest: +SKIP\nTrue\n\n>>> idx = pd.Index([\"True\", \"False\", \"True\"])\n>>> idx.is_boolean()  # doctest: +SKIP\nFalse\n\n>>> idx = pd.Index([True, False, \"True\"])\n>>> idx.is_boolean()  # doctest: +SKIP\nFalse"
  },
  {
    "symbol": "MultiIndex.is_categorical",
    "signature": "(self) -> 'bool'",
    "doc": "Check if the Index holds categorical data.\n\n.. deprecated:: 2.0.0\n      Use `isinstance(index.dtype, pd.CategoricalDtype)` instead.\n\nReturns\n-------\nbool\n    True if the Index is categorical.\n\nSee Also\n--------\nCategoricalIndex : Index for categorical data.\nis_boolean : Check if the Index only consists of booleans (deprecated).\nis_integer : Check if the Index only consists of integers (deprecated).\nis_floating : Check if the Index is a floating type (deprecated).\nis_numeric : Check if the Index only consists of numeric data (deprecated).\nis_object : Check if the Index is of the object dtype. (deprecated).\nis_interval : Check if the Index holds Interval objects (deprecated).\n\nExamples\n--------\n>>> idx = pd.Index([\"Watermelon\", \"Orange\", \"Apple\",\n...                 \"Watermelon\"]).astype(\"category\")\n>>> idx.is_categorical()  # doctest: +SKIP\nTrue\n\n>>> idx = pd.Index([1, 3, 5, 7])\n>>> idx.is_categorical()  # doctest: +SKIP\nFalse\n\n>>> s = pd.Series([\"Peter\", \"Victor\", \"Elisabeth\", \"Mar\"])\n>>> s\n0        Peter\n1       Victor\n2    Elisabeth\n3          Mar\ndtype: object\n>>> s.index.is_categorical()  # doctest: +SKIP\nFalse"
  },
  {
    "symbol": "MultiIndex.is_floating",
    "signature": "(self) -> 'bool'",
    "doc": "Check if the Index is a floating type.\n\n.. deprecated:: 2.0.0\n    Use `pandas.api.types.is_float_dtype` instead\n\nThe Index may consist of only floats, NaNs, or a mix of floats,\nintegers, or NaNs.\n\nReturns\n-------\nbool\n    Whether or not the Index only consists of only consists of floats, NaNs, or\n    a mix of floats, integers, or NaNs.\n\nSee Also\n--------\nis_boolean : Check if the Index only consists of booleans (deprecated).\nis_integer : Check if the Index only consists of integers (deprecated).\nis_numeric : Check if the Index only consists of numeric data (deprecated).\nis_object : Check if the Index is of the object dtype. (deprecated).\nis_categorical : Check if the Index holds categorical data (deprecated).\nis_interval : Check if the Index holds Interval objects (deprecated).\n\nExamples\n--------\n>>> idx = pd.Index([1.0, 2.0, 3.0, 4.0])\n>>> idx.is_floating()  # doctest: +SKIP\nTrue\n\n>>> idx = pd.Index([1.0, 2.0, np.nan, 4.0])\n>>> idx.is_floating()  # doctest: +SKIP\nTrue\n\n>>> idx = pd.Index([1, 2, 3, 4, np.nan])\n>>> idx.is_floating()  # doctest: +SKIP\nTrue\n\n>>> idx = pd.Index([1, 2, 3, 4])\n>>> idx.is_floating()  # doctest: +SKIP\nFalse"
  },
  {
    "symbol": "MultiIndex.is_integer",
    "signature": "(self) -> 'bool'",
    "doc": "Check if the Index only consists of integers.\n\n.. deprecated:: 2.0.0\n    Use `pandas.api.types.is_integer_dtype` instead.\n\nReturns\n-------\nbool\n    Whether or not the Index only consists of integers.\n\nSee Also\n--------\nis_boolean : Check if the Index only consists of booleans (deprecated).\nis_floating : Check if the Index is a floating type (deprecated).\nis_numeric : Check if the Index only consists of numeric data (deprecated).\nis_object : Check if the Index is of the object dtype. (deprecated).\nis_categorical : Check if the Index holds categorical data (deprecated).\nis_interval : Check if the Index holds Interval objects (deprecated).\n\nExamples\n--------\n>>> idx = pd.Index([1, 2, 3, 4])\n>>> idx.is_integer()  # doctest: +SKIP\nTrue\n\n>>> idx = pd.Index([1.0, 2.0, 3.0, 4.0])\n>>> idx.is_integer()  # doctest: +SKIP\nFalse\n\n>>> idx = pd.Index([\"Apple\", \"Mango\", \"Watermelon\"])\n>>> idx.is_integer()  # doctest: +SKIP\nFalse"
  },
  {
    "symbol": "MultiIndex.is_interval",
    "signature": "(self) -> 'bool'",
    "doc": "Check if the Index holds Interval objects.\n\n.. deprecated:: 2.0.0\n    Use `isinstance(index.dtype, pd.IntervalDtype)` instead.\n\nReturns\n-------\nbool\n    Whether or not the Index holds Interval objects.\n\nSee Also\n--------\nIntervalIndex : Index for Interval objects.\nis_boolean : Check if the Index only consists of booleans (deprecated).\nis_integer : Check if the Index only consists of integers (deprecated).\nis_floating : Check if the Index is a floating type (deprecated).\nis_numeric : Check if the Index only consists of numeric data (deprecated).\nis_object : Check if the Index is of the object dtype. (deprecated).\nis_categorical : Check if the Index holds categorical data (deprecated).\n\nExamples\n--------\n>>> idx = pd.Index([pd.Interval(left=0, right=5),\n...                 pd.Interval(left=5, right=10)])\n>>> idx.is_interval()  # doctest: +SKIP\nTrue\n\n>>> idx = pd.Index([1, 3, 5, 7])\n>>> idx.is_interval()  # doctest: +SKIP\nFalse"
  },
  {
    "symbol": "MultiIndex.is_monotonic_decreasing",
    "signature": "(property)",
    "doc": "\nReturn a boolean if the values are equal or decreasing.\n"
  },
  {
    "symbol": "MultiIndex.is_monotonic_increasing",
    "signature": "(property)",
    "doc": "\nReturn a boolean if the values are equal or increasing.\n"
  },
  {
    "symbol": "MultiIndex.is_numeric",
    "signature": "(self) -> 'bool'",
    "doc": "Check if the Index only consists of numeric data.\n\n.. deprecated:: 2.0.0\n    Use `pandas.api.types.is_numeric_dtype` instead.\n\nReturns\n-------\nbool\n    Whether or not the Index only consists of numeric data.\n\nSee Also\n--------\nis_boolean : Check if the Index only consists of booleans (deprecated).\nis_integer : Check if the Index only consists of integers (deprecated).\nis_floating : Check if the Index is a floating type (deprecated).\nis_object : Check if the Index is of the object dtype. (deprecated).\nis_categorical : Check if the Index holds categorical data (deprecated).\nis_interval : Check if the Index holds Interval objects (deprecated).\n\nExamples\n--------\n>>> idx = pd.Index([1.0, 2.0, 3.0, 4.0])\n>>> idx.is_numeric()  # doctest: +SKIP\nTrue\n\n>>> idx = pd.Index([1, 2, 3, 4.0])\n>>> idx.is_numeric()  # doctest: +SKIP\nTrue\n\n>>> idx = pd.Index([1, 2, 3, 4])\n>>> idx.is_numeric()  # doctest: +SKIP\nTrue\n\n>>> idx = pd.Index([1, 2, 3, 4.0, np.nan])\n>>> idx.is_numeric()  # doctest: +SKIP\nTrue\n\n>>> idx = pd.Index([1, 2, 3, 4.0, np.nan, \"Apple\"])\n>>> idx.is_numeric()  # doctest: +SKIP\nFalse"
  },
  {
    "symbol": "MultiIndex.is_object",
    "signature": "(self) -> 'bool'",
    "doc": "Check if the Index is of the object dtype.\n\n.. deprecated:: 2.0.0\n   Use `pandas.api.types.is_object_dtype` instead.\n\nReturns\n-------\nbool\n    Whether or not the Index is of the object dtype.\n\nSee Also\n--------\nis_boolean : Check if the Index only consists of booleans (deprecated).\nis_integer : Check if the Index only consists of integers (deprecated).\nis_floating : Check if the Index is a floating type (deprecated).\nis_numeric : Check if the Index only consists of numeric data (deprecated).\nis_categorical : Check if the Index holds categorical data (deprecated).\nis_interval : Check if the Index holds Interval objects (deprecated).\n\nExamples\n--------\n>>> idx = pd.Index([\"Apple\", \"Mango\", \"Watermelon\"])\n>>> idx.is_object()  # doctest: +SKIP\nTrue\n\n>>> idx = pd.Index([\"Apple\", \"Mango\", 2.0])\n>>> idx.is_object()  # doctest: +SKIP\nTrue\n\n>>> idx = pd.Index([\"Watermelon\", \"Orange\", \"Apple\",\n...                 \"Watermelon\"]).astype(\"category\")\n>>> idx.is_object()  # doctest: +SKIP\nFalse\n\n>>> idx = pd.Index([1.0, 2.0, 3.0, 4.0])\n>>> idx.is_object()  # doctest: +SKIP\nFalse"
  },
  {
    "symbol": "MultiIndex.is_unique",
    "signature": "(property)",
    "doc": "\nReturn if the index has unique values.\n\nReturns\n-------\nbool\n\nSee Also\n--------\nIndex.has_duplicates : Inverse method that checks if it has duplicate values.\n\nExamples\n--------\n>>> idx = pd.Index([1, 5, 7, 7])\n>>> idx.is_unique\nFalse\n\n>>> idx = pd.Index([1, 5, 7])\n>>> idx.is_unique\nTrue\n\n>>> idx = pd.Index([\"Watermelon\", \"Orange\", \"Apple\",\n...                 \"Watermelon\"]).astype(\"category\")\n>>> idx.is_unique\nFalse\n\n>>> idx = pd.Index([\"Orange\", \"Apple\",\n...                 \"Watermelon\"]).astype(\"category\")\n>>> idx.is_unique\nTrue\n"
  },
  {
    "symbol": "MultiIndex.isin",
    "signature": "(self, values, level=None) -> 'npt.NDArray[np.bool_]'",
    "doc": "Return a boolean array where the index values are in `values`.\n\nCompute boolean array of whether each index value is found in the\npassed set of values. The length of the returned boolean array matches\nthe length of the index.\n\nParameters\n----------\nvalues : set or list-like\n    Sought values.\nlevel : str or int, optional\n    Name or position of the index level to use (if the index is a\n    `MultiIndex`).\n\nReturns\n-------\nnp.ndarray[bool]\n    NumPy array of boolean values.\n\nSee Also\n--------\nSeries.isin : Same for Series.\nDataFrame.isin : Same method for DataFrames.\n\nNotes\n-----\nIn the case of `MultiIndex` you must either specify `values` as a\nlist-like object containing tuples that are the same length as the\nnumber of levels, or specify `level`. Otherwise it will raise a\n``ValueError``.\n\nIf `level` is specified:\n\n- if it is the name of one *and only one* index level, use that level;\n- otherwise it should be a number indicating level position.\n\nExamples\n--------\n>>> idx = pd.Index([1,2,3])\n>>> idx\nIndex([1, 2, 3], dtype='int64')\n\nCheck whether each index value in a list of values.\n\n>>> idx.isin([1, 4])\narray([ True, False, False])\n\n>>> midx = pd.MultiIndex.from_arrays([[1,2,3],\n...                                  ['red', 'blue', 'green']],\n...                                  names=('number', 'color'))\n>>> midx\nMultiIndex([(1,   'red'),\n            (2,  'blue'),\n            (3, 'green')],\n           names=['number', 'color'])\n\nCheck whether the strings in the 'color' level of the MultiIndex\nare in a list of colors.\n\n>>> midx.isin(['red', 'orange', 'yellow'], level='color')\narray([ True, False, False])\n\nTo check across the levels of a MultiIndex, pass a list of tuples:\n\n>>> midx.isin([(1, 'red'), (3, 'red')])\narray([ True, False, False])"
  },
  {
    "symbol": "MultiIndex.isna",
    "signature": "(self) -> 'npt.NDArray[np.bool_]'",
    "doc": "Detect missing values.\n\nReturn a boolean same-sized object indicating if the values are NA.\nNA values, such as ``None``, :attr:`numpy.NaN` or :attr:`pd.NaT`, get\nmapped to ``True`` values.\nEverything else get mapped to ``False`` values. Characters such as\nempty strings `''` or :attr:`numpy.inf` are not considered NA values.\n\nReturns\n-------\nnumpy.ndarray[bool]\n    A boolean array of whether my values are NA.\n\nSee Also\n--------\nIndex.notna : Boolean inverse of isna.\nIndex.dropna : Omit entries with missing values.\nisna : Top-level isna.\nSeries.isna : Detect missing values in Series object.\n\nExamples\n--------\nShow which entries in a pandas.Index are NA. The result is an\narray.\n\n>>> idx = pd.Index([5.2, 6.0, np.nan])\n>>> idx\nIndex([5.2, 6.0, nan], dtype='float64')\n>>> idx.isna()\narray([False, False,  True])\n\nEmpty strings are not considered NA values. None is considered an NA\nvalue.\n\n>>> idx = pd.Index(['black', '', 'red', None])\n>>> idx\nIndex(['black', '', 'red', None], dtype='object')\n>>> idx.isna()\narray([False, False, False,  True])\n\nFor datetimes, `NaT` (Not a Time) is considered as an NA value.\n\n>>> idx = pd.DatetimeIndex([pd.Timestamp('1940-04-25'),\n...                         pd.Timestamp(''), None, pd.NaT])\n>>> idx\nDatetimeIndex(['1940-04-25', 'NaT', 'NaT', 'NaT'],\n              dtype='datetime64[ns]', freq=None)\n>>> idx.isna()\narray([False,  True,  True,  True])"
  },
  {
    "symbol": "MultiIndex.isnull",
    "signature": "(self) -> 'npt.NDArray[np.bool_]'",
    "doc": "Detect missing values.\n\nReturn a boolean same-sized object indicating if the values are NA.\nNA values, such as ``None``, :attr:`numpy.NaN` or :attr:`pd.NaT`, get\nmapped to ``True`` values.\nEverything else get mapped to ``False`` values. Characters such as\nempty strings `''` or :attr:`numpy.inf` are not considered NA values.\n\nReturns\n-------\nnumpy.ndarray[bool]\n    A boolean array of whether my values are NA.\n\nSee Also\n--------\nIndex.notna : Boolean inverse of isna.\nIndex.dropna : Omit entries with missing values.\nisna : Top-level isna.\nSeries.isna : Detect missing values in Series object.\n\nExamples\n--------\nShow which entries in a pandas.Index are NA. The result is an\narray.\n\n>>> idx = pd.Index([5.2, 6.0, np.nan])\n>>> idx\nIndex([5.2, 6.0, nan], dtype='float64')\n>>> idx.isna()\narray([False, False,  True])\n\nEmpty strings are not considered NA values. None is considered an NA\nvalue.\n\n>>> idx = pd.Index(['black', '', 'red', None])\n>>> idx\nIndex(['black', '', 'red', None], dtype='object')\n>>> idx.isna()\narray([False, False, False,  True])\n\nFor datetimes, `NaT` (Not a Time) is considered as an NA value.\n\n>>> idx = pd.DatetimeIndex([pd.Timestamp('1940-04-25'),\n...                         pd.Timestamp(''), None, pd.NaT])\n>>> idx\nDatetimeIndex(['1940-04-25', 'NaT', 'NaT', 'NaT'],\n              dtype='datetime64[ns]', freq=None)\n>>> idx.isna()\narray([False,  True,  True,  True])"
  },
  {
    "symbol": "MultiIndex.item",
    "signature": "(self)",
    "doc": "Return the first element of the underlying data as a Python scalar.\n\nReturns\n-------\nscalar\n    The first element of Series or Index.\n\nRaises\n------\nValueError\n    If the data is not length = 1.\n\nExamples\n--------\n>>> s = pd.Series([1])\n>>> s.item()\n1\n\nFor an index:\n\n>>> s = pd.Series([1], index=['a'])\n>>> s.index.item()\n'a'"
  },
  {
    "symbol": "MultiIndex.join",
    "signature": "(self, other: 'Index', *, how: 'JoinHow' = 'left', level: 'Level | None' = None, return_indexers: 'bool' = False, sort: 'bool' = False) -> 'Index | tuple[Index, npt.NDArray[np.intp] | None, npt.NDArray[np.intp] | None]'",
    "doc": "Compute join_index and indexers to conform data structures to the new index.\n\nParameters\n----------\nother : Index\nhow : {'left', 'right', 'inner', 'outer'}\nlevel : int or level name, default None\nreturn_indexers : bool, default False\nsort : bool, default False\n    Sort the join keys lexicographically in the result Index. If False,\n    the order of the join keys depends on the join type (how keyword).\n\nReturns\n-------\njoin_index, (left_indexer, right_indexer)\n\nExamples\n--------\n>>> idx1 = pd.Index([1, 2, 3])\n>>> idx2 = pd.Index([4, 5, 6])\n>>> idx1.join(idx2, how='outer')\nIndex([1, 2, 3, 4, 5, 6], dtype='int64')"
  },
  {
    "symbol": "MultiIndex.levels",
    "signature": "(property)",
    "doc": "\nLevels of the MultiIndex.\n\nLevels refer to the different hierarchical levels or layers in a MultiIndex.\nIn a MultiIndex, each level represents a distinct dimension or category of\nthe index.\n\nTo access the levels, you can use the levels attribute of the MultiIndex,\nwhich returns a tuple of Index objects. Each Index object represents a\nlevel in the MultiIndex and contains the unique values found in that\nspecific level.\n\nIf a MultiIndex is created with levels A, B, C, and the DataFrame using\nit filters out all rows of the level C, MultiIndex.levels will still\nreturn A, B, C.\n\nExamples\n--------\n>>> index = pd.MultiIndex.from_product([['mammal'],\n...                                     ('goat', 'human', 'cat', 'dog')],\n...                                    names=['Category', 'Animals'])\n>>> leg_num = pd.DataFrame(data=(4, 2, 4, 4), index=index, columns=['Legs'])\n>>> leg_num\n                  Legs\nCategory Animals\nmammal   goat        4\n         human       2\n         cat         4\n         dog         4\n\n>>> leg_num.index.levels\nFrozenList([['mammal'], ['cat', 'dog', 'goat', 'human']])\n\nMultiIndex levels will not change even if the DataFrame using the MultiIndex\ndoes not contain all them anymore.\nSee how \"human\" is not in the DataFrame, but it is still in levels:\n\n>>> large_leg_num = leg_num[leg_num.Legs > 2]\n>>> large_leg_num\n                  Legs\nCategory Animals\nmammal   goat        4\n         cat         4\n         dog         4\n\n>>> large_leg_num.index.levels\nFrozenList([['mammal'], ['cat', 'dog', 'goat', 'human']])\n"
  },
  {
    "symbol": "MultiIndex.levshape",
    "signature": "(property)",
    "doc": "\nA tuple with the length of each level.\n\nExamples\n--------\n>>> mi = pd.MultiIndex.from_arrays([['a'], ['b'], ['c']])\n>>> mi\nMultiIndex([('a', 'b', 'c')],\n           )\n>>> mi.levshape\n(1, 1, 1)\n"
  },
  {
    "symbol": "MultiIndex.map",
    "signature": "(self, mapper, na_action: \"Literal['ignore'] | None\" = None)",
    "doc": "Map values using an input mapping or function.\n\nParameters\n----------\nmapper : function, dict, or Series\n    Mapping correspondence.\nna_action : {None, 'ignore'}\n    If 'ignore', propagate NA values, without passing them to the\n    mapping correspondence.\n\nReturns\n-------\nUnion[Index, MultiIndex]\n    The output of the mapping function applied to the index.\n    If the function returns a tuple with more than one element\n    a MultiIndex will be returned.\n\nExamples\n--------\n>>> idx = pd.Index([1, 2, 3])\n>>> idx.map({1: 'a', 2: 'b', 3: 'c'})\nIndex(['a', 'b', 'c'], dtype='object')\n\nUsing `map` with a function:\n\n>>> idx = pd.Index([1, 2, 3])\n>>> idx.map('I am a {}'.format)\nIndex(['I am a 1', 'I am a 2', 'I am a 3'], dtype='object')\n\n>>> idx = pd.Index(['a', 'b', 'c'])\n>>> idx.map(lambda x: x.upper())\nIndex(['A', 'B', 'C'], dtype='object')"
  },
  {
    "symbol": "MultiIndex.max",
    "signature": "(self, axis=None, skipna: 'bool' = True, *args, **kwargs)",
    "doc": "Return the maximum value of the Index.\n\nParameters\n----------\naxis : int, optional\n    For compatibility with NumPy. Only 0 or None are allowed.\nskipna : bool, default True\n    Exclude NA/null values when showing the result.\n*args, **kwargs\n    Additional arguments and keywords for compatibility with NumPy.\n\nReturns\n-------\nscalar\n    Maximum value.\n\nSee Also\n--------\nIndex.min : Return the minimum value in an Index.\nSeries.max : Return the maximum value in a Series.\nDataFrame.max : Return the maximum values in a DataFrame.\n\nExamples\n--------\n>>> idx = pd.Index([3, 2, 1])\n>>> idx.max()\n3\n\n>>> idx = pd.Index(['c', 'b', 'a'])\n>>> idx.max()\n'c'\n\nFor a MultiIndex, the maximum is determined lexicographically.\n\n>>> idx = pd.MultiIndex.from_product([('a', 'b'), (2, 1)])\n>>> idx.max()\n('b', 2)"
  },
  {
    "symbol": "MultiIndex.memory_usage",
    "signature": "(self, deep: 'bool' = False) -> 'int'",
    "doc": "Memory usage of the values.\n\nParameters\n----------\ndeep : bool, default False\n    Introspect the data deeply, interrogate\n    `object` dtypes for system-level memory consumption.\n\nReturns\n-------\nbytes used\n\nSee Also\n--------\nnumpy.ndarray.nbytes : Total bytes consumed by the elements of the\n    array.\n\nNotes\n-----\nMemory usage does not include memory consumed by elements that\nare not components of the array if deep=False or if used on PyPy\n\nExamples\n--------\n>>> idx = pd.Index([1, 2, 3])\n>>> idx.memory_usage()\n24"
  },
  {
    "symbol": "MultiIndex.min",
    "signature": "(self, axis=None, skipna: 'bool' = True, *args, **kwargs)",
    "doc": "Return the minimum value of the Index.\n\nParameters\n----------\naxis : {None}\n    Dummy argument for consistency with Series.\nskipna : bool, default True\n    Exclude NA/null values when showing the result.\n*args, **kwargs\n    Additional arguments and keywords for compatibility with NumPy.\n\nReturns\n-------\nscalar\n    Minimum value.\n\nSee Also\n--------\nIndex.max : Return the maximum value of the object.\nSeries.min : Return the minimum value in a Series.\nDataFrame.min : Return the minimum values in a DataFrame.\n\nExamples\n--------\n>>> idx = pd.Index([3, 2, 1])\n>>> idx.min()\n1\n\n>>> idx = pd.Index(['c', 'b', 'a'])\n>>> idx.min()\n'a'\n\nFor a MultiIndex, the minimum is determined lexicographically.\n\n>>> idx = pd.MultiIndex.from_product([('a', 'b'), (2, 1)])\n>>> idx.min()\n('a', 1)"
  },
  {
    "symbol": "MultiIndex.name",
    "signature": "(property)",
    "doc": "\nReturn Index or MultiIndex name.\n\nExamples\n--------\n>>> idx = pd.Index([1, 2, 3], name='x')\n>>> idx\nIndex([1, 2, 3], dtype='int64',  name='x')\n>>> idx.name\n'x'\n"
  },
  {
    "symbol": "MultiIndex.names",
    "signature": "(property)",
    "doc": "\n        Names of levels in MultiIndex.\n\n        Examples\n        --------\n        >>> mi = pd.MultiIndex.from_arrays(\n        ... [[1, 2], [3, 4], [5, 6]], names=['x', 'y', 'z'])\n        >>> mi\n        MultiIndex([(1, 3, 5),\n                    (2, 4, 6)],\n                   names=['x', 'y', 'z'])\n        >>> mi.names\n        FrozenList(['x', 'y', 'z'])\n        "
  },
  {
    "symbol": "MultiIndex.nbytes",
    "signature": "(property)",
    "doc": "return the number of bytes in the underlying data"
  },
  {
    "symbol": "MultiIndex.ndim",
    "signature": "(property)",
    "doc": "\nNumber of dimensions of the underlying data, by definition 1.\n\nExamples\n--------\n>>> s = pd.Series(['Ant', 'Bear', 'Cow'])\n>>> s\n0     Ant\n1    Bear\n2     Cow\ndtype: object\n>>> s.ndim\n1\n\nFor Index:\n\n>>> idx = pd.Index([1, 2, 3])\n>>> idx\nIndex([1, 2, 3], dtype='int64')\n>>> idx.ndim\n1\n"
  },
  {
    "symbol": "MultiIndex.nlevels",
    "signature": "(property)",
    "doc": "\nInteger number of levels in this MultiIndex.\n\nExamples\n--------\n>>> mi = pd.MultiIndex.from_arrays([['a'], ['b'], ['c']])\n>>> mi\nMultiIndex([('a', 'b', 'c')],\n           )\n>>> mi.nlevels\n3\n"
  },
  {
    "symbol": "MultiIndex.notna",
    "signature": "(self) -> 'npt.NDArray[np.bool_]'",
    "doc": "Detect existing (non-missing) values.\n\nReturn a boolean same-sized object indicating if the values are not NA.\nNon-missing values get mapped to ``True``. Characters such as empty\nstrings ``''`` or :attr:`numpy.inf` are not considered NA values.\nNA values, such as None or :attr:`numpy.NaN`, get mapped to ``False``\nvalues.\n\nReturns\n-------\nnumpy.ndarray[bool]\n    Boolean array to indicate which entries are not NA.\n\nSee Also\n--------\nIndex.notnull : Alias of notna.\nIndex.isna: Inverse of notna.\nnotna : Top-level notna.\n\nExamples\n--------\nShow which entries in an Index are not NA. The result is an\narray.\n\n>>> idx = pd.Index([5.2, 6.0, np.nan])\n>>> idx\nIndex([5.2, 6.0, nan], dtype='float64')\n>>> idx.notna()\narray([ True,  True, False])\n\nEmpty strings are not considered NA values. None is considered a NA\nvalue.\n\n>>> idx = pd.Index(['black', '', 'red', None])\n>>> idx\nIndex(['black', '', 'red', None], dtype='object')\n>>> idx.notna()\narray([ True,  True,  True, False])"
  },
  {
    "symbol": "MultiIndex.notnull",
    "signature": "(self) -> 'npt.NDArray[np.bool_]'",
    "doc": "Detect existing (non-missing) values.\n\nReturn a boolean same-sized object indicating if the values are not NA.\nNon-missing values get mapped to ``True``. Characters such as empty\nstrings ``''`` or :attr:`numpy.inf` are not considered NA values.\nNA values, such as None or :attr:`numpy.NaN`, get mapped to ``False``\nvalues.\n\nReturns\n-------\nnumpy.ndarray[bool]\n    Boolean array to indicate which entries are not NA.\n\nSee Also\n--------\nIndex.notnull : Alias of notna.\nIndex.isna: Inverse of notna.\nnotna : Top-level notna.\n\nExamples\n--------\nShow which entries in an Index are not NA. The result is an\narray.\n\n>>> idx = pd.Index([5.2, 6.0, np.nan])\n>>> idx\nIndex([5.2, 6.0, nan], dtype='float64')\n>>> idx.notna()\narray([ True,  True, False])\n\nEmpty strings are not considered NA values. None is considered a NA\nvalue.\n\n>>> idx = pd.Index(['black', '', 'red', None])\n>>> idx\nIndex(['black', '', 'red', None], dtype='object')\n>>> idx.notna()\narray([ True,  True,  True, False])"
  },
  {
    "symbol": "MultiIndex.nunique",
    "signature": "(self, dropna: 'bool' = True) -> 'int'",
    "doc": "Return number of unique elements in the object.\n\nExcludes NA values by default.\n\nParameters\n----------\ndropna : bool, default True\n    Don't include NaN in the count.\n\nReturns\n-------\nint\n\nSee Also\n--------\nDataFrame.nunique: Method nunique for DataFrame.\nSeries.count: Count non-NA/null observations in the Series.\n\nExamples\n--------\n>>> s = pd.Series([1, 3, 5, 7, 7])\n>>> s\n0    1\n1    3\n2    5\n3    7\n4    7\ndtype: int64\n\n>>> s.nunique()\n4"
  },
  {
    "symbol": "MultiIndex.putmask",
    "signature": "(self, mask, value: 'MultiIndex') -> 'MultiIndex'",
    "doc": "Return a new MultiIndex of the values set with the mask.\n\nParameters\n----------\nmask : array like\nvalue : MultiIndex\n    Must either be the same length as self or length one\n\nReturns\n-------\nMultiIndex"
  },
  {
    "symbol": "MultiIndex.ravel",
    "signature": "(self, order: 'str_t' = 'C') -> 'Self'",
    "doc": "Return a view on self.\n\nReturns\n-------\nIndex\n\nSee Also\n--------\nnumpy.ndarray.ravel : Return a flattened array.\n\nExamples\n--------\n>>> s = pd.Series([1, 2, 3], index=['a', 'b', 'c'])\n>>> s.index.ravel()\nIndex(['a', 'b', 'c'], dtype='object')"
  },
  {
    "symbol": "MultiIndex.reindex",
    "signature": "(self, target, method: 'ReindexMethod | None' = None, level=None, limit: 'int | None' = None, tolerance: 'float | None' = None) -> 'tuple[Index, npt.NDArray[np.intp] | None]'",
    "doc": "Create index with target's values.\n\nParameters\n----------\ntarget : an iterable\nmethod : {None, 'pad'/'ffill', 'backfill'/'bfill', 'nearest'}, optional\n    * default: exact matches only.\n    * pad / ffill: find the PREVIOUS index value if no exact match.\n    * backfill / bfill: use NEXT index value if no exact match\n    * nearest: use the NEAREST index value if no exact match. Tied\n      distances are broken by preferring the larger index value.\nlevel : int, optional\n    Level of multiindex.\nlimit : int, optional\n    Maximum number of consecutive labels in ``target`` to match for\n    inexact matches.\ntolerance : int or float, optional\n    Maximum distance between original and new labels for inexact\n    matches. The values of the index at the matching locations must\n    satisfy the equation ``abs(index[indexer] - target) <= tolerance``.\n\n    Tolerance may be a scalar value, which applies the same tolerance\n    to all values, or list-like, which applies variable tolerance per\n    element. List-like includes list, tuple, array, Series, and must be\n    the same size as the index and its dtype must exactly match the\n    index's type.\n\nReturns\n-------\nnew_index : pd.Index\n    Resulting index.\nindexer : np.ndarray[np.intp] or None\n    Indices of output values in original index.\n\nRaises\n------\nTypeError\n    If ``method`` passed along with ``level``.\nValueError\n    If non-unique multi-index\nValueError\n    If non-unique index and ``method`` or ``limit`` passed.\n\nSee Also\n--------\nSeries.reindex : Conform Series to new index with optional filling logic.\nDataFrame.reindex : Conform DataFrame to new index with optional filling logic.\n\nExamples\n--------\n>>> idx = pd.Index(['car', 'bike', 'train', 'tractor'])\n>>> idx\nIndex(['car', 'bike', 'train', 'tractor'], dtype='object')\n>>> idx.reindex(['car', 'bike'])\n(Index(['car', 'bike'], dtype='object'), array([0, 1]))"
  },
  {
    "symbol": "MultiIndex.remove_unused_levels",
    "signature": "(self) -> 'MultiIndex'",
    "doc": "Create new MultiIndex from current that removes unused levels.\n\nUnused level(s) means levels that are not expressed in the\nlabels. The resulting MultiIndex will have the same outward\nappearance, meaning the same .values and ordering. It will\nalso be .equals() to the original.\n\nReturns\n-------\nMultiIndex\n\nExamples\n--------\n>>> mi = pd.MultiIndex.from_product([range(2), list('ab')])\n>>> mi\nMultiIndex([(0, 'a'),\n            (0, 'b'),\n            (1, 'a'),\n            (1, 'b')],\n           )\n\n>>> mi[2:]\nMultiIndex([(1, 'a'),\n            (1, 'b')],\n           )\n\nThe 0 from the first level is not represented\nand can be removed\n\n>>> mi2 = mi[2:].remove_unused_levels()\n>>> mi2.levels\nFrozenList([[1], ['a', 'b']])"
  },
  {
    "symbol": "MultiIndex.rename",
    "signature": "(self, names, *, level=None, inplace: 'bool' = False) -> 'Self | None'",
    "doc": "Set Index or MultiIndex name.\n\nAble to set new names partially and by level.\n\nParameters\n----------\n\nnames : label or list of label or dict-like for MultiIndex\n    Name(s) to set.\n\n    .. versionchanged:: 1.3.0\n\nlevel : int, label or list of int or label, optional\n    If the index is a MultiIndex and names is not dict-like, level(s) to set\n    (None for all levels). Otherwise level must be None.\n\n    .. versionchanged:: 1.3.0\n\ninplace : bool, default False\n    Modifies the object directly, instead of creating a new Index or\n    MultiIndex.\n\nReturns\n-------\nIndex or None\n    The same type as the caller or None if ``inplace=True``.\n\nSee Also\n--------\nIndex.rename : Able to set new names without level.\n\nExamples\n--------\n>>> idx = pd.Index([1, 2, 3, 4])\n>>> idx\nIndex([1, 2, 3, 4], dtype='int64')\n>>> idx.set_names('quarter')\nIndex([1, 2, 3, 4], dtype='int64', name='quarter')\n\n>>> idx = pd.MultiIndex.from_product([['python', 'cobra'],\n...                                   [2018, 2019]])\n>>> idx\nMultiIndex([('python', 2018),\n            ('python', 2019),\n            ( 'cobra', 2018),\n            ( 'cobra', 2019)],\n           )\n>>> idx = idx.set_names(['kind', 'year'])\n>>> idx.set_names('species', level=0)\nMultiIndex([('python', 2018),\n            ('python', 2019),\n            ( 'cobra', 2018),\n            ( 'cobra', 2019)],\n           names=['species', 'year'])\n\nWhen renaming levels with a dict, levels can not be passed.\n\n>>> idx.set_names({'kind': 'snake'})\nMultiIndex([('python', 2018),\n            ('python', 2019),\n            ( 'cobra', 2018),\n            ( 'cobra', 2019)],\n           names=['snake', 'year'])"
  },
  {
    "symbol": "MultiIndex.reorder_levels",
    "signature": "(self, order) -> 'MultiIndex'",
    "doc": "Rearrange levels using input order. May not drop or duplicate levels.\n\nParameters\n----------\norder : list of int or list of str\n    List representing new level order. Reference level by number\n    (position) or by key (label).\n\nReturns\n-------\nMultiIndex\n\nExamples\n--------\n>>> mi = pd.MultiIndex.from_arrays([[1, 2], [3, 4]], names=['x', 'y'])\n>>> mi\nMultiIndex([(1, 3),\n            (2, 4)],\n           names=['x', 'y'])\n\n>>> mi.reorder_levels(order=[1, 0])\nMultiIndex([(3, 1),\n            (4, 2)],\n           names=['y', 'x'])\n\n>>> mi.reorder_levels(order=['y', 'x'])\nMultiIndex([(3, 1),\n            (4, 2)],\n           names=['y', 'x'])"
  },
  {
    "symbol": "MultiIndex.repeat",
    "signature": "(self, repeats: 'int', axis=None) -> 'MultiIndex'",
    "doc": "Repeat elements of a MultiIndex.\n\nReturns a new MultiIndex where each element of the current MultiIndex\nis repeated consecutively a given number of times.\n\nParameters\n----------\nrepeats : int or array of ints\n    The number of repetitions for each element. This should be a\n    non-negative integer. Repeating 0 times will return an empty\n    MultiIndex.\naxis : None\n    Must be ``None``. Has no effect but is accepted for compatibility\n    with numpy.\n\nReturns\n-------\nMultiIndex\n    Newly created MultiIndex with repeated elements.\n\nSee Also\n--------\nSeries.repeat : Equivalent function for Series.\nnumpy.repeat : Similar method for :class:`numpy.ndarray`.\n\nExamples\n--------\n>>> idx = pd.Index(['a', 'b', 'c'])\n>>> idx\nIndex(['a', 'b', 'c'], dtype='object')\n>>> idx.repeat(2)\nIndex(['a', 'a', 'b', 'b', 'c', 'c'], dtype='object')\n>>> idx.repeat([1, 2, 3])\nIndex(['a', 'b', 'b', 'c', 'c', 'c'], dtype='object')"
  },
  {
    "symbol": "MultiIndex.round",
    "signature": "(self, decimals: 'int' = 0) -> 'Self'",
    "doc": "Round each value in the Index to the given number of decimals.\n\nParameters\n----------\ndecimals : int, optional\n    Number of decimal places to round to. If decimals is negative,\n    it specifies the number of positions to the left of the decimal point.\n\nReturns\n-------\nIndex\n    A new Index with the rounded values.\n\nExamples\n--------\n>>> import pandas as pd\n>>> idx = pd.Index([10.1234, 20.5678, 30.9123, 40.4567, 50.7890])\n>>> idx.round(decimals=2)\nIndex([10.12, 20.57, 30.91, 40.46, 50.79], dtype='float64')"
  },
  {
    "symbol": "MultiIndex.searchsorted",
    "signature": "(self, value: 'NumpyValueArrayLike | ExtensionArray', side: \"Literal['left', 'right']\" = 'left', sorter: 'NumpySorter | None' = None) -> 'npt.NDArray[np.intp] | np.intp'",
    "doc": "Find indices where elements should be inserted to maintain order.\n\nFind the indices into a sorted Index `self` such that, if the\ncorresponding elements in `value` were inserted before the indices,\nthe order of `self` would be preserved.\n\n.. note::\n\n    The Index *must* be monotonically sorted, otherwise\n    wrong locations will likely be returned. Pandas does *not*\n    check this for you.\n\nParameters\n----------\nvalue : array-like or scalar\n    Values to insert into `self`.\nside : {'left', 'right'}, optional\n    If 'left', the index of the first suitable location found is given.\n    If 'right', return the last such index.  If there is no suitable\n    index, return either 0 or N (where N is the length of `self`).\nsorter : 1-D array-like, optional\n    Optional array of integer indices that sort `self` into ascending\n    order. They are typically the result of ``np.argsort``.\n\nReturns\n-------\nint or array of int\n    A scalar or array of insertion points with the\n    same shape as `value`.\n\nSee Also\n--------\nsort_values : Sort by the values along either axis.\nnumpy.searchsorted : Similar method from NumPy.\n\nNotes\n-----\nBinary search is used to find the required insertion points.\n\nExamples\n--------\n>>> ser = pd.Series([1, 2, 3])\n>>> ser\n0    1\n1    2\n2    3\ndtype: int64\n\n>>> ser.searchsorted(4)\n3\n\n>>> ser.searchsorted([0, 4])\narray([0, 3])\n\n>>> ser.searchsorted([1, 3], side='left')\narray([0, 2])\n\n>>> ser.searchsorted([1, 3], side='right')\narray([1, 3])\n\n>>> ser = pd.Series(pd.to_datetime(['3/11/2000', '3/12/2000', '3/13/2000']))\n>>> ser\n0   2000-03-11\n1   2000-03-12\n2   2000-03-13\ndtype: datetime64[ns]\n\n>>> ser.searchsorted('3/14/2000')\n3\n\n>>> ser = pd.Categorical(\n...     ['apple', 'bread', 'bread', 'cheese', 'milk'], ordered=True\n... )\n>>> ser\n['apple', 'bread', 'bread', 'cheese', 'milk']\nCategories (4, object): ['apple' < 'bread' < 'cheese' < 'milk']\n\n>>> ser.searchsorted('bread')\n1\n\n>>> ser.searchsorted(['bread'], side='right')\narray([3])\n\nIf the values are not monotonically sorted, wrong locations\nmay be returned:\n\n>>> ser = pd.Series([2, 1, 3])\n>>> ser\n0    2\n1    1\n2    3\ndtype: int64\n\n>>> ser.searchsorted(1)  # doctest: +SKIP\n0  # wrong result, correct would be 1"
  },
  {
    "symbol": "MultiIndex.set_codes",
    "signature": "(self, codes, *, level=None, verify_integrity: 'bool' = True) -> 'MultiIndex'",
    "doc": "Set new codes on MultiIndex. Defaults to returning new index.\n\nParameters\n----------\ncodes : sequence or list of sequence\n    New codes to apply.\nlevel : int, level name, or sequence of int/level names (default None)\n    Level(s) to set (None for all levels).\nverify_integrity : bool, default True\n    If True, checks that levels and codes are compatible.\n\nReturns\n-------\nnew index (of same type and class...etc) or None\n    The same type as the caller or None if ``inplace=True``.\n\nExamples\n--------\n>>> idx = pd.MultiIndex.from_tuples(\n...     [(1, \"one\"), (1, \"two\"), (2, \"one\"), (2, \"two\")], names=[\"foo\", \"bar\"]\n... )\n>>> idx\nMultiIndex([(1, 'one'),\n    (1, 'two'),\n    (2, 'one'),\n    (2, 'two')],\n   names=['foo', 'bar'])\n\n>>> idx.set_codes([[1, 0, 1, 0], [0, 0, 1, 1]])\nMultiIndex([(2, 'one'),\n            (1, 'one'),\n            (2, 'two'),\n            (1, 'two')],\n           names=['foo', 'bar'])\n>>> idx.set_codes([1, 0, 1, 0], level=0)\nMultiIndex([(2, 'one'),\n            (1, 'two'),\n            (2, 'one'),\n            (1, 'two')],\n           names=['foo', 'bar'])\n>>> idx.set_codes([0, 0, 1, 1], level='bar')\nMultiIndex([(1, 'one'),\n            (1, 'one'),\n            (2, 'two'),\n            (2, 'two')],\n           names=['foo', 'bar'])\n>>> idx.set_codes([[1, 0, 1, 0], [0, 0, 1, 1]], level=[0, 1])\nMultiIndex([(2, 'one'),\n            (1, 'one'),\n            (2, 'two'),\n            (1, 'two')],\n           names=['foo', 'bar'])"
  },
  {
    "symbol": "MultiIndex.set_levels",
    "signature": "(self, levels, *, level=None, verify_integrity: 'bool' = True) -> 'MultiIndex'",
    "doc": "Set new levels on MultiIndex. Defaults to returning new index.\n\nParameters\n----------\nlevels : sequence or list of sequence\n    New level(s) to apply.\nlevel : int, level name, or sequence of int/level names (default None)\n    Level(s) to set (None for all levels).\nverify_integrity : bool, default True\n    If True, checks that levels and codes are compatible.\n\nReturns\n-------\nMultiIndex\n\nExamples\n--------\n>>> idx = pd.MultiIndex.from_tuples(\n...     [\n...         (1, \"one\"),\n...         (1, \"two\"),\n...         (2, \"one\"),\n...         (2, \"two\"),\n...         (3, \"one\"),\n...         (3, \"two\")\n...     ],\n...     names=[\"foo\", \"bar\"]\n... )\n>>> idx\nMultiIndex([(1, 'one'),\n    (1, 'two'),\n    (2, 'one'),\n    (2, 'two'),\n    (3, 'one'),\n    (3, 'two')],\n   names=['foo', 'bar'])\n\n>>> idx.set_levels([['a', 'b', 'c'], [1, 2]])\nMultiIndex([('a', 1),\n            ('a', 2),\n            ('b', 1),\n            ('b', 2),\n            ('c', 1),\n            ('c', 2)],\n           names=['foo', 'bar'])\n>>> idx.set_levels(['a', 'b', 'c'], level=0)\nMultiIndex([('a', 'one'),\n            ('a', 'two'),\n            ('b', 'one'),\n            ('b', 'two'),\n            ('c', 'one'),\n            ('c', 'two')],\n           names=['foo', 'bar'])\n>>> idx.set_levels(['a', 'b'], level='bar')\nMultiIndex([(1, 'a'),\n            (1, 'b'),\n            (2, 'a'),\n            (2, 'b'),\n            (3, 'a'),\n            (3, 'b')],\n           names=['foo', 'bar'])\n\nIf any of the levels passed to ``set_levels()`` exceeds the\nexisting length, all of the values from that argument will\nbe stored in the MultiIndex levels, though the values will\nbe truncated in the MultiIndex output.\n\n>>> idx.set_levels([['a', 'b', 'c'], [1, 2, 3, 4]], level=[0, 1])\nMultiIndex([('a', 1),\n    ('a', 2),\n    ('b', 1),\n    ('b', 2),\n    ('c', 1),\n    ('c', 2)],\n   names=['foo', 'bar'])\n>>> idx.set_levels([['a', 'b', 'c'], [1, 2, 3, 4]], level=[0, 1]).levels\nFrozenList([['a', 'b', 'c'], [1, 2, 3, 4]])"
  },
  {
    "symbol": "MultiIndex.set_names",
    "signature": "(self, names, *, level=None, inplace: 'bool' = False) -> 'Self | None'",
    "doc": "Set Index or MultiIndex name.\n\nAble to set new names partially and by level.\n\nParameters\n----------\n\nnames : label or list of label or dict-like for MultiIndex\n    Name(s) to set.\n\n    .. versionchanged:: 1.3.0\n\nlevel : int, label or list of int or label, optional\n    If the index is a MultiIndex and names is not dict-like, level(s) to set\n    (None for all levels). Otherwise level must be None.\n\n    .. versionchanged:: 1.3.0\n\ninplace : bool, default False\n    Modifies the object directly, instead of creating a new Index or\n    MultiIndex.\n\nReturns\n-------\nIndex or None\n    The same type as the caller or None if ``inplace=True``.\n\nSee Also\n--------\nIndex.rename : Able to set new names without level.\n\nExamples\n--------\n>>> idx = pd.Index([1, 2, 3, 4])\n>>> idx\nIndex([1, 2, 3, 4], dtype='int64')\n>>> idx.set_names('quarter')\nIndex([1, 2, 3, 4], dtype='int64', name='quarter')\n\n>>> idx = pd.MultiIndex.from_product([['python', 'cobra'],\n...                                   [2018, 2019]])\n>>> idx\nMultiIndex([('python', 2018),\n            ('python', 2019),\n            ( 'cobra', 2018),\n            ( 'cobra', 2019)],\n           )\n>>> idx = idx.set_names(['kind', 'year'])\n>>> idx.set_names('species', level=0)\nMultiIndex([('python', 2018),\n            ('python', 2019),\n            ( 'cobra', 2018),\n            ( 'cobra', 2019)],\n           names=['species', 'year'])\n\nWhen renaming levels with a dict, levels can not be passed.\n\n>>> idx.set_names({'kind': 'snake'})\nMultiIndex([('python', 2018),\n            ('python', 2019),\n            ( 'cobra', 2018),\n            ( 'cobra', 2019)],\n           names=['snake', 'year'])"
  },
  {
    "symbol": "MultiIndex.shape",
    "signature": "(property)",
    "doc": "\nReturn a tuple of the shape of the underlying data.\n\nExamples\n--------\n>>> idx = pd.Index([1, 2, 3])\n>>> idx\nIndex([1, 2, 3], dtype='int64')\n>>> idx.shape\n(3,)\n"
  },
  {
    "symbol": "MultiIndex.shift",
    "signature": "(self, periods: 'int' = 1, freq=None)",
    "doc": "Shift index by desired number of time frequency increments.\n\nThis method is for shifting the values of datetime-like indexes\nby a specified time increment a given number of times.\n\nParameters\n----------\nperiods : int, default 1\n    Number of periods (or increments) to shift by,\n    can be positive or negative.\nfreq : pandas.DateOffset, pandas.Timedelta or str, optional\n    Frequency increment to shift by.\n    If None, the index is shifted by its own `freq` attribute.\n    Offset aliases are valid strings, e.g., 'D', 'W', 'M' etc.\n\nReturns\n-------\npandas.Index\n    Shifted index.\n\nSee Also\n--------\nSeries.shift : Shift values of Series.\n\nNotes\n-----\nThis method is only implemented for datetime-like index classes,\ni.e., DatetimeIndex, PeriodIndex and TimedeltaIndex.\n\nExamples\n--------\nPut the first 5 month starts of 2011 into an index.\n\n>>> month_starts = pd.date_range('1/1/2011', periods=5, freq='MS')\n>>> month_starts\nDatetimeIndex(['2011-01-01', '2011-02-01', '2011-03-01', '2011-04-01',\n               '2011-05-01'],\n              dtype='datetime64[ns]', freq='MS')\n\nShift the index by 10 days.\n\n>>> month_starts.shift(10, freq='D')\nDatetimeIndex(['2011-01-11', '2011-02-11', '2011-03-11', '2011-04-11',\n               '2011-05-11'],\n              dtype='datetime64[ns]', freq=None)\n\nThe default value of `freq` is the `freq` attribute of the index,\nwhich is 'MS' (month start) in this example.\n\n>>> month_starts.shift(10)\nDatetimeIndex(['2011-11-01', '2011-12-01', '2012-01-01', '2012-02-01',\n               '2012-03-01'],\n              dtype='datetime64[ns]', freq='MS')"
  },
  {
    "symbol": "MultiIndex.size",
    "signature": "(property)",
    "doc": "\nReturn the number of elements in the underlying data.\n"
  },
  {
    "symbol": "MultiIndex.slice_indexer",
    "signature": "(self, start: 'Hashable | None' = None, end: 'Hashable | None' = None, step: 'int | None' = None) -> 'slice'",
    "doc": "Compute the slice indexer for input labels and step.\n\nIndex needs to be ordered and unique.\n\nParameters\n----------\nstart : label, default None\n    If None, defaults to the beginning.\nend : label, default None\n    If None, defaults to the end.\nstep : int, default None\n\nReturns\n-------\nslice\n\nRaises\n------\nKeyError : If key does not exist, or key is not unique and index is\n    not ordered.\n\nNotes\n-----\nThis function assumes that the data is sorted, so use at your own peril\n\nExamples\n--------\nThis is a method on all index types. For example you can do:\n\n>>> idx = pd.Index(list('abcd'))\n>>> idx.slice_indexer(start='b', end='c')\nslice(1, 3, None)\n\n>>> idx = pd.MultiIndex.from_arrays([list('abcd'), list('efgh')])\n>>> idx.slice_indexer(start='b', end=('c', 'g'))\nslice(1, 3, None)"
  },
  {
    "symbol": "MultiIndex.slice_locs",
    "signature": "(self, start=None, end=None, step=None) -> 'tuple[int, int]'",
    "doc": "For an ordered MultiIndex, compute the slice locations for input\nlabels.\n\nThe input labels can be tuples representing partial levels, e.g. for a\nMultiIndex with 3 levels, you can pass a single value (corresponding to\nthe first level), or a 1-, 2-, or 3-tuple.\n\nParameters\n----------\nstart : label or tuple, default None\n    If None, defaults to the beginning\nend : label or tuple\n    If None, defaults to the end\nstep : int or None\n    Slice step\n\nReturns\n-------\n(start, end) : (int, int)\n\nNotes\n-----\nThis method only works if the MultiIndex is properly lexsorted. So,\nif only the first 2 levels of a 3-level MultiIndex are lexsorted,\nyou can only pass two levels to ``.slice_locs``.\n\nExamples\n--------\n>>> mi = pd.MultiIndex.from_arrays([list('abbd'), list('deff')],\n...                                names=['A', 'B'])\n\nGet the slice locations from the beginning of 'b' in the first level\nuntil the end of the multiindex:\n\n>>> mi.slice_locs(start='b')\n(1, 4)\n\nLike above, but stop at the end of 'b' in the first level and 'f' in\nthe second level:\n\n>>> mi.slice_locs(start='b', end=('b', 'f'))\n(1, 3)\n\nSee Also\n--------\nMultiIndex.get_loc : Get location for a label or a tuple of labels.\nMultiIndex.get_locs : Get location for a label/slice/list/mask or a\n                      sequence of such."
  },
  {
    "symbol": "MultiIndex.sort",
    "signature": "(self, *args, **kwargs)",
    "doc": "Use sort_values instead."
  },
  {
    "symbol": "MultiIndex.sort_values",
    "signature": "(self, *, return_indexer: 'bool' = False, ascending: 'bool' = True, na_position: 'NaPosition' = 'last', key: 'Callable | None' = None) -> 'Self | tuple[Self, np.ndarray]'",
    "doc": "Return a sorted copy of the index.\n\nReturn a sorted copy of the index, and optionally return the indices\nthat sorted the index itself.\n\nParameters\n----------\nreturn_indexer : bool, default False\n    Should the indices that would sort the index be returned.\nascending : bool, default True\n    Should the index values be sorted in an ascending order.\nna_position : {'first' or 'last'}, default 'last'\n    Argument 'first' puts NaNs at the beginning, 'last' puts NaNs at\n    the end.\nkey : callable, optional\n    If not None, apply the key function to the index values\n    before sorting. This is similar to the `key` argument in the\n    builtin :meth:`sorted` function, with the notable difference that\n    this `key` function should be *vectorized*. It should expect an\n    ``Index`` and return an ``Index`` of the same shape.\n\nReturns\n-------\nsorted_index : pandas.Index\n    Sorted copy of the index.\nindexer : numpy.ndarray, optional\n    The indices that the index itself was sorted by.\n\nSee Also\n--------\nSeries.sort_values : Sort values of a Series.\nDataFrame.sort_values : Sort values in a DataFrame.\n\nExamples\n--------\n>>> idx = pd.Index([10, 100, 1, 1000])\n>>> idx\nIndex([10, 100, 1, 1000], dtype='int64')\n\nSort values in ascending order (default behavior).\n\n>>> idx.sort_values()\nIndex([1, 10, 100, 1000], dtype='int64')\n\nSort values in descending order, and also get the indices `idx` was\nsorted by.\n\n>>> idx.sort_values(ascending=False, return_indexer=True)\n(Index([1000, 100, 10, 1], dtype='int64'), array([3, 1, 0, 2]))"
  },
  {
    "symbol": "MultiIndex.sortlevel",
    "signature": "(self, level: 'IndexLabel' = 0, ascending: 'bool | list[bool]' = True, sort_remaining: 'bool' = True, na_position: 'str' = 'first') -> 'tuple[MultiIndex, npt.NDArray[np.intp]]'",
    "doc": "Sort MultiIndex at the requested level.\n\nThe result will respect the original ordering of the associated\nfactor at that level.\n\nParameters\n----------\nlevel : list-like, int or str, default 0\n    If a string is given, must be a name of the level.\n    If list-like must be names or ints of levels.\nascending : bool, default True\n    False to sort in descending order.\n    Can also be a list to specify a directed ordering.\nsort_remaining : sort by the remaining levels after level\nna_position : {'first' or 'last'}, default 'first'\n    Argument 'first' puts NaNs at the beginning, 'last' puts NaNs at\n    the end.\n\n    .. versionadded:: 2.1.0\n\nReturns\n-------\nsorted_index : pd.MultiIndex\n    Resulting index.\nindexer : np.ndarray[np.intp]\n    Indices of output values in original index.\n\nExamples\n--------\n>>> mi = pd.MultiIndex.from_arrays([[0, 0], [2, 1]])\n>>> mi\nMultiIndex([(0, 2),\n            (0, 1)],\n           )\n\n>>> mi.sortlevel()\n(MultiIndex([(0, 1),\n            (0, 2)],\n           ), array([1, 0]))\n\n>>> mi.sortlevel(sort_remaining=False)\n(MultiIndex([(0, 2),\n            (0, 1)],\n           ), array([0, 1]))\n\n>>> mi.sortlevel(1)\n(MultiIndex([(0, 1),\n            (0, 2)],\n           ), array([1, 0]))\n\n>>> mi.sortlevel(1, ascending=False)\n(MultiIndex([(0, 2),\n            (0, 1)],\n           ), array([0, 1]))"
  },
  {
    "symbol": "MultiIndex.swaplevel",
    "signature": "(self, i=-2, j=-1) -> 'MultiIndex'",
    "doc": "Swap level i with level j.\n\nCalling this method does not change the ordering of the values.\n\nParameters\n----------\ni : int, str, default -2\n    First level of index to be swapped. Can pass level name as string.\n    Type of parameters can be mixed.\nj : int, str, default -1\n    Second level of index to be swapped. Can pass level name as string.\n    Type of parameters can be mixed.\n\nReturns\n-------\nMultiIndex\n    A new MultiIndex.\n\nSee Also\n--------\nSeries.swaplevel : Swap levels i and j in a MultiIndex.\nDataFrame.swaplevel : Swap levels i and j in a MultiIndex on a\n    particular axis.\n\nExamples\n--------\n>>> mi = pd.MultiIndex(levels=[['a', 'b'], ['bb', 'aa']],\n...                    codes=[[0, 0, 1, 1], [0, 1, 0, 1]])\n>>> mi\nMultiIndex([('a', 'bb'),\n            ('a', 'aa'),\n            ('b', 'bb'),\n            ('b', 'aa')],\n           )\n>>> mi.swaplevel(0, 1)\nMultiIndex([('bb', 'a'),\n            ('aa', 'a'),\n            ('bb', 'b'),\n            ('aa', 'b')],\n           )"
  },
  {
    "symbol": "MultiIndex.symmetric_difference",
    "signature": "(self, other, result_name=None, sort=None)",
    "doc": "Compute the symmetric difference of two Index objects.\n\nParameters\n----------\nother : Index or array-like\nresult_name : str\nsort : bool or None, default None\n    Whether to sort the resulting index. By default, the\n    values are attempted to be sorted, but any TypeError from\n    incomparable elements is caught by pandas.\n\n    * None : Attempt to sort the result, but catch any TypeErrors\n      from comparing incomparable elements.\n    * False : Do not sort the result.\n    * True : Sort the result (which may raise TypeError).\n\nReturns\n-------\nIndex\n\nNotes\n-----\n``symmetric_difference`` contains elements that appear in either\n``idx1`` or ``idx2`` but not both. Equivalent to the Index created by\n``idx1.difference(idx2) | idx2.difference(idx1)`` with duplicates\ndropped.\n\nExamples\n--------\n>>> idx1 = pd.Index([1, 2, 3, 4])\n>>> idx2 = pd.Index([2, 3, 4, 5])\n>>> idx1.symmetric_difference(idx2)\nIndex([1, 5], dtype='int64')"
  },
  {
    "symbol": "MultiIndex.take",
    "signature": "(self: 'MultiIndex', indices, axis: 'Axis' = 0, allow_fill: 'bool' = True, fill_value=None, **kwargs) -> 'MultiIndex'",
    "doc": "Return a new MultiIndex of the values selected by the indices.\n\nFor internal compatibility with numpy arrays.\n\nParameters\n----------\nindices : array-like\n    Indices to be taken.\naxis : int, optional\n    The axis over which to select values, always 0.\nallow_fill : bool, default True\nfill_value : scalar, default None\n    If allow_fill=True and fill_value is not None, indices specified by\n    -1 are regarded as NA. If Index doesn't hold NA, raise ValueError.\n\nReturns\n-------\nIndex\n    An index formed of elements at the given indices. Will be the same\n    type as self, except for RangeIndex.\n\nSee Also\n--------\nnumpy.ndarray.take: Return an array formed from the\n    elements of a at the given indices.\n\nExamples\n--------\n>>> idx = pd.Index(['a', 'b', 'c'])\n>>> idx.take([2, 2, 1, 2])\nIndex(['c', 'c', 'b', 'c'], dtype='object')"
  },
  {
    "symbol": "MultiIndex.to_flat_index",
    "signature": "(self) -> 'Index'",
    "doc": "Convert a MultiIndex to an Index of Tuples containing the level values.\n\nReturns\n-------\npd.Index\n    Index with the MultiIndex data represented in Tuples.\n\nSee Also\n--------\nMultiIndex.from_tuples : Convert flat index back to MultiIndex.\n\nNotes\n-----\nThis method will simply return the caller if called by anything other\nthan a MultiIndex.\n\nExamples\n--------\n>>> index = pd.MultiIndex.from_product(\n...     [['foo', 'bar'], ['baz', 'qux']],\n...     names=['a', 'b'])\n>>> index.to_flat_index()\nIndex([('foo', 'baz'), ('foo', 'qux'),\n       ('bar', 'baz'), ('bar', 'qux')],\n      dtype='object')"
  },
  {
    "symbol": "MultiIndex.to_frame",
    "signature": "(self, index: 'bool' = True, name=<no_default>, allow_duplicates: 'bool' = False) -> 'DataFrame'",
    "doc": "Create a DataFrame with the levels of the MultiIndex as columns.\n\nColumn ordering is determined by the DataFrame constructor with data as\na dict.\n\nParameters\n----------\nindex : bool, default True\n    Set the index of the returned DataFrame as the original MultiIndex.\n\nname : list / sequence of str, optional\n    The passed names should substitute index level names.\n\nallow_duplicates : bool, optional default False\n    Allow duplicate column labels to be created.\n\n    .. versionadded:: 1.5.0\n\nReturns\n-------\nDataFrame\n\nSee Also\n--------\nDataFrame : Two-dimensional, size-mutable, potentially heterogeneous\n    tabular data.\n\nExamples\n--------\n>>> mi = pd.MultiIndex.from_arrays([['a', 'b'], ['c', 'd']])\n>>> mi\nMultiIndex([('a', 'c'),\n            ('b', 'd')],\n           )\n\n>>> df = mi.to_frame()\n>>> df\n     0  1\na c  a  c\nb d  b  d\n\n>>> df = mi.to_frame(index=False)\n>>> df\n   0  1\n0  a  c\n1  b  d\n\n>>> df = mi.to_frame(name=['x', 'y'])\n>>> df\n     x  y\na c  a  c\nb d  b  d"
  },
  {
    "symbol": "MultiIndex.to_list",
    "signature": "(self)",
    "doc": "Return a list of the values.\n\nThese are each a scalar type, which is a Python scalar\n(for str, int, float) or a pandas scalar\n(for Timestamp/Timedelta/Interval/Period)\n\nReturns\n-------\nlist\n\nSee Also\n--------\nnumpy.ndarray.tolist : Return the array as an a.ndim-levels deep\n    nested list of Python scalars.\n\nExamples\n--------\nFor Series\n\n>>> s = pd.Series([1, 2, 3])\n>>> s.to_list()\n[1, 2, 3]\n\nFor Index:\n\n>>> idx = pd.Index([1, 2, 3])\n>>> idx\nIndex([1, 2, 3], dtype='int64')\n\n>>> idx.to_list()\n[1, 2, 3]"
  },
  {
    "symbol": "MultiIndex.to_numpy",
    "signature": "(self, dtype: 'npt.DTypeLike | None' = None, copy: 'bool' = False, na_value: 'object' = <no_default>, **kwargs) -> 'np.ndarray'",
    "doc": "A NumPy ndarray representing the values in this Series or Index.\n\nParameters\n----------\ndtype : str or numpy.dtype, optional\n    The dtype to pass to :meth:`numpy.asarray`.\ncopy : bool, default False\n    Whether to ensure that the returned value is not a view on\n    another array. Note that ``copy=False`` does not *ensure* that\n    ``to_numpy()`` is no-copy. Rather, ``copy=True`` ensure that\n    a copy is made, even if not strictly necessary.\nna_value : Any, optional\n    The value to use for missing values. The default value depends\n    on `dtype` and the type of the array.\n**kwargs\n    Additional keywords passed through to the ``to_numpy`` method\n    of the underlying array (for extension arrays).\n\nReturns\n-------\nnumpy.ndarray\n\nSee Also\n--------\nSeries.array : Get the actual data stored within.\nIndex.array : Get the actual data stored within.\nDataFrame.to_numpy : Similar method for DataFrame.\n\nNotes\n-----\nThe returned array will be the same up to equality (values equal\nin `self` will be equal in the returned array; likewise for values\nthat are not equal). When `self` contains an ExtensionArray, the\ndtype may be different. For example, for a category-dtype Series,\n``to_numpy()`` will return a NumPy array and the categorical dtype\nwill be lost.\n\nFor NumPy dtypes, this will be a reference to the actual data stored\nin this Series or Index (assuming ``copy=False``). Modifying the result\nin place will modify the data stored in the Series or Index (not that\nwe recommend doing that).\n\nFor extension types, ``to_numpy()`` *may* require copying data and\ncoercing the result to a NumPy type (possibly object), which may be\nexpensive. When you need a no-copy reference to the underlying data,\n:attr:`Series.array` should be used instead.\n\nThis table lays out the different dtypes and default return types of\n``to_numpy()`` for various dtypes within pandas.\n\n================== ================================\ndtype              array type\n================== ================================\ncategory[T]        ndarray[T] (same dtype as input)\nperiod             ndarray[object] (Periods)\ninterval           ndarray[object] (Intervals)\nIntegerNA          ndarray[object]\ndatetime64[ns]     datetime64[ns]\ndatetime64[ns, tz] ndarray[object] (Timestamps)\n================== ================================\n\nExamples\n--------\n>>> ser = pd.Series(pd.Categorical(['a', 'b', 'a']))\n>>> ser.to_numpy()\narray(['a', 'b', 'a'], dtype=object)\n\nSpecify the `dtype` to control how datetime-aware data is represented.\nUse ``dtype=object`` to return an ndarray of pandas :class:`Timestamp`\nobjects, each with the correct ``tz``.\n\n>>> ser = pd.Series(pd.date_range('2000', periods=2, tz=\"CET\"))\n>>> ser.to_numpy(dtype=object)\narray([Timestamp('2000-01-01 00:00:00+0100', tz='CET'),\n       Timestamp('2000-01-02 00:00:00+0100', tz='CET')],\n      dtype=object)\n\nOr ``dtype='datetime64[ns]'`` to return an ndarray of native\ndatetime64 values. The values are converted to UTC and the timezone\ninfo is dropped.\n\n>>> ser.to_numpy(dtype=\"datetime64[ns]\")\n... # doctest: +ELLIPSIS\narray(['1999-12-31T23:00:00.000000000', '2000-01-01T23:00:00...'],\n      dtype='datetime64[ns]')"
  },
  {
    "symbol": "MultiIndex.to_series",
    "signature": "(self, index=None, name: 'Hashable | None' = None) -> 'Series'",
    "doc": "Create a Series with both index and values equal to the index keys.\n\nUseful with map for returning an indexer based on an index.\n\nParameters\n----------\nindex : Index, optional\n    Index of resulting Series. If None, defaults to original index.\nname : str, optional\n    Name of resulting Series. If None, defaults to name of original\n    index.\n\nReturns\n-------\nSeries\n    The dtype will be based on the type of the Index values.\n\nSee Also\n--------\nIndex.to_frame : Convert an Index to a DataFrame.\nSeries.to_frame : Convert Series to DataFrame.\n\nExamples\n--------\n>>> idx = pd.Index(['Ant', 'Bear', 'Cow'], name='animal')\n\nBy default, the original index and original name is reused.\n\n>>> idx.to_series()\nanimal\nAnt      Ant\nBear    Bear\nCow      Cow\nName: animal, dtype: object\n\nTo enforce a new index, specify new labels to ``index``:\n\n>>> idx.to_series(index=[0, 1, 2])\n0     Ant\n1    Bear\n2     Cow\nName: animal, dtype: object\n\nTo override the name of the resulting column, specify ``name``:\n\n>>> idx.to_series(name='zoo')\nanimal\nAnt      Ant\nBear    Bear\nCow      Cow\nName: zoo, dtype: object"
  },
  {
    "symbol": "MultiIndex.tolist",
    "signature": "(self)",
    "doc": "Return a list of the values.\n\nThese are each a scalar type, which is a Python scalar\n(for str, int, float) or a pandas scalar\n(for Timestamp/Timedelta/Interval/Period)\n\nReturns\n-------\nlist\n\nSee Also\n--------\nnumpy.ndarray.tolist : Return the array as an a.ndim-levels deep\n    nested list of Python scalars.\n\nExamples\n--------\nFor Series\n\n>>> s = pd.Series([1, 2, 3])\n>>> s.to_list()\n[1, 2, 3]\n\nFor Index:\n\n>>> idx = pd.Index([1, 2, 3])\n>>> idx\nIndex([1, 2, 3], dtype='int64')\n\n>>> idx.to_list()\n[1, 2, 3]"
  },
  {
    "symbol": "MultiIndex.transpose",
    "signature": "(self, *args, **kwargs) -> 'Self'",
    "doc": "Return the transpose, which is by definition self.\n\nReturns\n-------\n%(klass)s"
  },
  {
    "symbol": "MultiIndex.truncate",
    "signature": "(self, before=None, after=None) -> 'MultiIndex'",
    "doc": "Slice index between two labels / tuples, return new MultiIndex.\n\nParameters\n----------\nbefore : label or tuple, can be partial. Default None\n    None defaults to start.\nafter : label or tuple, can be partial. Default None\n    None defaults to end.\n\nReturns\n-------\nMultiIndex\n    The truncated MultiIndex.\n\nExamples\n--------\n>>> mi = pd.MultiIndex.from_arrays([['a', 'b', 'c'], ['x', 'y', 'z']])\n>>> mi\nMultiIndex([('a', 'x'), ('b', 'y'), ('c', 'z')],\n           )\n>>> mi.truncate(before='a', after='b')\nMultiIndex([('a', 'x'), ('b', 'y')],\n           )"
  },
  {
    "symbol": "MultiIndex.union",
    "signature": "(self, other, sort=None)",
    "doc": "Form the union of two Index objects.\n\nIf the Index objects are incompatible, both Index objects will be\ncast to dtype('object') first.\n\nParameters\n----------\nother : Index or array-like\nsort : bool or None, default None\n    Whether to sort the resulting Index.\n\n    * None : Sort the result, except when\n\n      1. `self` and `other` are equal.\n      2. `self` or `other` has length 0.\n      3. Some values in `self` or `other` cannot be compared.\n         A RuntimeWarning is issued in this case.\n\n    * False : do not sort the result.\n    * True : Sort the result (which may raise TypeError).\n\nReturns\n-------\nIndex\n\nExamples\n--------\nUnion matching dtypes\n\n>>> idx1 = pd.Index([1, 2, 3, 4])\n>>> idx2 = pd.Index([3, 4, 5, 6])\n>>> idx1.union(idx2)\nIndex([1, 2, 3, 4, 5, 6], dtype='int64')\n\nUnion mismatched dtypes\n\n>>> idx1 = pd.Index(['a', 'b', 'c', 'd'])\n>>> idx2 = pd.Index([1, 2, 3, 4])\n>>> idx1.union(idx2)\nIndex(['a', 'b', 'c', 'd', 1, 2, 3, 4], dtype='object')\n\nMultiIndex case\n\n>>> idx1 = pd.MultiIndex.from_arrays(\n...     [[1, 1, 2, 2], [\"Red\", \"Blue\", \"Red\", \"Blue\"]]\n... )\n>>> idx1\nMultiIndex([(1,  'Red'),\n    (1, 'Blue'),\n    (2,  'Red'),\n    (2, 'Blue')],\n   )\n>>> idx2 = pd.MultiIndex.from_arrays(\n...     [[3, 3, 2, 2], [\"Red\", \"Green\", \"Red\", \"Green\"]]\n... )\n>>> idx2\nMultiIndex([(3,   'Red'),\n    (3, 'Green'),\n    (2,   'Red'),\n    (2, 'Green')],\n   )\n>>> idx1.union(idx2)\nMultiIndex([(1,  'Blue'),\n    (1,   'Red'),\n    (2,  'Blue'),\n    (2, 'Green'),\n    (2,   'Red'),\n    (3, 'Green'),\n    (3,   'Red')],\n   )\n>>> idx1.union(idx2, sort=False)\nMultiIndex([(1,   'Red'),\n    (1,  'Blue'),\n    (2,   'Red'),\n    (2,  'Blue'),\n    (3,   'Red'),\n    (3, 'Green'),\n    (2, 'Green')],\n   )"
  },
  {
    "symbol": "MultiIndex.unique",
    "signature": "(self, level=None)",
    "doc": "Return unique values in the index.\n\nUnique values are returned in order of appearance, this does NOT sort.\n\nParameters\n----------\nlevel : int or hashable, optional\n    Only return values from specified level (for MultiIndex).\n    If int, gets the level by integer position, else by level name.\n\nReturns\n-------\nIndex\n\nSee Also\n--------\nunique : Numpy array of unique values in that column.\nSeries.unique : Return unique values of Series object.\n\nExamples\n--------\n>>> idx = pd.Index([1, 1, 2, 3, 3])\n>>> idx.unique()\nIndex([1, 2, 3], dtype='int64')"
  },
  {
    "symbol": "MultiIndex.value_counts",
    "signature": "(self, normalize: 'bool' = False, sort: 'bool' = True, ascending: 'bool' = False, bins=None, dropna: 'bool' = True) -> 'Series'",
    "doc": "Return a Series containing counts of unique values.\n\nThe resulting object will be in descending order so that the\nfirst element is the most frequently-occurring element.\nExcludes NA values by default.\n\nParameters\n----------\nnormalize : bool, default False\n    If True then the object returned will contain the relative\n    frequencies of the unique values.\nsort : bool, default True\n    Sort by frequencies when True. Preserve the order of the data when False.\nascending : bool, default False\n    Sort in ascending order.\nbins : int, optional\n    Rather than count values, group them into half-open bins,\n    a convenience for ``pd.cut``, only works with numeric data.\ndropna : bool, default True\n    Don't include counts of NaN.\n\nReturns\n-------\nSeries\n\nSee Also\n--------\nSeries.count: Number of non-NA elements in a Series.\nDataFrame.count: Number of non-NA elements in a DataFrame.\nDataFrame.value_counts: Equivalent method on DataFrames.\n\nExamples\n--------\n>>> index = pd.Index([3, 1, 2, 3, 4, np.nan])\n>>> index.value_counts()\n3.0    2\n1.0    1\n2.0    1\n4.0    1\nName: count, dtype: int64\n\nWith `normalize` set to `True`, returns the relative frequency by\ndividing all values by the sum of values.\n\n>>> s = pd.Series([3, 1, 2, 3, 4, np.nan])\n>>> s.value_counts(normalize=True)\n3.0    0.4\n1.0    0.2\n2.0    0.2\n4.0    0.2\nName: proportion, dtype: float64\n\n**bins**\n\nBins can be useful for going from a continuous variable to a\ncategorical variable; instead of counting unique\napparitions of values, divide the index in the specified\nnumber of half-open bins.\n\n>>> s.value_counts(bins=3)\n(0.996, 2.0]    2\n(2.0, 3.0]      2\n(3.0, 4.0]      1\nName: count, dtype: int64\n\n**dropna**\n\nWith `dropna` set to `False` we can also see NaN index values.\n\n>>> s.value_counts(dropna=False)\n3.0    2\n1.0    1\n2.0    1\n4.0    1\nNaN    1\nName: count, dtype: int64"
  },
  {
    "symbol": "MultiIndex.values",
    "signature": "(property)",
    "doc": ""
  },
  {
    "symbol": "MultiIndex.view",
    "signature": "(self, cls=None) -> 'Self'",
    "doc": "this is defined as a copy with the same identity"
  },
  {
    "symbol": "MultiIndex.where",
    "signature": "(self, cond, other=None) -> 'Index'",
    "doc": "Replace values where the condition is False.\n\nThe replacement is taken from other.\n\nParameters\n----------\ncond : bool array-like with the same length as self\n    Condition to select the values on.\nother : scalar, or array-like, default None\n    Replacement if the condition is False.\n\nReturns\n-------\npandas.Index\n    A copy of self with values replaced from other\n    where the condition is False.\n\nSee Also\n--------\nSeries.where : Same method for Series.\nDataFrame.where : Same method for DataFrame.\n\nExamples\n--------\n>>> idx = pd.Index(['car', 'bike', 'train', 'tractor'])\n>>> idx\nIndex(['car', 'bike', 'train', 'tractor'], dtype='object')\n>>> idx.where(idx.isin(['car', 'train']), 'other')\nIndex(['car', 'other', 'train', 'other'], dtype='object')"
  },
  {
    "symbol": "Series",
    "signature": "(data=None, index=None, dtype: 'Dtype | None' = None, name=None, copy: 'bool | None' = None, fastpath: 'bool | lib.NoDefault' = <no_default>) -> 'None'",
    "doc": "One-dimensional ndarray with axis labels (including time series).\n\nLabels need not be unique but must be a hashable type. The object\nsupports both integer- and label-based indexing and provides a host of\nmethods for performing operations involving the index. Statistical\nmethods from ndarray have been overridden to automatically exclude\nmissing data (currently represented as NaN).\n\nOperations between Series (+, -, /, \\*, \\*\\*) align values based on their\nassociated index values-- they need not be the same length. The result\nindex will be the sorted union of the two indexes.\n\nParameters\n----------\ndata : array-like, Iterable, dict, or scalar value\n    Contains data stored in Series. If data is a dict, argument order is\n    maintained.\nindex : array-like or Index (1d)\n    Values must be hashable and have the same length as `data`.\n    Non-unique index values are allowed. Will default to\n    RangeIndex (0, 1, 2, ..., n) if not provided. If data is dict-like\n    and index is None, then the keys in the data are used as the index. If the\n    index is not None, the resulting Series is reindexed with the index values.\ndtype : str, numpy.dtype, or ExtensionDtype, optional\n    Data type for the output Series. If not specified, this will be\n    inferred from `data`.\n    See the :ref:`user guide <basics.dtypes>` for more usages.\nname : Hashable, default None\n    The name to give to the Series.\ncopy : bool, default False\n    Copy input data. Only affects Series or 1d ndarray input. See examples.\n\nNotes\n-----\nPlease reference the :ref:`User Guide <basics.series>` for more information.\n\nExamples\n--------\nConstructing Series from a dictionary with an Index specified\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['a', 'b', 'c'])\n>>> ser\na   1\nb   2\nc   3\ndtype: int64\n\nThe keys of the dictionary match with the Index values, hence the Index\nvalues have no effect.\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['x', 'y', 'z'])\n>>> ser\nx   NaN\ny   NaN\nz   NaN\ndtype: float64\n\nNote that the Index is first build with the keys from the dictionary.\nAfter this the Series is reindexed with the given Index values, hence we\nget all NaN as a result.\n\nConstructing Series from a list with `copy=False`.\n\n>>> r = [1, 2]\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\n[1, 2]\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `copy` of\nthe original data even though `copy=False`, so\nthe data is unchanged.\n\nConstructing Series from a 1d ndarray with `copy=False`.\n\n>>> r = np.array([1, 2])\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\narray([999,   2])\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `view` on\nthe original data, so\nthe data is changed as well."
  },
  {
    "symbol": "Series.T",
    "signature": "(property)",
    "doc": "\n        Return the transpose, which is by definition self.\n\n        Examples\n        --------\n        For Series:\n\n        >>> s = pd.Series(['Ant', 'Bear', 'Cow'])\n        >>> s\n        0     Ant\n        1    Bear\n        2     Cow\n        dtype: object\n        >>> s.T\n        0     Ant\n        1    Bear\n        2     Cow\n        dtype: object\n\n        For Index:\n\n        >>> idx = pd.Index([1, 2, 3])\n        >>> idx.T\n        Index([1, 2, 3], dtype='int64')\n        "
  },
  {
    "symbol": "Series.abs",
    "signature": "(self) -> 'Self'",
    "doc": "Return a Series/DataFrame with absolute numeric value of each element.\n\nThis function only applies to elements that are all numeric.\n\nReturns\n-------\nabs\n    Series/DataFrame containing the absolute value of each element.\n\nSee Also\n--------\nnumpy.absolute : Calculate the absolute value element-wise.\n\nNotes\n-----\nFor ``complex`` inputs, ``1.2 + 1j``, the absolute value is\n:math:`\\sqrt{ a^2 + b^2 }`.\n\nExamples\n--------\nAbsolute numeric values in a Series.\n\n>>> s = pd.Series([-1.10, 2, -3.33, 4])\n>>> s.abs()\n0    1.10\n1    2.00\n2    3.33\n3    4.00\ndtype: float64\n\nAbsolute numeric values in a Series with complex numbers.\n\n>>> s = pd.Series([1.2 + 1j])\n>>> s.abs()\n0    1.56205\ndtype: float64\n\nAbsolute numeric values in a Series with a Timedelta element.\n\n>>> s = pd.Series([pd.Timedelta('1 days')])\n>>> s.abs()\n0   1 days\ndtype: timedelta64[ns]\n\nSelect rows with data closest to certain value using argsort (from\n`StackOverflow <https://stackoverflow.com/a/17758115>`__).\n\n>>> df = pd.DataFrame({\n...     'a': [4, 5, 6, 7],\n...     'b': [10, 20, 30, 40],\n...     'c': [100, 50, -30, -50]\n... })\n>>> df\n     a    b    c\n0    4   10  100\n1    5   20   50\n2    6   30  -30\n3    7   40  -50\n>>> df.loc[(df.c - 43).abs().argsort()]\n     a    b    c\n1    5   20   50\n0    4   10  100\n2    6   30  -30\n3    7   40  -50"
  },
  {
    "symbol": "Series.add",
    "signature": "(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'",
    "doc": "Return Addition of series and other, element-wise (binary operator `add`).\n\nEquivalent to ``series + other``, but with support to substitute a fill_value for\nmissing data in either one of the inputs.\n\nParameters\n----------\nother : Series or scalar value\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result of filling (at that location) will be missing.\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.\n\nReturns\n-------\nSeries\n    The result of the operation.\n\nSee Also\n--------\nSeries.radd : Reverse of the Addition operator, see\n    `Python documentation\n    <https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types>`_\n    for more details.\n\nExamples\n--------\n>>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n>>> a\na    1.0\nb    1.0\nc    1.0\nd    NaN\ndtype: float64\n>>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n>>> b\na    1.0\nb    NaN\nd    1.0\ne    NaN\ndtype: float64\n>>> a.add(b, fill_value=0)\na    2.0\nb    1.0\nc    1.0\nd    1.0\ne    NaN\ndtype: float64"
  },
  {
    "symbol": "Series.add_prefix",
    "signature": "(self, prefix: 'str', axis: 'Axis | None' = None) -> 'Self'",
    "doc": "Prefix labels with string `prefix`.\n\nFor Series, the row labels are prefixed.\nFor DataFrame, the column labels are prefixed.\n\nParameters\n----------\nprefix : str\n    The string to add before each label.\naxis : {0 or 'index', 1 or 'columns', None}, default None\n    Axis to add prefix on\n\n    .. versionadded:: 2.0.0\n\nReturns\n-------\nSeries or DataFrame\n    New Series or DataFrame with updated labels.\n\nSee Also\n--------\nSeries.add_suffix: Suffix row labels with string `suffix`.\nDataFrame.add_suffix: Suffix column labels with string `suffix`.\n\nExamples\n--------\n>>> s = pd.Series([1, 2, 3, 4])\n>>> s\n0    1\n1    2\n2    3\n3    4\ndtype: int64\n\n>>> s.add_prefix('item_')\nitem_0    1\nitem_1    2\nitem_2    3\nitem_3    4\ndtype: int64\n\n>>> df = pd.DataFrame({'A': [1, 2, 3, 4], 'B': [3, 4, 5, 6]})\n>>> df\n   A  B\n0  1  3\n1  2  4\n2  3  5\n3  4  6\n\n>>> df.add_prefix('col_')\n     col_A  col_B\n0       1       3\n1       2       4\n2       3       5\n3       4       6"
  },
  {
    "symbol": "Series.add_suffix",
    "signature": "(self, suffix: 'str', axis: 'Axis | None' = None) -> 'Self'",
    "doc": "Suffix labels with string `suffix`.\n\nFor Series, the row labels are suffixed.\nFor DataFrame, the column labels are suffixed.\n\nParameters\n----------\nsuffix : str\n    The string to add after each label.\naxis : {0 or 'index', 1 or 'columns', None}, default None\n    Axis to add suffix on\n\n    .. versionadded:: 2.0.0\n\nReturns\n-------\nSeries or DataFrame\n    New Series or DataFrame with updated labels.\n\nSee Also\n--------\nSeries.add_prefix: Prefix row labels with string `prefix`.\nDataFrame.add_prefix: Prefix column labels with string `prefix`.\n\nExamples\n--------\n>>> s = pd.Series([1, 2, 3, 4])\n>>> s\n0    1\n1    2\n2    3\n3    4\ndtype: int64\n\n>>> s.add_suffix('_item')\n0_item    1\n1_item    2\n2_item    3\n3_item    4\ndtype: int64\n\n>>> df = pd.DataFrame({'A': [1, 2, 3, 4], 'B': [3, 4, 5, 6]})\n>>> df\n   A  B\n0  1  3\n1  2  4\n2  3  5\n3  4  6\n\n>>> df.add_suffix('_col')\n     A_col  B_col\n0       1       3\n1       2       4\n2       3       5\n3       4       6"
  },
  {
    "symbol": "Series.agg",
    "signature": "(self, func=None, axis: 'Axis' = 0, *args, **kwargs)",
    "doc": "Aggregate using one or more operations over the specified axis.\n\nParameters\n----------\nfunc : function, str, list or dict\n    Function to use for aggregating the data. If a function, must either\n    work when passed a Series or when passed to Series.apply.\n\n    Accepted combinations are:\n\n    - function\n    - string function name\n    - list of functions and/or function names, e.g. ``[np.sum, 'mean']``\n    - dict of axis labels -> functions, function names or list of such.\naxis : {0 or 'index'}\n        Unused. Parameter needed for compatibility with DataFrame.\n*args\n    Positional arguments to pass to `func`.\n**kwargs\n    Keyword arguments to pass to `func`.\n\nReturns\n-------\nscalar, Series or DataFrame\n\n    The return can be:\n\n    * scalar : when Series.agg is called with single function\n    * Series : when DataFrame.agg is called with a single function\n    * DataFrame : when DataFrame.agg is called with several functions\n\nSee Also\n--------\nSeries.apply : Invoke function on a Series.\nSeries.transform : Transform function producing a Series with like indexes.\n\nNotes\n-----\nThe aggregation operations are always performed over an axis, either the\nindex (default) or the column axis. This behavior is different from\n`numpy` aggregation functions (`mean`, `median`, `prod`, `sum`, `std`,\n`var`), where the default is to compute the aggregation of the flattened\narray, e.g., ``numpy.mean(arr_2d)`` as opposed to\n``numpy.mean(arr_2d, axis=0)``.\n\n`agg` is an alias for `aggregate`. Use the alias.\n\nFunctions that mutate the passed object can produce unexpected\nbehavior or errors and are not supported. See :ref:`gotchas.udf-mutation`\nfor more details.\n\nA passed user-defined-function will be passed a Series for evaluation.\n\nExamples\n--------\n>>> s = pd.Series([1, 2, 3, 4])\n>>> s\n0    1\n1    2\n2    3\n3    4\ndtype: int64\n\n>>> s.agg('min')\n1\n\n>>> s.agg(['min', 'max'])\nmin   1\nmax   4\ndtype: int64"
  },
  {
    "symbol": "Series.aggregate",
    "signature": "(self, func=None, axis: 'Axis' = 0, *args, **kwargs)",
    "doc": "Aggregate using one or more operations over the specified axis.\n\nParameters\n----------\nfunc : function, str, list or dict\n    Function to use for aggregating the data. If a function, must either\n    work when passed a Series or when passed to Series.apply.\n\n    Accepted combinations are:\n\n    - function\n    - string function name\n    - list of functions and/or function names, e.g. ``[np.sum, 'mean']``\n    - dict of axis labels -> functions, function names or list of such.\naxis : {0 or 'index'}\n        Unused. Parameter needed for compatibility with DataFrame.\n*args\n    Positional arguments to pass to `func`.\n**kwargs\n    Keyword arguments to pass to `func`.\n\nReturns\n-------\nscalar, Series or DataFrame\n\n    The return can be:\n\n    * scalar : when Series.agg is called with single function\n    * Series : when DataFrame.agg is called with a single function\n    * DataFrame : when DataFrame.agg is called with several functions\n\nSee Also\n--------\nSeries.apply : Invoke function on a Series.\nSeries.transform : Transform function producing a Series with like indexes.\n\nNotes\n-----\nThe aggregation operations are always performed over an axis, either the\nindex (default) or the column axis. This behavior is different from\n`numpy` aggregation functions (`mean`, `median`, `prod`, `sum`, `std`,\n`var`), where the default is to compute the aggregation of the flattened\narray, e.g., ``numpy.mean(arr_2d)`` as opposed to\n``numpy.mean(arr_2d, axis=0)``.\n\n`agg` is an alias for `aggregate`. Use the alias.\n\nFunctions that mutate the passed object can produce unexpected\nbehavior or errors and are not supported. See :ref:`gotchas.udf-mutation`\nfor more details.\n\nA passed user-defined-function will be passed a Series for evaluation.\n\nExamples\n--------\n>>> s = pd.Series([1, 2, 3, 4])\n>>> s\n0    1\n1    2\n2    3\n3    4\ndtype: int64\n\n>>> s.agg('min')\n1\n\n>>> s.agg(['min', 'max'])\nmin   1\nmax   4\ndtype: int64"
  },
  {
    "symbol": "Series.align",
    "signature": "(self, other: 'NDFrameT', join: 'AlignJoin' = 'outer', axis: 'Axis | None' = None, level: 'Level | None' = None, copy: 'bool_t | None' = None, fill_value: 'Hashable | None' = None, method: 'FillnaOptions | None | lib.NoDefault' = <no_default>, limit: 'int | None | lib.NoDefault' = <no_default>, fill_axis: 'Axis | lib.NoDefault' = <no_default>, broadcast_axis: 'Axis | None | lib.NoDefault' = <no_default>) -> 'tuple[Self, NDFrameT]'",
    "doc": "Align two objects on their axes with the specified join method.\n\nJoin method is specified for each axis Index.\n\nParameters\n----------\nother : DataFrame or Series\njoin : {'outer', 'inner', 'left', 'right'}, default 'outer'\n    Type of alignment to be performed.\n\n    * left: use only keys from left frame, preserve key order.\n    * right: use only keys from right frame, preserve key order.\n    * outer: use union of keys from both frames, sort keys lexicographically.\n    * inner: use intersection of keys from both frames,\n      preserve the order of the left keys.\n\naxis : allowed axis of the other object, default None\n    Align on index (0), columns (1), or both (None).\nlevel : int or level name, default None\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\ncopy : bool, default True\n    Always returns new objects. If copy=False and no reindexing is\n    required then original objects are returned.\n\n    .. note::\n        The `copy` keyword will change behavior in pandas 3.0.\n        `Copy-on-Write\n        <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n        will be enabled by default, which means that all methods with a\n        `copy` keyword will use a lazy copy mechanism to defer the copy and\n        ignore the `copy` keyword. The `copy` keyword will be removed in a\n        future version of pandas.\n\n        You can already get the future behavior and improvements through\n        enabling copy on write ``pd.options.mode.copy_on_write = True``\nfill_value : scalar, default np.nan\n    Value to use for missing values. Defaults to NaN, but can be any\n    \"compatible\" value.\nmethod : {'backfill', 'bfill', 'pad', 'ffill', None}, default None\n    Method to use for filling holes in reindexed Series:\n\n    - pad / ffill: propagate last valid observation forward to next valid.\n    - backfill / bfill: use NEXT valid observation to fill gap.\n\n    .. deprecated:: 2.1\n\nlimit : int, default None\n    If method is specified, this is the maximum number of consecutive\n    NaN values to forward/backward fill. In other words, if there is\n    a gap with more than this number of consecutive NaNs, it will only\n    be partially filled. If method is not specified, this is the\n    maximum number of entries along the entire axis where NaNs will be\n    filled. Must be greater than 0 if not None.\n\n    .. deprecated:: 2.1\n\nfill_axis : {0 or 'index'} for Series, {0 or 'index', 1 or 'columns'} for DataFrame, default 0\n    Filling axis, method and limit.\n\n    .. deprecated:: 2.1\n\nbroadcast_axis : {0 or 'index'} for Series, {0 or 'index', 1 or 'columns'} for DataFrame, default None\n    Broadcast values along this axis, if aligning two objects of\n    different dimensions.\n\n    .. deprecated:: 2.1\n\nReturns\n-------\ntuple of (Series/DataFrame, type of other)\n    Aligned objects.\n\nExamples\n--------\n>>> df = pd.DataFrame(\n...     [[1, 2, 3, 4], [6, 7, 8, 9]], columns=[\"D\", \"B\", \"E\", \"A\"], index=[1, 2]\n... )\n>>> other = pd.DataFrame(\n...     [[10, 20, 30, 40], [60, 70, 80, 90], [600, 700, 800, 900]],\n...     columns=[\"A\", \"B\", \"C\", \"D\"],\n...     index=[2, 3, 4],\n... )\n>>> df\n   D  B  E  A\n1  1  2  3  4\n2  6  7  8  9\n>>> other\n    A    B    C    D\n2   10   20   30   40\n3   60   70   80   90\n4  600  700  800  900\n\nAlign on columns:\n\n>>> left, right = df.align(other, join=\"outer\", axis=1)\n>>> left\n   A  B   C  D  E\n1  4  2 NaN  1  3\n2  9  7 NaN  6  8\n>>> right\n    A    B    C    D   E\n2   10   20   30   40 NaN\n3   60   70   80   90 NaN\n4  600  700  800  900 NaN\n\nWe can also align on the index:\n\n>>> left, right = df.align(other, join=\"outer\", axis=0)\n>>> left\n    D    B    E    A\n1  1.0  2.0  3.0  4.0\n2  6.0  7.0  8.0  9.0\n3  NaN  NaN  NaN  NaN\n4  NaN  NaN  NaN  NaN\n>>> right\n    A      B      C      D\n1    NaN    NaN    NaN    NaN\n2   10.0   20.0   30.0   40.0\n3   60.0   70.0   80.0   90.0\n4  600.0  700.0  800.0  900.0\n\nFinally, the default `axis=None` will align on both index and columns:\n\n>>> left, right = df.align(other, join=\"outer\", axis=None)\n>>> left\n     A    B   C    D    E\n1  4.0  2.0 NaN  1.0  3.0\n2  9.0  7.0 NaN  6.0  8.0\n3  NaN  NaN NaN  NaN  NaN\n4  NaN  NaN NaN  NaN  NaN\n>>> right\n       A      B      C      D   E\n1    NaN    NaN    NaN    NaN NaN\n2   10.0   20.0   30.0   40.0 NaN\n3   60.0   70.0   80.0   90.0 NaN\n4  600.0  700.0  800.0  900.0 NaN"
  },
  {
    "symbol": "Series.all",
    "signature": "(self, axis: 'Axis' = 0, bool_only: 'bool' = False, skipna: 'bool' = True, **kwargs) -> 'bool'",
    "doc": "Return whether all elements are True, potentially over an axis.\n\nReturns True unless there at least one element within a series or\nalong a Dataframe axis that is False or equivalent (e.g. zero or\nempty).\n\nParameters\n----------\naxis : {0 or 'index', 1 or 'columns', None}, default 0\n    Indicate which axis or axes should be reduced. For `Series` this parameter\n    is unused and defaults to 0.\n\n    * 0 / 'index' : reduce the index, return a Series whose index is the\n      original column labels.\n    * 1 / 'columns' : reduce the columns, return a Series whose index is the\n      original index.\n    * None : reduce all axes, return a scalar.\n\nbool_only : bool, default False\n    Include only boolean columns. Not implemented for Series.\nskipna : bool, default True\n    Exclude NA/null values. If the entire row/column is NA and skipna is\n    True, then the result will be True, as for an empty row/column.\n    If skipna is False, then NA are treated as True, because these are not\n    equal to zero.\n**kwargs : any, default None\n    Additional keywords have no effect but might be accepted for\n    compatibility with NumPy.\n\nReturns\n-------\nscalar or Series\n    If level is specified, then, Series is returned; otherwise, scalar\n    is returned.\n\nSee Also\n--------\nSeries.all : Return True if all elements are True.\nDataFrame.any : Return True if one (or more) elements are True.\n\nExamples\n--------\n**Series**\n\n>>> pd.Series([True, True]).all()\nTrue\n>>> pd.Series([True, False]).all()\nFalse\n>>> pd.Series([], dtype=\"float64\").all()\nTrue\n>>> pd.Series([np.nan]).all()\nTrue\n>>> pd.Series([np.nan]).all(skipna=False)\nTrue\n\n**DataFrames**\n\nCreate a dataframe from a dictionary.\n\n>>> df = pd.DataFrame({'col1': [True, True], 'col2': [True, False]})\n>>> df\n   col1   col2\n0  True   True\n1  True  False\n\nDefault behaviour checks if values in each column all return True.\n\n>>> df.all()\ncol1     True\ncol2    False\ndtype: bool\n\nSpecify ``axis='columns'`` to check if values in each row all return True.\n\n>>> df.all(axis='columns')\n0     True\n1    False\ndtype: bool\n\nOr ``axis=None`` for whether every value is True.\n\n>>> df.all(axis=None)\nFalse"
  },
  {
    "symbol": "Series.any",
    "signature": "(self, *, axis: 'Axis' = 0, bool_only: 'bool' = False, skipna: 'bool' = True, **kwargs) -> 'bool'",
    "doc": "Return whether any element is True, potentially over an axis.\n\nReturns False unless there is at least one element within a series or\nalong a Dataframe axis that is True or equivalent (e.g. non-zero or\nnon-empty).\n\nParameters\n----------\naxis : {0 or 'index', 1 or 'columns', None}, default 0\n    Indicate which axis or axes should be reduced. For `Series` this parameter\n    is unused and defaults to 0.\n\n    * 0 / 'index' : reduce the index, return a Series whose index is the\n      original column labels.\n    * 1 / 'columns' : reduce the columns, return a Series whose index is the\n      original index.\n    * None : reduce all axes, return a scalar.\n\nbool_only : bool, default False\n    Include only boolean columns. Not implemented for Series.\nskipna : bool, default True\n    Exclude NA/null values. If the entire row/column is NA and skipna is\n    True, then the result will be False, as for an empty row/column.\n    If skipna is False, then NA are treated as True, because these are not\n    equal to zero.\n**kwargs : any, default None\n    Additional keywords have no effect but might be accepted for\n    compatibility with NumPy.\n\nReturns\n-------\nscalar or Series\n    If level is specified, then, Series is returned; otherwise, scalar\n    is returned.\n\nSee Also\n--------\nnumpy.any : Numpy version of this method.\nSeries.any : Return whether any element is True.\nSeries.all : Return whether all elements are True.\nDataFrame.any : Return whether any element is True over requested axis.\nDataFrame.all : Return whether all elements are True over requested axis.\n\nExamples\n--------\n**Series**\n\nFor Series input, the output is a scalar indicating whether any element\nis True.\n\n>>> pd.Series([False, False]).any()\nFalse\n>>> pd.Series([True, False]).any()\nTrue\n>>> pd.Series([], dtype=\"float64\").any()\nFalse\n>>> pd.Series([np.nan]).any()\nFalse\n>>> pd.Series([np.nan]).any(skipna=False)\nTrue\n\n**DataFrame**\n\nWhether each column contains at least one True element (the default).\n\n>>> df = pd.DataFrame({\"A\": [1, 2], \"B\": [0, 2], \"C\": [0, 0]})\n>>> df\n   A  B  C\n0  1  0  0\n1  2  2  0\n\n>>> df.any()\nA     True\nB     True\nC    False\ndtype: bool\n\nAggregating over the columns.\n\n>>> df = pd.DataFrame({\"A\": [True, False], \"B\": [1, 2]})\n>>> df\n       A  B\n0   True  1\n1  False  2\n\n>>> df.any(axis='columns')\n0    True\n1    True\ndtype: bool\n\n>>> df = pd.DataFrame({\"A\": [True, False], \"B\": [1, 0]})\n>>> df\n       A  B\n0   True  1\n1  False  0\n\n>>> df.any(axis='columns')\n0    True\n1    False\ndtype: bool\n\nAggregating over the entire DataFrame with ``axis=None``.\n\n>>> df.any(axis=None)\nTrue\n\n`any` for an empty DataFrame is an empty Series.\n\n>>> pd.DataFrame([]).any()\nSeries([], dtype: bool)"
  },
  {
    "symbol": "Series.apply",
    "signature": "(self, func: 'AggFuncType', convert_dtype: 'bool | lib.NoDefault' = <no_default>, args: 'tuple[Any, ...]' = (), *, by_row: \"Literal[False, 'compat']\" = 'compat', **kwargs) -> 'DataFrame | Series'",
    "doc": "Invoke function on values of Series.\n\nCan be ufunc (a NumPy function that applies to the entire Series)\nor a Python function that only works on single values.\n\nParameters\n----------\nfunc : function\n    Python function or NumPy ufunc to apply.\nconvert_dtype : bool, default True\n    Try to find better dtype for elementwise function results. If\n    False, leave as dtype=object. Note that the dtype is always\n    preserved for some extension array dtypes, such as Categorical.\n\n    .. deprecated:: 2.1.0\n        ``convert_dtype`` has been deprecated. Do ``ser.astype(object).apply()``\n        instead if you want ``convert_dtype=False``.\nargs : tuple\n    Positional arguments passed to func after the series value.\nby_row : False or \"compat\", default \"compat\"\n    If ``\"compat\"`` and func is a callable, func will be passed each element of\n    the Series, like ``Series.map``. If func is a list or dict of\n    callables, will first try to translate each func into pandas methods. If\n    that doesn't work, will try call to apply again with ``by_row=\"compat\"``\n    and if that fails, will call apply again with ``by_row=False``\n    (backward compatible).\n    If False, the func will be passed the whole Series at once.\n\n    ``by_row`` has no effect when ``func`` is a string.\n\n    .. versionadded:: 2.1.0\n**kwargs\n    Additional keyword arguments passed to func.\n\nReturns\n-------\nSeries or DataFrame\n    If func returns a Series object the result will be a DataFrame.\n\nSee Also\n--------\nSeries.map: For element-wise operations.\nSeries.agg: Only perform aggregating type operations.\nSeries.transform: Only perform transforming type operations.\n\nNotes\n-----\nFunctions that mutate the passed object can produce unexpected\nbehavior or errors and are not supported. See :ref:`gotchas.udf-mutation`\nfor more details.\n\nExamples\n--------\nCreate a series with typical summer temperatures for each city.\n\n>>> s = pd.Series([20, 21, 12],\n...               index=['London', 'New York', 'Helsinki'])\n>>> s\nLondon      20\nNew York    21\nHelsinki    12\ndtype: int64\n\nSquare the values by defining a function and passing it as an\nargument to ``apply()``.\n\n>>> def square(x):\n...     return x ** 2\n>>> s.apply(square)\nLondon      400\nNew York    441\nHelsinki    144\ndtype: int64\n\nSquare the values by passing an anonymous function as an\nargument to ``apply()``.\n\n>>> s.apply(lambda x: x ** 2)\nLondon      400\nNew York    441\nHelsinki    144\ndtype: int64\n\nDefine a custom function that needs additional positional\narguments and pass these additional arguments using the\n``args`` keyword.\n\n>>> def subtract_custom_value(x, custom_value):\n...     return x - custom_value\n\n>>> s.apply(subtract_custom_value, args=(5,))\nLondon      15\nNew York    16\nHelsinki     7\ndtype: int64\n\nDefine a custom function that takes keyword arguments\nand pass these arguments to ``apply``.\n\n>>> def add_custom_values(x, **kwargs):\n...     for month in kwargs:\n...         x += kwargs[month]\n...     return x\n\n>>> s.apply(add_custom_values, june=30, july=20, august=25)\nLondon      95\nNew York    96\nHelsinki    87\ndtype: int64\n\nUse a function from the Numpy library.\n\n>>> s.apply(np.log)\nLondon      2.995732\nNew York    3.044522\nHelsinki    2.484907\ndtype: float64"
  },
  {
    "symbol": "Series.argmax",
    "signature": "(self, axis: 'AxisInt | None' = None, skipna: 'bool' = True, *args, **kwargs) -> 'int'",
    "doc": "Return int position of the largest value in the Series.\n\nIf the maximum is achieved in multiple locations,\nthe first row position is returned.\n\nParameters\n----------\naxis : {None}\n    Unused. Parameter needed for compatibility with DataFrame.\nskipna : bool, default True\n    Exclude NA/null values when showing the result.\n*args, **kwargs\n    Additional arguments and keywords for compatibility with NumPy.\n\nReturns\n-------\nint\n    Row position of the maximum value.\n\nSee Also\n--------\nSeries.argmax : Return position of the maximum value.\nSeries.argmin : Return position of the minimum value.\nnumpy.ndarray.argmax : Equivalent method for numpy arrays.\nSeries.idxmax : Return index label of the maximum values.\nSeries.idxmin : Return index label of the minimum values.\n\nExamples\n--------\nConsider dataset containing cereal calories\n\n>>> s = pd.Series({'Corn Flakes': 100.0, 'Almond Delight': 110.0,\n...                'Cinnamon Toast Crunch': 120.0, 'Cocoa Puff': 110.0})\n>>> s\nCorn Flakes              100.0\nAlmond Delight           110.0\nCinnamon Toast Crunch    120.0\nCocoa Puff               110.0\ndtype: float64\n\n>>> s.argmax()\n2\n>>> s.argmin()\n0\n\nThe maximum cereal calories is the third element and\nthe minimum cereal calories is the first element,\nsince series is zero-indexed."
  },
  {
    "symbol": "Series.argmin",
    "signature": "(self, axis: 'AxisInt | None' = None, skipna: 'bool' = True, *args, **kwargs) -> 'int'",
    "doc": "Return int position of the smallest value in the Series.\n\nIf the minimum is achieved in multiple locations,\nthe first row position is returned.\n\nParameters\n----------\naxis : {None}\n    Unused. Parameter needed for compatibility with DataFrame.\nskipna : bool, default True\n    Exclude NA/null values when showing the result.\n*args, **kwargs\n    Additional arguments and keywords for compatibility with NumPy.\n\nReturns\n-------\nint\n    Row position of the minimum value.\n\nSee Also\n--------\nSeries.argmin : Return position of the minimum value.\nSeries.argmax : Return position of the maximum value.\nnumpy.ndarray.argmin : Equivalent method for numpy arrays.\nSeries.idxmax : Return index label of the maximum values.\nSeries.idxmin : Return index label of the minimum values.\n\nExamples\n--------\nConsider dataset containing cereal calories\n\n>>> s = pd.Series({'Corn Flakes': 100.0, 'Almond Delight': 110.0,\n...                'Cinnamon Toast Crunch': 120.0, 'Cocoa Puff': 110.0})\n>>> s\nCorn Flakes              100.0\nAlmond Delight           110.0\nCinnamon Toast Crunch    120.0\nCocoa Puff               110.0\ndtype: float64\n\n>>> s.argmax()\n2\n>>> s.argmin()\n0\n\nThe maximum cereal calories is the third element and\nthe minimum cereal calories is the first element,\nsince series is zero-indexed."
  },
  {
    "symbol": "Series.argsort",
    "signature": "(self, axis: 'Axis' = 0, kind: 'SortKind' = 'quicksort', order: 'None' = None, stable: 'None' = None) -> 'Series'",
    "doc": "Return the integer indices that would sort the Series values.\n\nOverride ndarray.argsort. Argsorts the value, omitting NA/null values,\nand places the result in the same locations as the non-NA values.\n\nParameters\n----------\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.\nkind : {'mergesort', 'quicksort', 'heapsort', 'stable'}, default 'quicksort'\n    Choice of sorting algorithm. See :func:`numpy.sort` for more\n    information. 'mergesort' and 'stable' are the only stable algorithms.\norder : None\n    Has no effect but is accepted for compatibility with numpy.\nstable : None\n    Has no effect but is accepted for compatibility with numpy.\n\nReturns\n-------\nSeries[np.intp]\n    Positions of values within the sort order with -1 indicating\n    nan values.\n\nSee Also\n--------\nnumpy.ndarray.argsort : Returns the indices that would sort this array.\n\nExamples\n--------\n>>> s = pd.Series([3, 2, 1])\n>>> s.argsort()\n0    2\n1    1\n2    0\ndtype: int64"
  },
  {
    "symbol": "Series.array",
    "signature": "(property)",
    "doc": "\nThe ExtensionArray of the data backing this Series or Index.\n\nReturns\n-------\nExtensionArray\n    An ExtensionArray of the values stored within. For extension\n    types, this is the actual array. For NumPy native types, this\n    is a thin (no copy) wrapper around :class:`numpy.ndarray`.\n\n    ``.array`` differs from ``.values``, which may require converting\n    the data to a different form.\n\nSee Also\n--------\nIndex.to_numpy : Similar method that always returns a NumPy array.\nSeries.to_numpy : Similar method that always returns a NumPy array.\n\nNotes\n-----\nThis table lays out the different array types for each extension\ndtype within pandas.\n\n================== =============================\ndtype              array type\n================== =============================\ncategory           Categorical\nperiod             PeriodArray\ninterval           IntervalArray\nIntegerNA          IntegerArray\nstring             StringArray\nboolean            BooleanArray\ndatetime64[ns, tz] DatetimeArray\n================== =============================\n\nFor any 3rd-party extension types, the array type will be an\nExtensionArray.\n\nFor all remaining dtypes ``.array`` will be a\n:class:`arrays.NumpyExtensionArray` wrapping the actual ndarray\nstored within. If you absolutely need a NumPy array (possibly with\ncopying / coercing data), then use :meth:`Series.to_numpy` instead.\n\nExamples\n--------\nFor regular NumPy types like int, and float, a NumpyExtensionArray\nis returned.\n\n>>> pd.Series([1, 2, 3]).array\n<NumpyExtensionArray>\n[1, 2, 3]\nLength: 3, dtype: int64\n\nFor extension types, like Categorical, the actual ExtensionArray\nis returned\n\n>>> ser = pd.Series(pd.Categorical(['a', 'b', 'a']))\n>>> ser.array\n['a', 'b', 'a']\nCategories (2, object): ['a', 'b']\n"
  },
  {
    "symbol": "Series.asfreq",
    "signature": "(self, freq: 'Frequency', method: 'FillnaOptions | None' = None, how: \"Literal['start', 'end'] | None\" = None, normalize: 'bool_t' = False, fill_value: 'Hashable | None' = None) -> 'Self'",
    "doc": "Convert time series to specified frequency.\n\nReturns the original data conformed to a new index with the specified\nfrequency.\n\nIf the index of this Series/DataFrame is a :class:`~pandas.PeriodIndex`, the new index\nis the result of transforming the original index with\n:meth:`PeriodIndex.asfreq <pandas.PeriodIndex.asfreq>` (so the original index\nwill map one-to-one to the new index).\n\nOtherwise, the new index will be equivalent to ``pd.date_range(start, end,\nfreq=freq)`` where ``start`` and ``end`` are, respectively, the first and\nlast entries in the original index (see :func:`pandas.date_range`). The\nvalues corresponding to any timesteps in the new index which were not present\nin the original index will be null (``NaN``), unless a method for filling\nsuch unknowns is provided (see the ``method`` parameter below).\n\nThe :meth:`resample` method is more appropriate if an operation on each group of\ntimesteps (such as an aggregate) is necessary to represent the data at the new\nfrequency.\n\nParameters\n----------\nfreq : DateOffset or str\n    Frequency DateOffset or string.\nmethod : {'backfill'/'bfill', 'pad'/'ffill'}, default None\n    Method to use for filling holes in reindexed Series (note this\n    does not fill NaNs that already were present):\n\n    * 'pad' / 'ffill': propagate last valid observation forward to next\n      valid\n    * 'backfill' / 'bfill': use NEXT valid observation to fill.\nhow : {'start', 'end'}, default end\n    For PeriodIndex only (see PeriodIndex.asfreq).\nnormalize : bool, default False\n    Whether to reset output index to midnight.\nfill_value : scalar, optional\n    Value to use for missing values, applied during upsampling (note\n    this does not fill NaNs that already were present).\n\nReturns\n-------\nSeries/DataFrame\n    Series/DataFrame object reindexed to the specified frequency.\n\nSee Also\n--------\nreindex : Conform DataFrame to new index with optional filling logic.\n\nNotes\n-----\nTo learn more about the frequency strings, please see `this link\n<https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\nExamples\n--------\nStart by creating a series with 4 one minute timestamps.\n\n>>> index = pd.date_range('1/1/2000', periods=4, freq='min')\n>>> series = pd.Series([0.0, None, 2.0, 3.0], index=index)\n>>> df = pd.DataFrame({'s': series})\n>>> df\n                       s\n2000-01-01 00:00:00    0.0\n2000-01-01 00:01:00    NaN\n2000-01-01 00:02:00    2.0\n2000-01-01 00:03:00    3.0\n\nUpsample the series into 30 second bins.\n\n>>> df.asfreq(freq='30s')\n                       s\n2000-01-01 00:00:00    0.0\n2000-01-01 00:00:30    NaN\n2000-01-01 00:01:00    NaN\n2000-01-01 00:01:30    NaN\n2000-01-01 00:02:00    2.0\n2000-01-01 00:02:30    NaN\n2000-01-01 00:03:00    3.0\n\nUpsample again, providing a ``fill value``.\n\n>>> df.asfreq(freq='30s', fill_value=9.0)\n                       s\n2000-01-01 00:00:00    0.0\n2000-01-01 00:00:30    9.0\n2000-01-01 00:01:00    NaN\n2000-01-01 00:01:30    9.0\n2000-01-01 00:02:00    2.0\n2000-01-01 00:02:30    9.0\n2000-01-01 00:03:00    3.0\n\nUpsample again, providing a ``method``.\n\n>>> df.asfreq(freq='30s', method='bfill')\n                       s\n2000-01-01 00:00:00    0.0\n2000-01-01 00:00:30    NaN\n2000-01-01 00:01:00    NaN\n2000-01-01 00:01:30    2.0\n2000-01-01 00:02:00    2.0\n2000-01-01 00:02:30    3.0\n2000-01-01 00:03:00    3.0"
  },
  {
    "symbol": "Series.asof",
    "signature": "(self, where, subset=None)",
    "doc": "Return the last row(s) without any NaNs before `where`.\n\nThe last row (for each element in `where`, if list) without any\nNaN is taken.\nIn case of a :class:`~pandas.DataFrame`, the last row without NaN\nconsidering only the subset of columns (if not `None`)\n\nIf there is no good value, NaN is returned for a Series or\na Series of NaN values for a DataFrame\n\nParameters\n----------\nwhere : date or array-like of dates\n    Date(s) before which the last row(s) are returned.\nsubset : str or array-like of str, default `None`\n    For DataFrame, if not `None`, only use these columns to\n    check for NaNs.\n\nReturns\n-------\nscalar, Series, or DataFrame\n\n    The return can be:\n\n    * scalar : when `self` is a Series and `where` is a scalar\n    * Series: when `self` is a Series and `where` is an array-like,\n      or when `self` is a DataFrame and `where` is a scalar\n    * DataFrame : when `self` is a DataFrame and `where` is an\n      array-like\n\nSee Also\n--------\nmerge_asof : Perform an asof merge. Similar to left join.\n\nNotes\n-----\nDates are assumed to be sorted. Raises if this is not the case.\n\nExamples\n--------\nA Series and a scalar `where`.\n\n>>> s = pd.Series([1, 2, np.nan, 4], index=[10, 20, 30, 40])\n>>> s\n10    1.0\n20    2.0\n30    NaN\n40    4.0\ndtype: float64\n\n>>> s.asof(20)\n2.0\n\nFor a sequence `where`, a Series is returned. The first value is\nNaN, because the first element of `where` is before the first\nindex value.\n\n>>> s.asof([5, 20])\n5     NaN\n20    2.0\ndtype: float64\n\nMissing values are not considered. The following is ``2.0``, not\nNaN, even though NaN is at the index location for ``30``.\n\n>>> s.asof(30)\n2.0\n\nTake all columns into consideration\n\n>>> df = pd.DataFrame({'a': [10., 20., 30., 40., 50.],\n...                    'b': [None, None, None, None, 500]},\n...                   index=pd.DatetimeIndex(['2018-02-27 09:01:00',\n...                                           '2018-02-27 09:02:00',\n...                                           '2018-02-27 09:03:00',\n...                                           '2018-02-27 09:04:00',\n...                                           '2018-02-27 09:05:00']))\n>>> df.asof(pd.DatetimeIndex(['2018-02-27 09:03:30',\n...                           '2018-02-27 09:04:30']))\n                      a   b\n2018-02-27 09:03:30 NaN NaN\n2018-02-27 09:04:30 NaN NaN\n\nTake a single column into consideration\n\n>>> df.asof(pd.DatetimeIndex(['2018-02-27 09:03:30',\n...                           '2018-02-27 09:04:30']),\n...         subset=['a'])\n                        a   b\n2018-02-27 09:03:30  30.0 NaN\n2018-02-27 09:04:30  40.0 NaN"
  },
  {
    "symbol": "Series.astype",
    "signature": "(self, dtype, copy: 'bool_t | None' = None, errors: 'IgnoreRaise' = 'raise') -> 'Self'",
    "doc": "Cast a pandas object to a specified dtype ``dtype``.\n\nParameters\n----------\ndtype : str, data type, Series or Mapping of column name -> data type\n    Use a str, numpy.dtype, pandas.ExtensionDtype or Python type to\n    cast entire pandas object to the same type. Alternatively, use a\n    mapping, e.g. {col: dtype, ...}, where col is a column label and dtype is\n    a numpy.dtype or Python type to cast one or more of the DataFrame's\n    columns to column-specific types.\ncopy : bool, default True\n    Return a copy when ``copy=True`` (be very careful setting\n    ``copy=False`` as changes to values then may propagate to other\n    pandas objects).\n\n    .. note::\n        The `copy` keyword will change behavior in pandas 3.0.\n        `Copy-on-Write\n        <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n        will be enabled by default, which means that all methods with a\n        `copy` keyword will use a lazy copy mechanism to defer the copy and\n        ignore the `copy` keyword. The `copy` keyword will be removed in a\n        future version of pandas.\n\n        You can already get the future behavior and improvements through\n        enabling copy on write ``pd.options.mode.copy_on_write = True``\nerrors : {'raise', 'ignore'}, default 'raise'\n    Control raising of exceptions on invalid data for provided dtype.\n\n    - ``raise`` : allow exceptions to be raised\n    - ``ignore`` : suppress exceptions. On error return original object.\n\nReturns\n-------\nsame type as caller\n\nSee Also\n--------\nto_datetime : Convert argument to datetime.\nto_timedelta : Convert argument to timedelta.\nto_numeric : Convert argument to a numeric type.\nnumpy.ndarray.astype : Cast a numpy array to a specified type.\n\nNotes\n-----\n.. versionchanged:: 2.0.0\n\n    Using ``astype`` to convert from timezone-naive dtype to\n    timezone-aware dtype will raise an exception.\n    Use :meth:`Series.dt.tz_localize` instead.\n\nExamples\n--------\nCreate a DataFrame:\n\n>>> d = {'col1': [1, 2], 'col2': [3, 4]}\n>>> df = pd.DataFrame(data=d)\n>>> df.dtypes\ncol1    int64\ncol2    int64\ndtype: object\n\nCast all columns to int32:\n\n>>> df.astype('int32').dtypes\ncol1    int32\ncol2    int32\ndtype: object\n\nCast col1 to int32 using a dictionary:\n\n>>> df.astype({'col1': 'int32'}).dtypes\ncol1    int32\ncol2    int64\ndtype: object\n\nCreate a series:\n\n>>> ser = pd.Series([1, 2], dtype='int32')\n>>> ser\n0    1\n1    2\ndtype: int32\n>>> ser.astype('int64')\n0    1\n1    2\ndtype: int64\n\nConvert to categorical type:\n\n>>> ser.astype('category')\n0    1\n1    2\ndtype: category\nCategories (2, int32): [1, 2]\n\nConvert to ordered categorical type with custom ordering:\n\n>>> from pandas.api.types import CategoricalDtype\n>>> cat_dtype = CategoricalDtype(\n...     categories=[2, 1], ordered=True)\n>>> ser.astype(cat_dtype)\n0    1\n1    2\ndtype: category\nCategories (2, int64): [2 < 1]\n\nCreate a series of dates:\n\n>>> ser_date = pd.Series(pd.date_range('20200101', periods=3))\n>>> ser_date\n0   2020-01-01\n1   2020-01-02\n2   2020-01-03\ndtype: datetime64[ns]"
  },
  {
    "symbol": "Series.at",
    "signature": "(property)",
    "doc": "\nAccess a single value for a row/column label pair.\n\nSimilar to ``loc``, in that both provide label-based lookups. Use\n``at`` if you only need to get or set a single value in a DataFrame\nor Series.\n\nRaises\n------\nKeyError\n    If getting a value and 'label' does not exist in a DataFrame or Series.\n\nValueError\n    If row/column label pair is not a tuple or if any label\n    from the pair is not a scalar for DataFrame.\n    If label is list-like (*excluding* NamedTuple) for Series.\n\nSee Also\n--------\nDataFrame.at : Access a single value for a row/column pair by label.\nDataFrame.iat : Access a single value for a row/column pair by integer\n    position.\nDataFrame.loc : Access a group of rows and columns by label(s).\nDataFrame.iloc : Access a group of rows and columns by integer\n    position(s).\nSeries.at : Access a single value by label.\nSeries.iat : Access a single value by integer position.\nSeries.loc : Access a group of rows by label(s).\nSeries.iloc : Access a group of rows by integer position(s).\n\nNotes\n-----\nSee :ref:`Fast scalar value getting and setting <indexing.basics.get_value>`\nfor more details.\n\nExamples\n--------\n>>> df = pd.DataFrame([[0, 2, 3], [0, 4, 1], [10, 20, 30]],\n...                   index=[4, 5, 6], columns=['A', 'B', 'C'])\n>>> df\n    A   B   C\n4   0   2   3\n5   0   4   1\n6  10  20  30\n\nGet value at specified row/column pair\n\n>>> df.at[4, 'B']\n2\n\nSet value at specified row/column pair\n\n>>> df.at[4, 'B'] = 10\n>>> df.at[4, 'B']\n10\n\nGet value within a Series\n\n>>> df.loc[5].at['B']\n4\n"
  },
  {
    "symbol": "Series.at_time",
    "signature": "(self, time, asof: 'bool_t' = False, axis: 'Axis | None' = None) -> 'Self'",
    "doc": "Select values at particular time of day (e.g., 9:30AM).\n\nParameters\n----------\ntime : datetime.time or str\n    The values to select.\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    For `Series` this parameter is unused and defaults to 0.\n\nReturns\n-------\nSeries or DataFrame\n\nRaises\n------\nTypeError\n    If the index is not  a :class:`DatetimeIndex`\n\nSee Also\n--------\nbetween_time : Select values between particular times of the day.\nfirst : Select initial periods of time series based on a date offset.\nlast : Select final periods of time series based on a date offset.\nDatetimeIndex.indexer_at_time : Get just the index locations for\n    values at particular time of the day.\n\nExamples\n--------\n>>> i = pd.date_range('2018-04-09', periods=4, freq='12h')\n>>> ts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)\n>>> ts\n                     A\n2018-04-09 00:00:00  1\n2018-04-09 12:00:00  2\n2018-04-10 00:00:00  3\n2018-04-10 12:00:00  4\n\n>>> ts.at_time('12:00')\n                     A\n2018-04-09 12:00:00  2\n2018-04-10 12:00:00  4"
  },
  {
    "symbol": "Series.attrs",
    "signature": "(property)",
    "doc": "\nDictionary of global attributes of this dataset.\n\n.. warning::\n\n   attrs is experimental and may change without warning.\n\nSee Also\n--------\nDataFrame.flags : Global flags applying to this object.\n\nNotes\n-----\nMany operations that create new datasets will copy ``attrs``. Copies\nare always deep so that changing ``attrs`` will only affect the\npresent dataset. ``pandas.concat`` copies ``attrs`` only if all input\ndatasets have the same ``attrs``.\n\nExamples\n--------\nFor Series:\n\n>>> ser = pd.Series([1, 2, 3])\n>>> ser.attrs = {\"A\": [10, 20, 30]}\n>>> ser.attrs\n{'A': [10, 20, 30]}\n\nFor DataFrame:\n\n>>> df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\n>>> df.attrs = {\"A\": [10, 20, 30]}\n>>> df.attrs\n{'A': [10, 20, 30]}\n"
  },
  {
    "symbol": "Series.autocorr",
    "signature": "(self, lag: 'int' = 1) -> 'float'",
    "doc": "Compute the lag-N autocorrelation.\n\nThis method computes the Pearson correlation between\nthe Series and its shifted self.\n\nParameters\n----------\nlag : int, default 1\n    Number of lags to apply before performing autocorrelation.\n\nReturns\n-------\nfloat\n    The Pearson correlation between self and self.shift(lag).\n\nSee Also\n--------\nSeries.corr : Compute the correlation between two Series.\nSeries.shift : Shift index by desired number of periods.\nDataFrame.corr : Compute pairwise correlation of columns.\nDataFrame.corrwith : Compute pairwise correlation between rows or\n    columns of two DataFrame objects.\n\nNotes\n-----\nIf the Pearson correlation is not well defined return 'NaN'.\n\nExamples\n--------\n>>> s = pd.Series([0.25, 0.5, 0.2, -0.05])\n>>> s.autocorr()  # doctest: +ELLIPSIS\n0.10355...\n>>> s.autocorr(lag=2)  # doctest: +ELLIPSIS\n-0.99999...\n\nIf the Pearson correlation is not well defined, then 'NaN' is returned.\n\n>>> s = pd.Series([1, 0, 0, 0])\n>>> s.autocorr()\nnan"
  },
  {
    "symbol": "Series.axes",
    "signature": "(property)",
    "doc": "\nReturn a list of the row axis labels.\n"
  },
  {
    "symbol": "Series.backfill",
    "signature": "(self, *, axis: 'None | Axis' = None, inplace: 'bool_t' = False, limit: 'None | int' = None, downcast: 'dict | None | lib.NoDefault' = <no_default>) -> 'Self | None'",
    "doc": "Fill NA/NaN values by using the next valid observation to fill the gap.\n\n.. deprecated:: 2.0\n\n    Series/DataFrame.backfill is deprecated. Use Series/DataFrame.bfill instead.\n\nReturns\n-------\nSeries/DataFrame or None\n    Object with missing values filled or None if ``inplace=True``.\n\nExamples\n--------\nPlease see examples for :meth:`DataFrame.bfill` or :meth:`Series.bfill`."
  },
  {
    "symbol": "Series.between",
    "signature": "(self, left, right, inclusive: \"Literal['both', 'neither', 'left', 'right']\" = 'both') -> 'Series'",
    "doc": "Return boolean Series equivalent to left <= series <= right.\n\nThis function returns a boolean vector containing `True` wherever the\ncorresponding Series element is between the boundary values `left` and\n`right`. NA values are treated as `False`.\n\nParameters\n----------\nleft : scalar or list-like\n    Left boundary.\nright : scalar or list-like\n    Right boundary.\ninclusive : {\"both\", \"neither\", \"left\", \"right\"}\n    Include boundaries. Whether to set each bound as closed or open.\n\n    .. versionchanged:: 1.3.0\n\nReturns\n-------\nSeries\n    Series representing whether each element is between left and\n    right (inclusive).\n\nSee Also\n--------\nSeries.gt : Greater than of series and other.\nSeries.lt : Less than of series and other.\n\nNotes\n-----\nThis function is equivalent to ``(left <= ser) & (ser <= right)``\n\nExamples\n--------\n>>> s = pd.Series([2, 0, 4, 8, np.nan])\n\nBoundary values are included by default:\n\n>>> s.between(1, 4)\n0     True\n1    False\n2     True\n3    False\n4    False\ndtype: bool\n\nWith `inclusive` set to ``\"neither\"`` boundary values are excluded:\n\n>>> s.between(1, 4, inclusive=\"neither\")\n0     True\n1    False\n2    False\n3    False\n4    False\ndtype: bool\n\n`left` and `right` can be any scalar value:\n\n>>> s = pd.Series(['Alice', 'Bob', 'Carol', 'Eve'])\n>>> s.between('Anna', 'Daniel')\n0    False\n1     True\n2     True\n3    False\ndtype: bool"
  },
  {
    "symbol": "Series.between_time",
    "signature": "(self, start_time, end_time, inclusive: 'IntervalClosedType' = 'both', axis: 'Axis | None' = None) -> 'Self'",
    "doc": "Select values between particular times of the day (e.g., 9:00-9:30 AM).\n\nBy setting ``start_time`` to be later than ``end_time``,\nyou can get the times that are *not* between the two times.\n\nParameters\n----------\nstart_time : datetime.time or str\n    Initial time as a time filter limit.\nend_time : datetime.time or str\n    End time as a time filter limit.\ninclusive : {\"both\", \"neither\", \"left\", \"right\"}, default \"both\"\n    Include boundaries; whether to set each bound as closed or open.\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    Determine range time on index or columns value.\n    For `Series` this parameter is unused and defaults to 0.\n\nReturns\n-------\nSeries or DataFrame\n    Data from the original object filtered to the specified dates range.\n\nRaises\n------\nTypeError\n    If the index is not  a :class:`DatetimeIndex`\n\nSee Also\n--------\nat_time : Select values at a particular time of the day.\nfirst : Select initial periods of time series based on a date offset.\nlast : Select final periods of time series based on a date offset.\nDatetimeIndex.indexer_between_time : Get just the index locations for\n    values between particular times of the day.\n\nExamples\n--------\n>>> i = pd.date_range('2018-04-09', periods=4, freq='1D20min')\n>>> ts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)\n>>> ts\n                     A\n2018-04-09 00:00:00  1\n2018-04-10 00:20:00  2\n2018-04-11 00:40:00  3\n2018-04-12 01:00:00  4\n\n>>> ts.between_time('0:15', '0:45')\n                     A\n2018-04-10 00:20:00  2\n2018-04-11 00:40:00  3\n\nYou get the times that are *not* between two times by setting\n``start_time`` later than ``end_time``:\n\n>>> ts.between_time('0:45', '0:15')\n                     A\n2018-04-09 00:00:00  1\n2018-04-12 01:00:00  4"
  },
  {
    "symbol": "Series.bfill",
    "signature": "(self, *, axis: 'None | Axis' = None, inplace: 'bool_t' = False, limit: 'None | int' = None, limit_area: \"Literal['inside', 'outside'] | None\" = None, downcast: 'dict | None | lib.NoDefault' = <no_default>) -> 'Self | None'",
    "doc": "Fill NA/NaN values by using the next valid observation to fill the gap.\n\nParameters\n----------\naxis : {0 or 'index'} for Series, {0 or 'index', 1 or 'columns'} for DataFrame\n    Axis along which to fill missing values. For `Series`\n    this parameter is unused and defaults to 0.\ninplace : bool, default False\n    If True, fill in-place. Note: this will modify any\n    other views on this object (e.g., a no-copy slice for a column in a\n    DataFrame).\nlimit : int, default None\n    If method is specified, this is the maximum number of consecutive\n    NaN values to forward/backward fill. In other words, if there is\n    a gap with more than this number of consecutive NaNs, it will only\n    be partially filled. If method is not specified, this is the\n    maximum number of entries along the entire axis where NaNs will be\n    filled. Must be greater than 0 if not None.\nlimit_area : {`None`, 'inside', 'outside'}, default None\n    If limit is specified, consecutive NaNs will be filled with this\n    restriction.\n\n    * ``None``: No fill restriction.\n    * 'inside': Only fill NaNs surrounded by valid values\n      (interpolate).\n    * 'outside': Only fill NaNs outside valid values (extrapolate).\n\n    .. versionadded:: 2.2.0\n\ndowncast : dict, default is None\n    A dict of item->dtype of what to downcast if possible,\n    or the string 'infer' which will try to downcast to an appropriate\n    equal type (e.g. float64 to int64 if possible).\n\n    .. deprecated:: 2.2.0\n\nReturns\n-------\nSeries/DataFrame or None\n    Object with missing values filled or None if ``inplace=True``.\n\nExamples\n--------\nFor Series:\n\n>>> s = pd.Series([1, None, None, 2])\n>>> s.bfill()\n0    1.0\n1    2.0\n2    2.0\n3    2.0\ndtype: float64\n>>> s.bfill(limit=1)\n0    1.0\n1    NaN\n2    2.0\n3    2.0\ndtype: float64\n\nWith DataFrame:\n\n>>> df = pd.DataFrame({'A': [1, None, None, 4], 'B': [None, 5, None, 7]})\n>>> df\n      A     B\n0   1.0   NaN\n1   NaN   5.0\n2   NaN   NaN\n3   4.0   7.0\n>>> df.bfill()\n      A     B\n0   1.0   5.0\n1   4.0   5.0\n2   4.0   7.0\n3   4.0   7.0\n>>> df.bfill(limit=1)\n      A     B\n0   1.0   5.0\n1   NaN   5.0\n2   4.0   7.0\n3   4.0   7.0"
  },
  {
    "symbol": "Series.bool",
    "signature": "(self) -> 'bool_t'",
    "doc": "Return the bool of a single element Series or DataFrame.\n\n.. deprecated:: 2.1.0\n\n   bool is deprecated and will be removed in future version of pandas.\n   For ``Series`` use ``pandas.Series.item``.\n\nThis must be a boolean scalar value, either True or False. It will raise a\nValueError if the Series or DataFrame does not have exactly 1 element, or that\nelement is not boolean (integer values 0 and 1 will also raise an exception).\n\nReturns\n-------\nbool\n    The value in the Series or DataFrame.\n\nSee Also\n--------\nSeries.astype : Change the data type of a Series, including to boolean.\nDataFrame.astype : Change the data type of a DataFrame, including to boolean.\nnumpy.bool_ : NumPy boolean data type, used by pandas for boolean values.\n\nExamples\n--------\nThe method will only work for single element objects with a boolean value:\n\n>>> pd.Series([True]).bool()  # doctest: +SKIP\nTrue\n>>> pd.Series([False]).bool()  # doctest: +SKIP\nFalse\n\n>>> pd.DataFrame({'col': [True]}).bool()  # doctest: +SKIP\nTrue\n>>> pd.DataFrame({'col': [False]}).bool()  # doctest: +SKIP\nFalse\n\nThis is an alternative method and will only work\nfor single element objects with a boolean value:\n\n>>> pd.Series([True]).item()  # doctest: +SKIP\nTrue\n>>> pd.Series([False]).item()  # doctest: +SKIP\nFalse"
  },
  {
    "symbol": "Series.case_when",
    "signature": "(self, caselist: 'list[tuple[ArrayLike | Callable[[Series], Series | np.ndarray | Sequence[bool]], ArrayLike | Scalar | Callable[[Series], Series | np.ndarray]],]') -> 'Series'",
    "doc": "Replace values where the conditions are True.\n\nParameters\n----------\ncaselist : A list of tuples of conditions and expected replacements\n    Takes the form:  ``(condition0, replacement0)``,\n    ``(condition1, replacement1)``, ... .\n    ``condition`` should be a 1-D boolean array-like object\n    or a callable. If ``condition`` is a callable,\n    it is computed on the Series\n    and should return a boolean Series or array.\n    The callable must not change the input Series\n    (though pandas doesn`t check it). ``replacement`` should be a\n    1-D array-like object, a scalar or a callable.\n    If ``replacement`` is a callable, it is computed on the Series\n    and should return a scalar or Series. The callable\n    must not change the input Series\n    (though pandas doesn`t check it).\n\n    .. versionadded:: 2.2.0\n\nReturns\n-------\nSeries\n\nSee Also\n--------\nSeries.mask : Replace values where the condition is True.\n\nExamples\n--------\n>>> c = pd.Series([6, 7, 8, 9], name='c')\n>>> a = pd.Series([0, 0, 1, 2])\n>>> b = pd.Series([0, 3, 4, 5])\n\n>>> c.case_when(caselist=[(a.gt(0), a),  # condition, replacement\n...                       (b.gt(0), b)])\n0    6\n1    3\n2    1\n3    2\nName: c, dtype: int64"
  },
  {
    "symbol": "Series.cat",
    "signature": "(accessor)",
    "doc": "Accessor object for categorical properties of the Series values.\n\nParameters\n----------\ndata : Series or CategoricalIndex\n\nExamples\n--------\n>>> s = pd.Series(list(\"abbccc\")).astype(\"category\")\n>>> s\n0    a\n1    b\n2    b\n3    c\n4    c\n5    c\ndtype: category\nCategories (3, object): ['a', 'b', 'c']\n\n>>> s.cat.categories\nIndex(['a', 'b', 'c'], dtype='object')\n\n>>> s.cat.rename_categories(list(\"cba\"))\n0    c\n1    b\n2    b\n3    a\n4    a\n5    a\ndtype: category\nCategories (3, object): ['c', 'b', 'a']\n\n>>> s.cat.reorder_categories(list(\"cba\"))\n0    a\n1    b\n2    b\n3    c\n4    c\n5    c\ndtype: category\nCategories (3, object): ['c', 'b', 'a']\n\n>>> s.cat.add_categories([\"d\", \"e\"])\n0    a\n1    b\n2    b\n3    c\n4    c\n5    c\ndtype: category\nCategories (5, object): ['a', 'b', 'c', 'd', 'e']\n\n>>> s.cat.remove_categories([\"a\", \"c\"])\n0    NaN\n1      b\n2      b\n3    NaN\n4    NaN\n5    NaN\ndtype: category\nCategories (1, object): ['b']\n\n>>> s1 = s.cat.add_categories([\"d\", \"e\"])\n>>> s1.cat.remove_unused_categories()\n0    a\n1    b\n2    b\n3    c\n4    c\n5    c\ndtype: category\nCategories (3, object): ['a', 'b', 'c']\n\n>>> s.cat.set_categories(list(\"abcde\"))\n0    a\n1    b\n2    b\n3    c\n4    c\n5    c\ndtype: category\nCategories (5, object): ['a', 'b', 'c', 'd', 'e']\n\n>>> s.cat.as_ordered()\n0    a\n1    b\n2    b\n3    c\n4    c\n5    c\ndtype: category\nCategories (3, object): ['a' < 'b' < 'c']\n\n>>> s.cat.as_unordered()\n0    a\n1    b\n2    b\n3    c\n4    c\n5    c\ndtype: category\nCategories (3, object): ['a', 'b', 'c']"
  },
  {
    "symbol": "Series.cat.add_categories",
    "signature": "(*args, **kwargs)",
    "doc": "Add new categories.\n\n`new_categories` will be included at the last/highest place in the\ncategories and will be unused directly after this call.\n\nParameters\n----------\nnew_categories : category or list-like of category\n   The new categories to be included.\n\nReturns\n-------\nCategorical\n    Categorical with new categories added.\n\nRaises\n------\nValueError\n    If the new categories include old categories or do not validate as\n    categories\n\nSee Also\n--------\nrename_categories : Rename categories.\nreorder_categories : Reorder categories.\nremove_categories : Remove the specified categories.\nremove_unused_categories : Remove categories which are not used.\nset_categories : Set the categories to the specified ones.\n\nExamples\n--------\n>>> c = pd.Categorical(['c', 'b', 'c'])\n>>> c\n['c', 'b', 'c']\nCategories (2, object): ['b', 'c']\n\n>>> c.add_categories(['d', 'a'])\n['c', 'b', 'c']\nCategories (4, object): ['b', 'c', 'd', 'a']"
  },
  {
    "symbol": "Series.cat.as_ordered",
    "signature": "(*args, **kwargs)",
    "doc": "Set the Categorical to be ordered.\n\nReturns\n-------\nCategorical\n    Ordered Categorical.\n\nExamples\n--------\nFor :class:`pandas.Series`:\n\n>>> ser = pd.Series(['a', 'b', 'c', 'a'], dtype='category')\n>>> ser.cat.ordered\nFalse\n>>> ser = ser.cat.as_ordered()\n>>> ser.cat.ordered\nTrue\n\nFor :class:`pandas.CategoricalIndex`:\n\n>>> ci = pd.CategoricalIndex(['a', 'b', 'c', 'a'])\n>>> ci.ordered\nFalse\n>>> ci = ci.as_ordered()\n>>> ci.ordered\nTrue"
  },
  {
    "symbol": "Series.cat.as_unordered",
    "signature": "(*args, **kwargs)",
    "doc": "Set the Categorical to be unordered.\n\nReturns\n-------\nCategorical\n    Unordered Categorical.\n\nExamples\n--------\nFor :class:`pandas.Series`:\n\n>>> raw_cat = pd.Categorical(['a', 'b', 'c', 'a'], ordered=True)\n>>> ser = pd.Series(raw_cat)\n>>> ser.cat.ordered\nTrue\n>>> ser = ser.cat.as_unordered()\n>>> ser.cat.ordered\nFalse\n\nFor :class:`pandas.CategoricalIndex`:\n\n>>> ci = pd.CategoricalIndex(['a', 'b', 'c', 'a'], ordered=True)\n>>> ci.ordered\nTrue\n>>> ci = ci.as_unordered()\n>>> ci.ordered\nFalse"
  },
  {
    "symbol": "Series.cat.categories",
    "signature": "(attribute)",
    "doc": "\nImmutable sequence used for indexing and alignment.\n\nThe basic object storing axis labels for all pandas objects.\n\n.. versionchanged:: 2.0.0\n\n   Index can hold all numpy numeric dtypes (except float16). Previously only\n   int64/uint64/float64 dtypes were accepted.\n\nParameters\n----------\ndata : array-like (1-dimensional)\ndtype : str, numpy.dtype, or ExtensionDtype, optional\n    Data type for the output Index. If not specified, this will be\n    inferred from `data`.\n    See the :ref:`user guide <basics.dtypes>` for more usages.\ncopy : bool, default False\n    Copy input data.\nname : object\n    Name to be stored in the index.\ntupleize_cols : bool (default: True)\n    When True, attempt to create a MultiIndex if possible.\n\nSee Also\n--------\nRangeIndex : Index implementing a monotonic integer range.\nCategoricalIndex : Index of :class:`Categorical` s.\nMultiIndex : A multi-level, or hierarchical Index.\nIntervalIndex : An Index of :class:`Interval` s.\nDatetimeIndex : Index of datetime64 data.\nTimedeltaIndex : Index of timedelta64 data.\nPeriodIndex : Index of Period data.\n\nNotes\n-----\nAn Index instance can **only** contain hashable objects.\nAn Index instance *can not* hold numpy float16 dtype.\n\nExamples\n--------\n>>> pd.Index([1, 2, 3])\nIndex([1, 2, 3], dtype='int64')\n\n>>> pd.Index(list('abc'))\nIndex(['a', 'b', 'c'], dtype='object')\n\n>>> pd.Index([1, 2, 3], dtype=\"uint8\")\nIndex([1, 2, 3], dtype='uint8')\n"
  },
  {
    "symbol": "Series.cat.codes",
    "signature": "(attribute)",
    "doc": "\nOne-dimensional ndarray with axis labels (including time series).\n\nLabels need not be unique but must be a hashable type. The object\nsupports both integer- and label-based indexing and provides a host of\nmethods for performing operations involving the index. Statistical\nmethods from ndarray have been overridden to automatically exclude\nmissing data (currently represented as NaN).\n\nOperations between Series (+, -, /, \\*, \\*\\*) align values based on their\nassociated index values-- they need not be the same length. The result\nindex will be the sorted union of the two indexes.\n\nParameters\n----------\ndata : array-like, Iterable, dict, or scalar value\n    Contains data stored in Series. If data is a dict, argument order is\n    maintained.\nindex : array-like or Index (1d)\n    Values must be hashable and have the same length as `data`.\n    Non-unique index values are allowed. Will default to\n    RangeIndex (0, 1, 2, ..., n) if not provided. If data is dict-like\n    and index is None, then the keys in the data are used as the index. If the\n    index is not None, the resulting Series is reindexed with the index values.\ndtype : str, numpy.dtype, or ExtensionDtype, optional\n    Data type for the output Series. If not specified, this will be\n    inferred from `data`.\n    See the :ref:`user guide <basics.dtypes>` for more usages.\nname : Hashable, default None\n    The name to give to the Series.\ncopy : bool, default False\n    Copy input data. Only affects Series or 1d ndarray input. See examples.\n\nNotes\n-----\nPlease reference the :ref:`User Guide <basics.series>` for more information.\n\nExamples\n--------\nConstructing Series from a dictionary with an Index specified\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['a', 'b', 'c'])\n>>> ser\na   1\nb   2\nc   3\ndtype: int64\n\nThe keys of the dictionary match with the Index values, hence the Index\nvalues have no effect.\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['x', 'y', 'z'])\n>>> ser\nx   NaN\ny   NaN\nz   NaN\ndtype: float64\n\nNote that the Index is first build with the keys from the dictionary.\nAfter this the Series is reindexed with the given Index values, hence we\nget all NaN as a result.\n\nConstructing Series from a list with `copy=False`.\n\n>>> r = [1, 2]\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\n[1, 2]\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `copy` of\nthe original data even though `copy=False`, so\nthe data is unchanged.\n\nConstructing Series from a 1d ndarray with `copy=False`.\n\n>>> r = np.array([1, 2])\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\narray([999,   2])\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `view` on\nthe original data, so\nthe data is changed as well.\n"
  },
  {
    "symbol": "Series.cat.ordered",
    "signature": "(attribute)",
    "doc": "Returns True when the argument is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."
  },
  {
    "symbol": "Series.cat.remove_categories",
    "signature": "(*args, **kwargs)",
    "doc": "Remove the specified categories.\n\n`removals` must be included in the old categories. Values which were in\nthe removed categories will be set to NaN\n\nParameters\n----------\nremovals : category or list of categories\n   The categories which should be removed.\n\nReturns\n-------\nCategorical\n    Categorical with removed categories.\n\nRaises\n------\nValueError\n    If the removals are not contained in the categories\n\nSee Also\n--------\nrename_categories : Rename categories.\nreorder_categories : Reorder categories.\nadd_categories : Add new categories.\nremove_unused_categories : Remove categories which are not used.\nset_categories : Set the categories to the specified ones.\n\nExamples\n--------\n>>> c = pd.Categorical(['a', 'c', 'b', 'c', 'd'])\n>>> c\n['a', 'c', 'b', 'c', 'd']\nCategories (4, object): ['a', 'b', 'c', 'd']\n\n>>> c.remove_categories(['d', 'a'])\n[NaN, 'c', 'b', 'c', NaN]\nCategories (2, object): ['b', 'c']"
  },
  {
    "symbol": "Series.cat.remove_unused_categories",
    "signature": "(*args, **kwargs)",
    "doc": "Remove categories which are not used.\n\nReturns\n-------\nCategorical\n    Categorical with unused categories dropped.\n\nSee Also\n--------\nrename_categories : Rename categories.\nreorder_categories : Reorder categories.\nadd_categories : Add new categories.\nremove_categories : Remove the specified categories.\nset_categories : Set the categories to the specified ones.\n\nExamples\n--------\n>>> c = pd.Categorical(['a', 'c', 'b', 'c', 'd'])\n>>> c\n['a', 'c', 'b', 'c', 'd']\nCategories (4, object): ['a', 'b', 'c', 'd']\n\n>>> c[2] = 'a'\n>>> c[4] = 'c'\n>>> c\n['a', 'c', 'a', 'c', 'c']\nCategories (4, object): ['a', 'b', 'c', 'd']\n\n>>> c.remove_unused_categories()\n['a', 'c', 'a', 'c', 'c']\nCategories (2, object): ['a', 'c']"
  },
  {
    "symbol": "Series.cat.rename_categories",
    "signature": "(*args, **kwargs)",
    "doc": "Rename categories.\n\nParameters\n----------\nnew_categories : list-like, dict-like or callable\n\n    New categories which will replace old categories.\n\n    * list-like: all items must be unique and the number of items in\n      the new categories must match the existing number of categories.\n\n    * dict-like: specifies a mapping from\n      old categories to new. Categories not contained in the mapping\n      are passed through and extra categories in the mapping are\n      ignored.\n\n    * callable : a callable that is called on all items in the old\n      categories and whose return values comprise the new categories.\n\nReturns\n-------\nCategorical\n    Categorical with renamed categories.\n\nRaises\n------\nValueError\n    If new categories are list-like and do not have the same number of\n    items than the current categories or do not validate as categories\n\nSee Also\n--------\nreorder_categories : Reorder categories.\nadd_categories : Add new categories.\nremove_categories : Remove the specified categories.\nremove_unused_categories : Remove categories which are not used.\nset_categories : Set the categories to the specified ones.\n\nExamples\n--------\n>>> c = pd.Categorical(['a', 'a', 'b'])\n>>> c.rename_categories([0, 1])\n[0, 0, 1]\nCategories (2, int64): [0, 1]\n\nFor dict-like ``new_categories``, extra keys are ignored and\ncategories not in the dictionary are passed through\n\n>>> c.rename_categories({'a': 'A', 'c': 'C'})\n['A', 'A', 'b']\nCategories (2, object): ['A', 'b']\n\nYou may also provide a callable to create the new categories\n\n>>> c.rename_categories(lambda x: x.upper())\n['A', 'A', 'B']\nCategories (2, object): ['A', 'B']"
  },
  {
    "symbol": "Series.cat.reorder_categories",
    "signature": "(*args, **kwargs)",
    "doc": "Reorder categories as specified in new_categories.\n\n``new_categories`` need to include all old categories and no new category\nitems.\n\nParameters\n----------\nnew_categories : Index-like\n   The categories in new order.\nordered : bool, optional\n   Whether or not the categorical is treated as a ordered categorical.\n   If not given, do not change the ordered information.\n\nReturns\n-------\nCategorical\n    Categorical with reordered categories.\n\nRaises\n------\nValueError\n    If the new categories do not contain all old category items or any\n    new ones\n\nSee Also\n--------\nrename_categories : Rename categories.\nadd_categories : Add new categories.\nremove_categories : Remove the specified categories.\nremove_unused_categories : Remove categories which are not used.\nset_categories : Set the categories to the specified ones.\n\nExamples\n--------\nFor :class:`pandas.Series`:\n\n>>> ser = pd.Series(['a', 'b', 'c', 'a'], dtype='category')\n>>> ser = ser.cat.reorder_categories(['c', 'b', 'a'], ordered=True)\n>>> ser\n0   a\n1   b\n2   c\n3   a\ndtype: category\nCategories (3, object): ['c' < 'b' < 'a']\n\n>>> ser.sort_values()\n2   c\n1   b\n0   a\n3   a\ndtype: category\nCategories (3, object): ['c' < 'b' < 'a']\n\nFor :class:`pandas.CategoricalIndex`:\n\n>>> ci = pd.CategoricalIndex(['a', 'b', 'c', 'a'])\n>>> ci\nCategoricalIndex(['a', 'b', 'c', 'a'], categories=['a', 'b', 'c'],\n                 ordered=False, dtype='category')\n>>> ci.reorder_categories(['c', 'b', 'a'], ordered=True)\nCategoricalIndex(['a', 'b', 'c', 'a'], categories=['c', 'b', 'a'],\n                 ordered=True, dtype='category')"
  },
  {
    "symbol": "Series.cat.set_categories",
    "signature": "(*args, **kwargs)",
    "doc": "Set the categories to the specified new categories.\n\n``new_categories`` can include new categories (which will result in\nunused categories) or remove old categories (which results in values\nset to ``NaN``). If ``rename=True``, the categories will simply be renamed\n(less or more items than in old categories will result in values set to\n``NaN`` or in unused categories respectively).\n\nThis method can be used to perform more than one action of adding,\nremoving, and reordering simultaneously and is therefore faster than\nperforming the individual steps via the more specialised methods.\n\nOn the other hand this methods does not do checks (e.g., whether the\nold categories are included in the new categories on a reorder), which\ncan result in surprising changes, for example when using special string\ndtypes, which does not considers a S1 string equal to a single char\npython string.\n\nParameters\n----------\nnew_categories : Index-like\n   The categories in new order.\nordered : bool, default False\n   Whether or not the categorical is treated as a ordered categorical.\n   If not given, do not change the ordered information.\nrename : bool, default False\n   Whether or not the new_categories should be considered as a rename\n   of the old categories or as reordered categories.\n\nReturns\n-------\nCategorical with reordered categories.\n\nRaises\n------\nValueError\n    If new_categories does not validate as categories\n\nSee Also\n--------\nrename_categories : Rename categories.\nreorder_categories : Reorder categories.\nadd_categories : Add new categories.\nremove_categories : Remove the specified categories.\nremove_unused_categories : Remove categories which are not used.\n\nExamples\n--------\nFor :class:`pandas.Series`:\n\n>>> raw_cat = pd.Categorical(['a', 'b', 'c', 'A'],\n...                           categories=['a', 'b', 'c'], ordered=True)\n>>> ser = pd.Series(raw_cat)\n>>> ser\n0   a\n1   b\n2   c\n3   NaN\ndtype: category\nCategories (3, object): ['a' < 'b' < 'c']\n\n>>> ser.cat.set_categories(['A', 'B', 'C'], rename=True)\n0   A\n1   B\n2   C\n3   NaN\ndtype: category\nCategories (3, object): ['A' < 'B' < 'C']\n\nFor :class:`pandas.CategoricalIndex`:\n\n>>> ci = pd.CategoricalIndex(['a', 'b', 'c', 'A'],\n...                          categories=['a', 'b', 'c'], ordered=True)\n>>> ci\nCategoricalIndex(['a', 'b', 'c', nan], categories=['a', 'b', 'c'],\n                 ordered=True, dtype='category')\n\n>>> ci.set_categories(['A', 'b', 'c'])\nCategoricalIndex([nan, 'b', 'c', nan], categories=['A', 'b', 'c'],\n                 ordered=True, dtype='category')\n>>> ci.set_categories(['A', 'b', 'c'], rename=True)\nCategoricalIndex(['A', 'b', 'c', nan], categories=['A', 'b', 'c'],\n                 ordered=True, dtype='category')"
  },
  {
    "symbol": "Series.clip",
    "signature": "(self, lower=None, upper=None, *, axis: 'Axis | None' = None, inplace: 'bool_t' = False, **kwargs) -> 'Self | None'",
    "doc": "Trim values at input threshold(s).\n\nAssigns values outside boundary to boundary values. Thresholds\ncan be singular values or array like, and in the latter case\nthe clipping is performed element-wise in the specified axis.\n\nParameters\n----------\nlower : float or array-like, default None\n    Minimum threshold value. All values below this\n    threshold will be set to it. A missing\n    threshold (e.g `NA`) will not clip the value.\nupper : float or array-like, default None\n    Maximum threshold value. All values above this\n    threshold will be set to it. A missing\n    threshold (e.g `NA`) will not clip the value.\naxis : {{0 or 'index', 1 or 'columns', None}}, default None\n    Align object with lower and upper along the given axis.\n    For `Series` this parameter is unused and defaults to `None`.\ninplace : bool, default False\n    Whether to perform the operation in place on the data.\n*args, **kwargs\n    Additional keywords have no effect but might be accepted\n    for compatibility with numpy.\n\nReturns\n-------\nSeries or DataFrame or None\n    Same type as calling object with the values outside the\n    clip boundaries replaced or None if ``inplace=True``.\n\nSee Also\n--------\nSeries.clip : Trim values at input threshold in series.\nDataFrame.clip : Trim values at input threshold in dataframe.\nnumpy.clip : Clip (limit) the values in an array.\n\nExamples\n--------\n>>> data = {'col_0': [9, -3, 0, -1, 5], 'col_1': [-2, -7, 6, 8, -5]}\n>>> df = pd.DataFrame(data)\n>>> df\n   col_0  col_1\n0      9     -2\n1     -3     -7\n2      0      6\n3     -1      8\n4      5     -5\n\nClips per column using lower and upper thresholds:\n\n>>> df.clip(-4, 6)\n   col_0  col_1\n0      6     -2\n1     -3     -4\n2      0      6\n3     -1      6\n4      5     -4\n\nClips using specific lower and upper thresholds per column:\n\n>>> df.clip([-2, -1], [4, 5])\n    col_0  col_1\n0      4     -1\n1     -2     -1\n2      0      5\n3     -1      5\n4      4     -1\n\nClips using specific lower and upper thresholds per column element:\n\n>>> t = pd.Series([2, -4, -1, 6, 3])\n>>> t\n0    2\n1   -4\n2   -1\n3    6\n4    3\ndtype: int64\n\n>>> df.clip(t, t + 4, axis=0)\n   col_0  col_1\n0      6      2\n1     -3     -4\n2      0      3\n3      6      8\n4      5      3\n\nClips using specific lower threshold per column element, with missing values:\n\n>>> t = pd.Series([2, -4, np.nan, 6, 3])\n>>> t\n0    2.0\n1   -4.0\n2    NaN\n3    6.0\n4    3.0\ndtype: float64\n\n>>> df.clip(t, axis=0)\ncol_0  col_1\n0      9      2\n1     -3     -4\n2      0      6\n3      6      8\n4      5      3"
  },
  {
    "symbol": "Series.combine",
    "signature": "(self, other: 'Series | Hashable', func: 'Callable[[Hashable, Hashable], Hashable]', fill_value: 'Hashable | None' = None) -> 'Series'",
    "doc": "Combine the Series with a Series or scalar according to `func`.\n\nCombine the Series and `other` using `func` to perform elementwise\nselection for combined Series.\n`fill_value` is assumed when value is missing at some index\nfrom one of the two objects being combined.\n\nParameters\n----------\nother : Series or scalar\n    The value(s) to be combined with the `Series`.\nfunc : function\n    Function that takes two scalars as inputs and returns an element.\nfill_value : scalar, optional\n    The value to assume when an index is missing from\n    one Series or the other. The default specifies to use the\n    appropriate NaN value for the underlying dtype of the Series.\n\nReturns\n-------\nSeries\n    The result of combining the Series with the other object.\n\nSee Also\n--------\nSeries.combine_first : Combine Series values, choosing the calling\n    Series' values first.\n\nExamples\n--------\nConsider 2 Datasets ``s1`` and ``s2`` containing\nhighest clocked speeds of different birds.\n\n>>> s1 = pd.Series({'falcon': 330.0, 'eagle': 160.0})\n>>> s1\nfalcon    330.0\neagle     160.0\ndtype: float64\n>>> s2 = pd.Series({'falcon': 345.0, 'eagle': 200.0, 'duck': 30.0})\n>>> s2\nfalcon    345.0\neagle     200.0\nduck       30.0\ndtype: float64\n\nNow, to combine the two datasets and view the highest speeds\nof the birds across the two datasets\n\n>>> s1.combine(s2, max)\nduck        NaN\neagle     200.0\nfalcon    345.0\ndtype: float64\n\nIn the previous example, the resulting value for duck is missing,\nbecause the maximum of a NaN and a float is a NaN.\nSo, in the example, we set ``fill_value=0``,\nso the maximum value returned will be the value from some dataset.\n\n>>> s1.combine(s2, max, fill_value=0)\nduck       30.0\neagle     200.0\nfalcon    345.0\ndtype: float64"
  },
  {
    "symbol": "Series.combine_first",
    "signature": "(self, other) -> 'Series'",
    "doc": "Update null elements with value in the same location in 'other'.\n\nCombine two Series objects by filling null values in one Series with\nnon-null values from the other Series. Result index will be the union\nof the two indexes.\n\nParameters\n----------\nother : Series\n    The value(s) to be used for filling null values.\n\nReturns\n-------\nSeries\n    The result of combining the provided Series with the other object.\n\nSee Also\n--------\nSeries.combine : Perform element-wise operation on two Series\n    using a given function.\n\nExamples\n--------\n>>> s1 = pd.Series([1, np.nan])\n>>> s2 = pd.Series([3, 4, 5])\n>>> s1.combine_first(s2)\n0    1.0\n1    4.0\n2    5.0\ndtype: float64\n\nNull values still persist if the location of that null value\ndoes not exist in `other`\n\n>>> s1 = pd.Series({'falcon': np.nan, 'eagle': 160.0})\n>>> s2 = pd.Series({'eagle': 200.0, 'duck': 30.0})\n>>> s1.combine_first(s2)\nduck       30.0\neagle     160.0\nfalcon      NaN\ndtype: float64"
  },
  {
    "symbol": "Series.compare",
    "signature": "(self, other: 'Series', align_axis: 'Axis' = 1, keep_shape: 'bool' = False, keep_equal: 'bool' = False, result_names: 'Suffixes' = ('self', 'other')) -> 'DataFrame | Series'",
    "doc": "Compare to another Series and show the differences.\n\nParameters\n----------\nother : Series\n    Object to compare with.\n\nalign_axis : {0 or 'index', 1 or 'columns'}, default 1\n    Determine which axis to align the comparison on.\n\n    * 0, or 'index' : Resulting differences are stacked vertically\n        with rows drawn alternately from self and other.\n    * 1, or 'columns' : Resulting differences are aligned horizontally\n        with columns drawn alternately from self and other.\n\nkeep_shape : bool, default False\n    If true, all rows and columns are kept.\n    Otherwise, only the ones with different values are kept.\n\nkeep_equal : bool, default False\n    If true, the result keeps values that are equal.\n    Otherwise, equal values are shown as NaNs.\n\nresult_names : tuple, default ('self', 'other')\n    Set the dataframes names in the comparison.\n\n    .. versionadded:: 1.5.0\n\nReturns\n-------\nSeries or DataFrame\n    If axis is 0 or 'index' the result will be a Series.\n    The resulting index will be a MultiIndex with 'self' and 'other'\n    stacked alternately at the inner level.\n\n    If axis is 1 or 'columns' the result will be a DataFrame.\n    It will have two columns namely 'self' and 'other'.\n\nSee Also\n--------\nDataFrame.compare : Compare with another DataFrame and show differences.\n\nNotes\n-----\nMatching NaNs will not appear as a difference.\n\nExamples\n--------\n>>> s1 = pd.Series([\"a\", \"b\", \"c\", \"d\", \"e\"])\n>>> s2 = pd.Series([\"a\", \"a\", \"c\", \"b\", \"e\"])\n\nAlign the differences on columns\n\n>>> s1.compare(s2)\n  self other\n1    b     a\n3    d     b\n\nStack the differences on indices\n\n>>> s1.compare(s2, align_axis=0)\n1  self     b\n   other    a\n3  self     d\n   other    b\ndtype: object\n\nKeep all original rows\n\n>>> s1.compare(s2, keep_shape=True)\n  self other\n0  NaN   NaN\n1    b     a\n2  NaN   NaN\n3    d     b\n4  NaN   NaN\n\nKeep all original rows and also all original values\n\n>>> s1.compare(s2, keep_shape=True, keep_equal=True)\n  self other\n0    a     a\n1    b     a\n2    c     c\n3    d     b\n4    e     e"
  },
  {
    "symbol": "Series.convert_dtypes",
    "signature": "(self, infer_objects: 'bool_t' = True, convert_string: 'bool_t' = True, convert_integer: 'bool_t' = True, convert_boolean: 'bool_t' = True, convert_floating: 'bool_t' = True, dtype_backend: 'DtypeBackend' = 'numpy_nullable') -> 'Self'",
    "doc": "Convert columns to the best possible dtypes using dtypes supporting ``pd.NA``.\n\nParameters\n----------\ninfer_objects : bool, default True\n    Whether object dtypes should be converted to the best possible types.\nconvert_string : bool, default True\n    Whether object dtypes should be converted to ``StringDtype()``.\nconvert_integer : bool, default True\n    Whether, if possible, conversion can be done to integer extension types.\nconvert_boolean : bool, defaults True\n    Whether object dtypes should be converted to ``BooleanDtypes()``.\nconvert_floating : bool, defaults True\n    Whether, if possible, conversion can be done to floating extension types.\n    If `convert_integer` is also True, preference will be give to integer\n    dtypes if the floats can be faithfully casted to integers.\ndtype_backend : {'numpy_nullable', 'pyarrow'}, default 'numpy_nullable'\n    Back-end data type applied to the resultant :class:`DataFrame`\n    (still experimental). Behaviour is as follows:\n\n    * ``\"numpy_nullable\"``: returns nullable-dtype-backed :class:`DataFrame`\n      (default).\n    * ``\"pyarrow\"``: returns pyarrow-backed nullable :class:`ArrowDtype`\n      DataFrame.\n\n    .. versionadded:: 2.0\n\nReturns\n-------\nSeries or DataFrame\n    Copy of input object with new dtype.\n\nSee Also\n--------\ninfer_objects : Infer dtypes of objects.\nto_datetime : Convert argument to datetime.\nto_timedelta : Convert argument to timedelta.\nto_numeric : Convert argument to a numeric type.\n\nNotes\n-----\nBy default, ``convert_dtypes`` will attempt to convert a Series (or each\nSeries in a DataFrame) to dtypes that support ``pd.NA``. By using the options\n``convert_string``, ``convert_integer``, ``convert_boolean`` and\n``convert_floating``, it is possible to turn off individual conversions\nto ``StringDtype``, the integer extension types, ``BooleanDtype``\nor floating extension types, respectively.\n\nFor object-dtyped columns, if ``infer_objects`` is ``True``, use the inference\nrules as during normal Series/DataFrame construction.  Then, if possible,\nconvert to ``StringDtype``, ``BooleanDtype`` or an appropriate integer\nor floating extension type, otherwise leave as ``object``.\n\nIf the dtype is integer, convert to an appropriate integer extension type.\n\nIf the dtype is numeric, and consists of all integers, convert to an\nappropriate integer extension type. Otherwise, convert to an\nappropriate floating extension type.\n\nIn the future, as new dtypes are added that support ``pd.NA``, the results\nof this method will change to support those new dtypes.\n\nExamples\n--------\n>>> df = pd.DataFrame(\n...     {\n...         \"a\": pd.Series([1, 2, 3], dtype=np.dtype(\"int32\")),\n...         \"b\": pd.Series([\"x\", \"y\", \"z\"], dtype=np.dtype(\"O\")),\n...         \"c\": pd.Series([True, False, np.nan], dtype=np.dtype(\"O\")),\n...         \"d\": pd.Series([\"h\", \"i\", np.nan], dtype=np.dtype(\"O\")),\n...         \"e\": pd.Series([10, np.nan, 20], dtype=np.dtype(\"float\")),\n...         \"f\": pd.Series([np.nan, 100.5, 200], dtype=np.dtype(\"float\")),\n...     }\n... )\n\nStart with a DataFrame with default dtypes.\n\n>>> df\n   a  b      c    d     e      f\n0  1  x   True    h  10.0    NaN\n1  2  y  False    i   NaN  100.5\n2  3  z    NaN  NaN  20.0  200.0\n\n>>> df.dtypes\na      int32\nb     object\nc     object\nd     object\ne    float64\nf    float64\ndtype: object\n\nConvert the DataFrame to use best possible dtypes.\n\n>>> dfn = df.convert_dtypes()\n>>> dfn\n   a  b      c     d     e      f\n0  1  x   True     h    10   <NA>\n1  2  y  False     i  <NA>  100.5\n2  3  z   <NA>  <NA>    20  200.0\n\n>>> dfn.dtypes\na             Int32\nb    string[python]\nc           boolean\nd    string[python]\ne             Int64\nf           Float64\ndtype: object\n\nStart with a Series of strings and missing data represented by ``np.nan``.\n\n>>> s = pd.Series([\"a\", \"b\", np.nan])\n>>> s\n0      a\n1      b\n2    NaN\ndtype: object\n\nObtain a Series with dtype ``StringDtype``.\n\n>>> s.convert_dtypes()\n0       a\n1       b\n2    <NA>\ndtype: string"
  },
  {
    "symbol": "Series.copy",
    "signature": "(self, deep: 'bool_t | None' = True) -> 'Self'",
    "doc": "Make a copy of this object's indices and data.\n\nWhen ``deep=True`` (default), a new object will be created with a\ncopy of the calling object's data and indices. Modifications to\nthe data or indices of the copy will not be reflected in the\noriginal object (see notes below).\n\nWhen ``deep=False``, a new object will be created without copying\nthe calling object's data or index (only references to the data\nand index are copied). Any changes to the data of the original\nwill be reflected in the shallow copy (and vice versa).\n\n.. note::\n    The ``deep=False`` behaviour as described above will change\n    in pandas 3.0. `Copy-on-Write\n    <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n    will be enabled by default, which means that the \"shallow\" copy\n    is that is returned with ``deep=False`` will still avoid making\n    an eager copy, but changes to the data of the original will *no*\n    longer be reflected in the shallow copy (or vice versa). Instead,\n    it makes use of a lazy (deferred) copy mechanism that will copy\n    the data only when any changes to the original or shallow copy is\n    made.\n\n    You can already get the future behavior and improvements through\n    enabling copy on write ``pd.options.mode.copy_on_write = True``\n\nParameters\n----------\ndeep : bool, default True\n    Make a deep copy, including a copy of the data and the indices.\n    With ``deep=False`` neither the indices nor the data are copied.\n\nReturns\n-------\nSeries or DataFrame\n    Object type matches caller.\n\nNotes\n-----\nWhen ``deep=True``, data is copied but actual Python objects\nwill not be copied recursively, only the reference to the object.\nThis is in contrast to `copy.deepcopy` in the Standard Library,\nwhich recursively copies object data (see examples below).\n\nWhile ``Index`` objects are copied when ``deep=True``, the underlying\nnumpy array is not copied for performance reasons. Since ``Index`` is\nimmutable, the underlying data can be safely shared and a copy\nis not needed.\n\nSince pandas is not thread safe, see the\n:ref:`gotchas <gotchas.thread-safety>` when copying in a threading\nenvironment.\n\nWhen ``copy_on_write`` in pandas config is set to ``True``, the\n``copy_on_write`` config takes effect even when ``deep=False``.\nThis means that any changes to the copied data would make a new copy\nof the data upon write (and vice versa). Changes made to either the\noriginal or copied variable would not be reflected in the counterpart.\nSee :ref:`Copy_on_Write <copy_on_write>` for more information.\n\nExamples\n--------\n>>> s = pd.Series([1, 2], index=[\"a\", \"b\"])\n>>> s\na    1\nb    2\ndtype: int64\n\n>>> s_copy = s.copy()\n>>> s_copy\na    1\nb    2\ndtype: int64\n\n**Shallow copy versus default (deep) copy:**\n\n>>> s = pd.Series([1, 2], index=[\"a\", \"b\"])\n>>> deep = s.copy()\n>>> shallow = s.copy(deep=False)\n\nShallow copy shares data and index with original.\n\n>>> s is shallow\nFalse\n>>> s.values is shallow.values and s.index is shallow.index\nTrue\n\nDeep copy has own copy of data and index.\n\n>>> s is deep\nFalse\n>>> s.values is deep.values or s.index is deep.index\nFalse\n\nUpdates to the data shared by shallow copy and original is reflected\nin both (NOTE: this will no longer be true for pandas >= 3.0);\ndeep copy remains unchanged.\n\n>>> s.iloc[0] = 3\n>>> shallow.iloc[1] = 4\n>>> s\na    3\nb    4\ndtype: int64\n>>> shallow\na    3\nb    4\ndtype: int64\n>>> deep\na    1\nb    2\ndtype: int64\n\nNote that when copying an object containing Python objects, a deep copy\nwill copy the data, but will not do so recursively. Updating a nested\ndata object will be reflected in the deep copy.\n\n>>> s = pd.Series([[1, 2], [3, 4]])\n>>> deep = s.copy()\n>>> s[0][0] = 10\n>>> s\n0    [10, 2]\n1     [3, 4]\ndtype: object\n>>> deep\n0    [10, 2]\n1     [3, 4]\ndtype: object\n\n**Copy-on-Write is set to true**, the shallow copy is not modified\nwhen the original data is changed:\n\n>>> with pd.option_context(\"mode.copy_on_write\", True):\n...     s = pd.Series([1, 2], index=[\"a\", \"b\"])\n...     copy = s.copy(deep=False)\n...     s.iloc[0] = 100\n...     s\na    100\nb      2\ndtype: int64\n>>> copy\na    1\nb    2\ndtype: int64"
  },
  {
    "symbol": "Series.corr",
    "signature": "(self, other: 'Series', method: 'CorrelationMethod' = 'pearson', min_periods: 'int | None' = None) -> 'float'",
    "doc": "Compute correlation with `other` Series, excluding missing values.\n\nThe two `Series` objects are not required to be the same length and will be\naligned internally before the correlation function is applied.\n\nParameters\n----------\nother : Series\n    Series with which to compute the correlation.\nmethod : {'pearson', 'kendall', 'spearman'} or callable\n    Method used to compute correlation:\n\n    - pearson : Standard correlation coefficient\n    - kendall : Kendall Tau correlation coefficient\n    - spearman : Spearman rank correlation\n    - callable: Callable with input two 1d ndarrays and returning a float.\n\n    .. warning::\n        Note that the returned matrix from corr will have 1 along the\n        diagonals and will be symmetric regardless of the callable's\n        behavior.\nmin_periods : int, optional\n    Minimum number of observations needed to have a valid result.\n\nReturns\n-------\nfloat\n    Correlation with other.\n\nSee Also\n--------\nDataFrame.corr : Compute pairwise correlation between columns.\nDataFrame.corrwith : Compute pairwise correlation with another\n    DataFrame or Series.\n\nNotes\n-----\nPearson, Kendall and Spearman correlation are currently computed using pairwise complete observations.\n\n* `Pearson correlation coefficient <https://en.wikipedia.org/wiki/Pearson_correlation_coefficient>`_\n* `Kendall rank correlation coefficient <https://en.wikipedia.org/wiki/Kendall_rank_correlation_coefficient>`_\n* `Spearman's rank correlation coefficient <https://en.wikipedia.org/wiki/Spearman%27s_rank_correlation_coefficient>`_\n\nAutomatic data alignment: as with all pandas operations, automatic data alignment is performed for this method.\n``corr()`` automatically considers values with matching indices.\n\nExamples\n--------\n>>> def histogram_intersection(a, b):\n...     v = np.minimum(a, b).sum().round(decimals=1)\n...     return v\n>>> s1 = pd.Series([.2, .0, .6, .2])\n>>> s2 = pd.Series([.3, .6, .0, .1])\n>>> s1.corr(s2, method=histogram_intersection)\n0.3\n\nPandas auto-aligns the values with matching indices\n\n>>> s1 = pd.Series([1, 2, 3], index=[0, 1, 2])\n>>> s2 = pd.Series([1, 2, 3], index=[2, 1, 0])\n>>> s1.corr(s2)\n-1.0"
  },
  {
    "symbol": "Series.count",
    "signature": "(self) -> 'int'",
    "doc": "Return number of non-NA/null observations in the Series.\n\nReturns\n-------\nint\n    Number of non-null values in the Series.\n\nSee Also\n--------\nDataFrame.count : Count non-NA cells for each column or row.\n\nExamples\n--------\n>>> s = pd.Series([0.0, 1.0, np.nan])\n>>> s.count()\n2"
  },
  {
    "symbol": "Series.cov",
    "signature": "(self, other: 'Series', min_periods: 'int | None' = None, ddof: 'int | None' = 1) -> 'float'",
    "doc": "Compute covariance with Series, excluding missing values.\n\nThe two `Series` objects are not required to be the same length and\nwill be aligned internally before the covariance is calculated.\n\nParameters\n----------\nother : Series\n    Series with which to compute the covariance.\nmin_periods : int, optional\n    Minimum number of observations needed to have a valid result.\nddof : int, default 1\n    Delta degrees of freedom.  The divisor used in calculations\n    is ``N - ddof``, where ``N`` represents the number of elements.\n\nReturns\n-------\nfloat\n    Covariance between Series and other normalized by N-1\n    (unbiased estimator).\n\nSee Also\n--------\nDataFrame.cov : Compute pairwise covariance of columns.\n\nExamples\n--------\n>>> s1 = pd.Series([0.90010907, 0.13484424, 0.62036035])\n>>> s2 = pd.Series([0.12528585, 0.26962463, 0.51111198])\n>>> s1.cov(s2)\n-0.01685762652715874"
  },
  {
    "symbol": "Series.cummax",
    "signature": "(self, axis: 'Axis | None' = None, skipna: 'bool' = True, *args, **kwargs)",
    "doc": "Return cumulative maximum over a DataFrame or Series axis.\n\nReturns a DataFrame or Series of the same size containing the cumulative\nmaximum.\n\nParameters\n----------\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    The index or the name of the axis. 0 is equivalent to None or 'index'.\n    For `Series` this parameter is unused and defaults to 0.\nskipna : bool, default True\n    Exclude NA/null values. If an entire row/column is NA, the result\n    will be NA.\n*args, **kwargs\n    Additional keywords have no effect but might be accepted for\n    compatibility with NumPy.\n\nReturns\n-------\nscalar or Series\n    Return cumulative maximum of scalar or Series.\n\nSee Also\n--------\ncore.window.expanding.Expanding.max : Similar functionality\n    but ignores ``NaN`` values.\nSeries.max : Return the maximum over\n    Series axis.\nSeries.cummax : Return cumulative maximum over Series axis.\nSeries.cummin : Return cumulative minimum over Series axis.\nSeries.cumsum : Return cumulative sum over Series axis.\nSeries.cumprod : Return cumulative product over Series axis.\n\nExamples\n--------\n**Series**\n\n>>> s = pd.Series([2, np.nan, 5, -1, 0])\n>>> s\n0    2.0\n1    NaN\n2    5.0\n3   -1.0\n4    0.0\ndtype: float64\n\nBy default, NA values are ignored.\n\n>>> s.cummax()\n0    2.0\n1    NaN\n2    5.0\n3    5.0\n4    5.0\ndtype: float64\n\nTo include NA values in the operation, use ``skipna=False``\n\n>>> s.cummax(skipna=False)\n0    2.0\n1    NaN\n2    NaN\n3    NaN\n4    NaN\ndtype: float64\n\n**DataFrame**\n\n>>> df = pd.DataFrame([[2.0, 1.0],\n...                    [3.0, np.nan],\n...                    [1.0, 0.0]],\n...                   columns=list('AB'))\n>>> df\n     A    B\n0  2.0  1.0\n1  3.0  NaN\n2  1.0  0.0\n\nBy default, iterates over rows and finds the maximum\nin each column. This is equivalent to ``axis=None`` or ``axis='index'``.\n\n>>> df.cummax()\n     A    B\n0  2.0  1.0\n1  3.0  NaN\n2  3.0  1.0\n\nTo iterate over columns and find the maximum in each row,\nuse ``axis=1``\n\n>>> df.cummax(axis=1)\n     A    B\n0  2.0  2.0\n1  3.0  NaN\n2  1.0  1.0"
  },
  {
    "symbol": "Series.cummin",
    "signature": "(self, axis: 'Axis | None' = None, skipna: 'bool' = True, *args, **kwargs)",
    "doc": "Return cumulative minimum over a DataFrame or Series axis.\n\nReturns a DataFrame or Series of the same size containing the cumulative\nminimum.\n\nParameters\n----------\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    The index or the name of the axis. 0 is equivalent to None or 'index'.\n    For `Series` this parameter is unused and defaults to 0.\nskipna : bool, default True\n    Exclude NA/null values. If an entire row/column is NA, the result\n    will be NA.\n*args, **kwargs\n    Additional keywords have no effect but might be accepted for\n    compatibility with NumPy.\n\nReturns\n-------\nscalar or Series\n    Return cumulative minimum of scalar or Series.\n\nSee Also\n--------\ncore.window.expanding.Expanding.min : Similar functionality\n    but ignores ``NaN`` values.\nSeries.min : Return the minimum over\n    Series axis.\nSeries.cummax : Return cumulative maximum over Series axis.\nSeries.cummin : Return cumulative minimum over Series axis.\nSeries.cumsum : Return cumulative sum over Series axis.\nSeries.cumprod : Return cumulative product over Series axis.\n\nExamples\n--------\n**Series**\n\n>>> s = pd.Series([2, np.nan, 5, -1, 0])\n>>> s\n0    2.0\n1    NaN\n2    5.0\n3   -1.0\n4    0.0\ndtype: float64\n\nBy default, NA values are ignored.\n\n>>> s.cummin()\n0    2.0\n1    NaN\n2    2.0\n3   -1.0\n4   -1.0\ndtype: float64\n\nTo include NA values in the operation, use ``skipna=False``\n\n>>> s.cummin(skipna=False)\n0    2.0\n1    NaN\n2    NaN\n3    NaN\n4    NaN\ndtype: float64\n\n**DataFrame**\n\n>>> df = pd.DataFrame([[2.0, 1.0],\n...                    [3.0, np.nan],\n...                    [1.0, 0.0]],\n...                   columns=list('AB'))\n>>> df\n     A    B\n0  2.0  1.0\n1  3.0  NaN\n2  1.0  0.0\n\nBy default, iterates over rows and finds the minimum\nin each column. This is equivalent to ``axis=None`` or ``axis='index'``.\n\n>>> df.cummin()\n     A    B\n0  2.0  1.0\n1  2.0  NaN\n2  1.0  0.0\n\nTo iterate over columns and find the minimum in each row,\nuse ``axis=1``\n\n>>> df.cummin(axis=1)\n     A    B\n0  2.0  1.0\n1  3.0  NaN\n2  1.0  0.0"
  },
  {
    "symbol": "Series.cumprod",
    "signature": "(self, axis: 'Axis | None' = None, skipna: 'bool' = True, *args, **kwargs)",
    "doc": "Return cumulative product over a DataFrame or Series axis.\n\nReturns a DataFrame or Series of the same size containing the cumulative\nproduct.\n\nParameters\n----------\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    The index or the name of the axis. 0 is equivalent to None or 'index'.\n    For `Series` this parameter is unused and defaults to 0.\nskipna : bool, default True\n    Exclude NA/null values. If an entire row/column is NA, the result\n    will be NA.\n*args, **kwargs\n    Additional keywords have no effect but might be accepted for\n    compatibility with NumPy.\n\nReturns\n-------\nscalar or Series\n    Return cumulative product of scalar or Series.\n\nSee Also\n--------\ncore.window.expanding.Expanding.prod : Similar functionality\n    but ignores ``NaN`` values.\nSeries.prod : Return the product over\n    Series axis.\nSeries.cummax : Return cumulative maximum over Series axis.\nSeries.cummin : Return cumulative minimum over Series axis.\nSeries.cumsum : Return cumulative sum over Series axis.\nSeries.cumprod : Return cumulative product over Series axis.\n\nExamples\n--------\n**Series**\n\n>>> s = pd.Series([2, np.nan, 5, -1, 0])\n>>> s\n0    2.0\n1    NaN\n2    5.0\n3   -1.0\n4    0.0\ndtype: float64\n\nBy default, NA values are ignored.\n\n>>> s.cumprod()\n0     2.0\n1     NaN\n2    10.0\n3   -10.0\n4    -0.0\ndtype: float64\n\nTo include NA values in the operation, use ``skipna=False``\n\n>>> s.cumprod(skipna=False)\n0    2.0\n1    NaN\n2    NaN\n3    NaN\n4    NaN\ndtype: float64\n\n**DataFrame**\n\n>>> df = pd.DataFrame([[2.0, 1.0],\n...                    [3.0, np.nan],\n...                    [1.0, 0.0]],\n...                   columns=list('AB'))\n>>> df\n     A    B\n0  2.0  1.0\n1  3.0  NaN\n2  1.0  0.0\n\nBy default, iterates over rows and finds the product\nin each column. This is equivalent to ``axis=None`` or ``axis='index'``.\n\n>>> df.cumprod()\n     A    B\n0  2.0  1.0\n1  6.0  NaN\n2  6.0  0.0\n\nTo iterate over columns and find the product in each row,\nuse ``axis=1``\n\n>>> df.cumprod(axis=1)\n     A    B\n0  2.0  2.0\n1  3.0  NaN\n2  1.0  0.0"
  },
  {
    "symbol": "Series.cumsum",
    "signature": "(self, axis: 'Axis | None' = None, skipna: 'bool' = True, *args, **kwargs)",
    "doc": "Return cumulative sum over a DataFrame or Series axis.\n\nReturns a DataFrame or Series of the same size containing the cumulative\nsum.\n\nParameters\n----------\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    The index or the name of the axis. 0 is equivalent to None or 'index'.\n    For `Series` this parameter is unused and defaults to 0.\nskipna : bool, default True\n    Exclude NA/null values. If an entire row/column is NA, the result\n    will be NA.\n*args, **kwargs\n    Additional keywords have no effect but might be accepted for\n    compatibility with NumPy.\n\nReturns\n-------\nscalar or Series\n    Return cumulative sum of scalar or Series.\n\nSee Also\n--------\ncore.window.expanding.Expanding.sum : Similar functionality\n    but ignores ``NaN`` values.\nSeries.sum : Return the sum over\n    Series axis.\nSeries.cummax : Return cumulative maximum over Series axis.\nSeries.cummin : Return cumulative minimum over Series axis.\nSeries.cumsum : Return cumulative sum over Series axis.\nSeries.cumprod : Return cumulative product over Series axis.\n\nExamples\n--------\n**Series**\n\n>>> s = pd.Series([2, np.nan, 5, -1, 0])\n>>> s\n0    2.0\n1    NaN\n2    5.0\n3   -1.0\n4    0.0\ndtype: float64\n\nBy default, NA values are ignored.\n\n>>> s.cumsum()\n0    2.0\n1    NaN\n2    7.0\n3    6.0\n4    6.0\ndtype: float64\n\nTo include NA values in the operation, use ``skipna=False``\n\n>>> s.cumsum(skipna=False)\n0    2.0\n1    NaN\n2    NaN\n3    NaN\n4    NaN\ndtype: float64\n\n**DataFrame**\n\n>>> df = pd.DataFrame([[2.0, 1.0],\n...                    [3.0, np.nan],\n...                    [1.0, 0.0]],\n...                   columns=list('AB'))\n>>> df\n     A    B\n0  2.0  1.0\n1  3.0  NaN\n2  1.0  0.0\n\nBy default, iterates over rows and finds the sum\nin each column. This is equivalent to ``axis=None`` or ``axis='index'``.\n\n>>> df.cumsum()\n     A    B\n0  2.0  1.0\n1  5.0  NaN\n2  6.0  1.0\n\nTo iterate over columns and find the sum in each row,\nuse ``axis=1``\n\n>>> df.cumsum(axis=1)\n     A    B\n0  2.0  3.0\n1  3.0  NaN\n2  1.0  1.0"
  },
  {
    "symbol": "Series.describe",
    "signature": "(self, percentiles=None, include=None, exclude=None) -> 'Self'",
    "doc": "Generate descriptive statistics.\n\nDescriptive statistics include those that summarize the central\ntendency, dispersion and shape of a\ndataset's distribution, excluding ``NaN`` values.\n\nAnalyzes both numeric and object series, as well\nas ``DataFrame`` column sets of mixed data types. The output\nwill vary depending on what is provided. Refer to the notes\nbelow for more detail.\n\nParameters\n----------\npercentiles : list-like of numbers, optional\n    The percentiles to include in the output. All should\n    fall between 0 and 1. The default is\n    ``[.25, .5, .75]``, which returns the 25th, 50th, and\n    75th percentiles.\ninclude : 'all', list-like of dtypes or None (default), optional\n    A white list of data types to include in the result. Ignored\n    for ``Series``. Here are the options:\n\n    - 'all' : All columns of the input will be included in the output.\n    - A list-like of dtypes : Limits the results to the\n      provided data types.\n      To limit the result to numeric types submit\n      ``numpy.number``. To limit it instead to object columns submit\n      the ``numpy.object`` data type. Strings\n      can also be used in the style of\n      ``select_dtypes`` (e.g. ``df.describe(include=['O'])``). To\n      select pandas categorical columns, use ``'category'``\n    - None (default) : The result will include all numeric columns.\nexclude : list-like of dtypes or None (default), optional,\n    A black list of data types to omit from the result. Ignored\n    for ``Series``. Here are the options:\n\n    - A list-like of dtypes : Excludes the provided data types\n      from the result. To exclude numeric types submit\n      ``numpy.number``. To exclude object columns submit the data\n      type ``numpy.object``. Strings can also be used in the style of\n      ``select_dtypes`` (e.g. ``df.describe(exclude=['O'])``). To\n      exclude pandas categorical columns, use ``'category'``\n    - None (default) : The result will exclude nothing.\n\nReturns\n-------\nSeries or DataFrame\n    Summary statistics of the Series or Dataframe provided.\n\nSee Also\n--------\nDataFrame.count: Count number of non-NA/null observations.\nDataFrame.max: Maximum of the values in the object.\nDataFrame.min: Minimum of the values in the object.\nDataFrame.mean: Mean of the values.\nDataFrame.std: Standard deviation of the observations.\nDataFrame.select_dtypes: Subset of a DataFrame including/excluding\n    columns based on their dtype.\n\nNotes\n-----\nFor numeric data, the result's index will include ``count``,\n``mean``, ``std``, ``min``, ``max`` as well as lower, ``50`` and\nupper percentiles. By default the lower percentile is ``25`` and the\nupper percentile is ``75``. The ``50`` percentile is the\nsame as the median.\n\nFor object data (e.g. strings or timestamps), the result's index\nwill include ``count``, ``unique``, ``top``, and ``freq``. The ``top``\nis the most common value. The ``freq`` is the most common value's\nfrequency. Timestamps also include the ``first`` and ``last`` items.\n\nIf multiple object values have the highest count, then the\n``count`` and ``top`` results will be arbitrarily chosen from\namong those with the highest count.\n\nFor mixed data types provided via a ``DataFrame``, the default is to\nreturn only an analysis of numeric columns. If the dataframe consists\nonly of object and categorical data without any numeric columns, the\ndefault is to return an analysis of both the object and categorical\ncolumns. If ``include='all'`` is provided as an option, the result\nwill include a union of attributes of each type.\n\nThe `include` and `exclude` parameters can be used to limit\nwhich columns in a ``DataFrame`` are analyzed for the output.\nThe parameters are ignored when analyzing a ``Series``.\n\nExamples\n--------\nDescribing a numeric ``Series``.\n\n>>> s = pd.Series([1, 2, 3])\n>>> s.describe()\ncount    3.0\nmean     2.0\nstd      1.0\nmin      1.0\n25%      1.5\n50%      2.0\n75%      2.5\nmax      3.0\ndtype: float64\n\nDescribing a categorical ``Series``.\n\n>>> s = pd.Series(['a', 'a', 'b', 'c'])\n>>> s.describe()\ncount     4\nunique    3\ntop       a\nfreq      2\ndtype: object\n\nDescribing a timestamp ``Series``.\n\n>>> s = pd.Series([\n...     np.datetime64(\"2000-01-01\"),\n...     np.datetime64(\"2010-01-01\"),\n...     np.datetime64(\"2010-01-01\")\n... ])\n>>> s.describe()\ncount                      3\nmean     2006-09-01 08:00:00\nmin      2000-01-01 00:00:00\n25%      2004-12-31 12:00:00\n50%      2010-01-01 00:00:00\n75%      2010-01-01 00:00:00\nmax      2010-01-01 00:00:00\ndtype: object\n\nDescribing a ``DataFrame``. By default only numeric fields\nare returned.\n\n>>> df = pd.DataFrame({'categorical': pd.Categorical(['d', 'e', 'f']),\n...                    'numeric': [1, 2, 3],\n...                    'object': ['a', 'b', 'c']\n...                    })\n>>> df.describe()\n       numeric\ncount      3.0\nmean       2.0\nstd        1.0\nmin        1.0\n25%        1.5\n50%        2.0\n75%        2.5\nmax        3.0\n\nDescribing all columns of a ``DataFrame`` regardless of data type.\n\n>>> df.describe(include='all')  # doctest: +SKIP\n       categorical  numeric object\ncount            3      3.0      3\nunique           3      NaN      3\ntop              f      NaN      a\nfreq             1      NaN      1\nmean           NaN      2.0    NaN\nstd            NaN      1.0    NaN\nmin            NaN      1.0    NaN\n25%            NaN      1.5    NaN\n50%            NaN      2.0    NaN\n75%            NaN      2.5    NaN\nmax            NaN      3.0    NaN\n\nDescribing a column from a ``DataFrame`` by accessing it as\nan attribute.\n\n>>> df.numeric.describe()\ncount    3.0\nmean     2.0\nstd      1.0\nmin      1.0\n25%      1.5\n50%      2.0\n75%      2.5\nmax      3.0\nName: numeric, dtype: float64\n\nIncluding only numeric columns in a ``DataFrame`` description.\n\n>>> df.describe(include=[np.number])\n       numeric\ncount      3.0\nmean       2.0\nstd        1.0\nmin        1.0\n25%        1.5\n50%        2.0\n75%        2.5\nmax        3.0\n\nIncluding only string columns in a ``DataFrame`` description.\n\n>>> df.describe(include=[object])  # doctest: +SKIP\n       object\ncount       3\nunique      3\ntop         a\nfreq        1\n\nIncluding only categorical columns from a ``DataFrame`` description.\n\n>>> df.describe(include=['category'])\n       categorical\ncount            3\nunique           3\ntop              d\nfreq             1\n\nExcluding numeric columns from a ``DataFrame`` description.\n\n>>> df.describe(exclude=[np.number])  # doctest: +SKIP\n       categorical object\ncount            3      3\nunique           3      3\ntop              f      a\nfreq             1      1\n\nExcluding object columns from a ``DataFrame`` description.\n\n>>> df.describe(exclude=[object])  # doctest: +SKIP\n       categorical  numeric\ncount            3      3.0\nunique           3      NaN\ntop              f      NaN\nfreq             1      NaN\nmean           NaN      2.0\nstd            NaN      1.0\nmin            NaN      1.0\n25%            NaN      1.5\n50%            NaN      2.0\n75%            NaN      2.5\nmax            NaN      3.0"
  },
  {
    "symbol": "Series.diff",
    "signature": "(self, periods: 'int' = 1) -> 'Series'",
    "doc": "First discrete difference of element.\n\nCalculates the difference of a Series element compared with another\nelement in the Series (default is element in previous row).\n\nParameters\n----------\nperiods : int, default 1\n    Periods to shift for calculating difference, accepts negative\n    values.\n\nReturns\n-------\nSeries\n    First differences of the Series.\n\nSee Also\n--------\nSeries.pct_change: Percent change over given number of periods.\nSeries.shift: Shift index by desired number of periods with an\n    optional time freq.\nDataFrame.diff: First discrete difference of object.\n\nNotes\n-----\nFor boolean dtypes, this uses :meth:`operator.xor` rather than\n:meth:`operator.sub`.\nThe result is calculated according to current dtype in Series,\nhowever dtype of the result is always float64.\n\nExamples\n--------\n\nDifference with previous row\n\n>>> s = pd.Series([1, 1, 2, 3, 5, 8])\n>>> s.diff()\n0    NaN\n1    0.0\n2    1.0\n3    1.0\n4    2.0\n5    3.0\ndtype: float64\n\nDifference with 3rd previous row\n\n>>> s.diff(periods=3)\n0    NaN\n1    NaN\n2    NaN\n3    2.0\n4    4.0\n5    6.0\ndtype: float64\n\nDifference with following row\n\n>>> s.diff(periods=-1)\n0    0.0\n1   -1.0\n2   -1.0\n3   -2.0\n4   -3.0\n5    NaN\ndtype: float64\n\nOverflow in input dtype\n\n>>> s = pd.Series([1, 0], dtype=np.uint8)\n>>> s.diff()\n0      NaN\n1    255.0\ndtype: float64"
  },
  {
    "symbol": "Series.div",
    "signature": "(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'",
    "doc": "Return Floating division of series and other, element-wise (binary operator `truediv`).\n\nEquivalent to ``series / other``, but with support to substitute a fill_value for\nmissing data in either one of the inputs.\n\nParameters\n----------\nother : Series or scalar value\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result of filling (at that location) will be missing.\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.\n\nReturns\n-------\nSeries\n    The result of the operation.\n\nSee Also\n--------\nSeries.rtruediv : Reverse of the Floating division operator, see\n    `Python documentation\n    <https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types>`_\n    for more details.\n\nExamples\n--------\n>>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n>>> a\na    1.0\nb    1.0\nc    1.0\nd    NaN\ndtype: float64\n>>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n>>> b\na    1.0\nb    NaN\nd    1.0\ne    NaN\ndtype: float64\n>>> a.divide(b, fill_value=0)\na    1.0\nb    inf\nc    inf\nd    0.0\ne    NaN\ndtype: float64"
  },
  {
    "symbol": "Series.divide",
    "signature": "(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'",
    "doc": "Return Floating division of series and other, element-wise (binary operator `truediv`).\n\nEquivalent to ``series / other``, but with support to substitute a fill_value for\nmissing data in either one of the inputs.\n\nParameters\n----------\nother : Series or scalar value\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result of filling (at that location) will be missing.\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.\n\nReturns\n-------\nSeries\n    The result of the operation.\n\nSee Also\n--------\nSeries.rtruediv : Reverse of the Floating division operator, see\n    `Python documentation\n    <https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types>`_\n    for more details.\n\nExamples\n--------\n>>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n>>> a\na    1.0\nb    1.0\nc    1.0\nd    NaN\ndtype: float64\n>>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n>>> b\na    1.0\nb    NaN\nd    1.0\ne    NaN\ndtype: float64\n>>> a.divide(b, fill_value=0)\na    1.0\nb    inf\nc    inf\nd    0.0\ne    NaN\ndtype: float64"
  },
  {
    "symbol": "Series.divmod",
    "signature": "(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'",
    "doc": "Return Integer division and modulo of series and other, element-wise (binary operator `divmod`).\n\nEquivalent to ``divmod(series, other)``, but with support to substitute a fill_value for\nmissing data in either one of the inputs.\n\nParameters\n----------\nother : Series or scalar value\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result of filling (at that location) will be missing.\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.\n\nReturns\n-------\n2-Tuple of Series\n    The result of the operation.\n\nSee Also\n--------\nSeries.rdivmod : Reverse of the Integer division and modulo operator, see\n    `Python documentation\n    <https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types>`_\n    for more details.\n\nExamples\n--------\n>>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n>>> a\na    1.0\nb    1.0\nc    1.0\nd    NaN\ndtype: float64\n>>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n>>> b\na    1.0\nb    NaN\nd    1.0\ne    NaN\ndtype: float64\n>>> a.divmod(b, fill_value=0)\n(a    1.0\n b    inf\n c    inf\n d    0.0\n e    NaN\n dtype: float64,\n a    0.0\n b    NaN\n c    NaN\n d    0.0\n e    NaN\n dtype: float64)"
  },
  {
    "symbol": "Series.dot",
    "signature": "(self, other: 'AnyArrayLike') -> 'Series | np.ndarray'",
    "doc": "Compute the dot product between the Series and the columns of other.\n\nThis method computes the dot product between the Series and another\none, or the Series and each columns of a DataFrame, or the Series and\neach columns of an array.\n\nIt can also be called using `self @ other`.\n\nParameters\n----------\nother : Series, DataFrame or array-like\n    The other object to compute the dot product with its columns.\n\nReturns\n-------\nscalar, Series or numpy.ndarray\n    Return the dot product of the Series and other if other is a\n    Series, the Series of the dot product of Series and each rows of\n    other if other is a DataFrame or a numpy.ndarray between the Series\n    and each columns of the numpy array.\n\nSee Also\n--------\nDataFrame.dot: Compute the matrix product with the DataFrame.\nSeries.mul: Multiplication of series and other, element-wise.\n\nNotes\n-----\nThe Series and other has to share the same index if other is a Series\nor a DataFrame.\n\nExamples\n--------\n>>> s = pd.Series([0, 1, 2, 3])\n>>> other = pd.Series([-1, 2, -3, 4])\n>>> s.dot(other)\n8\n>>> s @ other\n8\n>>> df = pd.DataFrame([[0, 1], [-2, 3], [4, -5], [6, 7]])\n>>> s.dot(df)\n0    24\n1    14\ndtype: int64\n>>> arr = np.array([[0, 1], [-2, 3], [4, -5], [6, 7]])\n>>> s.dot(arr)\narray([24, 14])"
  },
  {
    "symbol": "Series.drop",
    "signature": "(self, labels: 'IndexLabel | None' = None, *, axis: 'Axis' = 0, index: 'IndexLabel | None' = None, columns: 'IndexLabel | None' = None, level: 'Level | None' = None, inplace: 'bool' = False, errors: 'IgnoreRaise' = 'raise') -> 'Series | None'",
    "doc": "Return Series with specified index labels removed.\n\nRemove elements of a Series based on specifying the index labels.\nWhen using a multi-index, labels on different levels can be removed\nby specifying the level.\n\nParameters\n----------\nlabels : single label or list-like\n    Index labels to drop.\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.\nindex : single label or list-like\n    Redundant for application on Series, but 'index' can be used instead\n    of 'labels'.\ncolumns : single label or list-like\n    No change is made to the Series; use 'index' or 'labels' instead.\nlevel : int or level name, optional\n    For MultiIndex, level for which the labels will be removed.\ninplace : bool, default False\n    If True, do operation inplace and return None.\nerrors : {'ignore', 'raise'}, default 'raise'\n    If 'ignore', suppress error and only existing labels are dropped.\n\nReturns\n-------\nSeries or None\n    Series with specified index labels removed or None if ``inplace=True``.\n\nRaises\n------\nKeyError\n    If none of the labels are found in the index.\n\nSee Also\n--------\nSeries.reindex : Return only specified index labels of Series.\nSeries.dropna : Return series without null values.\nSeries.drop_duplicates : Return Series with duplicate values removed.\nDataFrame.drop : Drop specified labels from rows or columns.\n\nExamples\n--------\n>>> s = pd.Series(data=np.arange(3), index=['A', 'B', 'C'])\n>>> s\nA  0\nB  1\nC  2\ndtype: int64\n\nDrop labels B en C\n\n>>> s.drop(labels=['B', 'C'])\nA  0\ndtype: int64\n\nDrop 2nd level label in MultiIndex Series\n\n>>> midx = pd.MultiIndex(levels=[['llama', 'cow', 'falcon'],\n...                              ['speed', 'weight', 'length']],\n...                      codes=[[0, 0, 0, 1, 1, 1, 2, 2, 2],\n...                             [0, 1, 2, 0, 1, 2, 0, 1, 2]])\n>>> s = pd.Series([45, 200, 1.2, 30, 250, 1.5, 320, 1, 0.3],\n...               index=midx)\n>>> s\nllama   speed      45.0\n        weight    200.0\n        length      1.2\ncow     speed      30.0\n        weight    250.0\n        length      1.5\nfalcon  speed     320.0\n        weight      1.0\n        length      0.3\ndtype: float64\n\n>>> s.drop(labels='weight', level=1)\nllama   speed      45.0\n        length      1.2\ncow     speed      30.0\n        length      1.5\nfalcon  speed     320.0\n        length      0.3\ndtype: float64"
  },
  {
    "symbol": "Series.drop_duplicates",
    "signature": "(self, *, keep: 'DropKeep' = 'first', inplace: 'bool' = False, ignore_index: 'bool' = False) -> 'Series | None'",
    "doc": "Return Series with duplicate values removed.\n\nParameters\n----------\nkeep : {'first', 'last', ``False``}, default 'first'\n    Method to handle dropping duplicates:\n\n    - 'first' : Drop duplicates except for the first occurrence.\n    - 'last' : Drop duplicates except for the last occurrence.\n    - ``False`` : Drop all duplicates.\n\ninplace : bool, default ``False``\n    If ``True``, performs operation inplace and returns None.\n\nignore_index : bool, default ``False``\n    If ``True``, the resulting axis will be labeled 0, 1, …, n - 1.\n\n    .. versionadded:: 2.0.0\n\nReturns\n-------\nSeries or None\n    Series with duplicates dropped or None if ``inplace=True``.\n\nSee Also\n--------\nIndex.drop_duplicates : Equivalent method on Index.\nDataFrame.drop_duplicates : Equivalent method on DataFrame.\nSeries.duplicated : Related method on Series, indicating duplicate\n    Series values.\nSeries.unique : Return unique values as an array.\n\nExamples\n--------\nGenerate a Series with duplicated entries.\n\n>>> s = pd.Series(['llama', 'cow', 'llama', 'beetle', 'llama', 'hippo'],\n...               name='animal')\n>>> s\n0     llama\n1       cow\n2     llama\n3    beetle\n4     llama\n5     hippo\nName: animal, dtype: object\n\nWith the 'keep' parameter, the selection behaviour of duplicated values\ncan be changed. The value 'first' keeps the first occurrence for each\nset of duplicated entries. The default value of keep is 'first'.\n\n>>> s.drop_duplicates()\n0     llama\n1       cow\n3    beetle\n5     hippo\nName: animal, dtype: object\n\nThe value 'last' for parameter 'keep' keeps the last occurrence for\neach set of duplicated entries.\n\n>>> s.drop_duplicates(keep='last')\n1       cow\n3    beetle\n4     llama\n5     hippo\nName: animal, dtype: object\n\nThe value ``False`` for parameter 'keep' discards all sets of\nduplicated entries.\n\n>>> s.drop_duplicates(keep=False)\n1       cow\n3    beetle\n5     hippo\nName: animal, dtype: object"
  },
  {
    "symbol": "Series.droplevel",
    "signature": "(self, level: 'IndexLabel', axis: 'Axis' = 0) -> 'Self'",
    "doc": "Return Series/DataFrame with requested index / column level(s) removed.\n\nParameters\n----------\nlevel : int, str, or list-like\n    If a string is given, must be the name of a level\n    If list-like, elements must be names or positional indexes\n    of levels.\n\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    Axis along which the level(s) is removed:\n\n    * 0 or 'index': remove level(s) in column.\n    * 1 or 'columns': remove level(s) in row.\n\n    For `Series` this parameter is unused and defaults to 0.\n\nReturns\n-------\nSeries/DataFrame\n    Series/DataFrame with requested index / column level(s) removed.\n\nExamples\n--------\n>>> df = pd.DataFrame([\n...     [1, 2, 3, 4],\n...     [5, 6, 7, 8],\n...     [9, 10, 11, 12]\n... ]).set_index([0, 1]).rename_axis(['a', 'b'])\n\n>>> df.columns = pd.MultiIndex.from_tuples([\n...     ('c', 'e'), ('d', 'f')\n... ], names=['level_1', 'level_2'])\n\n>>> df\nlevel_1   c   d\nlevel_2   e   f\na b\n1 2      3   4\n5 6      7   8\n9 10    11  12\n\n>>> df.droplevel('a')\nlevel_1   c   d\nlevel_2   e   f\nb\n2        3   4\n6        7   8\n10      11  12\n\n>>> df.droplevel('level_2', axis=1)\nlevel_1   c   d\na b\n1 2      3   4\n5 6      7   8\n9 10    11  12"
  },
  {
    "symbol": "Series.dropna",
    "signature": "(self, *, axis: 'Axis' = 0, inplace: 'bool' = False, how: 'AnyAll | None' = None, ignore_index: 'bool' = False) -> 'Series | None'",
    "doc": "Return a new Series with missing values removed.\n\nSee the :ref:`User Guide <missing_data>` for more on which values are\nconsidered missing, and how to work with missing data.\n\nParameters\n----------\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.\ninplace : bool, default False\n    If True, do operation inplace and return None.\nhow : str, optional\n    Not in use. Kept for compatibility.\nignore_index : bool, default ``False``\n    If ``True``, the resulting axis will be labeled 0, 1, …, n - 1.\n\n    .. versionadded:: 2.0.0\n\nReturns\n-------\nSeries or None\n    Series with NA entries dropped from it or None if ``inplace=True``.\n\nSee Also\n--------\nSeries.isna: Indicate missing values.\nSeries.notna : Indicate existing (non-missing) values.\nSeries.fillna : Replace missing values.\nDataFrame.dropna : Drop rows or columns which contain NA values.\nIndex.dropna : Drop missing indices.\n\nExamples\n--------\n>>> ser = pd.Series([1., 2., np.nan])\n>>> ser\n0    1.0\n1    2.0\n2    NaN\ndtype: float64\n\nDrop NA values from a Series.\n\n>>> ser.dropna()\n0    1.0\n1    2.0\ndtype: float64\n\nEmpty strings are not considered NA values. ``None`` is considered an\nNA value.\n\n>>> ser = pd.Series([np.nan, 2, pd.NaT, '', None, 'I stay'])\n>>> ser\n0       NaN\n1         2\n2       NaT\n3\n4      None\n5    I stay\ndtype: object\n>>> ser.dropna()\n1         2\n3\n5    I stay\ndtype: object"
  },
  {
    "symbol": "Series.dt",
    "signature": "(accessor)",
    "doc": "Accessor object for datetimelike properties of the Series values.\n\nExamples\n--------\n>>> seconds_series = pd.Series(pd.date_range(\"2000-01-01\", periods=3, freq=\"s\"))\n>>> seconds_series\n0   2000-01-01 00:00:00\n1   2000-01-01 00:00:01\n2   2000-01-01 00:00:02\ndtype: datetime64[ns]\n>>> seconds_series.dt.second\n0    0\n1    1\n2    2\ndtype: int32\n\n>>> hours_series = pd.Series(pd.date_range(\"2000-01-01\", periods=3, freq=\"h\"))\n>>> hours_series\n0   2000-01-01 00:00:00\n1   2000-01-01 01:00:00\n2   2000-01-01 02:00:00\ndtype: datetime64[ns]\n>>> hours_series.dt.hour\n0    0\n1    1\n2    2\ndtype: int32\n\n>>> quarters_series = pd.Series(pd.date_range(\"2000-01-01\", periods=3, freq=\"QE\"))\n>>> quarters_series\n0   2000-03-31\n1   2000-06-30\n2   2000-09-30\ndtype: datetime64[ns]\n>>> quarters_series.dt.quarter\n0    1\n1    2\n2    3\ndtype: int32\n\nReturns a Series indexed like the original Series.\nRaises TypeError if the Series does not contain datetimelike values."
  },
  {
    "symbol": "Series.dt.as_unit",
    "signature": "(*args, **kwargs)",
    "doc": ""
  },
  {
    "symbol": "Series.dt.ceil",
    "signature": "(*args, **kwargs)",
    "doc": "Perform ceil operation on the data to the specified `freq`.\n\nParameters\n----------\nfreq : str or Offset\n    The frequency level to ceil the index to. Must be a fixed\n    frequency like 'S' (second) not 'ME' (month end). See\n    :ref:`frequency aliases <timeseries.offset_aliases>` for\n    a list of possible `freq` values.\nambiguous : 'infer', bool-ndarray, 'NaT', default 'raise'\n    Only relevant for DatetimeIndex:\n\n    - 'infer' will attempt to infer fall dst-transition hours based on\n      order\n    - bool-ndarray where True signifies a DST time, False designates\n      a non-DST time (note that this flag is only applicable for\n      ambiguous times)\n    - 'NaT' will return NaT where there are ambiguous times\n    - 'raise' will raise an AmbiguousTimeError if there are ambiguous\n      times.\n\nnonexistent : 'shift_forward', 'shift_backward', 'NaT', timedelta, default 'raise'\n    A nonexistent time does not exist in a particular timezone\n    where clocks moved forward due to DST.\n\n    - 'shift_forward' will shift the nonexistent time forward to the\n      closest existing time\n    - 'shift_backward' will shift the nonexistent time backward to the\n      closest existing time\n    - 'NaT' will return NaT where there are nonexistent times\n    - timedelta objects will shift nonexistent times by the timedelta\n    - 'raise' will raise an NonExistentTimeError if there are\n      nonexistent times.\n\nReturns\n-------\nDatetimeIndex, TimedeltaIndex, or Series\n    Index of the same type for a DatetimeIndex or TimedeltaIndex,\n    or a Series with the same index for a Series.\n\nRaises\n------\nValueError if the `freq` cannot be converted.\n\nNotes\n-----\nIf the timestamps have a timezone, ceiling will take place relative to the\nlocal (\"wall\") time and re-localized to the same timezone. When ceiling\nnear daylight savings time, use ``nonexistent`` and ``ambiguous`` to\ncontrol the re-localization behavior.\n\nExamples\n--------\n**DatetimeIndex**\n\n>>> rng = pd.date_range('1/1/2018 11:59:00', periods=3, freq='min')\n>>> rng\nDatetimeIndex(['2018-01-01 11:59:00', '2018-01-01 12:00:00',\n               '2018-01-01 12:01:00'],\n              dtype='datetime64[ns]', freq='min')\n>>> rng.ceil('h')\nDatetimeIndex(['2018-01-01 12:00:00', '2018-01-01 12:00:00',\n               '2018-01-01 13:00:00'],\n              dtype='datetime64[ns]', freq=None)\n\n**Series**\n\n>>> pd.Series(rng).dt.ceil(\"h\")\n0   2018-01-01 12:00:00\n1   2018-01-01 12:00:00\n2   2018-01-01 13:00:00\ndtype: datetime64[ns]\n\nWhen rounding near a daylight savings time transition, use ``ambiguous`` or\n``nonexistent`` to control how the timestamp should be re-localized.\n\n>>> rng_tz = pd.DatetimeIndex([\"2021-10-31 01:30:00\"], tz=\"Europe/Amsterdam\")\n\n>>> rng_tz.ceil(\"h\", ambiguous=False)\nDatetimeIndex(['2021-10-31 02:00:00+01:00'],\n              dtype='datetime64[ns, Europe/Amsterdam]', freq=None)\n\n>>> rng_tz.ceil(\"h\", ambiguous=True)\nDatetimeIndex(['2021-10-31 02:00:00+02:00'],\n              dtype='datetime64[ns, Europe/Amsterdam]', freq=None)"
  },
  {
    "symbol": "Series.dt.date",
    "signature": "(attribute)",
    "doc": "\nOne-dimensional ndarray with axis labels (including time series).\n\nLabels need not be unique but must be a hashable type. The object\nsupports both integer- and label-based indexing and provides a host of\nmethods for performing operations involving the index. Statistical\nmethods from ndarray have been overridden to automatically exclude\nmissing data (currently represented as NaN).\n\nOperations between Series (+, -, /, \\*, \\*\\*) align values based on their\nassociated index values-- they need not be the same length. The result\nindex will be the sorted union of the two indexes.\n\nParameters\n----------\ndata : array-like, Iterable, dict, or scalar value\n    Contains data stored in Series. If data is a dict, argument order is\n    maintained.\nindex : array-like or Index (1d)\n    Values must be hashable and have the same length as `data`.\n    Non-unique index values are allowed. Will default to\n    RangeIndex (0, 1, 2, ..., n) if not provided. If data is dict-like\n    and index is None, then the keys in the data are used as the index. If the\n    index is not None, the resulting Series is reindexed with the index values.\ndtype : str, numpy.dtype, or ExtensionDtype, optional\n    Data type for the output Series. If not specified, this will be\n    inferred from `data`.\n    See the :ref:`user guide <basics.dtypes>` for more usages.\nname : Hashable, default None\n    The name to give to the Series.\ncopy : bool, default False\n    Copy input data. Only affects Series or 1d ndarray input. See examples.\n\nNotes\n-----\nPlease reference the :ref:`User Guide <basics.series>` for more information.\n\nExamples\n--------\nConstructing Series from a dictionary with an Index specified\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['a', 'b', 'c'])\n>>> ser\na   1\nb   2\nc   3\ndtype: int64\n\nThe keys of the dictionary match with the Index values, hence the Index\nvalues have no effect.\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['x', 'y', 'z'])\n>>> ser\nx   NaN\ny   NaN\nz   NaN\ndtype: float64\n\nNote that the Index is first build with the keys from the dictionary.\nAfter this the Series is reindexed with the given Index values, hence we\nget all NaN as a result.\n\nConstructing Series from a list with `copy=False`.\n\n>>> r = [1, 2]\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\n[1, 2]\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `copy` of\nthe original data even though `copy=False`, so\nthe data is unchanged.\n\nConstructing Series from a 1d ndarray with `copy=False`.\n\n>>> r = np.array([1, 2])\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\narray([999,   2])\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `view` on\nthe original data, so\nthe data is changed as well.\n"
  },
  {
    "symbol": "Series.dt.day",
    "signature": "(attribute)",
    "doc": "\nOne-dimensional ndarray with axis labels (including time series).\n\nLabels need not be unique but must be a hashable type. The object\nsupports both integer- and label-based indexing and provides a host of\nmethods for performing operations involving the index. Statistical\nmethods from ndarray have been overridden to automatically exclude\nmissing data (currently represented as NaN).\n\nOperations between Series (+, -, /, \\*, \\*\\*) align values based on their\nassociated index values-- they need not be the same length. The result\nindex will be the sorted union of the two indexes.\n\nParameters\n----------\ndata : array-like, Iterable, dict, or scalar value\n    Contains data stored in Series. If data is a dict, argument order is\n    maintained.\nindex : array-like or Index (1d)\n    Values must be hashable and have the same length as `data`.\n    Non-unique index values are allowed. Will default to\n    RangeIndex (0, 1, 2, ..., n) if not provided. If data is dict-like\n    and index is None, then the keys in the data are used as the index. If the\n    index is not None, the resulting Series is reindexed with the index values.\ndtype : str, numpy.dtype, or ExtensionDtype, optional\n    Data type for the output Series. If not specified, this will be\n    inferred from `data`.\n    See the :ref:`user guide <basics.dtypes>` for more usages.\nname : Hashable, default None\n    The name to give to the Series.\ncopy : bool, default False\n    Copy input data. Only affects Series or 1d ndarray input. See examples.\n\nNotes\n-----\nPlease reference the :ref:`User Guide <basics.series>` for more information.\n\nExamples\n--------\nConstructing Series from a dictionary with an Index specified\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['a', 'b', 'c'])\n>>> ser\na   1\nb   2\nc   3\ndtype: int64\n\nThe keys of the dictionary match with the Index values, hence the Index\nvalues have no effect.\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['x', 'y', 'z'])\n>>> ser\nx   NaN\ny   NaN\nz   NaN\ndtype: float64\n\nNote that the Index is first build with the keys from the dictionary.\nAfter this the Series is reindexed with the given Index values, hence we\nget all NaN as a result.\n\nConstructing Series from a list with `copy=False`.\n\n>>> r = [1, 2]\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\n[1, 2]\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `copy` of\nthe original data even though `copy=False`, so\nthe data is unchanged.\n\nConstructing Series from a 1d ndarray with `copy=False`.\n\n>>> r = np.array([1, 2])\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\narray([999,   2])\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `view` on\nthe original data, so\nthe data is changed as well.\n"
  },
  {
    "symbol": "Series.dt.day_name",
    "signature": "(*args, **kwargs)",
    "doc": "Return the day names with specified locale.\n\nParameters\n----------\nlocale : str, optional\n    Locale determining the language in which to return the day name.\n    Default is English locale (``'en_US.utf8'``). Use the command\n    ``locale -a`` on your terminal on Unix systems to find your locale\n    language code.\n\nReturns\n-------\nSeries or Index\n    Series or Index of day names.\n\nExamples\n--------\n>>> s = pd.Series(pd.date_range(start='2018-01-01', freq='D', periods=3))\n>>> s\n0   2018-01-01\n1   2018-01-02\n2   2018-01-03\ndtype: datetime64[ns]\n>>> s.dt.day_name()\n0       Monday\n1      Tuesday\n2    Wednesday\ndtype: object\n\n>>> idx = pd.date_range(start='2018-01-01', freq='D', periods=3)\n>>> idx\nDatetimeIndex(['2018-01-01', '2018-01-02', '2018-01-03'],\n              dtype='datetime64[ns]', freq='D')\n>>> idx.day_name()\nIndex(['Monday', 'Tuesday', 'Wednesday'], dtype='object')\n\nUsing the ``locale`` parameter you can set a different locale language,\nfor example: ``idx.day_name(locale='pt_BR.utf8')`` will return day\nnames in Brazilian Portuguese language.\n\n>>> idx = pd.date_range(start='2018-01-01', freq='D', periods=3)\n>>> idx\nDatetimeIndex(['2018-01-01', '2018-01-02', '2018-01-03'],\n              dtype='datetime64[ns]', freq='D')\n>>> idx.day_name(locale='pt_BR.utf8') # doctest: +SKIP\nIndex(['Segunda', 'Terça', 'Quarta'], dtype='object')"
  },
  {
    "symbol": "Series.dt.day_of_week",
    "signature": "(attribute)",
    "doc": "\nOne-dimensional ndarray with axis labels (including time series).\n\nLabels need not be unique but must be a hashable type. The object\nsupports both integer- and label-based indexing and provides a host of\nmethods for performing operations involving the index. Statistical\nmethods from ndarray have been overridden to automatically exclude\nmissing data (currently represented as NaN).\n\nOperations between Series (+, -, /, \\*, \\*\\*) align values based on their\nassociated index values-- they need not be the same length. The result\nindex will be the sorted union of the two indexes.\n\nParameters\n----------\ndata : array-like, Iterable, dict, or scalar value\n    Contains data stored in Series. If data is a dict, argument order is\n    maintained.\nindex : array-like or Index (1d)\n    Values must be hashable and have the same length as `data`.\n    Non-unique index values are allowed. Will default to\n    RangeIndex (0, 1, 2, ..., n) if not provided. If data is dict-like\n    and index is None, then the keys in the data are used as the index. If the\n    index is not None, the resulting Series is reindexed with the index values.\ndtype : str, numpy.dtype, or ExtensionDtype, optional\n    Data type for the output Series. If not specified, this will be\n    inferred from `data`.\n    See the :ref:`user guide <basics.dtypes>` for more usages.\nname : Hashable, default None\n    The name to give to the Series.\ncopy : bool, default False\n    Copy input data. Only affects Series or 1d ndarray input. See examples.\n\nNotes\n-----\nPlease reference the :ref:`User Guide <basics.series>` for more information.\n\nExamples\n--------\nConstructing Series from a dictionary with an Index specified\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['a', 'b', 'c'])\n>>> ser\na   1\nb   2\nc   3\ndtype: int64\n\nThe keys of the dictionary match with the Index values, hence the Index\nvalues have no effect.\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['x', 'y', 'z'])\n>>> ser\nx   NaN\ny   NaN\nz   NaN\ndtype: float64\n\nNote that the Index is first build with the keys from the dictionary.\nAfter this the Series is reindexed with the given Index values, hence we\nget all NaN as a result.\n\nConstructing Series from a list with `copy=False`.\n\n>>> r = [1, 2]\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\n[1, 2]\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `copy` of\nthe original data even though `copy=False`, so\nthe data is unchanged.\n\nConstructing Series from a 1d ndarray with `copy=False`.\n\n>>> r = np.array([1, 2])\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\narray([999,   2])\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `view` on\nthe original data, so\nthe data is changed as well.\n"
  },
  {
    "symbol": "Series.dt.day_of_year",
    "signature": "(attribute)",
    "doc": "\nOne-dimensional ndarray with axis labels (including time series).\n\nLabels need not be unique but must be a hashable type. The object\nsupports both integer- and label-based indexing and provides a host of\nmethods for performing operations involving the index. Statistical\nmethods from ndarray have been overridden to automatically exclude\nmissing data (currently represented as NaN).\n\nOperations between Series (+, -, /, \\*, \\*\\*) align values based on their\nassociated index values-- they need not be the same length. The result\nindex will be the sorted union of the two indexes.\n\nParameters\n----------\ndata : array-like, Iterable, dict, or scalar value\n    Contains data stored in Series. If data is a dict, argument order is\n    maintained.\nindex : array-like or Index (1d)\n    Values must be hashable and have the same length as `data`.\n    Non-unique index values are allowed. Will default to\n    RangeIndex (0, 1, 2, ..., n) if not provided. If data is dict-like\n    and index is None, then the keys in the data are used as the index. If the\n    index is not None, the resulting Series is reindexed with the index values.\ndtype : str, numpy.dtype, or ExtensionDtype, optional\n    Data type for the output Series. If not specified, this will be\n    inferred from `data`.\n    See the :ref:`user guide <basics.dtypes>` for more usages.\nname : Hashable, default None\n    The name to give to the Series.\ncopy : bool, default False\n    Copy input data. Only affects Series or 1d ndarray input. See examples.\n\nNotes\n-----\nPlease reference the :ref:`User Guide <basics.series>` for more information.\n\nExamples\n--------\nConstructing Series from a dictionary with an Index specified\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['a', 'b', 'c'])\n>>> ser\na   1\nb   2\nc   3\ndtype: int64\n\nThe keys of the dictionary match with the Index values, hence the Index\nvalues have no effect.\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['x', 'y', 'z'])\n>>> ser\nx   NaN\ny   NaN\nz   NaN\ndtype: float64\n\nNote that the Index is first build with the keys from the dictionary.\nAfter this the Series is reindexed with the given Index values, hence we\nget all NaN as a result.\n\nConstructing Series from a list with `copy=False`.\n\n>>> r = [1, 2]\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\n[1, 2]\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `copy` of\nthe original data even though `copy=False`, so\nthe data is unchanged.\n\nConstructing Series from a 1d ndarray with `copy=False`.\n\n>>> r = np.array([1, 2])\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\narray([999,   2])\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `view` on\nthe original data, so\nthe data is changed as well.\n"
  },
  {
    "symbol": "Series.dt.dayofweek",
    "signature": "(attribute)",
    "doc": "\nOne-dimensional ndarray with axis labels (including time series).\n\nLabels need not be unique but must be a hashable type. The object\nsupports both integer- and label-based indexing and provides a host of\nmethods for performing operations involving the index. Statistical\nmethods from ndarray have been overridden to automatically exclude\nmissing data (currently represented as NaN).\n\nOperations between Series (+, -, /, \\*, \\*\\*) align values based on their\nassociated index values-- they need not be the same length. The result\nindex will be the sorted union of the two indexes.\n\nParameters\n----------\ndata : array-like, Iterable, dict, or scalar value\n    Contains data stored in Series. If data is a dict, argument order is\n    maintained.\nindex : array-like or Index (1d)\n    Values must be hashable and have the same length as `data`.\n    Non-unique index values are allowed. Will default to\n    RangeIndex (0, 1, 2, ..., n) if not provided. If data is dict-like\n    and index is None, then the keys in the data are used as the index. If the\n    index is not None, the resulting Series is reindexed with the index values.\ndtype : str, numpy.dtype, or ExtensionDtype, optional\n    Data type for the output Series. If not specified, this will be\n    inferred from `data`.\n    See the :ref:`user guide <basics.dtypes>` for more usages.\nname : Hashable, default None\n    The name to give to the Series.\ncopy : bool, default False\n    Copy input data. Only affects Series or 1d ndarray input. See examples.\n\nNotes\n-----\nPlease reference the :ref:`User Guide <basics.series>` for more information.\n\nExamples\n--------\nConstructing Series from a dictionary with an Index specified\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['a', 'b', 'c'])\n>>> ser\na   1\nb   2\nc   3\ndtype: int64\n\nThe keys of the dictionary match with the Index values, hence the Index\nvalues have no effect.\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['x', 'y', 'z'])\n>>> ser\nx   NaN\ny   NaN\nz   NaN\ndtype: float64\n\nNote that the Index is first build with the keys from the dictionary.\nAfter this the Series is reindexed with the given Index values, hence we\nget all NaN as a result.\n\nConstructing Series from a list with `copy=False`.\n\n>>> r = [1, 2]\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\n[1, 2]\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `copy` of\nthe original data even though `copy=False`, so\nthe data is unchanged.\n\nConstructing Series from a 1d ndarray with `copy=False`.\n\n>>> r = np.array([1, 2])\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\narray([999,   2])\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `view` on\nthe original data, so\nthe data is changed as well.\n"
  },
  {
    "symbol": "Series.dt.dayofyear",
    "signature": "(attribute)",
    "doc": "\nOne-dimensional ndarray with axis labels (including time series).\n\nLabels need not be unique but must be a hashable type. The object\nsupports both integer- and label-based indexing and provides a host of\nmethods for performing operations involving the index. Statistical\nmethods from ndarray have been overridden to automatically exclude\nmissing data (currently represented as NaN).\n\nOperations between Series (+, -, /, \\*, \\*\\*) align values based on their\nassociated index values-- they need not be the same length. The result\nindex will be the sorted union of the two indexes.\n\nParameters\n----------\ndata : array-like, Iterable, dict, or scalar value\n    Contains data stored in Series. If data is a dict, argument order is\n    maintained.\nindex : array-like or Index (1d)\n    Values must be hashable and have the same length as `data`.\n    Non-unique index values are allowed. Will default to\n    RangeIndex (0, 1, 2, ..., n) if not provided. If data is dict-like\n    and index is None, then the keys in the data are used as the index. If the\n    index is not None, the resulting Series is reindexed with the index values.\ndtype : str, numpy.dtype, or ExtensionDtype, optional\n    Data type for the output Series. If not specified, this will be\n    inferred from `data`.\n    See the :ref:`user guide <basics.dtypes>` for more usages.\nname : Hashable, default None\n    The name to give to the Series.\ncopy : bool, default False\n    Copy input data. Only affects Series or 1d ndarray input. See examples.\n\nNotes\n-----\nPlease reference the :ref:`User Guide <basics.series>` for more information.\n\nExamples\n--------\nConstructing Series from a dictionary with an Index specified\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['a', 'b', 'c'])\n>>> ser\na   1\nb   2\nc   3\ndtype: int64\n\nThe keys of the dictionary match with the Index values, hence the Index\nvalues have no effect.\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['x', 'y', 'z'])\n>>> ser\nx   NaN\ny   NaN\nz   NaN\ndtype: float64\n\nNote that the Index is first build with the keys from the dictionary.\nAfter this the Series is reindexed with the given Index values, hence we\nget all NaN as a result.\n\nConstructing Series from a list with `copy=False`.\n\n>>> r = [1, 2]\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\n[1, 2]\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `copy` of\nthe original data even though `copy=False`, so\nthe data is unchanged.\n\nConstructing Series from a 1d ndarray with `copy=False`.\n\n>>> r = np.array([1, 2])\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\narray([999,   2])\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `view` on\nthe original data, so\nthe data is changed as well.\n"
  },
  {
    "symbol": "Series.dt.days_in_month",
    "signature": "(attribute)",
    "doc": "\nOne-dimensional ndarray with axis labels (including time series).\n\nLabels need not be unique but must be a hashable type. The object\nsupports both integer- and label-based indexing and provides a host of\nmethods for performing operations involving the index. Statistical\nmethods from ndarray have been overridden to automatically exclude\nmissing data (currently represented as NaN).\n\nOperations between Series (+, -, /, \\*, \\*\\*) align values based on their\nassociated index values-- they need not be the same length. The result\nindex will be the sorted union of the two indexes.\n\nParameters\n----------\ndata : array-like, Iterable, dict, or scalar value\n    Contains data stored in Series. If data is a dict, argument order is\n    maintained.\nindex : array-like or Index (1d)\n    Values must be hashable and have the same length as `data`.\n    Non-unique index values are allowed. Will default to\n    RangeIndex (0, 1, 2, ..., n) if not provided. If data is dict-like\n    and index is None, then the keys in the data are used as the index. If the\n    index is not None, the resulting Series is reindexed with the index values.\ndtype : str, numpy.dtype, or ExtensionDtype, optional\n    Data type for the output Series. If not specified, this will be\n    inferred from `data`.\n    See the :ref:`user guide <basics.dtypes>` for more usages.\nname : Hashable, default None\n    The name to give to the Series.\ncopy : bool, default False\n    Copy input data. Only affects Series or 1d ndarray input. See examples.\n\nNotes\n-----\nPlease reference the :ref:`User Guide <basics.series>` for more information.\n\nExamples\n--------\nConstructing Series from a dictionary with an Index specified\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['a', 'b', 'c'])\n>>> ser\na   1\nb   2\nc   3\ndtype: int64\n\nThe keys of the dictionary match with the Index values, hence the Index\nvalues have no effect.\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['x', 'y', 'z'])\n>>> ser\nx   NaN\ny   NaN\nz   NaN\ndtype: float64\n\nNote that the Index is first build with the keys from the dictionary.\nAfter this the Series is reindexed with the given Index values, hence we\nget all NaN as a result.\n\nConstructing Series from a list with `copy=False`.\n\n>>> r = [1, 2]\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\n[1, 2]\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `copy` of\nthe original data even though `copy=False`, so\nthe data is unchanged.\n\nConstructing Series from a 1d ndarray with `copy=False`.\n\n>>> r = np.array([1, 2])\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\narray([999,   2])\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `view` on\nthe original data, so\nthe data is changed as well.\n"
  },
  {
    "symbol": "Series.dt.daysinmonth",
    "signature": "(attribute)",
    "doc": "\nOne-dimensional ndarray with axis labels (including time series).\n\nLabels need not be unique but must be a hashable type. The object\nsupports both integer- and label-based indexing and provides a host of\nmethods for performing operations involving the index. Statistical\nmethods from ndarray have been overridden to automatically exclude\nmissing data (currently represented as NaN).\n\nOperations between Series (+, -, /, \\*, \\*\\*) align values based on their\nassociated index values-- they need not be the same length. The result\nindex will be the sorted union of the two indexes.\n\nParameters\n----------\ndata : array-like, Iterable, dict, or scalar value\n    Contains data stored in Series. If data is a dict, argument order is\n    maintained.\nindex : array-like or Index (1d)\n    Values must be hashable and have the same length as `data`.\n    Non-unique index values are allowed. Will default to\n    RangeIndex (0, 1, 2, ..., n) if not provided. If data is dict-like\n    and index is None, then the keys in the data are used as the index. If the\n    index is not None, the resulting Series is reindexed with the index values.\ndtype : str, numpy.dtype, or ExtensionDtype, optional\n    Data type for the output Series. If not specified, this will be\n    inferred from `data`.\n    See the :ref:`user guide <basics.dtypes>` for more usages.\nname : Hashable, default None\n    The name to give to the Series.\ncopy : bool, default False\n    Copy input data. Only affects Series or 1d ndarray input. See examples.\n\nNotes\n-----\nPlease reference the :ref:`User Guide <basics.series>` for more information.\n\nExamples\n--------\nConstructing Series from a dictionary with an Index specified\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['a', 'b', 'c'])\n>>> ser\na   1\nb   2\nc   3\ndtype: int64\n\nThe keys of the dictionary match with the Index values, hence the Index\nvalues have no effect.\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['x', 'y', 'z'])\n>>> ser\nx   NaN\ny   NaN\nz   NaN\ndtype: float64\n\nNote that the Index is first build with the keys from the dictionary.\nAfter this the Series is reindexed with the given Index values, hence we\nget all NaN as a result.\n\nConstructing Series from a list with `copy=False`.\n\n>>> r = [1, 2]\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\n[1, 2]\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `copy` of\nthe original data even though `copy=False`, so\nthe data is unchanged.\n\nConstructing Series from a 1d ndarray with `copy=False`.\n\n>>> r = np.array([1, 2])\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\narray([999,   2])\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `view` on\nthe original data, so\nthe data is changed as well.\n"
  },
  {
    "symbol": "Series.dt.floor",
    "signature": "(*args, **kwargs)",
    "doc": "Perform floor operation on the data to the specified `freq`.\n\nParameters\n----------\nfreq : str or Offset\n    The frequency level to floor the index to. Must be a fixed\n    frequency like 'S' (second) not 'ME' (month end). See\n    :ref:`frequency aliases <timeseries.offset_aliases>` for\n    a list of possible `freq` values.\nambiguous : 'infer', bool-ndarray, 'NaT', default 'raise'\n    Only relevant for DatetimeIndex:\n\n    - 'infer' will attempt to infer fall dst-transition hours based on\n      order\n    - bool-ndarray where True signifies a DST time, False designates\n      a non-DST time (note that this flag is only applicable for\n      ambiguous times)\n    - 'NaT' will return NaT where there are ambiguous times\n    - 'raise' will raise an AmbiguousTimeError if there are ambiguous\n      times.\n\nnonexistent : 'shift_forward', 'shift_backward', 'NaT', timedelta, default 'raise'\n    A nonexistent time does not exist in a particular timezone\n    where clocks moved forward due to DST.\n\n    - 'shift_forward' will shift the nonexistent time forward to the\n      closest existing time\n    - 'shift_backward' will shift the nonexistent time backward to the\n      closest existing time\n    - 'NaT' will return NaT where there are nonexistent times\n    - timedelta objects will shift nonexistent times by the timedelta\n    - 'raise' will raise an NonExistentTimeError if there are\n      nonexistent times.\n\nReturns\n-------\nDatetimeIndex, TimedeltaIndex, or Series\n    Index of the same type for a DatetimeIndex or TimedeltaIndex,\n    or a Series with the same index for a Series.\n\nRaises\n------\nValueError if the `freq` cannot be converted.\n\nNotes\n-----\nIf the timestamps have a timezone, flooring will take place relative to the\nlocal (\"wall\") time and re-localized to the same timezone. When flooring\nnear daylight savings time, use ``nonexistent`` and ``ambiguous`` to\ncontrol the re-localization behavior.\n\nExamples\n--------\n**DatetimeIndex**\n\n>>> rng = pd.date_range('1/1/2018 11:59:00', periods=3, freq='min')\n>>> rng\nDatetimeIndex(['2018-01-01 11:59:00', '2018-01-01 12:00:00',\n               '2018-01-01 12:01:00'],\n              dtype='datetime64[ns]', freq='min')\n>>> rng.floor('h')\nDatetimeIndex(['2018-01-01 11:00:00', '2018-01-01 12:00:00',\n               '2018-01-01 12:00:00'],\n              dtype='datetime64[ns]', freq=None)\n\n**Series**\n\n>>> pd.Series(rng).dt.floor(\"h\")\n0   2018-01-01 11:00:00\n1   2018-01-01 12:00:00\n2   2018-01-01 12:00:00\ndtype: datetime64[ns]\n\nWhen rounding near a daylight savings time transition, use ``ambiguous`` or\n``nonexistent`` to control how the timestamp should be re-localized.\n\n>>> rng_tz = pd.DatetimeIndex([\"2021-10-31 03:30:00\"], tz=\"Europe/Amsterdam\")\n\n>>> rng_tz.floor(\"2h\", ambiguous=False)\nDatetimeIndex(['2021-10-31 02:00:00+01:00'],\n             dtype='datetime64[ns, Europe/Amsterdam]', freq=None)\n\n>>> rng_tz.floor(\"2h\", ambiguous=True)\nDatetimeIndex(['2021-10-31 02:00:00+02:00'],\n              dtype='datetime64[ns, Europe/Amsterdam]', freq=None)"
  },
  {
    "symbol": "Series.dt.freq",
    "signature": "(attribute)",
    "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to 'utf-8'.\nerrors defaults to 'strict'."
  },
  {
    "symbol": "Series.dt.hour",
    "signature": "(attribute)",
    "doc": "\nOne-dimensional ndarray with axis labels (including time series).\n\nLabels need not be unique but must be a hashable type. The object\nsupports both integer- and label-based indexing and provides a host of\nmethods for performing operations involving the index. Statistical\nmethods from ndarray have been overridden to automatically exclude\nmissing data (currently represented as NaN).\n\nOperations between Series (+, -, /, \\*, \\*\\*) align values based on their\nassociated index values-- they need not be the same length. The result\nindex will be the sorted union of the two indexes.\n\nParameters\n----------\ndata : array-like, Iterable, dict, or scalar value\n    Contains data stored in Series. If data is a dict, argument order is\n    maintained.\nindex : array-like or Index (1d)\n    Values must be hashable and have the same length as `data`.\n    Non-unique index values are allowed. Will default to\n    RangeIndex (0, 1, 2, ..., n) if not provided. If data is dict-like\n    and index is None, then the keys in the data are used as the index. If the\n    index is not None, the resulting Series is reindexed with the index values.\ndtype : str, numpy.dtype, or ExtensionDtype, optional\n    Data type for the output Series. If not specified, this will be\n    inferred from `data`.\n    See the :ref:`user guide <basics.dtypes>` for more usages.\nname : Hashable, default None\n    The name to give to the Series.\ncopy : bool, default False\n    Copy input data. Only affects Series or 1d ndarray input. See examples.\n\nNotes\n-----\nPlease reference the :ref:`User Guide <basics.series>` for more information.\n\nExamples\n--------\nConstructing Series from a dictionary with an Index specified\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['a', 'b', 'c'])\n>>> ser\na   1\nb   2\nc   3\ndtype: int64\n\nThe keys of the dictionary match with the Index values, hence the Index\nvalues have no effect.\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['x', 'y', 'z'])\n>>> ser\nx   NaN\ny   NaN\nz   NaN\ndtype: float64\n\nNote that the Index is first build with the keys from the dictionary.\nAfter this the Series is reindexed with the given Index values, hence we\nget all NaN as a result.\n\nConstructing Series from a list with `copy=False`.\n\n>>> r = [1, 2]\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\n[1, 2]\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `copy` of\nthe original data even though `copy=False`, so\nthe data is unchanged.\n\nConstructing Series from a 1d ndarray with `copy=False`.\n\n>>> r = np.array([1, 2])\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\narray([999,   2])\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `view` on\nthe original data, so\nthe data is changed as well.\n"
  },
  {
    "symbol": "Series.dt.is_leap_year",
    "signature": "(attribute)",
    "doc": "\nOne-dimensional ndarray with axis labels (including time series).\n\nLabels need not be unique but must be a hashable type. The object\nsupports both integer- and label-based indexing and provides a host of\nmethods for performing operations involving the index. Statistical\nmethods from ndarray have been overridden to automatically exclude\nmissing data (currently represented as NaN).\n\nOperations between Series (+, -, /, \\*, \\*\\*) align values based on their\nassociated index values-- they need not be the same length. The result\nindex will be the sorted union of the two indexes.\n\nParameters\n----------\ndata : array-like, Iterable, dict, or scalar value\n    Contains data stored in Series. If data is a dict, argument order is\n    maintained.\nindex : array-like or Index (1d)\n    Values must be hashable and have the same length as `data`.\n    Non-unique index values are allowed. Will default to\n    RangeIndex (0, 1, 2, ..., n) if not provided. If data is dict-like\n    and index is None, then the keys in the data are used as the index. If the\n    index is not None, the resulting Series is reindexed with the index values.\ndtype : str, numpy.dtype, or ExtensionDtype, optional\n    Data type for the output Series. If not specified, this will be\n    inferred from `data`.\n    See the :ref:`user guide <basics.dtypes>` for more usages.\nname : Hashable, default None\n    The name to give to the Series.\ncopy : bool, default False\n    Copy input data. Only affects Series or 1d ndarray input. See examples.\n\nNotes\n-----\nPlease reference the :ref:`User Guide <basics.series>` for more information.\n\nExamples\n--------\nConstructing Series from a dictionary with an Index specified\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['a', 'b', 'c'])\n>>> ser\na   1\nb   2\nc   3\ndtype: int64\n\nThe keys of the dictionary match with the Index values, hence the Index\nvalues have no effect.\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['x', 'y', 'z'])\n>>> ser\nx   NaN\ny   NaN\nz   NaN\ndtype: float64\n\nNote that the Index is first build with the keys from the dictionary.\nAfter this the Series is reindexed with the given Index values, hence we\nget all NaN as a result.\n\nConstructing Series from a list with `copy=False`.\n\n>>> r = [1, 2]\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\n[1, 2]\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `copy` of\nthe original data even though `copy=False`, so\nthe data is unchanged.\n\nConstructing Series from a 1d ndarray with `copy=False`.\n\n>>> r = np.array([1, 2])\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\narray([999,   2])\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `view` on\nthe original data, so\nthe data is changed as well.\n"
  },
  {
    "symbol": "Series.dt.is_month_end",
    "signature": "(attribute)",
    "doc": "\nOne-dimensional ndarray with axis labels (including time series).\n\nLabels need not be unique but must be a hashable type. The object\nsupports both integer- and label-based indexing and provides a host of\nmethods for performing operations involving the index. Statistical\nmethods from ndarray have been overridden to automatically exclude\nmissing data (currently represented as NaN).\n\nOperations between Series (+, -, /, \\*, \\*\\*) align values based on their\nassociated index values-- they need not be the same length. The result\nindex will be the sorted union of the two indexes.\n\nParameters\n----------\ndata : array-like, Iterable, dict, or scalar value\n    Contains data stored in Series. If data is a dict, argument order is\n    maintained.\nindex : array-like or Index (1d)\n    Values must be hashable and have the same length as `data`.\n    Non-unique index values are allowed. Will default to\n    RangeIndex (0, 1, 2, ..., n) if not provided. If data is dict-like\n    and index is None, then the keys in the data are used as the index. If the\n    index is not None, the resulting Series is reindexed with the index values.\ndtype : str, numpy.dtype, or ExtensionDtype, optional\n    Data type for the output Series. If not specified, this will be\n    inferred from `data`.\n    See the :ref:`user guide <basics.dtypes>` for more usages.\nname : Hashable, default None\n    The name to give to the Series.\ncopy : bool, default False\n    Copy input data. Only affects Series or 1d ndarray input. See examples.\n\nNotes\n-----\nPlease reference the :ref:`User Guide <basics.series>` for more information.\n\nExamples\n--------\nConstructing Series from a dictionary with an Index specified\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['a', 'b', 'c'])\n>>> ser\na   1\nb   2\nc   3\ndtype: int64\n\nThe keys of the dictionary match with the Index values, hence the Index\nvalues have no effect.\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['x', 'y', 'z'])\n>>> ser\nx   NaN\ny   NaN\nz   NaN\ndtype: float64\n\nNote that the Index is first build with the keys from the dictionary.\nAfter this the Series is reindexed with the given Index values, hence we\nget all NaN as a result.\n\nConstructing Series from a list with `copy=False`.\n\n>>> r = [1, 2]\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\n[1, 2]\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `copy` of\nthe original data even though `copy=False`, so\nthe data is unchanged.\n\nConstructing Series from a 1d ndarray with `copy=False`.\n\n>>> r = np.array([1, 2])\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\narray([999,   2])\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `view` on\nthe original data, so\nthe data is changed as well.\n"
  },
  {
    "symbol": "Series.dt.is_month_start",
    "signature": "(attribute)",
    "doc": "\nOne-dimensional ndarray with axis labels (including time series).\n\nLabels need not be unique but must be a hashable type. The object\nsupports both integer- and label-based indexing and provides a host of\nmethods for performing operations involving the index. Statistical\nmethods from ndarray have been overridden to automatically exclude\nmissing data (currently represented as NaN).\n\nOperations between Series (+, -, /, \\*, \\*\\*) align values based on their\nassociated index values-- they need not be the same length. The result\nindex will be the sorted union of the two indexes.\n\nParameters\n----------\ndata : array-like, Iterable, dict, or scalar value\n    Contains data stored in Series. If data is a dict, argument order is\n    maintained.\nindex : array-like or Index (1d)\n    Values must be hashable and have the same length as `data`.\n    Non-unique index values are allowed. Will default to\n    RangeIndex (0, 1, 2, ..., n) if not provided. If data is dict-like\n    and index is None, then the keys in the data are used as the index. If the\n    index is not None, the resulting Series is reindexed with the index values.\ndtype : str, numpy.dtype, or ExtensionDtype, optional\n    Data type for the output Series. If not specified, this will be\n    inferred from `data`.\n    See the :ref:`user guide <basics.dtypes>` for more usages.\nname : Hashable, default None\n    The name to give to the Series.\ncopy : bool, default False\n    Copy input data. Only affects Series or 1d ndarray input. See examples.\n\nNotes\n-----\nPlease reference the :ref:`User Guide <basics.series>` for more information.\n\nExamples\n--------\nConstructing Series from a dictionary with an Index specified\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['a', 'b', 'c'])\n>>> ser\na   1\nb   2\nc   3\ndtype: int64\n\nThe keys of the dictionary match with the Index values, hence the Index\nvalues have no effect.\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['x', 'y', 'z'])\n>>> ser\nx   NaN\ny   NaN\nz   NaN\ndtype: float64\n\nNote that the Index is first build with the keys from the dictionary.\nAfter this the Series is reindexed with the given Index values, hence we\nget all NaN as a result.\n\nConstructing Series from a list with `copy=False`.\n\n>>> r = [1, 2]\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\n[1, 2]\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `copy` of\nthe original data even though `copy=False`, so\nthe data is unchanged.\n\nConstructing Series from a 1d ndarray with `copy=False`.\n\n>>> r = np.array([1, 2])\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\narray([999,   2])\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `view` on\nthe original data, so\nthe data is changed as well.\n"
  },
  {
    "symbol": "Series.dt.is_quarter_end",
    "signature": "(attribute)",
    "doc": "\nOne-dimensional ndarray with axis labels (including time series).\n\nLabels need not be unique but must be a hashable type. The object\nsupports both integer- and label-based indexing and provides a host of\nmethods for performing operations involving the index. Statistical\nmethods from ndarray have been overridden to automatically exclude\nmissing data (currently represented as NaN).\n\nOperations between Series (+, -, /, \\*, \\*\\*) align values based on their\nassociated index values-- they need not be the same length. The result\nindex will be the sorted union of the two indexes.\n\nParameters\n----------\ndata : array-like, Iterable, dict, or scalar value\n    Contains data stored in Series. If data is a dict, argument order is\n    maintained.\nindex : array-like or Index (1d)\n    Values must be hashable and have the same length as `data`.\n    Non-unique index values are allowed. Will default to\n    RangeIndex (0, 1, 2, ..., n) if not provided. If data is dict-like\n    and index is None, then the keys in the data are used as the index. If the\n    index is not None, the resulting Series is reindexed with the index values.\ndtype : str, numpy.dtype, or ExtensionDtype, optional\n    Data type for the output Series. If not specified, this will be\n    inferred from `data`.\n    See the :ref:`user guide <basics.dtypes>` for more usages.\nname : Hashable, default None\n    The name to give to the Series.\ncopy : bool, default False\n    Copy input data. Only affects Series or 1d ndarray input. See examples.\n\nNotes\n-----\nPlease reference the :ref:`User Guide <basics.series>` for more information.\n\nExamples\n--------\nConstructing Series from a dictionary with an Index specified\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['a', 'b', 'c'])\n>>> ser\na   1\nb   2\nc   3\ndtype: int64\n\nThe keys of the dictionary match with the Index values, hence the Index\nvalues have no effect.\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['x', 'y', 'z'])\n>>> ser\nx   NaN\ny   NaN\nz   NaN\ndtype: float64\n\nNote that the Index is first build with the keys from the dictionary.\nAfter this the Series is reindexed with the given Index values, hence we\nget all NaN as a result.\n\nConstructing Series from a list with `copy=False`.\n\n>>> r = [1, 2]\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\n[1, 2]\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `copy` of\nthe original data even though `copy=False`, so\nthe data is unchanged.\n\nConstructing Series from a 1d ndarray with `copy=False`.\n\n>>> r = np.array([1, 2])\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\narray([999,   2])\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `view` on\nthe original data, so\nthe data is changed as well.\n"
  },
  {
    "symbol": "Series.dt.is_quarter_start",
    "signature": "(attribute)",
    "doc": "\nOne-dimensional ndarray with axis labels (including time series).\n\nLabels need not be unique but must be a hashable type. The object\nsupports both integer- and label-based indexing and provides a host of\nmethods for performing operations involving the index. Statistical\nmethods from ndarray have been overridden to automatically exclude\nmissing data (currently represented as NaN).\n\nOperations between Series (+, -, /, \\*, \\*\\*) align values based on their\nassociated index values-- they need not be the same length. The result\nindex will be the sorted union of the two indexes.\n\nParameters\n----------\ndata : array-like, Iterable, dict, or scalar value\n    Contains data stored in Series. If data is a dict, argument order is\n    maintained.\nindex : array-like or Index (1d)\n    Values must be hashable and have the same length as `data`.\n    Non-unique index values are allowed. Will default to\n    RangeIndex (0, 1, 2, ..., n) if not provided. If data is dict-like\n    and index is None, then the keys in the data are used as the index. If the\n    index is not None, the resulting Series is reindexed with the index values.\ndtype : str, numpy.dtype, or ExtensionDtype, optional\n    Data type for the output Series. If not specified, this will be\n    inferred from `data`.\n    See the :ref:`user guide <basics.dtypes>` for more usages.\nname : Hashable, default None\n    The name to give to the Series.\ncopy : bool, default False\n    Copy input data. Only affects Series or 1d ndarray input. See examples.\n\nNotes\n-----\nPlease reference the :ref:`User Guide <basics.series>` for more information.\n\nExamples\n--------\nConstructing Series from a dictionary with an Index specified\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['a', 'b', 'c'])\n>>> ser\na   1\nb   2\nc   3\ndtype: int64\n\nThe keys of the dictionary match with the Index values, hence the Index\nvalues have no effect.\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['x', 'y', 'z'])\n>>> ser\nx   NaN\ny   NaN\nz   NaN\ndtype: float64\n\nNote that the Index is first build with the keys from the dictionary.\nAfter this the Series is reindexed with the given Index values, hence we\nget all NaN as a result.\n\nConstructing Series from a list with `copy=False`.\n\n>>> r = [1, 2]\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\n[1, 2]\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `copy` of\nthe original data even though `copy=False`, so\nthe data is unchanged.\n\nConstructing Series from a 1d ndarray with `copy=False`.\n\n>>> r = np.array([1, 2])\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\narray([999,   2])\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `view` on\nthe original data, so\nthe data is changed as well.\n"
  },
  {
    "symbol": "Series.dt.is_year_end",
    "signature": "(attribute)",
    "doc": "\nOne-dimensional ndarray with axis labels (including time series).\n\nLabels need not be unique but must be a hashable type. The object\nsupports both integer- and label-based indexing and provides a host of\nmethods for performing operations involving the index. Statistical\nmethods from ndarray have been overridden to automatically exclude\nmissing data (currently represented as NaN).\n\nOperations between Series (+, -, /, \\*, \\*\\*) align values based on their\nassociated index values-- they need not be the same length. The result\nindex will be the sorted union of the two indexes.\n\nParameters\n----------\ndata : array-like, Iterable, dict, or scalar value\n    Contains data stored in Series. If data is a dict, argument order is\n    maintained.\nindex : array-like or Index (1d)\n    Values must be hashable and have the same length as `data`.\n    Non-unique index values are allowed. Will default to\n    RangeIndex (0, 1, 2, ..., n) if not provided. If data is dict-like\n    and index is None, then the keys in the data are used as the index. If the\n    index is not None, the resulting Series is reindexed with the index values.\ndtype : str, numpy.dtype, or ExtensionDtype, optional\n    Data type for the output Series. If not specified, this will be\n    inferred from `data`.\n    See the :ref:`user guide <basics.dtypes>` for more usages.\nname : Hashable, default None\n    The name to give to the Series.\ncopy : bool, default False\n    Copy input data. Only affects Series or 1d ndarray input. See examples.\n\nNotes\n-----\nPlease reference the :ref:`User Guide <basics.series>` for more information.\n\nExamples\n--------\nConstructing Series from a dictionary with an Index specified\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['a', 'b', 'c'])\n>>> ser\na   1\nb   2\nc   3\ndtype: int64\n\nThe keys of the dictionary match with the Index values, hence the Index\nvalues have no effect.\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['x', 'y', 'z'])\n>>> ser\nx   NaN\ny   NaN\nz   NaN\ndtype: float64\n\nNote that the Index is first build with the keys from the dictionary.\nAfter this the Series is reindexed with the given Index values, hence we\nget all NaN as a result.\n\nConstructing Series from a list with `copy=False`.\n\n>>> r = [1, 2]\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\n[1, 2]\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `copy` of\nthe original data even though `copy=False`, so\nthe data is unchanged.\n\nConstructing Series from a 1d ndarray with `copy=False`.\n\n>>> r = np.array([1, 2])\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\narray([999,   2])\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `view` on\nthe original data, so\nthe data is changed as well.\n"
  },
  {
    "symbol": "Series.dt.is_year_start",
    "signature": "(attribute)",
    "doc": "\nOne-dimensional ndarray with axis labels (including time series).\n\nLabels need not be unique but must be a hashable type. The object\nsupports both integer- and label-based indexing and provides a host of\nmethods for performing operations involving the index. Statistical\nmethods from ndarray have been overridden to automatically exclude\nmissing data (currently represented as NaN).\n\nOperations between Series (+, -, /, \\*, \\*\\*) align values based on their\nassociated index values-- they need not be the same length. The result\nindex will be the sorted union of the two indexes.\n\nParameters\n----------\ndata : array-like, Iterable, dict, or scalar value\n    Contains data stored in Series. If data is a dict, argument order is\n    maintained.\nindex : array-like or Index (1d)\n    Values must be hashable and have the same length as `data`.\n    Non-unique index values are allowed. Will default to\n    RangeIndex (0, 1, 2, ..., n) if not provided. If data is dict-like\n    and index is None, then the keys in the data are used as the index. If the\n    index is not None, the resulting Series is reindexed with the index values.\ndtype : str, numpy.dtype, or ExtensionDtype, optional\n    Data type for the output Series. If not specified, this will be\n    inferred from `data`.\n    See the :ref:`user guide <basics.dtypes>` for more usages.\nname : Hashable, default None\n    The name to give to the Series.\ncopy : bool, default False\n    Copy input data. Only affects Series or 1d ndarray input. See examples.\n\nNotes\n-----\nPlease reference the :ref:`User Guide <basics.series>` for more information.\n\nExamples\n--------\nConstructing Series from a dictionary with an Index specified\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['a', 'b', 'c'])\n>>> ser\na   1\nb   2\nc   3\ndtype: int64\n\nThe keys of the dictionary match with the Index values, hence the Index\nvalues have no effect.\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['x', 'y', 'z'])\n>>> ser\nx   NaN\ny   NaN\nz   NaN\ndtype: float64\n\nNote that the Index is first build with the keys from the dictionary.\nAfter this the Series is reindexed with the given Index values, hence we\nget all NaN as a result.\n\nConstructing Series from a list with `copy=False`.\n\n>>> r = [1, 2]\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\n[1, 2]\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `copy` of\nthe original data even though `copy=False`, so\nthe data is unchanged.\n\nConstructing Series from a 1d ndarray with `copy=False`.\n\n>>> r = np.array([1, 2])\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\narray([999,   2])\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `view` on\nthe original data, so\nthe data is changed as well.\n"
  },
  {
    "symbol": "Series.dt.isocalendar",
    "signature": "() -> 'DataFrame'",
    "doc": "Calculate year, week, and day according to the ISO 8601 standard.\n\nReturns\n-------\nDataFrame\n    With columns year, week and day.\n\nSee Also\n--------\nTimestamp.isocalendar : Function return a 3-tuple containing ISO year,\n    week number, and weekday for the given Timestamp object.\ndatetime.date.isocalendar : Return a named tuple object with\n    three components: year, week and weekday.\n\nExamples\n--------\n>>> ser = pd.to_datetime(pd.Series([\"2010-01-01\", pd.NaT]))\n>>> ser.dt.isocalendar()\n   year  week  day\n0  2009    53     5\n1  <NA>  <NA>  <NA>\n>>> ser.dt.isocalendar().week\n0      53\n1    <NA>\nName: week, dtype: UInt32"
  },
  {
    "symbol": "Series.dt.microsecond",
    "signature": "(attribute)",
    "doc": "\nOne-dimensional ndarray with axis labels (including time series).\n\nLabels need not be unique but must be a hashable type. The object\nsupports both integer- and label-based indexing and provides a host of\nmethods for performing operations involving the index. Statistical\nmethods from ndarray have been overridden to automatically exclude\nmissing data (currently represented as NaN).\n\nOperations between Series (+, -, /, \\*, \\*\\*) align values based on their\nassociated index values-- they need not be the same length. The result\nindex will be the sorted union of the two indexes.\n\nParameters\n----------\ndata : array-like, Iterable, dict, or scalar value\n    Contains data stored in Series. If data is a dict, argument order is\n    maintained.\nindex : array-like or Index (1d)\n    Values must be hashable and have the same length as `data`.\n    Non-unique index values are allowed. Will default to\n    RangeIndex (0, 1, 2, ..., n) if not provided. If data is dict-like\n    and index is None, then the keys in the data are used as the index. If the\n    index is not None, the resulting Series is reindexed with the index values.\ndtype : str, numpy.dtype, or ExtensionDtype, optional\n    Data type for the output Series. If not specified, this will be\n    inferred from `data`.\n    See the :ref:`user guide <basics.dtypes>` for more usages.\nname : Hashable, default None\n    The name to give to the Series.\ncopy : bool, default False\n    Copy input data. Only affects Series or 1d ndarray input. See examples.\n\nNotes\n-----\nPlease reference the :ref:`User Guide <basics.series>` for more information.\n\nExamples\n--------\nConstructing Series from a dictionary with an Index specified\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['a', 'b', 'c'])\n>>> ser\na   1\nb   2\nc   3\ndtype: int64\n\nThe keys of the dictionary match with the Index values, hence the Index\nvalues have no effect.\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['x', 'y', 'z'])\n>>> ser\nx   NaN\ny   NaN\nz   NaN\ndtype: float64\n\nNote that the Index is first build with the keys from the dictionary.\nAfter this the Series is reindexed with the given Index values, hence we\nget all NaN as a result.\n\nConstructing Series from a list with `copy=False`.\n\n>>> r = [1, 2]\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\n[1, 2]\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `copy` of\nthe original data even though `copy=False`, so\nthe data is unchanged.\n\nConstructing Series from a 1d ndarray with `copy=False`.\n\n>>> r = np.array([1, 2])\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\narray([999,   2])\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `view` on\nthe original data, so\nthe data is changed as well.\n"
  },
  {
    "symbol": "Series.dt.minute",
    "signature": "(attribute)",
    "doc": "\nOne-dimensional ndarray with axis labels (including time series).\n\nLabels need not be unique but must be a hashable type. The object\nsupports both integer- and label-based indexing and provides a host of\nmethods for performing operations involving the index. Statistical\nmethods from ndarray have been overridden to automatically exclude\nmissing data (currently represented as NaN).\n\nOperations between Series (+, -, /, \\*, \\*\\*) align values based on their\nassociated index values-- they need not be the same length. The result\nindex will be the sorted union of the two indexes.\n\nParameters\n----------\ndata : array-like, Iterable, dict, or scalar value\n    Contains data stored in Series. If data is a dict, argument order is\n    maintained.\nindex : array-like or Index (1d)\n    Values must be hashable and have the same length as `data`.\n    Non-unique index values are allowed. Will default to\n    RangeIndex (0, 1, 2, ..., n) if not provided. If data is dict-like\n    and index is None, then the keys in the data are used as the index. If the\n    index is not None, the resulting Series is reindexed with the index values.\ndtype : str, numpy.dtype, or ExtensionDtype, optional\n    Data type for the output Series. If not specified, this will be\n    inferred from `data`.\n    See the :ref:`user guide <basics.dtypes>` for more usages.\nname : Hashable, default None\n    The name to give to the Series.\ncopy : bool, default False\n    Copy input data. Only affects Series or 1d ndarray input. See examples.\n\nNotes\n-----\nPlease reference the :ref:`User Guide <basics.series>` for more information.\n\nExamples\n--------\nConstructing Series from a dictionary with an Index specified\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['a', 'b', 'c'])\n>>> ser\na   1\nb   2\nc   3\ndtype: int64\n\nThe keys of the dictionary match with the Index values, hence the Index\nvalues have no effect.\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['x', 'y', 'z'])\n>>> ser\nx   NaN\ny   NaN\nz   NaN\ndtype: float64\n\nNote that the Index is first build with the keys from the dictionary.\nAfter this the Series is reindexed with the given Index values, hence we\nget all NaN as a result.\n\nConstructing Series from a list with `copy=False`.\n\n>>> r = [1, 2]\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\n[1, 2]\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `copy` of\nthe original data even though `copy=False`, so\nthe data is unchanged.\n\nConstructing Series from a 1d ndarray with `copy=False`.\n\n>>> r = np.array([1, 2])\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\narray([999,   2])\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `view` on\nthe original data, so\nthe data is changed as well.\n"
  },
  {
    "symbol": "Series.dt.month",
    "signature": "(attribute)",
    "doc": "\nOne-dimensional ndarray with axis labels (including time series).\n\nLabels need not be unique but must be a hashable type. The object\nsupports both integer- and label-based indexing and provides a host of\nmethods for performing operations involving the index. Statistical\nmethods from ndarray have been overridden to automatically exclude\nmissing data (currently represented as NaN).\n\nOperations between Series (+, -, /, \\*, \\*\\*) align values based on their\nassociated index values-- they need not be the same length. The result\nindex will be the sorted union of the two indexes.\n\nParameters\n----------\ndata : array-like, Iterable, dict, or scalar value\n    Contains data stored in Series. If data is a dict, argument order is\n    maintained.\nindex : array-like or Index (1d)\n    Values must be hashable and have the same length as `data`.\n    Non-unique index values are allowed. Will default to\n    RangeIndex (0, 1, 2, ..., n) if not provided. If data is dict-like\n    and index is None, then the keys in the data are used as the index. If the\n    index is not None, the resulting Series is reindexed with the index values.\ndtype : str, numpy.dtype, or ExtensionDtype, optional\n    Data type for the output Series. If not specified, this will be\n    inferred from `data`.\n    See the :ref:`user guide <basics.dtypes>` for more usages.\nname : Hashable, default None\n    The name to give to the Series.\ncopy : bool, default False\n    Copy input data. Only affects Series or 1d ndarray input. See examples.\n\nNotes\n-----\nPlease reference the :ref:`User Guide <basics.series>` for more information.\n\nExamples\n--------\nConstructing Series from a dictionary with an Index specified\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['a', 'b', 'c'])\n>>> ser\na   1\nb   2\nc   3\ndtype: int64\n\nThe keys of the dictionary match with the Index values, hence the Index\nvalues have no effect.\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['x', 'y', 'z'])\n>>> ser\nx   NaN\ny   NaN\nz   NaN\ndtype: float64\n\nNote that the Index is first build with the keys from the dictionary.\nAfter this the Series is reindexed with the given Index values, hence we\nget all NaN as a result.\n\nConstructing Series from a list with `copy=False`.\n\n>>> r = [1, 2]\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\n[1, 2]\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `copy` of\nthe original data even though `copy=False`, so\nthe data is unchanged.\n\nConstructing Series from a 1d ndarray with `copy=False`.\n\n>>> r = np.array([1, 2])\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\narray([999,   2])\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `view` on\nthe original data, so\nthe data is changed as well.\n"
  },
  {
    "symbol": "Series.dt.month_name",
    "signature": "(*args, **kwargs)",
    "doc": "Return the month names with specified locale.\n\nParameters\n----------\nlocale : str, optional\n    Locale determining the language in which to return the month name.\n    Default is English locale (``'en_US.utf8'``). Use the command\n    ``locale -a`` on your terminal on Unix systems to find your locale\n    language code.\n\nReturns\n-------\nSeries or Index\n    Series or Index of month names.\n\nExamples\n--------\n>>> s = pd.Series(pd.date_range(start='2018-01', freq='ME', periods=3))\n>>> s\n0   2018-01-31\n1   2018-02-28\n2   2018-03-31\ndtype: datetime64[ns]\n>>> s.dt.month_name()\n0     January\n1    February\n2       March\ndtype: object\n\n>>> idx = pd.date_range(start='2018-01', freq='ME', periods=3)\n>>> idx\nDatetimeIndex(['2018-01-31', '2018-02-28', '2018-03-31'],\n              dtype='datetime64[ns]', freq='ME')\n>>> idx.month_name()\nIndex(['January', 'February', 'March'], dtype='object')\n\nUsing the ``locale`` parameter you can set a different locale language,\nfor example: ``idx.month_name(locale='pt_BR.utf8')`` will return month\nnames in Brazilian Portuguese language.\n\n>>> idx = pd.date_range(start='2018-01', freq='ME', periods=3)\n>>> idx\nDatetimeIndex(['2018-01-31', '2018-02-28', '2018-03-31'],\n              dtype='datetime64[ns]', freq='ME')\n>>> idx.month_name(locale='pt_BR.utf8')  # doctest: +SKIP\nIndex(['Janeiro', 'Fevereiro', 'Março'], dtype='object')"
  },
  {
    "symbol": "Series.dt.nanosecond",
    "signature": "(attribute)",
    "doc": "\nOne-dimensional ndarray with axis labels (including time series).\n\nLabels need not be unique but must be a hashable type. The object\nsupports both integer- and label-based indexing and provides a host of\nmethods for performing operations involving the index. Statistical\nmethods from ndarray have been overridden to automatically exclude\nmissing data (currently represented as NaN).\n\nOperations between Series (+, -, /, \\*, \\*\\*) align values based on their\nassociated index values-- they need not be the same length. The result\nindex will be the sorted union of the two indexes.\n\nParameters\n----------\ndata : array-like, Iterable, dict, or scalar value\n    Contains data stored in Series. If data is a dict, argument order is\n    maintained.\nindex : array-like or Index (1d)\n    Values must be hashable and have the same length as `data`.\n    Non-unique index values are allowed. Will default to\n    RangeIndex (0, 1, 2, ..., n) if not provided. If data is dict-like\n    and index is None, then the keys in the data are used as the index. If the\n    index is not None, the resulting Series is reindexed with the index values.\ndtype : str, numpy.dtype, or ExtensionDtype, optional\n    Data type for the output Series. If not specified, this will be\n    inferred from `data`.\n    See the :ref:`user guide <basics.dtypes>` for more usages.\nname : Hashable, default None\n    The name to give to the Series.\ncopy : bool, default False\n    Copy input data. Only affects Series or 1d ndarray input. See examples.\n\nNotes\n-----\nPlease reference the :ref:`User Guide <basics.series>` for more information.\n\nExamples\n--------\nConstructing Series from a dictionary with an Index specified\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['a', 'b', 'c'])\n>>> ser\na   1\nb   2\nc   3\ndtype: int64\n\nThe keys of the dictionary match with the Index values, hence the Index\nvalues have no effect.\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['x', 'y', 'z'])\n>>> ser\nx   NaN\ny   NaN\nz   NaN\ndtype: float64\n\nNote that the Index is first build with the keys from the dictionary.\nAfter this the Series is reindexed with the given Index values, hence we\nget all NaN as a result.\n\nConstructing Series from a list with `copy=False`.\n\n>>> r = [1, 2]\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\n[1, 2]\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `copy` of\nthe original data even though `copy=False`, so\nthe data is unchanged.\n\nConstructing Series from a 1d ndarray with `copy=False`.\n\n>>> r = np.array([1, 2])\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\narray([999,   2])\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `view` on\nthe original data, so\nthe data is changed as well.\n"
  },
  {
    "symbol": "Series.dt.normalize",
    "signature": "(*args, **kwargs)",
    "doc": "Convert times to midnight.\n\nThe time component of the date-time is converted to midnight i.e.\n00:00:00. This is useful in cases, when the time does not matter.\nLength is unaltered. The timezones are unaffected.\n\nThis method is available on Series with datetime values under\nthe ``.dt`` accessor, and directly on Datetime Array/Index.\n\nReturns\n-------\nDatetimeArray, DatetimeIndex or Series\n    The same type as the original data. Series will have the same\n    name and index. DatetimeIndex will have the same name.\n\nSee Also\n--------\nfloor : Floor the datetimes to the specified freq.\nceil : Ceil the datetimes to the specified freq.\nround : Round the datetimes to the specified freq.\n\nExamples\n--------\n>>> idx = pd.date_range(start='2014-08-01 10:00', freq='h',\n...                     periods=3, tz='Asia/Calcutta')\n>>> idx\nDatetimeIndex(['2014-08-01 10:00:00+05:30',\n               '2014-08-01 11:00:00+05:30',\n               '2014-08-01 12:00:00+05:30'],\n                dtype='datetime64[ns, Asia/Calcutta]', freq='h')\n>>> idx.normalize()\nDatetimeIndex(['2014-08-01 00:00:00+05:30',\n               '2014-08-01 00:00:00+05:30',\n               '2014-08-01 00:00:00+05:30'],\n               dtype='datetime64[ns, Asia/Calcutta]', freq=None)"
  },
  {
    "symbol": "Series.dt.quarter",
    "signature": "(attribute)",
    "doc": "\nOne-dimensional ndarray with axis labels (including time series).\n\nLabels need not be unique but must be a hashable type. The object\nsupports both integer- and label-based indexing and provides a host of\nmethods for performing operations involving the index. Statistical\nmethods from ndarray have been overridden to automatically exclude\nmissing data (currently represented as NaN).\n\nOperations between Series (+, -, /, \\*, \\*\\*) align values based on their\nassociated index values-- they need not be the same length. The result\nindex will be the sorted union of the two indexes.\n\nParameters\n----------\ndata : array-like, Iterable, dict, or scalar value\n    Contains data stored in Series. If data is a dict, argument order is\n    maintained.\nindex : array-like or Index (1d)\n    Values must be hashable and have the same length as `data`.\n    Non-unique index values are allowed. Will default to\n    RangeIndex (0, 1, 2, ..., n) if not provided. If data is dict-like\n    and index is None, then the keys in the data are used as the index. If the\n    index is not None, the resulting Series is reindexed with the index values.\ndtype : str, numpy.dtype, or ExtensionDtype, optional\n    Data type for the output Series. If not specified, this will be\n    inferred from `data`.\n    See the :ref:`user guide <basics.dtypes>` for more usages.\nname : Hashable, default None\n    The name to give to the Series.\ncopy : bool, default False\n    Copy input data. Only affects Series or 1d ndarray input. See examples.\n\nNotes\n-----\nPlease reference the :ref:`User Guide <basics.series>` for more information.\n\nExamples\n--------\nConstructing Series from a dictionary with an Index specified\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['a', 'b', 'c'])\n>>> ser\na   1\nb   2\nc   3\ndtype: int64\n\nThe keys of the dictionary match with the Index values, hence the Index\nvalues have no effect.\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['x', 'y', 'z'])\n>>> ser\nx   NaN\ny   NaN\nz   NaN\ndtype: float64\n\nNote that the Index is first build with the keys from the dictionary.\nAfter this the Series is reindexed with the given Index values, hence we\nget all NaN as a result.\n\nConstructing Series from a list with `copy=False`.\n\n>>> r = [1, 2]\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\n[1, 2]\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `copy` of\nthe original data even though `copy=False`, so\nthe data is unchanged.\n\nConstructing Series from a 1d ndarray with `copy=False`.\n\n>>> r = np.array([1, 2])\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\narray([999,   2])\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `view` on\nthe original data, so\nthe data is changed as well.\n"
  },
  {
    "symbol": "Series.dt.round",
    "signature": "(*args, **kwargs)",
    "doc": "Perform round operation on the data to the specified `freq`.\n\nParameters\n----------\nfreq : str or Offset\n    The frequency level to round the index to. Must be a fixed\n    frequency like 'S' (second) not 'ME' (month end). See\n    :ref:`frequency aliases <timeseries.offset_aliases>` for\n    a list of possible `freq` values.\nambiguous : 'infer', bool-ndarray, 'NaT', default 'raise'\n    Only relevant for DatetimeIndex:\n\n    - 'infer' will attempt to infer fall dst-transition hours based on\n      order\n    - bool-ndarray where True signifies a DST time, False designates\n      a non-DST time (note that this flag is only applicable for\n      ambiguous times)\n    - 'NaT' will return NaT where there are ambiguous times\n    - 'raise' will raise an AmbiguousTimeError if there are ambiguous\n      times.\n\nnonexistent : 'shift_forward', 'shift_backward', 'NaT', timedelta, default 'raise'\n    A nonexistent time does not exist in a particular timezone\n    where clocks moved forward due to DST.\n\n    - 'shift_forward' will shift the nonexistent time forward to the\n      closest existing time\n    - 'shift_backward' will shift the nonexistent time backward to the\n      closest existing time\n    - 'NaT' will return NaT where there are nonexistent times\n    - timedelta objects will shift nonexistent times by the timedelta\n    - 'raise' will raise an NonExistentTimeError if there are\n      nonexistent times.\n\nReturns\n-------\nDatetimeIndex, TimedeltaIndex, or Series\n    Index of the same type for a DatetimeIndex or TimedeltaIndex,\n    or a Series with the same index for a Series.\n\nRaises\n------\nValueError if the `freq` cannot be converted.\n\nNotes\n-----\nIf the timestamps have a timezone, rounding will take place relative to the\nlocal (\"wall\") time and re-localized to the same timezone. When rounding\nnear daylight savings time, use ``nonexistent`` and ``ambiguous`` to\ncontrol the re-localization behavior.\n\nExamples\n--------\n**DatetimeIndex**\n\n>>> rng = pd.date_range('1/1/2018 11:59:00', periods=3, freq='min')\n>>> rng\nDatetimeIndex(['2018-01-01 11:59:00', '2018-01-01 12:00:00',\n               '2018-01-01 12:01:00'],\n              dtype='datetime64[ns]', freq='min')\n>>> rng.round('h')\nDatetimeIndex(['2018-01-01 12:00:00', '2018-01-01 12:00:00',\n               '2018-01-01 12:00:00'],\n              dtype='datetime64[ns]', freq=None)\n\n**Series**\n\n>>> pd.Series(rng).dt.round(\"h\")\n0   2018-01-01 12:00:00\n1   2018-01-01 12:00:00\n2   2018-01-01 12:00:00\ndtype: datetime64[ns]\n\nWhen rounding near a daylight savings time transition, use ``ambiguous`` or\n``nonexistent`` to control how the timestamp should be re-localized.\n\n>>> rng_tz = pd.DatetimeIndex([\"2021-10-31 03:30:00\"], tz=\"Europe/Amsterdam\")\n\n>>> rng_tz.floor(\"2h\", ambiguous=False)\nDatetimeIndex(['2021-10-31 02:00:00+01:00'],\n              dtype='datetime64[ns, Europe/Amsterdam]', freq=None)\n\n>>> rng_tz.floor(\"2h\", ambiguous=True)\nDatetimeIndex(['2021-10-31 02:00:00+02:00'],\n              dtype='datetime64[ns, Europe/Amsterdam]', freq=None)"
  },
  {
    "symbol": "Series.dt.second",
    "signature": "(attribute)",
    "doc": "\nOne-dimensional ndarray with axis labels (including time series).\n\nLabels need not be unique but must be a hashable type. The object\nsupports both integer- and label-based indexing and provides a host of\nmethods for performing operations involving the index. Statistical\nmethods from ndarray have been overridden to automatically exclude\nmissing data (currently represented as NaN).\n\nOperations between Series (+, -, /, \\*, \\*\\*) align values based on their\nassociated index values-- they need not be the same length. The result\nindex will be the sorted union of the two indexes.\n\nParameters\n----------\ndata : array-like, Iterable, dict, or scalar value\n    Contains data stored in Series. If data is a dict, argument order is\n    maintained.\nindex : array-like or Index (1d)\n    Values must be hashable and have the same length as `data`.\n    Non-unique index values are allowed. Will default to\n    RangeIndex (0, 1, 2, ..., n) if not provided. If data is dict-like\n    and index is None, then the keys in the data are used as the index. If the\n    index is not None, the resulting Series is reindexed with the index values.\ndtype : str, numpy.dtype, or ExtensionDtype, optional\n    Data type for the output Series. If not specified, this will be\n    inferred from `data`.\n    See the :ref:`user guide <basics.dtypes>` for more usages.\nname : Hashable, default None\n    The name to give to the Series.\ncopy : bool, default False\n    Copy input data. Only affects Series or 1d ndarray input. See examples.\n\nNotes\n-----\nPlease reference the :ref:`User Guide <basics.series>` for more information.\n\nExamples\n--------\nConstructing Series from a dictionary with an Index specified\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['a', 'b', 'c'])\n>>> ser\na   1\nb   2\nc   3\ndtype: int64\n\nThe keys of the dictionary match with the Index values, hence the Index\nvalues have no effect.\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['x', 'y', 'z'])\n>>> ser\nx   NaN\ny   NaN\nz   NaN\ndtype: float64\n\nNote that the Index is first build with the keys from the dictionary.\nAfter this the Series is reindexed with the given Index values, hence we\nget all NaN as a result.\n\nConstructing Series from a list with `copy=False`.\n\n>>> r = [1, 2]\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\n[1, 2]\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `copy` of\nthe original data even though `copy=False`, so\nthe data is unchanged.\n\nConstructing Series from a 1d ndarray with `copy=False`.\n\n>>> r = np.array([1, 2])\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\narray([999,   2])\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `view` on\nthe original data, so\nthe data is changed as well.\n"
  },
  {
    "symbol": "Series.dt.strftime",
    "signature": "(*args, **kwargs)",
    "doc": "Convert to Index using specified date_format.\n\nReturn an Index of formatted strings specified by date_format, which\nsupports the same string format as the python standard library. Details\nof the string format can be found in `python string format\ndoc <https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior>`__.\n\nFormats supported by the C `strftime` API but not by the python string format\ndoc (such as `\"%R\"`, `\"%r\"`) are not officially supported and should be\npreferably replaced with their supported equivalents (such as `\"%H:%M\"`,\n`\"%I:%M:%S %p\"`).\n\nNote that `PeriodIndex` support additional directives, detailed in\n`Period.strftime`.\n\nParameters\n----------\ndate_format : str\n    Date format string (e.g. \"%Y-%m-%d\").\n\nReturns\n-------\nndarray[object]\n    NumPy ndarray of formatted strings.\n\nSee Also\n--------\nto_datetime : Convert the given argument to datetime.\nDatetimeIndex.normalize : Return DatetimeIndex with times to midnight.\nDatetimeIndex.round : Round the DatetimeIndex to the specified freq.\nDatetimeIndex.floor : Floor the DatetimeIndex to the specified freq.\nTimestamp.strftime : Format a single Timestamp.\nPeriod.strftime : Format a single Period.\n\nExamples\n--------\n>>> rng = pd.date_range(pd.Timestamp(\"2018-03-10 09:00\"),\n...                     periods=3, freq='s')\n>>> rng.strftime('%B %d, %Y, %r')\nIndex(['March 10, 2018, 09:00:00 AM', 'March 10, 2018, 09:00:01 AM',\n       'March 10, 2018, 09:00:02 AM'],\n      dtype='object')"
  },
  {
    "symbol": "Series.dt.time",
    "signature": "(attribute)",
    "doc": "\nOne-dimensional ndarray with axis labels (including time series).\n\nLabels need not be unique but must be a hashable type. The object\nsupports both integer- and label-based indexing and provides a host of\nmethods for performing operations involving the index. Statistical\nmethods from ndarray have been overridden to automatically exclude\nmissing data (currently represented as NaN).\n\nOperations between Series (+, -, /, \\*, \\*\\*) align values based on their\nassociated index values-- they need not be the same length. The result\nindex will be the sorted union of the two indexes.\n\nParameters\n----------\ndata : array-like, Iterable, dict, or scalar value\n    Contains data stored in Series. If data is a dict, argument order is\n    maintained.\nindex : array-like or Index (1d)\n    Values must be hashable and have the same length as `data`.\n    Non-unique index values are allowed. Will default to\n    RangeIndex (0, 1, 2, ..., n) if not provided. If data is dict-like\n    and index is None, then the keys in the data are used as the index. If the\n    index is not None, the resulting Series is reindexed with the index values.\ndtype : str, numpy.dtype, or ExtensionDtype, optional\n    Data type for the output Series. If not specified, this will be\n    inferred from `data`.\n    See the :ref:`user guide <basics.dtypes>` for more usages.\nname : Hashable, default None\n    The name to give to the Series.\ncopy : bool, default False\n    Copy input data. Only affects Series or 1d ndarray input. See examples.\n\nNotes\n-----\nPlease reference the :ref:`User Guide <basics.series>` for more information.\n\nExamples\n--------\nConstructing Series from a dictionary with an Index specified\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['a', 'b', 'c'])\n>>> ser\na   1\nb   2\nc   3\ndtype: int64\n\nThe keys of the dictionary match with the Index values, hence the Index\nvalues have no effect.\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['x', 'y', 'z'])\n>>> ser\nx   NaN\ny   NaN\nz   NaN\ndtype: float64\n\nNote that the Index is first build with the keys from the dictionary.\nAfter this the Series is reindexed with the given Index values, hence we\nget all NaN as a result.\n\nConstructing Series from a list with `copy=False`.\n\n>>> r = [1, 2]\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\n[1, 2]\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `copy` of\nthe original data even though `copy=False`, so\nthe data is unchanged.\n\nConstructing Series from a 1d ndarray with `copy=False`.\n\n>>> r = np.array([1, 2])\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\narray([999,   2])\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `view` on\nthe original data, so\nthe data is changed as well.\n"
  },
  {
    "symbol": "Series.dt.timetz",
    "signature": "(attribute)",
    "doc": "\nOne-dimensional ndarray with axis labels (including time series).\n\nLabels need not be unique but must be a hashable type. The object\nsupports both integer- and label-based indexing and provides a host of\nmethods for performing operations involving the index. Statistical\nmethods from ndarray have been overridden to automatically exclude\nmissing data (currently represented as NaN).\n\nOperations between Series (+, -, /, \\*, \\*\\*) align values based on their\nassociated index values-- they need not be the same length. The result\nindex will be the sorted union of the two indexes.\n\nParameters\n----------\ndata : array-like, Iterable, dict, or scalar value\n    Contains data stored in Series. If data is a dict, argument order is\n    maintained.\nindex : array-like or Index (1d)\n    Values must be hashable and have the same length as `data`.\n    Non-unique index values are allowed. Will default to\n    RangeIndex (0, 1, 2, ..., n) if not provided. If data is dict-like\n    and index is None, then the keys in the data are used as the index. If the\n    index is not None, the resulting Series is reindexed with the index values.\ndtype : str, numpy.dtype, or ExtensionDtype, optional\n    Data type for the output Series. If not specified, this will be\n    inferred from `data`.\n    See the :ref:`user guide <basics.dtypes>` for more usages.\nname : Hashable, default None\n    The name to give to the Series.\ncopy : bool, default False\n    Copy input data. Only affects Series or 1d ndarray input. See examples.\n\nNotes\n-----\nPlease reference the :ref:`User Guide <basics.series>` for more information.\n\nExamples\n--------\nConstructing Series from a dictionary with an Index specified\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['a', 'b', 'c'])\n>>> ser\na   1\nb   2\nc   3\ndtype: int64\n\nThe keys of the dictionary match with the Index values, hence the Index\nvalues have no effect.\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['x', 'y', 'z'])\n>>> ser\nx   NaN\ny   NaN\nz   NaN\ndtype: float64\n\nNote that the Index is first build with the keys from the dictionary.\nAfter this the Series is reindexed with the given Index values, hence we\nget all NaN as a result.\n\nConstructing Series from a list with `copy=False`.\n\n>>> r = [1, 2]\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\n[1, 2]\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `copy` of\nthe original data even though `copy=False`, so\nthe data is unchanged.\n\nConstructing Series from a 1d ndarray with `copy=False`.\n\n>>> r = np.array([1, 2])\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\narray([999,   2])\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `view` on\nthe original data, so\nthe data is changed as well.\n"
  },
  {
    "symbol": "Series.dt.to_period",
    "signature": "(*args, **kwargs)",
    "doc": "Cast to PeriodArray/PeriodIndex at a particular frequency.\n\nConverts DatetimeArray/Index to PeriodArray/PeriodIndex.\n\nParameters\n----------\nfreq : str or Period, optional\n    One of pandas' :ref:`period aliases <timeseries.period_aliases>`\n    or an Period object. Will be inferred by default.\n\nReturns\n-------\nPeriodArray/PeriodIndex\n\nRaises\n------\nValueError\n    When converting a DatetimeArray/Index with non-regular values,\n    so that a frequency cannot be inferred.\n\nSee Also\n--------\nPeriodIndex: Immutable ndarray holding ordinal values.\nDatetimeIndex.to_pydatetime: Return DatetimeIndex as object.\n\nExamples\n--------\n>>> df = pd.DataFrame({\"y\": [1, 2, 3]},\n...                   index=pd.to_datetime([\"2000-03-31 00:00:00\",\n...                                         \"2000-05-31 00:00:00\",\n...                                         \"2000-08-31 00:00:00\"]))\n>>> df.index.to_period(\"M\")\nPeriodIndex(['2000-03', '2000-05', '2000-08'],\n            dtype='period[M]')\n\nInfer the daily frequency\n\n>>> idx = pd.date_range(\"2017-01-01\", periods=2)\n>>> idx.to_period()\nPeriodIndex(['2017-01-01', '2017-01-02'],\n            dtype='period[D]')"
  },
  {
    "symbol": "Series.dt.to_pydatetime",
    "signature": "() -> 'np.ndarray'",
    "doc": "Return the data as an array of :class:`datetime.datetime` objects.\n\n.. deprecated:: 2.1.0\n\n    The current behavior of dt.to_pydatetime is deprecated.\n    In a future version this will return a Series containing python\n    datetime objects instead of a ndarray.\n\nTimezone information is retained if present.\n\n.. warning::\n\n   Python's datetime uses microsecond resolution, which is lower than\n   pandas (nanosecond). The values are truncated.\n\nReturns\n-------\nnumpy.ndarray\n    Object dtype array containing native Python datetime objects.\n\nSee Also\n--------\ndatetime.datetime : Standard library value for a datetime.\n\nExamples\n--------\n>>> s = pd.Series(pd.date_range('20180310', periods=2))\n>>> s\n0   2018-03-10\n1   2018-03-11\ndtype: datetime64[ns]\n\n>>> s.dt.to_pydatetime()\narray([datetime.datetime(2018, 3, 10, 0, 0),\n       datetime.datetime(2018, 3, 11, 0, 0)], dtype=object)\n\npandas' nanosecond precision is truncated to microseconds.\n\n>>> s = pd.Series(pd.date_range('20180310', periods=2, freq='ns'))\n>>> s\n0   2018-03-10 00:00:00.000000000\n1   2018-03-10 00:00:00.000000001\ndtype: datetime64[ns]\n\n>>> s.dt.to_pydatetime()\narray([datetime.datetime(2018, 3, 10, 0, 0),\n       datetime.datetime(2018, 3, 10, 0, 0)], dtype=object)"
  },
  {
    "symbol": "Series.dt.tz",
    "signature": "(attribute)",
    "doc": "The type of the None singleton."
  },
  {
    "symbol": "Series.dt.tz_convert",
    "signature": "(*args, **kwargs)",
    "doc": "Convert tz-aware Datetime Array/Index from one time zone to another.\n\nParameters\n----------\ntz : str, pytz.timezone, dateutil.tz.tzfile, datetime.tzinfo or None\n    Time zone for time. Corresponding timestamps would be converted\n    to this time zone of the Datetime Array/Index. A `tz` of None will\n    convert to UTC and remove the timezone information.\n\nReturns\n-------\nArray or Index\n\nRaises\n------\nTypeError\n    If Datetime Array/Index is tz-naive.\n\nSee Also\n--------\nDatetimeIndex.tz : A timezone that has a variable offset from UTC.\nDatetimeIndex.tz_localize : Localize tz-naive DatetimeIndex to a\n    given time zone, or remove timezone from a tz-aware DatetimeIndex.\n\nExamples\n--------\nWith the `tz` parameter, we can change the DatetimeIndex\nto other time zones:\n\n>>> dti = pd.date_range(start='2014-08-01 09:00',\n...                     freq='h', periods=3, tz='Europe/Berlin')\n\n>>> dti\nDatetimeIndex(['2014-08-01 09:00:00+02:00',\n               '2014-08-01 10:00:00+02:00',\n               '2014-08-01 11:00:00+02:00'],\n              dtype='datetime64[ns, Europe/Berlin]', freq='h')\n\n>>> dti.tz_convert('US/Central')\nDatetimeIndex(['2014-08-01 02:00:00-05:00',\n               '2014-08-01 03:00:00-05:00',\n               '2014-08-01 04:00:00-05:00'],\n              dtype='datetime64[ns, US/Central]', freq='h')\n\nWith the ``tz=None``, we can remove the timezone (after converting\nto UTC if necessary):\n\n>>> dti = pd.date_range(start='2014-08-01 09:00', freq='h',\n...                     periods=3, tz='Europe/Berlin')\n\n>>> dti\nDatetimeIndex(['2014-08-01 09:00:00+02:00',\n               '2014-08-01 10:00:00+02:00',\n               '2014-08-01 11:00:00+02:00'],\n                dtype='datetime64[ns, Europe/Berlin]', freq='h')\n\n>>> dti.tz_convert(None)\nDatetimeIndex(['2014-08-01 07:00:00',\n               '2014-08-01 08:00:00',\n               '2014-08-01 09:00:00'],\n                dtype='datetime64[ns]', freq='h')"
  },
  {
    "symbol": "Series.dt.tz_localize",
    "signature": "(*args, **kwargs)",
    "doc": "Localize tz-naive Datetime Array/Index to tz-aware Datetime Array/Index.\n\nThis method takes a time zone (tz) naive Datetime Array/Index object\nand makes this time zone aware. It does not move the time to another\ntime zone.\n\nThis method can also be used to do the inverse -- to create a time\nzone unaware object from an aware object. To that end, pass `tz=None`.\n\nParameters\n----------\ntz : str, pytz.timezone, dateutil.tz.tzfile, datetime.tzinfo or None\n    Time zone to convert timestamps to. Passing ``None`` will\n    remove the time zone information preserving local time.\nambiguous : 'infer', 'NaT', bool array, default 'raise'\n    When clocks moved backward due to DST, ambiguous times may arise.\n    For example in Central European Time (UTC+01), when going from\n    03:00 DST to 02:00 non-DST, 02:30:00 local time occurs both at\n    00:30:00 UTC and at 01:30:00 UTC. In such a situation, the\n    `ambiguous` parameter dictates how ambiguous times should be\n    handled.\n\n    - 'infer' will attempt to infer fall dst-transition hours based on\n      order\n    - bool-ndarray where True signifies a DST time, False signifies a\n      non-DST time (note that this flag is only applicable for\n      ambiguous times)\n    - 'NaT' will return NaT where there are ambiguous times\n    - 'raise' will raise an AmbiguousTimeError if there are ambiguous\n      times.\n\nnonexistent : 'shift_forward', 'shift_backward, 'NaT', timedelta, default 'raise'\n    A nonexistent time does not exist in a particular timezone\n    where clocks moved forward due to DST.\n\n    - 'shift_forward' will shift the nonexistent time forward to the\n      closest existing time\n    - 'shift_backward' will shift the nonexistent time backward to the\n      closest existing time\n    - 'NaT' will return NaT where there are nonexistent times\n    - timedelta objects will shift nonexistent times by the timedelta\n    - 'raise' will raise an NonExistentTimeError if there are\n      nonexistent times.\n\nReturns\n-------\nSame type as self\n    Array/Index converted to the specified time zone.\n\nRaises\n------\nTypeError\n    If the Datetime Array/Index is tz-aware and tz is not None.\n\nSee Also\n--------\nDatetimeIndex.tz_convert : Convert tz-aware DatetimeIndex from\n    one time zone to another.\n\nExamples\n--------\n>>> tz_naive = pd.date_range('2018-03-01 09:00', periods=3)\n>>> tz_naive\nDatetimeIndex(['2018-03-01 09:00:00', '2018-03-02 09:00:00',\n               '2018-03-03 09:00:00'],\n              dtype='datetime64[ns]', freq='D')\n\nLocalize DatetimeIndex in US/Eastern time zone:\n\n>>> tz_aware = tz_naive.tz_localize(tz='US/Eastern')\n>>> tz_aware\nDatetimeIndex(['2018-03-01 09:00:00-05:00',\n               '2018-03-02 09:00:00-05:00',\n               '2018-03-03 09:00:00-05:00'],\n              dtype='datetime64[ns, US/Eastern]', freq=None)\n\nWith the ``tz=None``, we can remove the time zone information\nwhile keeping the local time (not converted to UTC):\n\n>>> tz_aware.tz_localize(None)\nDatetimeIndex(['2018-03-01 09:00:00', '2018-03-02 09:00:00',\n               '2018-03-03 09:00:00'],\n              dtype='datetime64[ns]', freq=None)\n\nBe careful with DST changes. When there is sequential data, pandas can\ninfer the DST time:\n\n>>> s = pd.to_datetime(pd.Series(['2018-10-28 01:30:00',\n...                               '2018-10-28 02:00:00',\n...                               '2018-10-28 02:30:00',\n...                               '2018-10-28 02:00:00',\n...                               '2018-10-28 02:30:00',\n...                               '2018-10-28 03:00:00',\n...                               '2018-10-28 03:30:00']))\n>>> s.dt.tz_localize('CET', ambiguous='infer')\n0   2018-10-28 01:30:00+02:00\n1   2018-10-28 02:00:00+02:00\n2   2018-10-28 02:30:00+02:00\n3   2018-10-28 02:00:00+01:00\n4   2018-10-28 02:30:00+01:00\n5   2018-10-28 03:00:00+01:00\n6   2018-10-28 03:30:00+01:00\ndtype: datetime64[ns, CET]\n\nIn some cases, inferring the DST is impossible. In such cases, you can\npass an ndarray to the ambiguous parameter to set the DST explicitly\n\n>>> s = pd.to_datetime(pd.Series(['2018-10-28 01:20:00',\n...                               '2018-10-28 02:36:00',\n...                               '2018-10-28 03:46:00']))\n>>> s.dt.tz_localize('CET', ambiguous=np.array([True, True, False]))\n0   2018-10-28 01:20:00+02:00\n1   2018-10-28 02:36:00+02:00\n2   2018-10-28 03:46:00+01:00\ndtype: datetime64[ns, CET]\n\nIf the DST transition causes nonexistent times, you can shift these\ndates forward or backwards with a timedelta object or `'shift_forward'`\nor `'shift_backwards'`.\n\n>>> s = pd.to_datetime(pd.Series(['2015-03-29 02:30:00',\n...                               '2015-03-29 03:30:00']))\n>>> s.dt.tz_localize('Europe/Warsaw', nonexistent='shift_forward')\n0   2015-03-29 03:00:00+02:00\n1   2015-03-29 03:30:00+02:00\ndtype: datetime64[ns, Europe/Warsaw]\n\n>>> s.dt.tz_localize('Europe/Warsaw', nonexistent='shift_backward')\n0   2015-03-29 01:59:59.999999999+01:00\n1   2015-03-29 03:30:00+02:00\ndtype: datetime64[ns, Europe/Warsaw]\n\n>>> s.dt.tz_localize('Europe/Warsaw', nonexistent=pd.Timedelta('1h'))\n0   2015-03-29 03:30:00+02:00\n1   2015-03-29 03:30:00+02:00\ndtype: datetime64[ns, Europe/Warsaw]"
  },
  {
    "symbol": "Series.dt.unit",
    "signature": "(attribute)",
    "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to 'utf-8'.\nerrors defaults to 'strict'."
  },
  {
    "symbol": "Series.dt.weekday",
    "signature": "(attribute)",
    "doc": "\nOne-dimensional ndarray with axis labels (including time series).\n\nLabels need not be unique but must be a hashable type. The object\nsupports both integer- and label-based indexing and provides a host of\nmethods for performing operations involving the index. Statistical\nmethods from ndarray have been overridden to automatically exclude\nmissing data (currently represented as NaN).\n\nOperations between Series (+, -, /, \\*, \\*\\*) align values based on their\nassociated index values-- they need not be the same length. The result\nindex will be the sorted union of the two indexes.\n\nParameters\n----------\ndata : array-like, Iterable, dict, or scalar value\n    Contains data stored in Series. If data is a dict, argument order is\n    maintained.\nindex : array-like or Index (1d)\n    Values must be hashable and have the same length as `data`.\n    Non-unique index values are allowed. Will default to\n    RangeIndex (0, 1, 2, ..., n) if not provided. If data is dict-like\n    and index is None, then the keys in the data are used as the index. If the\n    index is not None, the resulting Series is reindexed with the index values.\ndtype : str, numpy.dtype, or ExtensionDtype, optional\n    Data type for the output Series. If not specified, this will be\n    inferred from `data`.\n    See the :ref:`user guide <basics.dtypes>` for more usages.\nname : Hashable, default None\n    The name to give to the Series.\ncopy : bool, default False\n    Copy input data. Only affects Series or 1d ndarray input. See examples.\n\nNotes\n-----\nPlease reference the :ref:`User Guide <basics.series>` for more information.\n\nExamples\n--------\nConstructing Series from a dictionary with an Index specified\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['a', 'b', 'c'])\n>>> ser\na   1\nb   2\nc   3\ndtype: int64\n\nThe keys of the dictionary match with the Index values, hence the Index\nvalues have no effect.\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['x', 'y', 'z'])\n>>> ser\nx   NaN\ny   NaN\nz   NaN\ndtype: float64\n\nNote that the Index is first build with the keys from the dictionary.\nAfter this the Series is reindexed with the given Index values, hence we\nget all NaN as a result.\n\nConstructing Series from a list with `copy=False`.\n\n>>> r = [1, 2]\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\n[1, 2]\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `copy` of\nthe original data even though `copy=False`, so\nthe data is unchanged.\n\nConstructing Series from a 1d ndarray with `copy=False`.\n\n>>> r = np.array([1, 2])\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\narray([999,   2])\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `view` on\nthe original data, so\nthe data is changed as well.\n"
  },
  {
    "symbol": "Series.dt.year",
    "signature": "(attribute)",
    "doc": "\nOne-dimensional ndarray with axis labels (including time series).\n\nLabels need not be unique but must be a hashable type. The object\nsupports both integer- and label-based indexing and provides a host of\nmethods for performing operations involving the index. Statistical\nmethods from ndarray have been overridden to automatically exclude\nmissing data (currently represented as NaN).\n\nOperations between Series (+, -, /, \\*, \\*\\*) align values based on their\nassociated index values-- they need not be the same length. The result\nindex will be the sorted union of the two indexes.\n\nParameters\n----------\ndata : array-like, Iterable, dict, or scalar value\n    Contains data stored in Series. If data is a dict, argument order is\n    maintained.\nindex : array-like or Index (1d)\n    Values must be hashable and have the same length as `data`.\n    Non-unique index values are allowed. Will default to\n    RangeIndex (0, 1, 2, ..., n) if not provided. If data is dict-like\n    and index is None, then the keys in the data are used as the index. If the\n    index is not None, the resulting Series is reindexed with the index values.\ndtype : str, numpy.dtype, or ExtensionDtype, optional\n    Data type for the output Series. If not specified, this will be\n    inferred from `data`.\n    See the :ref:`user guide <basics.dtypes>` for more usages.\nname : Hashable, default None\n    The name to give to the Series.\ncopy : bool, default False\n    Copy input data. Only affects Series or 1d ndarray input. See examples.\n\nNotes\n-----\nPlease reference the :ref:`User Guide <basics.series>` for more information.\n\nExamples\n--------\nConstructing Series from a dictionary with an Index specified\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['a', 'b', 'c'])\n>>> ser\na   1\nb   2\nc   3\ndtype: int64\n\nThe keys of the dictionary match with the Index values, hence the Index\nvalues have no effect.\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['x', 'y', 'z'])\n>>> ser\nx   NaN\ny   NaN\nz   NaN\ndtype: float64\n\nNote that the Index is first build with the keys from the dictionary.\nAfter this the Series is reindexed with the given Index values, hence we\nget all NaN as a result.\n\nConstructing Series from a list with `copy=False`.\n\n>>> r = [1, 2]\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\n[1, 2]\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `copy` of\nthe original data even though `copy=False`, so\nthe data is unchanged.\n\nConstructing Series from a 1d ndarray with `copy=False`.\n\n>>> r = np.array([1, 2])\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\narray([999,   2])\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `view` on\nthe original data, so\nthe data is changed as well.\n"
  },
  {
    "symbol": "Series.dtype",
    "signature": "(property)",
    "doc": "\nReturn the dtype object of the underlying data.\n\nExamples\n--------\n>>> s = pd.Series([1, 2, 3])\n>>> s.dtype\ndtype('int64')\n"
  },
  {
    "symbol": "Series.dtypes",
    "signature": "(property)",
    "doc": "\nReturn the dtype object of the underlying data.\n\nExamples\n--------\n>>> s = pd.Series([1, 2, 3])\n>>> s.dtypes\ndtype('int64')\n"
  },
  {
    "symbol": "Series.duplicated",
    "signature": "(self, keep: 'DropKeep' = 'first') -> 'Series'",
    "doc": "Indicate duplicate Series values.\n\nDuplicated values are indicated as ``True`` values in the resulting\nSeries. Either all duplicates, all except the first or all except the\nlast occurrence of duplicates can be indicated.\n\nParameters\n----------\nkeep : {'first', 'last', False}, default 'first'\n    Method to handle dropping duplicates:\n\n    - 'first' : Mark duplicates as ``True`` except for the first\n      occurrence.\n    - 'last' : Mark duplicates as ``True`` except for the last\n      occurrence.\n    - ``False`` : Mark all duplicates as ``True``.\n\nReturns\n-------\nSeries[bool]\n    Series indicating whether each value has occurred in the\n    preceding values.\n\nSee Also\n--------\nIndex.duplicated : Equivalent method on pandas.Index.\nDataFrame.duplicated : Equivalent method on pandas.DataFrame.\nSeries.drop_duplicates : Remove duplicate values from Series.\n\nExamples\n--------\nBy default, for each set of duplicated values, the first occurrence is\nset on False and all others on True:\n\n>>> animals = pd.Series(['llama', 'cow', 'llama', 'beetle', 'llama'])\n>>> animals.duplicated()\n0    False\n1    False\n2     True\n3    False\n4     True\ndtype: bool\n\nwhich is equivalent to\n\n>>> animals.duplicated(keep='first')\n0    False\n1    False\n2     True\n3    False\n4     True\ndtype: bool\n\nBy using 'last', the last occurrence of each set of duplicated values\nis set on False and all others on True:\n\n>>> animals.duplicated(keep='last')\n0     True\n1    False\n2     True\n3    False\n4    False\ndtype: bool\n\nBy setting keep on ``False``, all duplicates are True:\n\n>>> animals.duplicated(keep=False)\n0     True\n1    False\n2     True\n3    False\n4     True\ndtype: bool"
  },
  {
    "symbol": "Series.empty",
    "signature": "(property)",
    "doc": ""
  },
  {
    "symbol": "Series.eq",
    "signature": "(self, other, level: 'Level | None' = None, fill_value: 'float | None' = None, axis: 'Axis' = 0) -> 'Series'",
    "doc": "Return Equal to of series and other, element-wise (binary operator `eq`).\n\nEquivalent to ``series == other``, but with support to substitute a fill_value for\nmissing data in either one of the inputs.\n\nParameters\n----------\nother : Series or scalar value\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result of filling (at that location) will be missing.\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.\n\nReturns\n-------\nSeries\n    The result of the operation.\n\nExamples\n--------\n>>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n>>> a\na    1.0\nb    1.0\nc    1.0\nd    NaN\ndtype: float64\n>>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n>>> b\na    1.0\nb    NaN\nd    1.0\ne    NaN\ndtype: float64\n>>> a.eq(b, fill_value=0)\na     True\nb    False\nc    False\nd    False\ne    False\ndtype: bool"
  },
  {
    "symbol": "Series.equals",
    "signature": "(self, other: 'object') -> 'bool_t'",
    "doc": "Test whether two objects contain the same elements.\n\nThis function allows two Series or DataFrames to be compared against\neach other to see if they have the same shape and elements. NaNs in\nthe same location are considered equal.\n\nThe row/column index do not need to have the same type, as long\nas the values are considered equal. Corresponding columns and\nindex must be of the same dtype.\n\nParameters\n----------\nother : Series or DataFrame\n    The other Series or DataFrame to be compared with the first.\n\nReturns\n-------\nbool\n    True if all elements are the same in both objects, False\n    otherwise.\n\nSee Also\n--------\nSeries.eq : Compare two Series objects of the same length\n    and return a Series where each element is True if the element\n    in each Series is equal, False otherwise.\nDataFrame.eq : Compare two DataFrame objects of the same shape and\n    return a DataFrame where each element is True if the respective\n    element in each DataFrame is equal, False otherwise.\ntesting.assert_series_equal : Raises an AssertionError if left and\n    right are not equal. Provides an easy interface to ignore\n    inequality in dtypes, indexes and precision among others.\ntesting.assert_frame_equal : Like assert_series_equal, but targets\n    DataFrames.\nnumpy.array_equal : Return True if two arrays have the same shape\n    and elements, False otherwise.\n\nExamples\n--------\n>>> df = pd.DataFrame({1: [10], 2: [20]})\n>>> df\n    1   2\n0  10  20\n\nDataFrames df and exactly_equal have the same types and values for\ntheir elements and column labels, which will return True.\n\n>>> exactly_equal = pd.DataFrame({1: [10], 2: [20]})\n>>> exactly_equal\n    1   2\n0  10  20\n>>> df.equals(exactly_equal)\nTrue\n\nDataFrames df and different_column_type have the same element\ntypes and values, but have different types for the column labels,\nwhich will still return True.\n\n>>> different_column_type = pd.DataFrame({1.0: [10], 2.0: [20]})\n>>> different_column_type\n   1.0  2.0\n0   10   20\n>>> df.equals(different_column_type)\nTrue\n\nDataFrames df and different_data_type have different types for the\nsame values for their elements, and will return False even though\ntheir column labels are the same values and types.\n\n>>> different_data_type = pd.DataFrame({1: [10.0], 2: [20.0]})\n>>> different_data_type\n      1     2\n0  10.0  20.0\n>>> df.equals(different_data_type)\nFalse"
  },
  {
    "symbol": "Series.ewm",
    "signature": "(self, com: 'float | None' = None, span: 'float | None' = None, halflife: 'float | TimedeltaConvertibleTypes | None' = None, alpha: 'float | None' = None, min_periods: 'int | None' = 0, adjust: 'bool_t' = True, ignore_na: 'bool_t' = False, axis: 'Axis | lib.NoDefault' = <no_default>, times: 'np.ndarray | DataFrame | Series | None' = None, method: \"Literal['single', 'table']\" = 'single') -> 'ExponentialMovingWindow'",
    "doc": "Provide exponentially weighted (EW) calculations.\n\nExactly one of ``com``, ``span``, ``halflife``, or ``alpha`` must be\nprovided if ``times`` is not provided. If ``times`` is provided,\n``halflife`` and one of ``com``, ``span`` or ``alpha`` may be provided.\n\nParameters\n----------\ncom : float, optional\n    Specify decay in terms of center of mass\n\n    :math:`\\alpha = 1 / (1 + com)`, for :math:`com \\geq 0`.\n\nspan : float, optional\n    Specify decay in terms of span\n\n    :math:`\\alpha = 2 / (span + 1)`, for :math:`span \\geq 1`.\n\nhalflife : float, str, timedelta, optional\n    Specify decay in terms of half-life\n\n    :math:`\\alpha = 1 - \\exp\\left(-\\ln(2) / halflife\\right)`, for\n    :math:`halflife > 0`.\n\n    If ``times`` is specified, a timedelta convertible unit over which an\n    observation decays to half its value. Only applicable to ``mean()``,\n    and halflife value will not apply to the other functions.\n\nalpha : float, optional\n    Specify smoothing factor :math:`\\alpha` directly\n\n    :math:`0 < \\alpha \\leq 1`.\n\nmin_periods : int, default 0\n    Minimum number of observations in window required to have a value;\n    otherwise, result is ``np.nan``.\n\nadjust : bool, default True\n    Divide by decaying adjustment factor in beginning periods to account\n    for imbalance in relative weightings (viewing EWMA as a moving average).\n\n    - When ``adjust=True`` (default), the EW function is calculated using weights\n      :math:`w_i = (1 - \\alpha)^i`. For example, the EW moving average of the series\n      [:math:`x_0, x_1, ..., x_t`] would be:\n\n    .. math::\n        y_t = \\frac{x_t + (1 - \\alpha)x_{t-1} + (1 - \\alpha)^2 x_{t-2} + ... + (1 -\n        \\alpha)^t x_0}{1 + (1 - \\alpha) + (1 - \\alpha)^2 + ... + (1 - \\alpha)^t}\n\n    - When ``adjust=False``, the exponentially weighted function is calculated\n      recursively:\n\n    .. math::\n        \\begin{split}\n            y_0 &= x_0\\\\\n            y_t &= (1 - \\alpha) y_{t-1} + \\alpha x_t,\n        \\end{split}\nignore_na : bool, default False\n    Ignore missing values when calculating weights.\n\n    - When ``ignore_na=False`` (default), weights are based on absolute positions.\n      For example, the weights of :math:`x_0` and :math:`x_2` used in calculating\n      the final weighted average of [:math:`x_0`, None, :math:`x_2`] are\n      :math:`(1-\\alpha)^2` and :math:`1` if ``adjust=True``, and\n      :math:`(1-\\alpha)^2` and :math:`\\alpha` if ``adjust=False``.\n\n    - When ``ignore_na=True``, weights are based\n      on relative positions. For example, the weights of :math:`x_0` and :math:`x_2`\n      used in calculating the final weighted average of\n      [:math:`x_0`, None, :math:`x_2`] are :math:`1-\\alpha` and :math:`1` if\n      ``adjust=True``, and :math:`1-\\alpha` and :math:`\\alpha` if ``adjust=False``.\n\naxis : {0, 1}, default 0\n    If ``0`` or ``'index'``, calculate across the rows.\n\n    If ``1`` or ``'columns'``, calculate across the columns.\n\n    For `Series` this parameter is unused and defaults to 0.\n\ntimes : np.ndarray, Series, default None\n\n    Only applicable to ``mean()``.\n\n    Times corresponding to the observations. Must be monotonically increasing and\n    ``datetime64[ns]`` dtype.\n\n    If 1-D array like, a sequence with the same shape as the observations.\n\nmethod : str {'single', 'table'}, default 'single'\n    .. versionadded:: 1.4.0\n\n    Execute the rolling operation per single column or row (``'single'``)\n    or over the entire object (``'table'``).\n\n    This argument is only implemented when specifying ``engine='numba'``\n    in the method call.\n\n    Only applicable to ``mean()``\n\nReturns\n-------\npandas.api.typing.ExponentialMovingWindow\n\nSee Also\n--------\nrolling : Provides rolling window calculations.\nexpanding : Provides expanding transformations.\n\nNotes\n-----\nSee :ref:`Windowing Operations <window.exponentially_weighted>`\nfor further usage details and examples.\n\nExamples\n--------\n>>> df = pd.DataFrame({'B': [0, 1, 2, np.nan, 4]})\n>>> df\n     B\n0  0.0\n1  1.0\n2  2.0\n3  NaN\n4  4.0\n\n>>> df.ewm(com=0.5).mean()\n          B\n0  0.000000\n1  0.750000\n2  1.615385\n3  1.615385\n4  3.670213\n>>> df.ewm(alpha=2 / 3).mean()\n          B\n0  0.000000\n1  0.750000\n2  1.615385\n3  1.615385\n4  3.670213\n\n**adjust**\n\n>>> df.ewm(com=0.5, adjust=True).mean()\n          B\n0  0.000000\n1  0.750000\n2  1.615385\n3  1.615385\n4  3.670213\n>>> df.ewm(com=0.5, adjust=False).mean()\n          B\n0  0.000000\n1  0.666667\n2  1.555556\n3  1.555556\n4  3.650794\n\n**ignore_na**\n\n>>> df.ewm(com=0.5, ignore_na=True).mean()\n          B\n0  0.000000\n1  0.750000\n2  1.615385\n3  1.615385\n4  3.225000\n>>> df.ewm(com=0.5, ignore_na=False).mean()\n          B\n0  0.000000\n1  0.750000\n2  1.615385\n3  1.615385\n4  3.670213\n\n**times**\n\nExponentially weighted mean with weights calculated with a timedelta ``halflife``\nrelative to ``times``.\n\n>>> times = ['2020-01-01', '2020-01-03', '2020-01-10', '2020-01-15', '2020-01-17']\n>>> df.ewm(halflife='4 days', times=pd.DatetimeIndex(times)).mean()\n          B\n0  0.000000\n1  0.585786\n2  1.523889\n3  1.523889\n4  3.233686"
  },
  {
    "symbol": "Series.expanding",
    "signature": "(self, min_periods: 'int' = 1, axis: 'Axis | lib.NoDefault' = <no_default>, method: \"Literal['single', 'table']\" = 'single') -> 'Expanding'",
    "doc": "Provide expanding window calculations.\n\nParameters\n----------\nmin_periods : int, default 1\n    Minimum number of observations in window required to have a value;\n    otherwise, result is ``np.nan``.\n\naxis : int or str, default 0\n    If ``0`` or ``'index'``, roll across the rows.\n\n    If ``1`` or ``'columns'``, roll across the columns.\n\n    For `Series` this parameter is unused and defaults to 0.\n\nmethod : str {'single', 'table'}, default 'single'\n    Execute the rolling operation per single column or row (``'single'``)\n    or over the entire object (``'table'``).\n\n    This argument is only implemented when specifying ``engine='numba'``\n    in the method call.\n\n    .. versionadded:: 1.3.0\n\nReturns\n-------\npandas.api.typing.Expanding\n\nSee Also\n--------\nrolling : Provides rolling window calculations.\newm : Provides exponential weighted functions.\n\nNotes\n-----\nSee :ref:`Windowing Operations <window.expanding>` for further usage details\nand examples.\n\nExamples\n--------\n>>> df = pd.DataFrame({\"B\": [0, 1, 2, np.nan, 4]})\n>>> df\n     B\n0  0.0\n1  1.0\n2  2.0\n3  NaN\n4  4.0\n\n**min_periods**\n\nExpanding sum with 1 vs 3 observations needed to calculate a value.\n\n>>> df.expanding(1).sum()\n     B\n0  0.0\n1  1.0\n2  3.0\n3  3.0\n4  7.0\n>>> df.expanding(3).sum()\n     B\n0  NaN\n1  NaN\n2  3.0\n3  3.0\n4  7.0"
  },
  {
    "symbol": "Series.explode",
    "signature": "(self, ignore_index: 'bool' = False) -> 'Series'",
    "doc": "Transform each element of a list-like to a row.\n\nParameters\n----------\nignore_index : bool, default False\n    If True, the resulting index will be labeled 0, 1, …, n - 1.\n\nReturns\n-------\nSeries\n    Exploded lists to rows; index will be duplicated for these rows.\n\nSee Also\n--------\nSeries.str.split : Split string values on specified separator.\nSeries.unstack : Unstack, a.k.a. pivot, Series with MultiIndex\n    to produce DataFrame.\nDataFrame.melt : Unpivot a DataFrame from wide format to long format.\nDataFrame.explode : Explode a DataFrame from list-like\n    columns to long format.\n\nNotes\n-----\nThis routine will explode list-likes including lists, tuples, sets,\nSeries, and np.ndarray. The result dtype of the subset rows will\nbe object. Scalars will be returned unchanged, and empty list-likes will\nresult in a np.nan for that row. In addition, the ordering of elements in\nthe output will be non-deterministic when exploding sets.\n\nReference :ref:`the user guide <reshaping.explode>` for more examples.\n\nExamples\n--------\n>>> s = pd.Series([[1, 2, 3], 'foo', [], [3, 4]])\n>>> s\n0    [1, 2, 3]\n1          foo\n2           []\n3       [3, 4]\ndtype: object\n\n>>> s.explode()\n0      1\n0      2\n0      3\n1    foo\n2    NaN\n3      3\n3      4\ndtype: object"
  },
  {
    "symbol": "Series.factorize",
    "signature": "(self, sort: 'bool' = False, use_na_sentinel: 'bool' = True) -> 'tuple[npt.NDArray[np.intp], Index]'",
    "doc": "Encode the object as an enumerated type or categorical variable.\n\nThis method is useful for obtaining a numeric representation of an\narray when all that matters is identifying distinct values. `factorize`\nis available as both a top-level function :func:`pandas.factorize`,\nand as a method :meth:`Series.factorize` and :meth:`Index.factorize`.\n\nParameters\n----------\nsort : bool, default False\n    Sort `uniques` and shuffle `codes` to maintain the\n    relationship.\n\nuse_na_sentinel : bool, default True\n    If True, the sentinel -1 will be used for NaN values. If False,\n    NaN values will be encoded as non-negative integers and will not drop the\n    NaN from the uniques of the values.\n\n    .. versionadded:: 1.5.0\n\nReturns\n-------\ncodes : ndarray\n    An integer ndarray that's an indexer into `uniques`.\n    ``uniques.take(codes)`` will have the same values as `values`.\nuniques : ndarray, Index, or Categorical\n    The unique valid values. When `values` is Categorical, `uniques`\n    is a Categorical. When `values` is some other pandas object, an\n    `Index` is returned. Otherwise, a 1-D ndarray is returned.\n\n    .. note::\n\n       Even if there's a missing value in `values`, `uniques` will\n       *not* contain an entry for it.\n\nSee Also\n--------\ncut : Discretize continuous-valued array.\nunique : Find the unique value in an array.\n\nNotes\n-----\nReference :ref:`the user guide <reshaping.factorize>` for more examples.\n\nExamples\n--------\nThese examples all show factorize as a top-level method like\n``pd.factorize(values)``. The results are identical for methods like\n:meth:`Series.factorize`.\n\n>>> codes, uniques = pd.factorize(np.array(['b', 'b', 'a', 'c', 'b'], dtype=\"O\"))\n>>> codes\narray([0, 0, 1, 2, 0])\n>>> uniques\narray(['b', 'a', 'c'], dtype=object)\n\nWith ``sort=True``, the `uniques` will be sorted, and `codes` will be\nshuffled so that the relationship is the maintained.\n\n>>> codes, uniques = pd.factorize(np.array(['b', 'b', 'a', 'c', 'b'], dtype=\"O\"),\n...                               sort=True)\n>>> codes\narray([1, 1, 0, 2, 1])\n>>> uniques\narray(['a', 'b', 'c'], dtype=object)\n\nWhen ``use_na_sentinel=True`` (the default), missing values are indicated in\nthe `codes` with the sentinel value ``-1`` and missing values are not\nincluded in `uniques`.\n\n>>> codes, uniques = pd.factorize(np.array(['b', None, 'a', 'c', 'b'], dtype=\"O\"))\n>>> codes\narray([ 0, -1,  1,  2,  0])\n>>> uniques\narray(['b', 'a', 'c'], dtype=object)\n\nThus far, we've only factorized lists (which are internally coerced to\nNumPy arrays). When factorizing pandas objects, the type of `uniques`\nwill differ. For Categoricals, a `Categorical` is returned.\n\n>>> cat = pd.Categorical(['a', 'a', 'c'], categories=['a', 'b', 'c'])\n>>> codes, uniques = pd.factorize(cat)\n>>> codes\narray([0, 0, 1])\n>>> uniques\n['a', 'c']\nCategories (3, object): ['a', 'b', 'c']\n\nNotice that ``'b'`` is in ``uniques.categories``, despite not being\npresent in ``cat.values``.\n\nFor all other pandas objects, an Index of the appropriate type is\nreturned.\n\n>>> cat = pd.Series(['a', 'a', 'c'])\n>>> codes, uniques = pd.factorize(cat)\n>>> codes\narray([0, 0, 1])\n>>> uniques\nIndex(['a', 'c'], dtype='object')\n\nIf NaN is in the values, and we want to include NaN in the uniques of the\nvalues, it can be achieved by setting ``use_na_sentinel=False``.\n\n>>> values = np.array([1, 2, 1, np.nan])\n>>> codes, uniques = pd.factorize(values)  # default: use_na_sentinel=True\n>>> codes\narray([ 0,  1,  0, -1])\n>>> uniques\narray([1., 2.])\n\n>>> codes, uniques = pd.factorize(values, use_na_sentinel=False)\n>>> codes\narray([0, 1, 0, 2])\n>>> uniques\narray([ 1.,  2., nan])"
  },
  {
    "symbol": "Series.ffill",
    "signature": "(self, *, axis: 'None | Axis' = None, inplace: 'bool_t' = False, limit: 'None | int' = None, limit_area: \"Literal['inside', 'outside'] | None\" = None, downcast: 'dict | None | lib.NoDefault' = <no_default>) -> 'Self | None'",
    "doc": "Fill NA/NaN values by propagating the last valid observation to next valid.\n\nParameters\n----------\naxis : {0 or 'index'} for Series, {0 or 'index', 1 or 'columns'} for DataFrame\n    Axis along which to fill missing values. For `Series`\n    this parameter is unused and defaults to 0.\ninplace : bool, default False\n    If True, fill in-place. Note: this will modify any\n    other views on this object (e.g., a no-copy slice for a column in a\n    DataFrame).\nlimit : int, default None\n    If method is specified, this is the maximum number of consecutive\n    NaN values to forward/backward fill. In other words, if there is\n    a gap with more than this number of consecutive NaNs, it will only\n    be partially filled. If method is not specified, this is the\n    maximum number of entries along the entire axis where NaNs will be\n    filled. Must be greater than 0 if not None.\nlimit_area : {`None`, 'inside', 'outside'}, default None\n    If limit is specified, consecutive NaNs will be filled with this\n    restriction.\n\n    * ``None``: No fill restriction.\n    * 'inside': Only fill NaNs surrounded by valid values\n      (interpolate).\n    * 'outside': Only fill NaNs outside valid values (extrapolate).\n\n    .. versionadded:: 2.2.0\n\ndowncast : dict, default is None\n    A dict of item->dtype of what to downcast if possible,\n    or the string 'infer' which will try to downcast to an appropriate\n    equal type (e.g. float64 to int64 if possible).\n\n    .. deprecated:: 2.2.0\n\nReturns\n-------\nSeries/DataFrame or None\n    Object with missing values filled or None if ``inplace=True``.\n\nExamples\n--------\n>>> df = pd.DataFrame([[np.nan, 2, np.nan, 0],\n...                    [3, 4, np.nan, 1],\n...                    [np.nan, np.nan, np.nan, np.nan],\n...                    [np.nan, 3, np.nan, 4]],\n...                   columns=list(\"ABCD\"))\n>>> df\n     A    B   C    D\n0  NaN  2.0 NaN  0.0\n1  3.0  4.0 NaN  1.0\n2  NaN  NaN NaN  NaN\n3  NaN  3.0 NaN  4.0\n\n>>> df.ffill()\n     A    B   C    D\n0  NaN  2.0 NaN  0.0\n1  3.0  4.0 NaN  1.0\n2  3.0  4.0 NaN  1.0\n3  3.0  3.0 NaN  4.0\n\n>>> ser = pd.Series([1, np.nan, 2, 3])\n>>> ser.ffill()\n0   1.0\n1   1.0\n2   2.0\n3   3.0\ndtype: float64"
  },
  {
    "symbol": "Series.fillna",
    "signature": "(self, value: 'Hashable | Mapping | Series | DataFrame | None' = None, *, method: 'FillnaOptions | None' = None, axis: 'Axis | None' = None, inplace: 'bool_t' = False, limit: 'int | None' = None, downcast: 'dict | None | lib.NoDefault' = <no_default>) -> 'Self | None'",
    "doc": "Fill NA/NaN values using the specified method.\n\nParameters\n----------\nvalue : scalar, dict, Series, or DataFrame\n    Value to use to fill holes (e.g. 0), alternately a\n    dict/Series/DataFrame of values specifying which value to use for\n    each index (for a Series) or column (for a DataFrame).  Values not\n    in the dict/Series/DataFrame will not be filled. This value cannot\n    be a list.\nmethod : {'backfill', 'bfill', 'ffill', None}, default None\n    Method to use for filling holes in reindexed Series:\n\n    * ffill: propagate last valid observation forward to next valid.\n    * backfill / bfill: use next valid observation to fill gap.\n\n    .. deprecated:: 2.1.0\n        Use ffill or bfill instead.\n\naxis : {0 or 'index'} for Series, {0 or 'index', 1 or 'columns'} for DataFrame\n    Axis along which to fill missing values. For `Series`\n    this parameter is unused and defaults to 0.\ninplace : bool, default False\n    If True, fill in-place. Note: this will modify any\n    other views on this object (e.g., a no-copy slice for a column in a\n    DataFrame).\nlimit : int, default None\n    If method is specified, this is the maximum number of consecutive\n    NaN values to forward/backward fill. In other words, if there is\n    a gap with more than this number of consecutive NaNs, it will only\n    be partially filled. If method is not specified, this is the\n    maximum number of entries along the entire axis where NaNs will be\n    filled. Must be greater than 0 if not None.\ndowncast : dict, default is None\n    A dict of item->dtype of what to downcast if possible,\n    or the string 'infer' which will try to downcast to an appropriate\n    equal type (e.g. float64 to int64 if possible).\n\n    .. deprecated:: 2.2.0\n\nReturns\n-------\nSeries/DataFrame or None\n    Object with missing values filled or None if ``inplace=True``.\n\nSee Also\n--------\nffill : Fill values by propagating the last valid observation to next valid.\nbfill : Fill values by using the next valid observation to fill the gap.\ninterpolate : Fill NaN values using interpolation.\nreindex : Conform object to new index.\nasfreq : Convert TimeSeries to specified frequency.\n\nExamples\n--------\n>>> df = pd.DataFrame([[np.nan, 2, np.nan, 0],\n...                    [3, 4, np.nan, 1],\n...                    [np.nan, np.nan, np.nan, np.nan],\n...                    [np.nan, 3, np.nan, 4]],\n...                   columns=list(\"ABCD\"))\n>>> df\n     A    B   C    D\n0  NaN  2.0 NaN  0.0\n1  3.0  4.0 NaN  1.0\n2  NaN  NaN NaN  NaN\n3  NaN  3.0 NaN  4.0\n\nReplace all NaN elements with 0s.\n\n>>> df.fillna(0)\n     A    B    C    D\n0  0.0  2.0  0.0  0.0\n1  3.0  4.0  0.0  1.0\n2  0.0  0.0  0.0  0.0\n3  0.0  3.0  0.0  4.0\n\nReplace all NaN elements in column 'A', 'B', 'C', and 'D', with 0, 1,\n2, and 3 respectively.\n\n>>> values = {\"A\": 0, \"B\": 1, \"C\": 2, \"D\": 3}\n>>> df.fillna(value=values)\n     A    B    C    D\n0  0.0  2.0  2.0  0.0\n1  3.0  4.0  2.0  1.0\n2  0.0  1.0  2.0  3.0\n3  0.0  3.0  2.0  4.0\n\nOnly replace the first NaN element.\n\n>>> df.fillna(value=values, limit=1)\n     A    B    C    D\n0  0.0  2.0  2.0  0.0\n1  3.0  4.0  NaN  1.0\n2  NaN  1.0  NaN  3.0\n3  NaN  3.0  NaN  4.0\n\nWhen filling using a DataFrame, replacement happens along\nthe same column names and same indices\n\n>>> df2 = pd.DataFrame(np.zeros((4, 4)), columns=list(\"ABCE\"))\n>>> df.fillna(df2)\n     A    B    C    D\n0  0.0  2.0  0.0  0.0\n1  3.0  4.0  0.0  1.0\n2  0.0  0.0  0.0  NaN\n3  0.0  3.0  0.0  4.0\n\nNote that column D is not affected since it is not present in df2."
  },
  {
    "symbol": "Series.filter",
    "signature": "(self, items=None, like: 'str | None' = None, regex: 'str | None' = None, axis: 'Axis | None' = None) -> 'Self'",
    "doc": "Subset the dataframe rows or columns according to the specified index labels.\n\nNote that this routine does not filter a dataframe on its\ncontents. The filter is applied to the labels of the index.\n\nParameters\n----------\nitems : list-like\n    Keep labels from axis which are in items.\nlike : str\n    Keep labels from axis for which \"like in label == True\".\nregex : str (regular expression)\n    Keep labels from axis for which re.search(regex, label) == True.\naxis : {0 or 'index', 1 or 'columns', None}, default None\n    The axis to filter on, expressed either as an index (int)\n    or axis name (str). By default this is the info axis, 'columns' for\n    DataFrame. For `Series` this parameter is unused and defaults to `None`.\n\nReturns\n-------\nsame type as input object\n\nSee Also\n--------\nDataFrame.loc : Access a group of rows and columns\n    by label(s) or a boolean array.\n\nNotes\n-----\nThe ``items``, ``like``, and ``regex`` parameters are\nenforced to be mutually exclusive.\n\n``axis`` defaults to the info axis that is used when indexing\nwith ``[]``.\n\nExamples\n--------\n>>> df = pd.DataFrame(np.array(([1, 2, 3], [4, 5, 6])),\n...                   index=['mouse', 'rabbit'],\n...                   columns=['one', 'two', 'three'])\n>>> df\n        one  two  three\nmouse     1    2      3\nrabbit    4    5      6\n\n>>> # select columns by name\n>>> df.filter(items=['one', 'three'])\n         one  three\nmouse     1      3\nrabbit    4      6\n\n>>> # select columns by regular expression\n>>> df.filter(regex='e$', axis=1)\n         one  three\nmouse     1      3\nrabbit    4      6\n\n>>> # select rows containing 'bbi'\n>>> df.filter(like='bbi', axis=0)\n         one  two  three\nrabbit    4    5      6"
  },
  {
    "symbol": "Series.first",
    "signature": "(self, offset) -> 'Self'",
    "doc": "Select initial periods of time series data based on a date offset.\n\n.. deprecated:: 2.1\n    :meth:`.first` is deprecated and will be removed in a future version.\n    Please create a mask and filter using `.loc` instead.\n\nFor a DataFrame with a sorted DatetimeIndex, this function can\nselect the first few rows based on a date offset.\n\nParameters\n----------\noffset : str, DateOffset or dateutil.relativedelta\n    The offset length of the data that will be selected. For instance,\n    '1ME' will display all the rows having their index within the first month.\n\nReturns\n-------\nSeries or DataFrame\n    A subset of the caller.\n\nRaises\n------\nTypeError\n    If the index is not  a :class:`DatetimeIndex`\n\nSee Also\n--------\nlast : Select final periods of time series based on a date offset.\nat_time : Select values at a particular time of the day.\nbetween_time : Select values between particular times of the day.\n\nExamples\n--------\n>>> i = pd.date_range('2018-04-09', periods=4, freq='2D')\n>>> ts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)\n>>> ts\n            A\n2018-04-09  1\n2018-04-11  2\n2018-04-13  3\n2018-04-15  4\n\nGet the rows for the first 3 days:\n\n>>> ts.first('3D')\n            A\n2018-04-09  1\n2018-04-11  2\n\nNotice the data for 3 first calendar days were returned, not the first\n3 days observed in the dataset, and therefore data for 2018-04-13 was\nnot returned."
  },
  {
    "symbol": "Series.first_valid_index",
    "signature": "(self) -> 'Hashable | None'",
    "doc": "Return index for first non-NA value or None, if no non-NA value is found.\n\nReturns\n-------\ntype of index\n\nExamples\n--------\nFor Series:\n\n>>> s = pd.Series([None, 3, 4])\n>>> s.first_valid_index()\n1\n>>> s.last_valid_index()\n2\n\n>>> s = pd.Series([None, None])\n>>> print(s.first_valid_index())\nNone\n>>> print(s.last_valid_index())\nNone\n\nIf all elements in Series are NA/null, returns None.\n\n>>> s = pd.Series()\n>>> print(s.first_valid_index())\nNone\n>>> print(s.last_valid_index())\nNone\n\nIf Series is empty, returns None.\n\nFor DataFrame:\n\n>>> df = pd.DataFrame({'A': [None, None, 2], 'B': [None, 3, 4]})\n>>> df\n     A      B\n0  NaN    NaN\n1  NaN    3.0\n2  2.0    4.0\n>>> df.first_valid_index()\n1\n>>> df.last_valid_index()\n2\n\n>>> df = pd.DataFrame({'A': [None, None, None], 'B': [None, None, None]})\n>>> df\n     A      B\n0  None   None\n1  None   None\n2  None   None\n>>> print(df.first_valid_index())\nNone\n>>> print(df.last_valid_index())\nNone\n\nIf all elements in DataFrame are NA/null, returns None.\n\n>>> df = pd.DataFrame()\n>>> df\nEmpty DataFrame\nColumns: []\nIndex: []\n>>> print(df.first_valid_index())\nNone\n>>> print(df.last_valid_index())\nNone\n\nIf DataFrame is empty, returns None."
  },
  {
    "symbol": "Series.flags",
    "signature": "(property)",
    "doc": "\nGet the properties associated with this pandas object.\n\nThe available flags are\n\n* :attr:`Flags.allows_duplicate_labels`\n\nSee Also\n--------\nFlags : Flags that apply to pandas objects.\nDataFrame.attrs : Global metadata applying to this dataset.\n\nNotes\n-----\n\"Flags\" differ from \"metadata\". Flags reflect properties of the\npandas object (the Series or DataFrame). Metadata refer to properties\nof the dataset, and should be stored in :attr:`DataFrame.attrs`.\n\nExamples\n--------\n>>> df = pd.DataFrame({\"A\": [1, 2]})\n>>> df.flags\n<Flags(allows_duplicate_labels=True)>\n\nFlags can be get or set using ``.``\n\n>>> df.flags.allows_duplicate_labels\nTrue\n>>> df.flags.allows_duplicate_labels = False\n\nOr by slicing with a key\n\n>>> df.flags[\"allows_duplicate_labels\"]\nFalse\n>>> df.flags[\"allows_duplicate_labels\"] = True\n"
  },
  {
    "symbol": "Series.floordiv",
    "signature": "(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'",
    "doc": "Return Integer division of series and other, element-wise (binary operator `floordiv`).\n\nEquivalent to ``series // other``, but with support to substitute a fill_value for\nmissing data in either one of the inputs.\n\nParameters\n----------\nother : Series or scalar value\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result of filling (at that location) will be missing.\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.\n\nReturns\n-------\nSeries\n    The result of the operation.\n\nSee Also\n--------\nSeries.rfloordiv : Reverse of the Integer division operator, see\n    `Python documentation\n    <https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types>`_\n    for more details.\n\nExamples\n--------\n>>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n>>> a\na    1.0\nb    1.0\nc    1.0\nd    NaN\ndtype: float64\n>>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n>>> b\na    1.0\nb    NaN\nd    1.0\ne    NaN\ndtype: float64\n>>> a.floordiv(b, fill_value=0)\na    1.0\nb    inf\nc    inf\nd    0.0\ne    NaN\ndtype: float64"
  },
  {
    "symbol": "Series.ge",
    "signature": "(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'",
    "doc": "Return Greater than or equal to of series and other, element-wise (binary operator `ge`).\n\nEquivalent to ``series >= other``, but with support to substitute a fill_value for\nmissing data in either one of the inputs.\n\nParameters\n----------\nother : Series or scalar value\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result of filling (at that location) will be missing.\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.\n\nReturns\n-------\nSeries\n    The result of the operation.\n\nExamples\n--------\n>>> a = pd.Series([1, 1, 1, np.nan, 1], index=['a', 'b', 'c', 'd', 'e'])\n>>> a\na    1.0\nb    1.0\nc    1.0\nd    NaN\ne    1.0\ndtype: float64\n>>> b = pd.Series([0, 1, 2, np.nan, 1], index=['a', 'b', 'c', 'd', 'f'])\n>>> b\na    0.0\nb    1.0\nc    2.0\nd    NaN\nf    1.0\ndtype: float64\n>>> a.ge(b, fill_value=0)\na     True\nb     True\nc    False\nd    False\ne     True\nf    False\ndtype: bool"
  },
  {
    "symbol": "Series.get",
    "signature": "(self, key, default=None)",
    "doc": "Get item from object for given key (ex: DataFrame column).\n\nReturns default value if not found.\n\nParameters\n----------\nkey : object\n\nReturns\n-------\nsame type as items contained in object\n\nExamples\n--------\n>>> df = pd.DataFrame(\n...     [\n...         [24.3, 75.7, \"high\"],\n...         [31, 87.8, \"high\"],\n...         [22, 71.6, \"medium\"],\n...         [35, 95, \"medium\"],\n...     ],\n...     columns=[\"temp_celsius\", \"temp_fahrenheit\", \"windspeed\"],\n...     index=pd.date_range(start=\"2014-02-12\", end=\"2014-02-15\", freq=\"D\"),\n... )\n\n>>> df\n            temp_celsius  temp_fahrenheit windspeed\n2014-02-12          24.3             75.7      high\n2014-02-13          31.0             87.8      high\n2014-02-14          22.0             71.6    medium\n2014-02-15          35.0             95.0    medium\n\n>>> df.get([\"temp_celsius\", \"windspeed\"])\n            temp_celsius windspeed\n2014-02-12          24.3      high\n2014-02-13          31.0      high\n2014-02-14          22.0    medium\n2014-02-15          35.0    medium\n\n>>> ser = df['windspeed']\n>>> ser.get('2014-02-13')\n'high'\n\nIf the key isn't found, the default value will be used.\n\n>>> df.get([\"temp_celsius\", \"temp_kelvin\"], default=\"default_value\")\n'default_value'\n\n>>> ser.get('2014-02-10', '[unknown]')\n'[unknown]'"
  },
  {
    "symbol": "Series.groupby",
    "signature": "(self, by=None, axis: 'Axis' = 0, level: 'IndexLabel | None' = None, as_index: 'bool' = True, sort: 'bool' = True, group_keys: 'bool' = True, observed: 'bool | lib.NoDefault' = <no_default>, dropna: 'bool' = True) -> 'SeriesGroupBy'",
    "doc": "Group Series using a mapper or by a Series of columns.\n\nA groupby operation involves some combination of splitting the\nobject, applying a function, and combining the results. This can be\nused to group large amounts of data and compute operations on these\ngroups.\n\nParameters\n----------\nby : mapping, function, label, pd.Grouper or list of such\n    Used to determine the groups for the groupby.\n    If ``by`` is a function, it's called on each value of the object's\n    index. If a dict or Series is passed, the Series or dict VALUES\n    will be used to determine the groups (the Series' values are first\n    aligned; see ``.align()`` method). If a list or ndarray of length\n    equal to the selected axis is passed (see the `groupby user guide\n    <https://pandas.pydata.org/pandas-docs/stable/user_guide/groupby.html#splitting-an-object-into-groups>`_),\n    the values are used as-is to determine the groups. A label or list\n    of labels may be passed to group by the columns in ``self``.\n    Notice that a tuple is interpreted as a (single) key.\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    Split along rows (0) or columns (1). For `Series` this parameter\n    is unused and defaults to 0.\n\n    .. deprecated:: 2.1.0\n\n        Will be removed and behave like axis=0 in a future version.\n        For ``axis=1``, do ``frame.T.groupby(...)`` instead.\n\nlevel : int, level name, or sequence of such, default None\n    If the axis is a MultiIndex (hierarchical), group by a particular\n    level or levels. Do not specify both ``by`` and ``level``.\nas_index : bool, default True\n    Return object with group labels as the\n    index. Only relevant for DataFrame input. as_index=False is\n    effectively \"SQL-style\" grouped output. This argument has no effect\n    on filtrations (see the `filtrations in the user guide\n    <https://pandas.pydata.org/docs/dev/user_guide/groupby.html#filtration>`_),\n    such as ``head()``, ``tail()``, ``nth()`` and in transformations\n    (see the `transformations in the user guide\n    <https://pandas.pydata.org/docs/dev/user_guide/groupby.html#transformation>`_).\nsort : bool, default True\n    Sort group keys. Get better performance by turning this off.\n    Note this does not influence the order of observations within each\n    group. Groupby preserves the order of rows within each group. If False,\n    the groups will appear in the same order as they did in the original DataFrame.\n    This argument has no effect on filtrations (see the `filtrations in the user guide\n    <https://pandas.pydata.org/docs/dev/user_guide/groupby.html#filtration>`_),\n    such as ``head()``, ``tail()``, ``nth()`` and in transformations\n    (see the `transformations in the user guide\n    <https://pandas.pydata.org/docs/dev/user_guide/groupby.html#transformation>`_).\n\n    .. versionchanged:: 2.0.0\n\n        Specifying ``sort=False`` with an ordered categorical grouper will no\n        longer sort the values.\n\ngroup_keys : bool, default True\n    When calling apply and the ``by`` argument produces a like-indexed\n    (i.e. :ref:`a transform <groupby.transform>`) result, add group keys to\n    index to identify pieces. By default group keys are not included\n    when the result's index (and column) labels match the inputs, and\n    are included otherwise.\n\n    .. versionchanged:: 1.5.0\n\n       Warns that ``group_keys`` will no longer be ignored when the\n       result from ``apply`` is a like-indexed Series or DataFrame.\n       Specify ``group_keys`` explicitly to include the group keys or\n       not.\n\n    .. versionchanged:: 2.0.0\n\n       ``group_keys`` now defaults to ``True``.\n\nobserved : bool, default False\n    This only applies if any of the groupers are Categoricals.\n    If True: only show observed values for categorical groupers.\n    If False: show all values for categorical groupers.\n\n    .. deprecated:: 2.1.0\n\n        The default value will change to True in a future version of pandas.\n\ndropna : bool, default True\n    If True, and if group keys contain NA values, NA values together\n    with row/column will be dropped.\n    If False, NA values will also be treated as the key in groups.\n\nReturns\n-------\npandas.api.typing.SeriesGroupBy\n    Returns a groupby object that contains information about the groups.\n\nSee Also\n--------\nresample : Convenience method for frequency conversion and resampling\n    of time series.\n\nNotes\n-----\nSee the `user guide\n<https://pandas.pydata.org/pandas-docs/stable/groupby.html>`__ for more\ndetailed usage and examples, including splitting an object into groups,\niterating through groups, selecting a group, aggregation, and more.\n\nExamples\n--------\n>>> ser = pd.Series([390., 350., 30., 20.],\n...                 index=['Falcon', 'Falcon', 'Parrot', 'Parrot'],\n...                 name=\"Max Speed\")\n>>> ser\nFalcon    390.0\nFalcon    350.0\nParrot     30.0\nParrot     20.0\nName: Max Speed, dtype: float64\n>>> ser.groupby([\"a\", \"b\", \"a\", \"b\"]).mean()\na    210.0\nb    185.0\nName: Max Speed, dtype: float64\n>>> ser.groupby(level=0).mean()\nFalcon    370.0\nParrot     25.0\nName: Max Speed, dtype: float64\n>>> ser.groupby(ser > 100).mean()\nMax Speed\nFalse     25.0\nTrue     370.0\nName: Max Speed, dtype: float64\n\n**Grouping by Indexes**\n\nWe can groupby different levels of a hierarchical index\nusing the `level` parameter:\n\n>>> arrays = [['Falcon', 'Falcon', 'Parrot', 'Parrot'],\n...           ['Captive', 'Wild', 'Captive', 'Wild']]\n>>> index = pd.MultiIndex.from_arrays(arrays, names=('Animal', 'Type'))\n>>> ser = pd.Series([390., 350., 30., 20.], index=index, name=\"Max Speed\")\n>>> ser\nAnimal  Type\nFalcon  Captive    390.0\n        Wild       350.0\nParrot  Captive     30.0\n        Wild        20.0\nName: Max Speed, dtype: float64\n>>> ser.groupby(level=0).mean()\nAnimal\nFalcon    370.0\nParrot     25.0\nName: Max Speed, dtype: float64\n>>> ser.groupby(level=\"Type\").mean()\nType\nCaptive    210.0\nWild       185.0\nName: Max Speed, dtype: float64\n\nWe can also choose to include `NA` in group keys or not by defining\n`dropna` parameter, the default setting is `True`.\n\n>>> ser = pd.Series([1, 2, 3, 3], index=[\"a\", 'a', 'b', np.nan])\n>>> ser.groupby(level=0).sum()\na    3\nb    3\ndtype: int64\n\n>>> ser.groupby(level=0, dropna=False).sum()\na    3\nb    3\nNaN  3\ndtype: int64\n\n>>> arrays = ['Falcon', 'Falcon', 'Parrot', 'Parrot']\n>>> ser = pd.Series([390., 350., 30., 20.], index=arrays, name=\"Max Speed\")\n>>> ser.groupby([\"a\", \"b\", \"a\", np.nan]).mean()\na    210.0\nb    350.0\nName: Max Speed, dtype: float64\n\n>>> ser.groupby([\"a\", \"b\", \"a\", np.nan], dropna=False).mean()\na    210.0\nb    350.0\nNaN   20.0\nName: Max Speed, dtype: float64"
  },
  {
    "symbol": "Series.gt",
    "signature": "(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'",
    "doc": "Return Greater than of series and other, element-wise (binary operator `gt`).\n\nEquivalent to ``series > other``, but with support to substitute a fill_value for\nmissing data in either one of the inputs.\n\nParameters\n----------\nother : Series or scalar value\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result of filling (at that location) will be missing.\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.\n\nReturns\n-------\nSeries\n    The result of the operation.\n\nExamples\n--------\n>>> a = pd.Series([1, 1, 1, np.nan, 1], index=['a', 'b', 'c', 'd', 'e'])\n>>> a\na    1.0\nb    1.0\nc    1.0\nd    NaN\ne    1.0\ndtype: float64\n>>> b = pd.Series([0, 1, 2, np.nan, 1], index=['a', 'b', 'c', 'd', 'f'])\n>>> b\na    0.0\nb    1.0\nc    2.0\nd    NaN\nf    1.0\ndtype: float64\n>>> a.gt(b, fill_value=0)\na     True\nb    False\nc    False\nd    False\ne     True\nf    False\ndtype: bool"
  },
  {
    "symbol": "Series.hasnans",
    "signature": "(property)",
    "doc": "\nReturn True if there are any NaNs.\n\nEnables various performance speedups.\n\nReturns\n-------\nbool\n\nExamples\n--------\n>>> s = pd.Series([1, 2, 3, None])\n>>> s\n0    1.0\n1    2.0\n2    3.0\n3    NaN\ndtype: float64\n>>> s.hasnans\nTrue\n"
  },
  {
    "symbol": "Series.head",
    "signature": "(self, n: 'int' = 5) -> 'Self'",
    "doc": "Return the first `n` rows.\n\nThis function returns the first `n` rows for the object based\non position. It is useful for quickly testing if your object\nhas the right type of data in it.\n\nFor negative values of `n`, this function returns all rows except\nthe last `|n|` rows, equivalent to ``df[:n]``.\n\nIf n is larger than the number of rows, this function returns all rows.\n\nParameters\n----------\nn : int, default 5\n    Number of rows to select.\n\nReturns\n-------\nsame type as caller\n    The first `n` rows of the caller object.\n\nSee Also\n--------\nDataFrame.tail: Returns the last `n` rows.\n\nExamples\n--------\n>>> df = pd.DataFrame({'animal': ['alligator', 'bee', 'falcon', 'lion',\n...                    'monkey', 'parrot', 'shark', 'whale', 'zebra']})\n>>> df\n      animal\n0  alligator\n1        bee\n2     falcon\n3       lion\n4     monkey\n5     parrot\n6      shark\n7      whale\n8      zebra\n\nViewing the first 5 lines\n\n>>> df.head()\n      animal\n0  alligator\n1        bee\n2     falcon\n3       lion\n4     monkey\n\nViewing the first `n` lines (three in this case)\n\n>>> df.head(3)\n      animal\n0  alligator\n1        bee\n2     falcon\n\nFor negative values of `n`\n\n>>> df.head(-3)\n      animal\n0  alligator\n1        bee\n2     falcon\n3       lion\n4     monkey\n5     parrot"
  },
  {
    "symbol": "Series.hist",
    "signature": "(self: 'Series', by=None, ax=None, grid: 'bool' = True, xlabelsize: 'int | None' = None, xrot: 'float | None' = None, ylabelsize: 'int | None' = None, yrot: 'float | None' = None, figsize: 'tuple[int, int] | None' = None, bins: 'int | Sequence[int]' = 10, backend: 'str | None' = None, legend: 'bool' = False, **kwargs)",
    "doc": "Draw histogram of the input series using matplotlib.\n\nParameters\n----------\nby : object, optional\n    If passed, then used to form histograms for separate groups.\nax : matplotlib axis object\n    If not passed, uses gca().\ngrid : bool, default True\n    Whether to show axis grid lines.\nxlabelsize : int, default None\n    If specified changes the x-axis label size.\nxrot : float, default None\n    Rotation of x axis labels.\nylabelsize : int, default None\n    If specified changes the y-axis label size.\nyrot : float, default None\n    Rotation of y axis labels.\nfigsize : tuple, default None\n    Figure size in inches by default.\nbins : int or sequence, default 10\n    Number of histogram bins to be used. If an integer is given, bins + 1\n    bin edges are calculated and returned. If bins is a sequence, gives\n    bin edges, including left edge of first bin and right edge of last\n    bin. In this case, bins is returned unmodified.\nbackend : str, default None\n    Backend to use instead of the backend specified in the option\n    ``plotting.backend``. For instance, 'matplotlib'. Alternatively, to\n    specify the ``plotting.backend`` for the whole session, set\n    ``pd.options.plotting.backend``.\nlegend : bool, default False\n    Whether to show the legend.\n\n**kwargs\n    To be passed to the actual plotting function.\n\nReturns\n-------\nmatplotlib.AxesSubplot\n    A histogram plot.\n\nSee Also\n--------\nmatplotlib.axes.Axes.hist : Plot a histogram using matplotlib.\n\nExamples\n--------\nFor Series:\n\n.. plot::\n    :context: close-figs\n\n    >>> lst = ['a', 'a', 'a', 'b', 'b', 'b']\n    >>> ser = pd.Series([1, 2, 2, 4, 6, 6], index=lst)\n    >>> hist = ser.hist()\n\nFor Groupby:\n\n.. plot::\n    :context: close-figs\n\n    >>> lst = ['a', 'a', 'a', 'b', 'b', 'b']\n    >>> ser = pd.Series([1, 2, 2, 4, 6, 6], index=lst)\n    >>> hist = ser.groupby(level=0).hist()"
  },
  {
    "symbol": "Series.iat",
    "signature": "(property)",
    "doc": "\nAccess a single value for a row/column pair by integer position.\n\nSimilar to ``iloc``, in that both provide integer-based lookups. Use\n``iat`` if you only need to get or set a single value in a DataFrame\nor Series.\n\nRaises\n------\nIndexError\n    When integer position is out of bounds.\n\nSee Also\n--------\nDataFrame.at : Access a single value for a row/column label pair.\nDataFrame.loc : Access a group of rows and columns by label(s).\nDataFrame.iloc : Access a group of rows and columns by integer position(s).\n\nExamples\n--------\n>>> df = pd.DataFrame([[0, 2, 3], [0, 4, 1], [10, 20, 30]],\n...                   columns=['A', 'B', 'C'])\n>>> df\n    A   B   C\n0   0   2   3\n1   0   4   1\n2  10  20  30\n\nGet value at specified row/column pair\n\n>>> df.iat[1, 2]\n1\n\nSet value at specified row/column pair\n\n>>> df.iat[1, 2] = 10\n>>> df.iat[1, 2]\n10\n\nGet value within a series\n\n>>> df.loc[0].iat[1]\n2\n"
  },
  {
    "symbol": "Series.idxmax",
    "signature": "(self, axis: 'Axis' = 0, skipna: 'bool' = True, *args, **kwargs) -> 'Hashable'",
    "doc": "Return the row label of the maximum value.\n\nIf multiple values equal the maximum, the first row label with that\nvalue is returned.\n\nParameters\n----------\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.\nskipna : bool, default True\n    Exclude NA/null values. If the entire Series is NA, the result\n    will be NA.\n*args, **kwargs\n    Additional arguments and keywords have no effect but might be\n    accepted for compatibility with NumPy.\n\nReturns\n-------\nIndex\n    Label of the maximum value.\n\nRaises\n------\nValueError\n    If the Series is empty.\n\nSee Also\n--------\nnumpy.argmax : Return indices of the maximum values\n    along the given axis.\nDataFrame.idxmax : Return index of first occurrence of maximum\n    over requested axis.\nSeries.idxmin : Return index *label* of the first occurrence\n    of minimum of values.\n\nNotes\n-----\nThis method is the Series version of ``ndarray.argmax``. This method\nreturns the label of the maximum, while ``ndarray.argmax`` returns\nthe position. To get the position, use ``series.values.argmax()``.\n\nExamples\n--------\n>>> s = pd.Series(data=[1, None, 4, 3, 4],\n...               index=['A', 'B', 'C', 'D', 'E'])\n>>> s\nA    1.0\nB    NaN\nC    4.0\nD    3.0\nE    4.0\ndtype: float64\n\n>>> s.idxmax()\n'C'\n\nIf `skipna` is False and there is an NA value in the data,\nthe function returns ``nan``.\n\n>>> s.idxmax(skipna=False)\nnan"
  },
  {
    "symbol": "Series.idxmin",
    "signature": "(self, axis: 'Axis' = 0, skipna: 'bool' = True, *args, **kwargs) -> 'Hashable'",
    "doc": "Return the row label of the minimum value.\n\nIf multiple values equal the minimum, the first row label with that\nvalue is returned.\n\nParameters\n----------\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.\nskipna : bool, default True\n    Exclude NA/null values. If the entire Series is NA, the result\n    will be NA.\n*args, **kwargs\n    Additional arguments and keywords have no effect but might be\n    accepted for compatibility with NumPy.\n\nReturns\n-------\nIndex\n    Label of the minimum value.\n\nRaises\n------\nValueError\n    If the Series is empty.\n\nSee Also\n--------\nnumpy.argmin : Return indices of the minimum values\n    along the given axis.\nDataFrame.idxmin : Return index of first occurrence of minimum\n    over requested axis.\nSeries.idxmax : Return index *label* of the first occurrence\n    of maximum of values.\n\nNotes\n-----\nThis method is the Series version of ``ndarray.argmin``. This method\nreturns the label of the minimum, while ``ndarray.argmin`` returns\nthe position. To get the position, use ``series.values.argmin()``.\n\nExamples\n--------\n>>> s = pd.Series(data=[1, None, 4, 1],\n...               index=['A', 'B', 'C', 'D'])\n>>> s\nA    1.0\nB    NaN\nC    4.0\nD    1.0\ndtype: float64\n\n>>> s.idxmin()\n'A'\n\nIf `skipna` is False and there is an NA value in the data,\nthe function returns ``nan``.\n\n>>> s.idxmin(skipna=False)\nnan"
  },
  {
    "symbol": "Series.iloc",
    "signature": "(property)",
    "doc": "\nPurely integer-location based indexing for selection by position.\n\n.. deprecated:: 2.2.0\n\n   Returning a tuple from a callable is deprecated.\n\n``.iloc[]`` is primarily integer position based (from ``0`` to\n``length-1`` of the axis), but may also be used with a boolean\narray.\n\nAllowed inputs are:\n\n- An integer, e.g. ``5``.\n- A list or array of integers, e.g. ``[4, 3, 0]``.\n- A slice object with ints, e.g. ``1:7``.\n- A boolean array.\n- A ``callable`` function with one argument (the calling Series or\n  DataFrame) and that returns valid output for indexing (one of the above).\n  This is useful in method chains, when you don't have a reference to the\n  calling object, but would like to base your selection on\n  some value.\n- A tuple of row and column indexes. The tuple elements consist of one of the\n  above inputs, e.g. ``(0, 1)``.\n\n``.iloc`` will raise ``IndexError`` if a requested indexer is\nout-of-bounds, except *slice* indexers which allow out-of-bounds\nindexing (this conforms with python/numpy *slice* semantics).\n\nSee more at :ref:`Selection by Position <indexing.integer>`.\n\nSee Also\n--------\nDataFrame.iat : Fast integer location scalar accessor.\nDataFrame.loc : Purely label-location based indexer for selection by label.\nSeries.iloc : Purely integer-location based indexing for\n               selection by position.\n\nExamples\n--------\n>>> mydict = [{'a': 1, 'b': 2, 'c': 3, 'd': 4},\n...           {'a': 100, 'b': 200, 'c': 300, 'd': 400},\n...           {'a': 1000, 'b': 2000, 'c': 3000, 'd': 4000}]\n>>> df = pd.DataFrame(mydict)\n>>> df\n      a     b     c     d\n0     1     2     3     4\n1   100   200   300   400\n2  1000  2000  3000  4000\n\n**Indexing just the rows**\n\nWith a scalar integer.\n\n>>> type(df.iloc[0])\n<class 'pandas.core.series.Series'>\n>>> df.iloc[0]\na    1\nb    2\nc    3\nd    4\nName: 0, dtype: int64\n\nWith a list of integers.\n\n>>> df.iloc[[0]]\n   a  b  c  d\n0  1  2  3  4\n>>> type(df.iloc[[0]])\n<class 'pandas.core.frame.DataFrame'>\n\n>>> df.iloc[[0, 1]]\n     a    b    c    d\n0    1    2    3    4\n1  100  200  300  400\n\nWith a `slice` object.\n\n>>> df.iloc[:3]\n      a     b     c     d\n0     1     2     3     4\n1   100   200   300   400\n2  1000  2000  3000  4000\n\nWith a boolean mask the same length as the index.\n\n>>> df.iloc[[True, False, True]]\n      a     b     c     d\n0     1     2     3     4\n2  1000  2000  3000  4000\n\nWith a callable, useful in method chains. The `x` passed\nto the ``lambda`` is the DataFrame being sliced. This selects\nthe rows whose index label even.\n\n>>> df.iloc[lambda x: x.index % 2 == 0]\n      a     b     c     d\n0     1     2     3     4\n2  1000  2000  3000  4000\n\n**Indexing both axes**\n\nYou can mix the indexer types for the index and columns. Use ``:`` to\nselect the entire axis.\n\nWith scalar integers.\n\n>>> df.iloc[0, 1]\n2\n\nWith lists of integers.\n\n>>> df.iloc[[0, 2], [1, 3]]\n      b     d\n0     2     4\n2  2000  4000\n\nWith `slice` objects.\n\n>>> df.iloc[1:3, 0:3]\n      a     b     c\n1   100   200   300\n2  1000  2000  3000\n\nWith a boolean array whose length matches the columns.\n\n>>> df.iloc[:, [True, False, True, False]]\n      a     c\n0     1     3\n1   100   300\n2  1000  3000\n\nWith a callable function that expects the Series or DataFrame.\n\n>>> df.iloc[:, lambda df: [0, 2]]\n      a     c\n0     1     3\n1   100   300\n2  1000  3000\n"
  },
  {
    "symbol": "Series.index",
    "signature": "(property)",
    "doc": "\n        The index (axis labels) of the Series.\n\n        The index of a Series is used to label and identify each element of the\n        underlying data. The index can be thought of as an immutable ordered set\n        (technically a multi-set, as it may contain duplicate labels), and is\n        used to index and align data in pandas.\n\n        Returns\n        -------\n        Index\n            The index labels of the Series.\n\n        See Also\n        --------\n        Series.reindex : Conform Series to new index.\n        Index : The base pandas index type.\n\n        Notes\n        -----\n        For more information on pandas indexing, see the `indexing user guide\n        <https://pandas.pydata.org/docs/user_guide/indexing.html>`__.\n\n        Examples\n        --------\n        To create a Series with a custom index and view the index labels:\n\n        >>> cities = ['Kolkata', 'Chicago', 'Toronto', 'Lisbon']\n        >>> populations = [14.85, 2.71, 2.93, 0.51]\n        >>> city_series = pd.Series(populations, index=cities)\n        >>> city_series.index\n        Index(['Kolkata', 'Chicago', 'Toronto', 'Lisbon'], dtype='object')\n\n        To change the index labels of an existing Series:\n\n        >>> city_series.index = ['KOL', 'CHI', 'TOR', 'LIS']\n        >>> city_series.index\n        Index(['KOL', 'CHI', 'TOR', 'LIS'], dtype='object')\n        "
  },
  {
    "symbol": "Series.infer_objects",
    "signature": "(self, copy: 'bool_t | None' = None) -> 'Self'",
    "doc": "Attempt to infer better dtypes for object columns.\n\nAttempts soft conversion of object-dtyped\ncolumns, leaving non-object and unconvertible\ncolumns unchanged. The inference rules are the\nsame as during normal Series/DataFrame construction.\n\nParameters\n----------\ncopy : bool, default True\n    Whether to make a copy for non-object or non-inferable columns\n    or Series.\n\n    .. note::\n        The `copy` keyword will change behavior in pandas 3.0.\n        `Copy-on-Write\n        <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n        will be enabled by default, which means that all methods with a\n        `copy` keyword will use a lazy copy mechanism to defer the copy and\n        ignore the `copy` keyword. The `copy` keyword will be removed in a\n        future version of pandas.\n\n        You can already get the future behavior and improvements through\n        enabling copy on write ``pd.options.mode.copy_on_write = True``\n\nReturns\n-------\nsame type as input object\n\nSee Also\n--------\nto_datetime : Convert argument to datetime.\nto_timedelta : Convert argument to timedelta.\nto_numeric : Convert argument to numeric type.\nconvert_dtypes : Convert argument to best possible dtype.\n\nExamples\n--------\n>>> df = pd.DataFrame({\"A\": [\"a\", 1, 2, 3]})\n>>> df = df.iloc[1:]\n>>> df\n   A\n1  1\n2  2\n3  3\n\n>>> df.dtypes\nA    object\ndtype: object\n\n>>> df.infer_objects().dtypes\nA    int64\ndtype: object"
  },
  {
    "symbol": "Series.info",
    "signature": "(self, verbose: 'bool | None' = None, buf: 'IO[str] | None' = None, max_cols: 'int | None' = None, memory_usage: 'bool | str | None' = None, show_counts: 'bool' = True) -> 'None'",
    "doc": "Print a concise summary of a Series.\n\nThis method prints information about a Series including\nthe index dtype, non-null values and memory usage.\n\n.. versionadded:: 1.4.0\n\nParameters\n----------\nverbose : bool, optional\n    Whether to print the full summary. By default, the setting in\n    ``pandas.options.display.max_info_columns`` is followed.\nbuf : writable buffer, defaults to sys.stdout\n    Where to send the output. By default, the output is printed to\n    sys.stdout. Pass a writable buffer if you need to further process\n    the output.\n\nmemory_usage : bool, str, optional\n    Specifies whether total memory usage of the Series\n    elements (including the index) should be displayed. By default,\n    this follows the ``pandas.options.display.memory_usage`` setting.\n\n    True always show memory usage. False never shows memory usage.\n    A value of 'deep' is equivalent to \"True with deep introspection\".\n    Memory usage is shown in human-readable units (base-2\n    representation). Without deep introspection a memory estimation is\n    made based in column dtype and number of rows assuming values\n    consume the same memory amount for corresponding dtypes. With deep\n    memory introspection, a real memory usage calculation is performed\n    at the cost of computational resources. See the\n    :ref:`Frequently Asked Questions <df-memory-usage>` for more\n    details.\nshow_counts : bool, optional\n    Whether to show the non-null counts. By default, this is shown\n    only if the DataFrame is smaller than\n    ``pandas.options.display.max_info_rows`` and\n    ``pandas.options.display.max_info_columns``. A value of True always\n    shows the counts, and False never shows the counts.\n\nReturns\n-------\nNone\n    This method prints a summary of a Series and returns None.\n\nSee Also\n--------\nSeries.describe: Generate descriptive statistics of Series.\nSeries.memory_usage: Memory usage of Series.\n\nExamples\n--------\n>>> int_values = [1, 2, 3, 4, 5]\n>>> text_values = ['alpha', 'beta', 'gamma', 'delta', 'epsilon']\n>>> s = pd.Series(text_values, index=int_values)\n>>> s.info()\n<class 'pandas.core.series.Series'>\nIndex: 5 entries, 1 to 5\nSeries name: None\nNon-Null Count  Dtype\n--------------  -----\n5 non-null      object\ndtypes: object(1)\nmemory usage: 80.0+ bytes\n\nPrints a summary excluding information about its values:\n\n>>> s.info(verbose=False)\n<class 'pandas.core.series.Series'>\nIndex: 5 entries, 1 to 5\ndtypes: object(1)\nmemory usage: 80.0+ bytes\n\nPipe output of Series.info to buffer instead of sys.stdout, get\nbuffer content and writes to a text file:\n\n>>> import io\n>>> buffer = io.StringIO()\n>>> s.info(buf=buffer)\n>>> s = buffer.getvalue()\n>>> with open(\"df_info.txt\", \"w\",\n...           encoding=\"utf-8\") as f:  # doctest: +SKIP\n...     f.write(s)\n260\n\nThe `memory_usage` parameter allows deep introspection mode, specially\nuseful for big Series and fine-tune memory optimization:\n\n>>> random_strings_array = np.random.choice(['a', 'b', 'c'], 10 ** 6)\n>>> s = pd.Series(np.random.choice(['a', 'b', 'c'], 10 ** 6))\n>>> s.info()\n<class 'pandas.core.series.Series'>\nRangeIndex: 1000000 entries, 0 to 999999\nSeries name: None\nNon-Null Count    Dtype\n--------------    -----\n1000000 non-null  object\ndtypes: object(1)\nmemory usage: 7.6+ MB\n\n>>> s.info(memory_usage='deep')\n<class 'pandas.core.series.Series'>\nRangeIndex: 1000000 entries, 0 to 999999\nSeries name: None\nNon-Null Count    Dtype\n--------------    -----\n1000000 non-null  object\ndtypes: object(1)\nmemory usage: 55.3 MB"
  },
  {
    "symbol": "Series.interpolate",
    "signature": "(self, method: 'InterpolateOptions' = 'linear', *, axis: 'Axis' = 0, limit: 'int | None' = None, inplace: 'bool_t' = False, limit_direction: \"Literal['forward', 'backward', 'both'] | None\" = None, limit_area: \"Literal['inside', 'outside'] | None\" = None, downcast: \"Literal['infer'] | None | lib.NoDefault\" = <no_default>, **kwargs) -> 'Self | None'",
    "doc": "Fill NaN values using an interpolation method.\n\nPlease note that only ``method='linear'`` is supported for\nDataFrame/Series with a MultiIndex.\n\nParameters\n----------\nmethod : str, default 'linear'\n    Interpolation technique to use. One of:\n\n    * 'linear': Ignore the index and treat the values as equally\n      spaced. This is the only method supported on MultiIndexes.\n    * 'time': Works on daily and higher resolution data to interpolate\n      given length of interval.\n    * 'index', 'values': use the actual numerical values of the index.\n    * 'pad': Fill in NaNs using existing values.\n    * 'nearest', 'zero', 'slinear', 'quadratic', 'cubic',\n      'barycentric', 'polynomial': Passed to\n      `scipy.interpolate.interp1d`, whereas 'spline' is passed to\n      `scipy.interpolate.UnivariateSpline`. These methods use the numerical\n      values of the index.  Both 'polynomial' and 'spline' require that\n      you also specify an `order` (int), e.g.\n      ``df.interpolate(method='polynomial', order=5)``. Note that,\n      `slinear` method in Pandas refers to the Scipy first order `spline`\n      instead of Pandas first order `spline`.\n    * 'krogh', 'piecewise_polynomial', 'spline', 'pchip', 'akima',\n      'cubicspline': Wrappers around the SciPy interpolation methods of\n      similar names. See `Notes`.\n    * 'from_derivatives': Refers to\n      `scipy.interpolate.BPoly.from_derivatives`.\n\naxis : {{0 or 'index', 1 or 'columns', None}}, default None\n    Axis to interpolate along. For `Series` this parameter is unused\n    and defaults to 0.\nlimit : int, optional\n    Maximum number of consecutive NaNs to fill. Must be greater than\n    0.\ninplace : bool, default False\n    Update the data in place if possible.\nlimit_direction : {{'forward', 'backward', 'both'}}, Optional\n    Consecutive NaNs will be filled in this direction.\n\n    If limit is specified:\n        * If 'method' is 'pad' or 'ffill', 'limit_direction' must be 'forward'.\n        * If 'method' is 'backfill' or 'bfill', 'limit_direction' must be\n          'backwards'.\n\n    If 'limit' is not specified:\n        * If 'method' is 'backfill' or 'bfill', the default is 'backward'\n        * else the default is 'forward'\n\n    raises ValueError if `limit_direction` is 'forward' or 'both' and\n        method is 'backfill' or 'bfill'.\n    raises ValueError if `limit_direction` is 'backward' or 'both' and\n        method is 'pad' or 'ffill'.\n\nlimit_area : {{`None`, 'inside', 'outside'}}, default None\n    If limit is specified, consecutive NaNs will be filled with this\n    restriction.\n\n    * ``None``: No fill restriction.\n    * 'inside': Only fill NaNs surrounded by valid values\n      (interpolate).\n    * 'outside': Only fill NaNs outside valid values (extrapolate).\n\ndowncast : optional, 'infer' or None, defaults to None\n    Downcast dtypes if possible.\n\n    .. deprecated:: 2.1.0\n\n``**kwargs`` : optional\n    Keyword arguments to pass on to the interpolating function.\n\nReturns\n-------\nSeries or DataFrame or None\n    Returns the same object type as the caller, interpolated at\n    some or all ``NaN`` values or None if ``inplace=True``.\n\nSee Also\n--------\nfillna : Fill missing values using different methods.\nscipy.interpolate.Akima1DInterpolator : Piecewise cubic polynomials\n    (Akima interpolator).\nscipy.interpolate.BPoly.from_derivatives : Piecewise polynomial in the\n    Bernstein basis.\nscipy.interpolate.interp1d : Interpolate a 1-D function.\nscipy.interpolate.KroghInterpolator : Interpolate polynomial (Krogh\n    interpolator).\nscipy.interpolate.PchipInterpolator : PCHIP 1-d monotonic cubic\n    interpolation.\nscipy.interpolate.CubicSpline : Cubic spline data interpolator.\n\nNotes\n-----\nThe 'krogh', 'piecewise_polynomial', 'spline', 'pchip' and 'akima'\nmethods are wrappers around the respective SciPy implementations of\nsimilar names. These use the actual numerical values of the index.\nFor more information on their behavior, see the\n`SciPy documentation\n<https://docs.scipy.org/doc/scipy/reference/interpolate.html#univariate-interpolation>`__.\n\nExamples\n--------\nFilling in ``NaN`` in a :class:`~pandas.Series` via linear\ninterpolation.\n\n>>> s = pd.Series([0, 1, np.nan, 3])\n>>> s\n0    0.0\n1    1.0\n2    NaN\n3    3.0\ndtype: float64\n>>> s.interpolate()\n0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float64\n\nFilling in ``NaN`` in a Series via polynomial interpolation or splines:\nBoth 'polynomial' and 'spline' methods require that you also specify\nan ``order`` (int).\n\n>>> s = pd.Series([0, 2, np.nan, 8])\n>>> s.interpolate(method='polynomial', order=2)\n0    0.000000\n1    2.000000\n2    4.666667\n3    8.000000\ndtype: float64\n\nFill the DataFrame forward (that is, going down) along each column\nusing linear interpolation.\n\nNote how the last entry in column 'a' is interpolated differently,\nbecause there is no entry after it to use for interpolation.\nNote how the first entry in column 'b' remains ``NaN``, because there\nis no entry before it to use for interpolation.\n\n>>> df = pd.DataFrame([(0.0, np.nan, -1.0, 1.0),\n...                    (np.nan, 2.0, np.nan, np.nan),\n...                    (2.0, 3.0, np.nan, 9.0),\n...                    (np.nan, 4.0, -4.0, 16.0)],\n...                   columns=list('abcd'))\n>>> df\n     a    b    c     d\n0  0.0  NaN -1.0   1.0\n1  NaN  2.0  NaN   NaN\n2  2.0  3.0  NaN   9.0\n3  NaN  4.0 -4.0  16.0\n>>> df.interpolate(method='linear', limit_direction='forward', axis=0)\n     a    b    c     d\n0  0.0  NaN -1.0   1.0\n1  1.0  2.0 -2.0   5.0\n2  2.0  3.0 -3.0   9.0\n3  2.0  4.0 -4.0  16.0\n\nUsing polynomial interpolation.\n\n>>> df['d'].interpolate(method='polynomial', order=2)\n0     1.0\n1     4.0\n2     9.0\n3    16.0\nName: d, dtype: float64"
  },
  {
    "symbol": "Series.is_monotonic_decreasing",
    "signature": "(property)",
    "doc": "\nReturn boolean if values in the object are monotonically decreasing.\n\nReturns\n-------\nbool\n\nExamples\n--------\n>>> s = pd.Series([3, 2, 2, 1])\n>>> s.is_monotonic_decreasing\nTrue\n\n>>> s = pd.Series([1, 2, 3])\n>>> s.is_monotonic_decreasing\nFalse\n"
  },
  {
    "symbol": "Series.is_monotonic_increasing",
    "signature": "(property)",
    "doc": "\nReturn boolean if values in the object are monotonically increasing.\n\nReturns\n-------\nbool\n\nExamples\n--------\n>>> s = pd.Series([1, 2, 2])\n>>> s.is_monotonic_increasing\nTrue\n\n>>> s = pd.Series([3, 2, 1])\n>>> s.is_monotonic_increasing\nFalse\n"
  },
  {
    "symbol": "Series.is_unique",
    "signature": "(property)",
    "doc": "\nReturn boolean if values in the object are unique.\n\nReturns\n-------\nbool\n\nExamples\n--------\n>>> s = pd.Series([1, 2, 3])\n>>> s.is_unique\nTrue\n\n>>> s = pd.Series([1, 2, 3, 1])\n>>> s.is_unique\nFalse\n"
  },
  {
    "symbol": "Series.isin",
    "signature": "(self, values) -> 'Series'",
    "doc": "Whether elements in Series are contained in `values`.\n\nReturn a boolean Series showing whether each element in the Series\nmatches an element in the passed sequence of `values` exactly.\n\nParameters\n----------\nvalues : set or list-like\n    The sequence of values to test. Passing in a single string will\n    raise a ``TypeError``. Instead, turn a single string into a\n    list of one element.\n\nReturns\n-------\nSeries\n    Series of booleans indicating if each element is in values.\n\nRaises\n------\nTypeError\n  * If `values` is a string\n\nSee Also\n--------\nDataFrame.isin : Equivalent method on DataFrame.\n\nExamples\n--------\n>>> s = pd.Series(['llama', 'cow', 'llama', 'beetle', 'llama',\n...                'hippo'], name='animal')\n>>> s.isin(['cow', 'llama'])\n0     True\n1     True\n2     True\n3    False\n4     True\n5    False\nName: animal, dtype: bool\n\nTo invert the boolean values, use the ``~`` operator:\n\n>>> ~s.isin(['cow', 'llama'])\n0    False\n1    False\n2    False\n3     True\n4    False\n5     True\nName: animal, dtype: bool\n\nPassing a single string as ``s.isin('llama')`` will raise an error. Use\na list of one element instead:\n\n>>> s.isin(['llama'])\n0     True\n1    False\n2     True\n3    False\n4     True\n5    False\nName: animal, dtype: bool\n\nStrings and integers are distinct and are therefore not comparable:\n\n>>> pd.Series([1]).isin(['1'])\n0    False\ndtype: bool\n>>> pd.Series([1.1]).isin(['1.1'])\n0    False\ndtype: bool"
  },
  {
    "symbol": "Series.isna",
    "signature": "(self) -> 'Series'",
    "doc": "Detect missing values.\n\nReturn a boolean same-sized object indicating if the values are NA.\nNA values, such as None or :attr:`numpy.NaN`, gets mapped to True\nvalues.\nEverything else gets mapped to False values. Characters such as empty\nstrings ``''`` or :attr:`numpy.inf` are not considered NA values\n(unless you set ``pandas.options.mode.use_inf_as_na = True``).\n\nReturns\n-------\nSeries\n    Mask of bool values for each element in Series that\n    indicates whether an element is an NA value.\n\nSee Also\n--------\nSeries.isnull : Alias of isna.\nSeries.notna : Boolean inverse of isna.\nSeries.dropna : Omit axes labels with missing values.\nisna : Top-level isna.\n\nExamples\n--------\nShow which entries in a DataFrame are NA.\n\n>>> df = pd.DataFrame(dict(age=[5, 6, np.nan],\n...                        born=[pd.NaT, pd.Timestamp('1939-05-27'),\n...                              pd.Timestamp('1940-04-25')],\n...                        name=['Alfred', 'Batman', ''],\n...                        toy=[None, 'Batmobile', 'Joker']))\n>>> df\n   age       born    name        toy\n0  5.0        NaT  Alfred       None\n1  6.0 1939-05-27  Batman  Batmobile\n2  NaN 1940-04-25              Joker\n\n>>> df.isna()\n     age   born   name    toy\n0  False   True  False   True\n1  False  False  False  False\n2   True  False  False  False\n\nShow which entries in a Series are NA.\n\n>>> ser = pd.Series([5, 6, np.nan])\n>>> ser\n0    5.0\n1    6.0\n2    NaN\ndtype: float64\n\n>>> ser.isna()\n0    False\n1    False\n2     True\ndtype: bool"
  },
  {
    "symbol": "Series.isnull",
    "signature": "(self) -> 'Series'",
    "doc": "Series.isnull is an alias for Series.isna.\n\nDetect missing values.\n\nReturn a boolean same-sized object indicating if the values are NA.\nNA values, such as None or :attr:`numpy.NaN`, gets mapped to True\nvalues.\nEverything else gets mapped to False values. Characters such as empty\nstrings ``''`` or :attr:`numpy.inf` are not considered NA values\n(unless you set ``pandas.options.mode.use_inf_as_na = True``).\n\nReturns\n-------\nSeries\n    Mask of bool values for each element in Series that\n    indicates whether an element is an NA value.\n\nSee Also\n--------\nSeries.isnull : Alias of isna.\nSeries.notna : Boolean inverse of isna.\nSeries.dropna : Omit axes labels with missing values.\nisna : Top-level isna.\n\nExamples\n--------\nShow which entries in a DataFrame are NA.\n\n>>> df = pd.DataFrame(dict(age=[5, 6, np.nan],\n...                        born=[pd.NaT, pd.Timestamp('1939-05-27'),\n...                              pd.Timestamp('1940-04-25')],\n...                        name=['Alfred', 'Batman', ''],\n...                        toy=[None, 'Batmobile', 'Joker']))\n>>> df\n   age       born    name        toy\n0  5.0        NaT  Alfred       None\n1  6.0 1939-05-27  Batman  Batmobile\n2  NaN 1940-04-25              Joker\n\n>>> df.isna()\n     age   born   name    toy\n0  False   True  False   True\n1  False  False  False  False\n2   True  False  False  False\n\nShow which entries in a Series are NA.\n\n>>> ser = pd.Series([5, 6, np.nan])\n>>> ser\n0    5.0\n1    6.0\n2    NaN\ndtype: float64\n\n>>> ser.isna()\n0    False\n1    False\n2     True\ndtype: bool"
  },
  {
    "symbol": "Series.item",
    "signature": "(self)",
    "doc": "Return the first element of the underlying data as a Python scalar.\n\nReturns\n-------\nscalar\n    The first element of Series or Index.\n\nRaises\n------\nValueError\n    If the data is not length = 1.\n\nExamples\n--------\n>>> s = pd.Series([1])\n>>> s.item()\n1\n\nFor an index:\n\n>>> s = pd.Series([1], index=['a'])\n>>> s.index.item()\n'a'"
  },
  {
    "symbol": "Series.items",
    "signature": "(self) -> 'Iterable[tuple[Hashable, Any]]'",
    "doc": "Lazily iterate over (index, value) tuples.\n\nThis method returns an iterable tuple (index, value). This is\nconvenient if you want to create a lazy iterator.\n\nReturns\n-------\niterable\n    Iterable of tuples containing the (index, value) pairs from a\n    Series.\n\nSee Also\n--------\nDataFrame.items : Iterate over (column name, Series) pairs.\nDataFrame.iterrows : Iterate over DataFrame rows as (index, Series) pairs.\n\nExamples\n--------\n>>> s = pd.Series(['A', 'B', 'C'])\n>>> for index, value in s.items():\n...     print(f\"Index : {index}, Value : {value}\")\nIndex : 0, Value : A\nIndex : 1, Value : B\nIndex : 2, Value : C"
  },
  {
    "symbol": "Series.keys",
    "signature": "(self) -> 'Index'",
    "doc": "Return alias for index.\n\nReturns\n-------\nIndex\n    Index of the Series.\n\nExamples\n--------\n>>> s = pd.Series([1, 2, 3], index=[0, 1, 2])\n>>> s.keys()\nIndex([0, 1, 2], dtype='int64')"
  },
  {
    "symbol": "Series.kurt",
    "signature": "(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs)",
    "doc": "Return unbiased kurtosis over requested axis.\n\nKurtosis obtained using Fisher's definition of\nkurtosis (kurtosis of normal == 0.0). Normalized by N-1.\n\nParameters\n----------\naxis : {index (0)}\n    Axis for the function to be applied on.\n    For `Series` this parameter is unused and defaults to 0.\n\n    For DataFrames, specifying ``axis=None`` will apply the aggregation\n    across both axes.\n\n    .. versionadded:: 2.0.0\n\nskipna : bool, default True\n    Exclude NA/null values when computing the result.\nnumeric_only : bool, default False\n    Include only float, int, boolean columns. Not implemented for Series.\n\n**kwargs\n    Additional keyword arguments to be passed to the function.\n\nReturns\n-------\nscalar or scalar\n\n            Examples\n            --------\n            >>> s = pd.Series([1, 2, 2, 3], index=['cat', 'dog', 'dog', 'mouse'])\n            >>> s\n            cat    1\n            dog    2\n            dog    2\n            mouse  3\n            dtype: int64\n            >>> s.kurt()\n            1.5\n\n            With a DataFrame\n\n            >>> df = pd.DataFrame({'a': [1, 2, 2, 3], 'b': [3, 4, 4, 4]},\n            ...                   index=['cat', 'dog', 'dog', 'mouse'])\n            >>> df\n                   a   b\n              cat  1   3\n              dog  2   4\n              dog  2   4\n            mouse  3   4\n            >>> df.kurt()\n            a   1.5\n            b   4.0\n            dtype: float64\n\n            With axis=None\n\n            >>> df.kurt(axis=None).round(6)\n            -0.988693\n\n            Using axis=1\n\n            >>> df = pd.DataFrame({'a': [1, 2], 'b': [3, 4], 'c': [3, 4], 'd': [1, 2]},\n            ...                   index=['cat', 'dog'])\n            >>> df.kurt(axis=1)\n            cat   -6.0\n            dog   -6.0\n            dtype: float64"
  },
  {
    "symbol": "Series.kurtosis",
    "signature": "(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs)",
    "doc": "Return unbiased kurtosis over requested axis.\n\nKurtosis obtained using Fisher's definition of\nkurtosis (kurtosis of normal == 0.0). Normalized by N-1.\n\nParameters\n----------\naxis : {index (0)}\n    Axis for the function to be applied on.\n    For `Series` this parameter is unused and defaults to 0.\n\n    For DataFrames, specifying ``axis=None`` will apply the aggregation\n    across both axes.\n\n    .. versionadded:: 2.0.0\n\nskipna : bool, default True\n    Exclude NA/null values when computing the result.\nnumeric_only : bool, default False\n    Include only float, int, boolean columns. Not implemented for Series.\n\n**kwargs\n    Additional keyword arguments to be passed to the function.\n\nReturns\n-------\nscalar or scalar\n\n            Examples\n            --------\n            >>> s = pd.Series([1, 2, 2, 3], index=['cat', 'dog', 'dog', 'mouse'])\n            >>> s\n            cat    1\n            dog    2\n            dog    2\n            mouse  3\n            dtype: int64\n            >>> s.kurt()\n            1.5\n\n            With a DataFrame\n\n            >>> df = pd.DataFrame({'a': [1, 2, 2, 3], 'b': [3, 4, 4, 4]},\n            ...                   index=['cat', 'dog', 'dog', 'mouse'])\n            >>> df\n                   a   b\n              cat  1   3\n              dog  2   4\n              dog  2   4\n            mouse  3   4\n            >>> df.kurt()\n            a   1.5\n            b   4.0\n            dtype: float64\n\n            With axis=None\n\n            >>> df.kurt(axis=None).round(6)\n            -0.988693\n\n            Using axis=1\n\n            >>> df = pd.DataFrame({'a': [1, 2], 'b': [3, 4], 'c': [3, 4], 'd': [1, 2]},\n            ...                   index=['cat', 'dog'])\n            >>> df.kurt(axis=1)\n            cat   -6.0\n            dog   -6.0\n            dtype: float64"
  },
  {
    "symbol": "Series.last",
    "signature": "(self, offset) -> 'Self'",
    "doc": "Select final periods of time series data based on a date offset.\n\n.. deprecated:: 2.1\n    :meth:`.last` is deprecated and will be removed in a future version.\n    Please create a mask and filter using `.loc` instead.\n\nFor a DataFrame with a sorted DatetimeIndex, this function\nselects the last few rows based on a date offset.\n\nParameters\n----------\noffset : str, DateOffset, dateutil.relativedelta\n    The offset length of the data that will be selected. For instance,\n    '3D' will display all the rows having their index within the last 3 days.\n\nReturns\n-------\nSeries or DataFrame\n    A subset of the caller.\n\nRaises\n------\nTypeError\n    If the index is not  a :class:`DatetimeIndex`\n\nSee Also\n--------\nfirst : Select initial periods of time series based on a date offset.\nat_time : Select values at a particular time of the day.\nbetween_time : Select values between particular times of the day.\n\nNotes\n-----\n.. deprecated:: 2.1.0\n    Please create a mask and filter using `.loc` instead\n\nExamples\n--------\n>>> i = pd.date_range('2018-04-09', periods=4, freq='2D')\n>>> ts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)\n>>> ts\n            A\n2018-04-09  1\n2018-04-11  2\n2018-04-13  3\n2018-04-15  4\n\nGet the rows for the last 3 days:\n\n>>> ts.last('3D')  # doctest: +SKIP\n            A\n2018-04-13  3\n2018-04-15  4\n\nNotice the data for 3 last calendar days were returned, not the last\n3 observed days in the dataset, and therefore data for 2018-04-11 was\nnot returned."
  },
  {
    "symbol": "Series.last_valid_index",
    "signature": "(self) -> 'Hashable | None'",
    "doc": "Return index for last non-NA value or None, if no non-NA value is found.\n\nReturns\n-------\ntype of index\n\nExamples\n--------\nFor Series:\n\n>>> s = pd.Series([None, 3, 4])\n>>> s.first_valid_index()\n1\n>>> s.last_valid_index()\n2\n\n>>> s = pd.Series([None, None])\n>>> print(s.first_valid_index())\nNone\n>>> print(s.last_valid_index())\nNone\n\nIf all elements in Series are NA/null, returns None.\n\n>>> s = pd.Series()\n>>> print(s.first_valid_index())\nNone\n>>> print(s.last_valid_index())\nNone\n\nIf Series is empty, returns None.\n\nFor DataFrame:\n\n>>> df = pd.DataFrame({'A': [None, None, 2], 'B': [None, 3, 4]})\n>>> df\n     A      B\n0  NaN    NaN\n1  NaN    3.0\n2  2.0    4.0\n>>> df.first_valid_index()\n1\n>>> df.last_valid_index()\n2\n\n>>> df = pd.DataFrame({'A': [None, None, None], 'B': [None, None, None]})\n>>> df\n     A      B\n0  None   None\n1  None   None\n2  None   None\n>>> print(df.first_valid_index())\nNone\n>>> print(df.last_valid_index())\nNone\n\nIf all elements in DataFrame are NA/null, returns None.\n\n>>> df = pd.DataFrame()\n>>> df\nEmpty DataFrame\nColumns: []\nIndex: []\n>>> print(df.first_valid_index())\nNone\n>>> print(df.last_valid_index())\nNone\n\nIf DataFrame is empty, returns None."
  },
  {
    "symbol": "Series.le",
    "signature": "(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'",
    "doc": "Return Less than or equal to of series and other, element-wise (binary operator `le`).\n\nEquivalent to ``series <= other``, but with support to substitute a fill_value for\nmissing data in either one of the inputs.\n\nParameters\n----------\nother : Series or scalar value\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result of filling (at that location) will be missing.\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.\n\nReturns\n-------\nSeries\n    The result of the operation.\n\nExamples\n--------\n>>> a = pd.Series([1, 1, 1, np.nan, 1], index=['a', 'b', 'c', 'd', 'e'])\n>>> a\na    1.0\nb    1.0\nc    1.0\nd    NaN\ne    1.0\ndtype: float64\n>>> b = pd.Series([0, 1, 2, np.nan, 1], index=['a', 'b', 'c', 'd', 'f'])\n>>> b\na    0.0\nb    1.0\nc    2.0\nd    NaN\nf    1.0\ndtype: float64\n>>> a.le(b, fill_value=0)\na    False\nb     True\nc     True\nd    False\ne    False\nf     True\ndtype: bool"
  },
  {
    "symbol": "Series.loc",
    "signature": "(property)",
    "doc": "\nAccess a group of rows and columns by label(s) or a boolean array.\n\n``.loc[]`` is primarily label based, but may also be used with a\nboolean array.\n\nAllowed inputs are:\n\n- A single label, e.g. ``5`` or ``'a'``, (note that ``5`` is\n  interpreted as a *label* of the index, and **never** as an\n  integer position along the index).\n- A list or array of labels, e.g. ``['a', 'b', 'c']``.\n- A slice object with labels, e.g. ``'a':'f'``.\n\n  .. warning:: Note that contrary to usual python slices, **both** the\n      start and the stop are included\n\n- A boolean array of the same length as the axis being sliced,\n  e.g. ``[True, False, True]``.\n- An alignable boolean Series. The index of the key will be aligned before\n  masking.\n- An alignable Index. The Index of the returned selection will be the input.\n- A ``callable`` function with one argument (the calling Series or\n  DataFrame) and that returns valid output for indexing (one of the above)\n\nSee more at :ref:`Selection by Label <indexing.label>`.\n\nRaises\n------\nKeyError\n    If any items are not found.\nIndexingError\n    If an indexed key is passed and its index is unalignable to the frame index.\n\nSee Also\n--------\nDataFrame.at : Access a single value for a row/column label pair.\nDataFrame.iloc : Access group of rows and columns by integer position(s).\nDataFrame.xs : Returns a cross-section (row(s) or column(s)) from the\n               Series/DataFrame.\nSeries.loc : Access group of values using labels.\n\nExamples\n--------\n**Getting values**\n\n>>> df = pd.DataFrame([[1, 2], [4, 5], [7, 8]],\n...                   index=['cobra', 'viper', 'sidewinder'],\n...                   columns=['max_speed', 'shield'])\n>>> df\n            max_speed  shield\ncobra               1       2\nviper               4       5\nsidewinder          7       8\n\nSingle label. Note this returns the row as a Series.\n\n>>> df.loc['viper']\nmax_speed    4\nshield       5\nName: viper, dtype: int64\n\nList of labels. Note using ``[[]]`` returns a DataFrame.\n\n>>> df.loc[['viper', 'sidewinder']]\n            max_speed  shield\nviper               4       5\nsidewinder          7       8\n\nSingle label for row and column\n\n>>> df.loc['cobra', 'shield']\n2\n\nSlice with labels for row and single label for column. As mentioned\nabove, note that both the start and stop of the slice are included.\n\n>>> df.loc['cobra':'viper', 'max_speed']\ncobra    1\nviper    4\nName: max_speed, dtype: int64\n\nBoolean list with the same length as the row axis\n\n>>> df.loc[[False, False, True]]\n            max_speed  shield\nsidewinder          7       8\n\nAlignable boolean Series:\n\n>>> df.loc[pd.Series([False, True, False],\n...                  index=['viper', 'sidewinder', 'cobra'])]\n                     max_speed  shield\nsidewinder          7       8\n\nIndex (same behavior as ``df.reindex``)\n\n>>> df.loc[pd.Index([\"cobra\", \"viper\"], name=\"foo\")]\n       max_speed  shield\nfoo\ncobra          1       2\nviper          4       5\n\nConditional that returns a boolean Series\n\n>>> df.loc[df['shield'] > 6]\n            max_speed  shield\nsidewinder          7       8\n\nConditional that returns a boolean Series with column labels specified\n\n>>> df.loc[df['shield'] > 6, ['max_speed']]\n            max_speed\nsidewinder          7\n\nMultiple conditional using ``&`` that returns a boolean Series\n\n>>> df.loc[(df['max_speed'] > 1) & (df['shield'] < 8)]\n            max_speed  shield\nviper          4       5\n\nMultiple conditional using ``|`` that returns a boolean Series\n\n>>> df.loc[(df['max_speed'] > 4) | (df['shield'] < 5)]\n            max_speed  shield\ncobra               1       2\nsidewinder          7       8\n\nPlease ensure that each condition is wrapped in parentheses ``()``.\nSee the :ref:`user guide<indexing.boolean>`\nfor more details and explanations of Boolean indexing.\n\n.. note::\n    If you find yourself using 3 or more conditionals in ``.loc[]``,\n    consider using :ref:`advanced indexing<advanced.advanced_hierarchical>`.\n\n    See below for using ``.loc[]`` on MultiIndex DataFrames.\n\nCallable that returns a boolean Series\n\n>>> df.loc[lambda df: df['shield'] == 8]\n            max_speed  shield\nsidewinder          7       8\n\n**Setting values**\n\nSet value for all items matching the list of labels\n\n>>> df.loc[['viper', 'sidewinder'], ['shield']] = 50\n>>> df\n            max_speed  shield\ncobra               1       2\nviper               4      50\nsidewinder          7      50\n\nSet value for an entire row\n\n>>> df.loc['cobra'] = 10\n>>> df\n            max_speed  shield\ncobra              10      10\nviper               4      50\nsidewinder          7      50\n\nSet value for an entire column\n\n>>> df.loc[:, 'max_speed'] = 30\n>>> df\n            max_speed  shield\ncobra              30      10\nviper              30      50\nsidewinder         30      50\n\nSet value for rows matching callable condition\n\n>>> df.loc[df['shield'] > 35] = 0\n>>> df\n            max_speed  shield\ncobra              30      10\nviper               0       0\nsidewinder          0       0\n\nAdd value matching location\n\n>>> df.loc[\"viper\", \"shield\"] += 5\n>>> df\n            max_speed  shield\ncobra              30      10\nviper               0       5\nsidewinder          0       0\n\nSetting using a ``Series`` or a ``DataFrame`` sets the values matching the\nindex labels, not the index positions.\n\n>>> shuffled_df = df.loc[[\"viper\", \"cobra\", \"sidewinder\"]]\n>>> df.loc[:] += shuffled_df\n>>> df\n            max_speed  shield\ncobra              60      20\nviper               0      10\nsidewinder          0       0\n\n**Getting values on a DataFrame with an index that has integer labels**\n\nAnother example using integers for the index\n\n>>> df = pd.DataFrame([[1, 2], [4, 5], [7, 8]],\n...                   index=[7, 8, 9], columns=['max_speed', 'shield'])\n>>> df\n   max_speed  shield\n7          1       2\n8          4       5\n9          7       8\n\nSlice with integer labels for rows. As mentioned above, note that both\nthe start and stop of the slice are included.\n\n>>> df.loc[7:9]\n   max_speed  shield\n7          1       2\n8          4       5\n9          7       8\n\n**Getting values with a MultiIndex**\n\nA number of examples using a DataFrame with a MultiIndex\n\n>>> tuples = [\n...     ('cobra', 'mark i'), ('cobra', 'mark ii'),\n...     ('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),\n...     ('viper', 'mark ii'), ('viper', 'mark iii')\n... ]\n>>> index = pd.MultiIndex.from_tuples(tuples)\n>>> values = [[12, 2], [0, 4], [10, 20],\n...           [1, 4], [7, 1], [16, 36]]\n>>> df = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\n>>> df\n                     max_speed  shield\ncobra      mark i           12       2\n           mark ii           0       4\nsidewinder mark i           10      20\n           mark ii           1       4\nviper      mark ii           7       1\n           mark iii         16      36\n\nSingle label. Note this returns a DataFrame with a single index.\n\n>>> df.loc['cobra']\n         max_speed  shield\nmark i          12       2\nmark ii          0       4\n\nSingle index tuple. Note this returns a Series.\n\n>>> df.loc[('cobra', 'mark ii')]\nmax_speed    0\nshield       4\nName: (cobra, mark ii), dtype: int64\n\nSingle label for row and column. Similar to passing in a tuple, this\nreturns a Series.\n\n>>> df.loc['cobra', 'mark i']\nmax_speed    12\nshield        2\nName: (cobra, mark i), dtype: int64\n\nSingle tuple. Note using ``[[]]`` returns a DataFrame.\n\n>>> df.loc[[('cobra', 'mark ii')]]\n               max_speed  shield\ncobra mark ii          0       4\n\nSingle tuple for the index with a single label for the column\n\n>>> df.loc[('cobra', 'mark i'), 'shield']\n2\n\nSlice from index tuple to single label\n\n>>> df.loc[('cobra', 'mark i'):'viper']\n                     max_speed  shield\ncobra      mark i           12       2\n           mark ii           0       4\nsidewinder mark i           10      20\n           mark ii           1       4\nviper      mark ii           7       1\n           mark iii         16      36\n\nSlice from index tuple to index tuple\n\n>>> df.loc[('cobra', 'mark i'):('viper', 'mark ii')]\n                    max_speed  shield\ncobra      mark i          12       2\n           mark ii          0       4\nsidewinder mark i          10      20\n           mark ii          1       4\nviper      mark ii          7       1\n\nPlease see the :ref:`user guide<advanced.advanced_hierarchical>`\nfor more details and explanations of advanced indexing.\n"
  },
  {
    "symbol": "Series.lt",
    "signature": "(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'",
    "doc": "Return Less than of series and other, element-wise (binary operator `lt`).\n\nEquivalent to ``series < other``, but with support to substitute a fill_value for\nmissing data in either one of the inputs.\n\nParameters\n----------\nother : Series or scalar value\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result of filling (at that location) will be missing.\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.\n\nReturns\n-------\nSeries\n    The result of the operation.\n\nExamples\n--------\n>>> a = pd.Series([1, 1, 1, np.nan, 1], index=['a', 'b', 'c', 'd', 'e'])\n>>> a\na    1.0\nb    1.0\nc    1.0\nd    NaN\ne    1.0\ndtype: float64\n>>> b = pd.Series([0, 1, 2, np.nan, 1], index=['a', 'b', 'c', 'd', 'f'])\n>>> b\na    0.0\nb    1.0\nc    2.0\nd    NaN\nf    1.0\ndtype: float64\n>>> a.lt(b, fill_value=0)\na    False\nb    False\nc     True\nd    False\ne    False\nf     True\ndtype: bool"
  },
  {
    "symbol": "Series.map",
    "signature": "(self, arg: 'Callable | Mapping | Series', na_action: \"Literal['ignore'] | None\" = None) -> 'Series'",
    "doc": "Map values of Series according to an input mapping or function.\n\nUsed for substituting each value in a Series with another value,\nthat may be derived from a function, a ``dict`` or\na :class:`Series`.\n\nParameters\n----------\narg : function, collections.abc.Mapping subclass or Series\n    Mapping correspondence.\nna_action : {None, 'ignore'}, default None\n    If 'ignore', propagate NaN values, without passing them to the\n    mapping correspondence.\n\nReturns\n-------\nSeries\n    Same index as caller.\n\nSee Also\n--------\nSeries.apply : For applying more complex functions on a Series.\nSeries.replace: Replace values given in `to_replace` with `value`.\nDataFrame.apply : Apply a function row-/column-wise.\nDataFrame.map : Apply a function elementwise on a whole DataFrame.\n\nNotes\n-----\nWhen ``arg`` is a dictionary, values in Series that are not in the\ndictionary (as keys) are converted to ``NaN``. However, if the\ndictionary is a ``dict`` subclass that defines ``__missing__`` (i.e.\nprovides a method for default values), then this default is used\nrather than ``NaN``.\n\nExamples\n--------\n>>> s = pd.Series(['cat', 'dog', np.nan, 'rabbit'])\n>>> s\n0      cat\n1      dog\n2      NaN\n3   rabbit\ndtype: object\n\n``map`` accepts a ``dict`` or a ``Series``. Values that are not found\nin the ``dict`` are converted to ``NaN``, unless the dict has a default\nvalue (e.g. ``defaultdict``):\n\n>>> s.map({'cat': 'kitten', 'dog': 'puppy'})\n0   kitten\n1    puppy\n2      NaN\n3      NaN\ndtype: object\n\nIt also accepts a function:\n\n>>> s.map('I am a {}'.format)\n0       I am a cat\n1       I am a dog\n2       I am a nan\n3    I am a rabbit\ndtype: object\n\nTo avoid applying the function to missing values (and keep them as\n``NaN``) ``na_action='ignore'`` can be used:\n\n>>> s.map('I am a {}'.format, na_action='ignore')\n0     I am a cat\n1     I am a dog\n2            NaN\n3  I am a rabbit\ndtype: object"
  },
  {
    "symbol": "Series.mask",
    "signature": "(self, cond, other=<no_default>, *, inplace: 'bool_t' = False, axis: 'Axis | None' = None, level: 'Level | None' = None) -> 'Self | None'",
    "doc": "Replace values where the condition is True.\n\nParameters\n----------\ncond : bool Series/DataFrame, array-like, or callable\n    Where `cond` is False, keep the original value. Where\n    True, replace with corresponding value from `other`.\n    If `cond` is callable, it is computed on the Series/DataFrame and\n    should return boolean Series/DataFrame or array. The callable must\n    not change input Series/DataFrame (though pandas doesn't check it).\nother : scalar, Series/DataFrame, or callable\n    Entries where `cond` is True are replaced with\n    corresponding value from `other`.\n    If other is callable, it is computed on the Series/DataFrame and\n    should return scalar or Series/DataFrame. The callable must not\n    change input Series/DataFrame (though pandas doesn't check it).\n    If not specified, entries will be filled with the corresponding\n    NULL value (``np.nan`` for numpy dtypes, ``pd.NA`` for extension\n    dtypes).\ninplace : bool, default False\n    Whether to perform the operation in place on the data.\naxis : int, default None\n    Alignment axis if needed. For `Series` this parameter is\n    unused and defaults to 0.\nlevel : int, default None\n    Alignment level if needed.\n\nReturns\n-------\nSame type as caller or None if ``inplace=True``.\n\nSee Also\n--------\n:func:`DataFrame.where` : Return an object of same shape as\n    self.\n\nNotes\n-----\nThe mask method is an application of the if-then idiom. For each\nelement in the calling DataFrame, if ``cond`` is ``False`` the\nelement is used; otherwise the corresponding element from the DataFrame\n``other`` is used. If the axis of ``other`` does not align with axis of\n``cond`` Series/DataFrame, the misaligned index positions will be filled with\nTrue.\n\nThe signature for :func:`DataFrame.where` differs from\n:func:`numpy.where`. Roughly ``df1.where(m, df2)`` is equivalent to\n``np.where(m, df1, df2)``.\n\nFor further details and examples see the ``mask`` documentation in\n:ref:`indexing <indexing.where_mask>`.\n\nThe dtype of the object takes precedence. The fill value is casted to\nthe object's dtype, if this can be done losslessly.\n\nExamples\n--------\n>>> s = pd.Series(range(5))\n>>> s.where(s > 0)\n0    NaN\n1    1.0\n2    2.0\n3    3.0\n4    4.0\ndtype: float64\n>>> s.mask(s > 0)\n0    0.0\n1    NaN\n2    NaN\n3    NaN\n4    NaN\ndtype: float64\n\n>>> s = pd.Series(range(5))\n>>> t = pd.Series([True, False])\n>>> s.where(t, 99)\n0     0\n1    99\n2    99\n3    99\n4    99\ndtype: int64\n>>> s.mask(t, 99)\n0    99\n1     1\n2    99\n3    99\n4    99\ndtype: int64\n\n>>> s.where(s > 1, 10)\n0    10\n1    10\n2    2\n3    3\n4    4\ndtype: int64\n>>> s.mask(s > 1, 10)\n0     0\n1     1\n2    10\n3    10\n4    10\ndtype: int64\n\n>>> df = pd.DataFrame(np.arange(10).reshape(-1, 2), columns=['A', 'B'])\n>>> df\n   A  B\n0  0  1\n1  2  3\n2  4  5\n3  6  7\n4  8  9\n>>> m = df % 3 == 0\n>>> df.where(m, -df)\n   A  B\n0  0 -1\n1 -2  3\n2 -4 -5\n3  6 -7\n4 -8  9\n>>> df.where(m, -df) == np.where(m, df, -df)\n      A     B\n0  True  True\n1  True  True\n2  True  True\n3  True  True\n4  True  True\n>>> df.where(m, -df) == df.mask(~m, -df)\n      A     B\n0  True  True\n1  True  True\n2  True  True\n3  True  True\n4  True  True"
  },
  {
    "symbol": "Series.max",
    "signature": "(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs)",
    "doc": "Return the maximum of the values over the requested axis.\n\nIf you want the *index* of the maximum, use ``idxmax``. This is the equivalent of the ``numpy.ndarray`` method ``argmax``.\n\nParameters\n----------\naxis : {index (0)}\n    Axis for the function to be applied on.\n    For `Series` this parameter is unused and defaults to 0.\n\n    For DataFrames, specifying ``axis=None`` will apply the aggregation\n    across both axes.\n\n    .. versionadded:: 2.0.0\n\nskipna : bool, default True\n    Exclude NA/null values when computing the result.\nnumeric_only : bool, default False\n    Include only float, int, boolean columns. Not implemented for Series.\n\n**kwargs\n    Additional keyword arguments to be passed to the function.\n\nReturns\n-------\nscalar or scalar\n\nSee Also\n--------\nSeries.sum : Return the sum.\nSeries.min : Return the minimum.\nSeries.max : Return the maximum.\nSeries.idxmin : Return the index of the minimum.\nSeries.idxmax : Return the index of the maximum.\nDataFrame.sum : Return the sum over the requested axis.\nDataFrame.min : Return the minimum over the requested axis.\nDataFrame.max : Return the maximum over the requested axis.\nDataFrame.idxmin : Return the index of the minimum over the requested axis.\nDataFrame.idxmax : Return the index of the maximum over the requested axis.\n\nExamples\n--------\n>>> idx = pd.MultiIndex.from_arrays([\n...     ['warm', 'warm', 'cold', 'cold'],\n...     ['dog', 'falcon', 'fish', 'spider']],\n...     names=['blooded', 'animal'])\n>>> s = pd.Series([4, 2, 0, 8], name='legs', index=idx)\n>>> s\nblooded  animal\nwarm     dog       4\n         falcon    2\ncold     fish      0\n         spider    8\nName: legs, dtype: int64\n\n>>> s.max()\n8"
  },
  {
    "symbol": "Series.mean",
    "signature": "(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs)",
    "doc": "Return the mean of the values over the requested axis.\n\nParameters\n----------\naxis : {index (0)}\n    Axis for the function to be applied on.\n    For `Series` this parameter is unused and defaults to 0.\n\n    For DataFrames, specifying ``axis=None`` will apply the aggregation\n    across both axes.\n\n    .. versionadded:: 2.0.0\n\nskipna : bool, default True\n    Exclude NA/null values when computing the result.\nnumeric_only : bool, default False\n    Include only float, int, boolean columns. Not implemented for Series.\n\n**kwargs\n    Additional keyword arguments to be passed to the function.\n\nReturns\n-------\nscalar or scalar\n\n            Examples\n            --------\n            >>> s = pd.Series([1, 2, 3])\n            >>> s.mean()\n            2.0\n\n            With a DataFrame\n\n            >>> df = pd.DataFrame({'a': [1, 2], 'b': [2, 3]}, index=['tiger', 'zebra'])\n            >>> df\n                   a   b\n            tiger  1   2\n            zebra  2   3\n            >>> df.mean()\n            a   1.5\n            b   2.5\n            dtype: float64\n\n            Using axis=1\n\n            >>> df.mean(axis=1)\n            tiger   1.5\n            zebra   2.5\n            dtype: float64\n\n            In this case, `numeric_only` should be set to `True` to avoid\n            getting an error.\n\n            >>> df = pd.DataFrame({'a': [1, 2], 'b': ['T', 'Z']},\n            ...                   index=['tiger', 'zebra'])\n            >>> df.mean(numeric_only=True)\n            a   1.5\n            dtype: float64"
  },
  {
    "symbol": "Series.median",
    "signature": "(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs)",
    "doc": "Return the median of the values over the requested axis.\n\nParameters\n----------\naxis : {index (0)}\n    Axis for the function to be applied on.\n    For `Series` this parameter is unused and defaults to 0.\n\n    For DataFrames, specifying ``axis=None`` will apply the aggregation\n    across both axes.\n\n    .. versionadded:: 2.0.0\n\nskipna : bool, default True\n    Exclude NA/null values when computing the result.\nnumeric_only : bool, default False\n    Include only float, int, boolean columns. Not implemented for Series.\n\n**kwargs\n    Additional keyword arguments to be passed to the function.\n\nReturns\n-------\nscalar or scalar\n\n            Examples\n            --------\n            >>> s = pd.Series([1, 2, 3])\n            >>> s.median()\n            2.0\n\n            With a DataFrame\n\n            >>> df = pd.DataFrame({'a': [1, 2], 'b': [2, 3]}, index=['tiger', 'zebra'])\n            >>> df\n                   a   b\n            tiger  1   2\n            zebra  2   3\n            >>> df.median()\n            a   1.5\n            b   2.5\n            dtype: float64\n\n            Using axis=1\n\n            >>> df.median(axis=1)\n            tiger   1.5\n            zebra   2.5\n            dtype: float64\n\n            In this case, `numeric_only` should be set to `True`\n            to avoid getting an error.\n\n            >>> df = pd.DataFrame({'a': [1, 2], 'b': ['T', 'Z']},\n            ...                   index=['tiger', 'zebra'])\n            >>> df.median(numeric_only=True)\n            a   1.5\n            dtype: float64"
  },
  {
    "symbol": "Series.memory_usage",
    "signature": "(self, index: 'bool' = True, deep: 'bool' = False) -> 'int'",
    "doc": "Return the memory usage of the Series.\n\nThe memory usage can optionally include the contribution of\nthe index and of elements of `object` dtype.\n\nParameters\n----------\nindex : bool, default True\n    Specifies whether to include the memory usage of the Series index.\ndeep : bool, default False\n    If True, introspect the data deeply by interrogating\n    `object` dtypes for system-level memory consumption, and include\n    it in the returned value.\n\nReturns\n-------\nint\n    Bytes of memory consumed.\n\nSee Also\n--------\nnumpy.ndarray.nbytes : Total bytes consumed by the elements of the\n    array.\nDataFrame.memory_usage : Bytes consumed by a DataFrame.\n\nExamples\n--------\n>>> s = pd.Series(range(3))\n>>> s.memory_usage()\n152\n\nNot including the index gives the size of the rest of the data, which\nis necessarily smaller:\n\n>>> s.memory_usage(index=False)\n24\n\nThe memory footprint of `object` values is ignored by default:\n\n>>> s = pd.Series([\"a\", \"b\"])\n>>> s.values\narray(['a', 'b'], dtype=object)\n>>> s.memory_usage()\n144\n>>> s.memory_usage(deep=True)\n244"
  },
  {
    "symbol": "Series.min",
    "signature": "(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs)",
    "doc": "Return the minimum of the values over the requested axis.\n\nIf you want the *index* of the minimum, use ``idxmin``. This is the equivalent of the ``numpy.ndarray`` method ``argmin``.\n\nParameters\n----------\naxis : {index (0)}\n    Axis for the function to be applied on.\n    For `Series` this parameter is unused and defaults to 0.\n\n    For DataFrames, specifying ``axis=None`` will apply the aggregation\n    across both axes.\n\n    .. versionadded:: 2.0.0\n\nskipna : bool, default True\n    Exclude NA/null values when computing the result.\nnumeric_only : bool, default False\n    Include only float, int, boolean columns. Not implemented for Series.\n\n**kwargs\n    Additional keyword arguments to be passed to the function.\n\nReturns\n-------\nscalar or scalar\n\nSee Also\n--------\nSeries.sum : Return the sum.\nSeries.min : Return the minimum.\nSeries.max : Return the maximum.\nSeries.idxmin : Return the index of the minimum.\nSeries.idxmax : Return the index of the maximum.\nDataFrame.sum : Return the sum over the requested axis.\nDataFrame.min : Return the minimum over the requested axis.\nDataFrame.max : Return the maximum over the requested axis.\nDataFrame.idxmin : Return the index of the minimum over the requested axis.\nDataFrame.idxmax : Return the index of the maximum over the requested axis.\n\nExamples\n--------\n>>> idx = pd.MultiIndex.from_arrays([\n...     ['warm', 'warm', 'cold', 'cold'],\n...     ['dog', 'falcon', 'fish', 'spider']],\n...     names=['blooded', 'animal'])\n>>> s = pd.Series([4, 2, 0, 8], name='legs', index=idx)\n>>> s\nblooded  animal\nwarm     dog       4\n         falcon    2\ncold     fish      0\n         spider    8\nName: legs, dtype: int64\n\n>>> s.min()\n0"
  },
  {
    "symbol": "Series.mod",
    "signature": "(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'",
    "doc": "Return Modulo of series and other, element-wise (binary operator `mod`).\n\nEquivalent to ``series % other``, but with support to substitute a fill_value for\nmissing data in either one of the inputs.\n\nParameters\n----------\nother : Series or scalar value\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result of filling (at that location) will be missing.\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.\n\nReturns\n-------\nSeries\n    The result of the operation.\n\nSee Also\n--------\nSeries.rmod : Reverse of the Modulo operator, see\n    `Python documentation\n    <https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types>`_\n    for more details.\n\nExamples\n--------\n>>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n>>> a\na    1.0\nb    1.0\nc    1.0\nd    NaN\ndtype: float64\n>>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n>>> b\na    1.0\nb    NaN\nd    1.0\ne    NaN\ndtype: float64\n>>> a.mod(b, fill_value=0)\na    0.0\nb    NaN\nc    NaN\nd    0.0\ne    NaN\ndtype: float64"
  },
  {
    "symbol": "Series.mode",
    "signature": "(self, dropna: 'bool' = True) -> 'Series'",
    "doc": "Return the mode(s) of the Series.\n\nThe mode is the value that appears most often. There can be multiple modes.\n\nAlways returns Series even if only one value is returned.\n\nParameters\n----------\ndropna : bool, default True\n    Don't consider counts of NaN/NaT.\n\nReturns\n-------\nSeries\n    Modes of the Series in sorted order.\n\nExamples\n--------\n>>> s = pd.Series([2, 4, 2, 2, 4, None])\n>>> s.mode()\n0    2.0\ndtype: float64\n\nMore than one mode:\n\n>>> s = pd.Series([2, 4, 8, 2, 4, None])\n>>> s.mode()\n0    2.0\n1    4.0\ndtype: float64\n\nWith and without considering null value:\n\n>>> s = pd.Series([2, 4, None, None, 4, None])\n>>> s.mode(dropna=False)\n0   NaN\ndtype: float64\n>>> s = pd.Series([2, 4, None, None, 4, None])\n>>> s.mode()\n0    4.0\ndtype: float64"
  },
  {
    "symbol": "Series.mul",
    "signature": "(self, other, level: 'Level | None' = None, fill_value: 'float | None' = None, axis: 'Axis' = 0) -> 'Series'",
    "doc": "Return Multiplication of series and other, element-wise (binary operator `mul`).\n\nEquivalent to ``series * other``, but with support to substitute a fill_value for\nmissing data in either one of the inputs.\n\nParameters\n----------\nother : Series or scalar value\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result of filling (at that location) will be missing.\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.\n\nReturns\n-------\nSeries\n    The result of the operation.\n\nSee Also\n--------\nSeries.rmul : Reverse of the Multiplication operator, see\n    `Python documentation\n    <https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types>`_\n    for more details.\n\nExamples\n--------\n>>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n>>> a\na    1.0\nb    1.0\nc    1.0\nd    NaN\ndtype: float64\n>>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n>>> b\na    1.0\nb    NaN\nd    1.0\ne    NaN\ndtype: float64\n>>> a.multiply(b, fill_value=0)\na    1.0\nb    0.0\nc    0.0\nd    0.0\ne    NaN\ndtype: float64"
  },
  {
    "symbol": "Series.multiply",
    "signature": "(self, other, level: 'Level | None' = None, fill_value: 'float | None' = None, axis: 'Axis' = 0) -> 'Series'",
    "doc": "Return Multiplication of series and other, element-wise (binary operator `mul`).\n\nEquivalent to ``series * other``, but with support to substitute a fill_value for\nmissing data in either one of the inputs.\n\nParameters\n----------\nother : Series or scalar value\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result of filling (at that location) will be missing.\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.\n\nReturns\n-------\nSeries\n    The result of the operation.\n\nSee Also\n--------\nSeries.rmul : Reverse of the Multiplication operator, see\n    `Python documentation\n    <https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types>`_\n    for more details.\n\nExamples\n--------\n>>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n>>> a\na    1.0\nb    1.0\nc    1.0\nd    NaN\ndtype: float64\n>>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n>>> b\na    1.0\nb    NaN\nd    1.0\ne    NaN\ndtype: float64\n>>> a.multiply(b, fill_value=0)\na    1.0\nb    0.0\nc    0.0\nd    0.0\ne    NaN\ndtype: float64"
  },
  {
    "symbol": "Series.name",
    "signature": "(property)",
    "doc": "\nReturn the name of the Series.\n\nThe name of a Series becomes its index or column name if it is used\nto form a DataFrame. It is also used whenever displaying the Series\nusing the interpreter.\n\nReturns\n-------\nlabel (hashable object)\n    The name of the Series, also the column name if part of a DataFrame.\n\nSee Also\n--------\nSeries.rename : Sets the Series name when given a scalar input.\nIndex.name : Corresponding Index property.\n\nExamples\n--------\nThe Series name can be set initially when calling the constructor.\n\n>>> s = pd.Series([1, 2, 3], dtype=np.int64, name='Numbers')\n>>> s\n0    1\n1    2\n2    3\nName: Numbers, dtype: int64\n>>> s.name = \"Integers\"\n>>> s\n0    1\n1    2\n2    3\nName: Integers, dtype: int64\n\nThe name of a Series within a DataFrame is its column name.\n\n>>> df = pd.DataFrame([[1, 2], [3, 4], [5, 6]],\n...                   columns=[\"Odd Numbers\", \"Even Numbers\"])\n>>> df\n   Odd Numbers  Even Numbers\n0            1             2\n1            3             4\n2            5             6\n>>> df[\"Even Numbers\"].name\n'Even Numbers'\n"
  },
  {
    "symbol": "Series.nbytes",
    "signature": "(property)",
    "doc": "\nReturn the number of bytes in the underlying data.\n\nExamples\n--------\nFor Series:\n\n>>> s = pd.Series(['Ant', 'Bear', 'Cow'])\n>>> s\n0     Ant\n1    Bear\n2     Cow\ndtype: object\n>>> s.nbytes\n24\n\nFor Index:\n\n>>> idx = pd.Index([1, 2, 3])\n>>> idx\nIndex([1, 2, 3], dtype='int64')\n>>> idx.nbytes\n24\n"
  },
  {
    "symbol": "Series.ndim",
    "signature": "(property)",
    "doc": "\nNumber of dimensions of the underlying data, by definition 1.\n\nExamples\n--------\n>>> s = pd.Series(['Ant', 'Bear', 'Cow'])\n>>> s\n0     Ant\n1    Bear\n2     Cow\ndtype: object\n>>> s.ndim\n1\n\nFor Index:\n\n>>> idx = pd.Index([1, 2, 3])\n>>> idx\nIndex([1, 2, 3], dtype='int64')\n>>> idx.ndim\n1\n"
  },
  {
    "symbol": "Series.ne",
    "signature": "(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'",
    "doc": "Return Not equal to of series and other, element-wise (binary operator `ne`).\n\nEquivalent to ``series != other``, but with support to substitute a fill_value for\nmissing data in either one of the inputs.\n\nParameters\n----------\nother : Series or scalar value\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result of filling (at that location) will be missing.\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.\n\nReturns\n-------\nSeries\n    The result of the operation.\n\nExamples\n--------\n>>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n>>> a\na    1.0\nb    1.0\nc    1.0\nd    NaN\ndtype: float64\n>>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n>>> b\na    1.0\nb    NaN\nd    1.0\ne    NaN\ndtype: float64\n>>> a.ne(b, fill_value=0)\na    False\nb     True\nc     True\nd     True\ne     True\ndtype: bool"
  },
  {
    "symbol": "Series.nlargest",
    "signature": "(self, n: 'int' = 5, keep: \"Literal['first', 'last', 'all']\" = 'first') -> 'Series'",
    "doc": "Return the largest `n` elements.\n\nParameters\n----------\nn : int, default 5\n    Return this many descending sorted values.\nkeep : {'first', 'last', 'all'}, default 'first'\n    When there are duplicate values that cannot all fit in a\n    Series of `n` elements:\n\n    - ``first`` : return the first `n` occurrences in order\n      of appearance.\n    - ``last`` : return the last `n` occurrences in reverse\n      order of appearance.\n    - ``all`` : keep all occurrences. This can result in a Series of\n      size larger than `n`.\n\nReturns\n-------\nSeries\n    The `n` largest values in the Series, sorted in decreasing order.\n\nSee Also\n--------\nSeries.nsmallest: Get the `n` smallest elements.\nSeries.sort_values: Sort Series by values.\nSeries.head: Return the first `n` rows.\n\nNotes\n-----\nFaster than ``.sort_values(ascending=False).head(n)`` for small `n`\nrelative to the size of the ``Series`` object.\n\nExamples\n--------\n>>> countries_population = {\"Italy\": 59000000, \"France\": 65000000,\n...                         \"Malta\": 434000, \"Maldives\": 434000,\n...                         \"Brunei\": 434000, \"Iceland\": 337000,\n...                         \"Nauru\": 11300, \"Tuvalu\": 11300,\n...                         \"Anguilla\": 11300, \"Montserrat\": 5200}\n>>> s = pd.Series(countries_population)\n>>> s\nItaly       59000000\nFrance      65000000\nMalta         434000\nMaldives      434000\nBrunei        434000\nIceland       337000\nNauru          11300\nTuvalu         11300\nAnguilla       11300\nMontserrat      5200\ndtype: int64\n\nThe `n` largest elements where ``n=5`` by default.\n\n>>> s.nlargest()\nFrance      65000000\nItaly       59000000\nMalta         434000\nMaldives      434000\nBrunei        434000\ndtype: int64\n\nThe `n` largest elements where ``n=3``. Default `keep` value is 'first'\nso Malta will be kept.\n\n>>> s.nlargest(3)\nFrance    65000000\nItaly     59000000\nMalta       434000\ndtype: int64\n\nThe `n` largest elements where ``n=3`` and keeping the last duplicates.\nBrunei will be kept since it is the last with value 434000 based on\nthe index order.\n\n>>> s.nlargest(3, keep='last')\nFrance      65000000\nItaly       59000000\nBrunei        434000\ndtype: int64\n\nThe `n` largest elements where ``n=3`` with all duplicates kept. Note\nthat the returned Series has five elements due to the three duplicates.\n\n>>> s.nlargest(3, keep='all')\nFrance      65000000\nItaly       59000000\nMalta         434000\nMaldives      434000\nBrunei        434000\ndtype: int64"
  },
  {
    "symbol": "Series.notna",
    "signature": "(self) -> 'Series'",
    "doc": "Detect existing (non-missing) values.\n\nReturn a boolean same-sized object indicating if the values are not NA.\nNon-missing values get mapped to True. Characters such as empty\nstrings ``''`` or :attr:`numpy.inf` are not considered NA values\n(unless you set ``pandas.options.mode.use_inf_as_na = True``).\nNA values, such as None or :attr:`numpy.NaN`, get mapped to False\nvalues.\n\nReturns\n-------\nSeries\n    Mask of bool values for each element in Series that\n    indicates whether an element is not an NA value.\n\nSee Also\n--------\nSeries.notnull : Alias of notna.\nSeries.isna : Boolean inverse of notna.\nSeries.dropna : Omit axes labels with missing values.\nnotna : Top-level notna.\n\nExamples\n--------\nShow which entries in a DataFrame are not NA.\n\n>>> df = pd.DataFrame(dict(age=[5, 6, np.nan],\n...                        born=[pd.NaT, pd.Timestamp('1939-05-27'),\n...                              pd.Timestamp('1940-04-25')],\n...                        name=['Alfred', 'Batman', ''],\n...                        toy=[None, 'Batmobile', 'Joker']))\n>>> df\n   age       born    name        toy\n0  5.0        NaT  Alfred       None\n1  6.0 1939-05-27  Batman  Batmobile\n2  NaN 1940-04-25              Joker\n\n>>> df.notna()\n     age   born  name    toy\n0   True  False  True  False\n1   True   True  True   True\n2  False   True  True   True\n\nShow which entries in a Series are not NA.\n\n>>> ser = pd.Series([5, 6, np.nan])\n>>> ser\n0    5.0\n1    6.0\n2    NaN\ndtype: float64\n\n>>> ser.notna()\n0     True\n1     True\n2    False\ndtype: bool"
  },
  {
    "symbol": "Series.notnull",
    "signature": "(self) -> 'Series'",
    "doc": "Series.notnull is an alias for Series.notna.\n\nDetect existing (non-missing) values.\n\nReturn a boolean same-sized object indicating if the values are not NA.\nNon-missing values get mapped to True. Characters such as empty\nstrings ``''`` or :attr:`numpy.inf` are not considered NA values\n(unless you set ``pandas.options.mode.use_inf_as_na = True``).\nNA values, such as None or :attr:`numpy.NaN`, get mapped to False\nvalues.\n\nReturns\n-------\nSeries\n    Mask of bool values for each element in Series that\n    indicates whether an element is not an NA value.\n\nSee Also\n--------\nSeries.notnull : Alias of notna.\nSeries.isna : Boolean inverse of notna.\nSeries.dropna : Omit axes labels with missing values.\nnotna : Top-level notna.\n\nExamples\n--------\nShow which entries in a DataFrame are not NA.\n\n>>> df = pd.DataFrame(dict(age=[5, 6, np.nan],\n...                        born=[pd.NaT, pd.Timestamp('1939-05-27'),\n...                              pd.Timestamp('1940-04-25')],\n...                        name=['Alfred', 'Batman', ''],\n...                        toy=[None, 'Batmobile', 'Joker']))\n>>> df\n   age       born    name        toy\n0  5.0        NaT  Alfred       None\n1  6.0 1939-05-27  Batman  Batmobile\n2  NaN 1940-04-25              Joker\n\n>>> df.notna()\n     age   born  name    toy\n0   True  False  True  False\n1   True   True  True   True\n2  False   True  True   True\n\nShow which entries in a Series are not NA.\n\n>>> ser = pd.Series([5, 6, np.nan])\n>>> ser\n0    5.0\n1    6.0\n2    NaN\ndtype: float64\n\n>>> ser.notna()\n0     True\n1     True\n2    False\ndtype: bool"
  },
  {
    "symbol": "Series.nsmallest",
    "signature": "(self, n: 'int' = 5, keep: \"Literal['first', 'last', 'all']\" = 'first') -> 'Series'",
    "doc": "Return the smallest `n` elements.\n\nParameters\n----------\nn : int, default 5\n    Return this many ascending sorted values.\nkeep : {'first', 'last', 'all'}, default 'first'\n    When there are duplicate values that cannot all fit in a\n    Series of `n` elements:\n\n    - ``first`` : return the first `n` occurrences in order\n      of appearance.\n    - ``last`` : return the last `n` occurrences in reverse\n      order of appearance.\n    - ``all`` : keep all occurrences. This can result in a Series of\n      size larger than `n`.\n\nReturns\n-------\nSeries\n    The `n` smallest values in the Series, sorted in increasing order.\n\nSee Also\n--------\nSeries.nlargest: Get the `n` largest elements.\nSeries.sort_values: Sort Series by values.\nSeries.head: Return the first `n` rows.\n\nNotes\n-----\nFaster than ``.sort_values().head(n)`` for small `n` relative to\nthe size of the ``Series`` object.\n\nExamples\n--------\n>>> countries_population = {\"Italy\": 59000000, \"France\": 65000000,\n...                         \"Brunei\": 434000, \"Malta\": 434000,\n...                         \"Maldives\": 434000, \"Iceland\": 337000,\n...                         \"Nauru\": 11300, \"Tuvalu\": 11300,\n...                         \"Anguilla\": 11300, \"Montserrat\": 5200}\n>>> s = pd.Series(countries_population)\n>>> s\nItaly       59000000\nFrance      65000000\nBrunei        434000\nMalta         434000\nMaldives      434000\nIceland       337000\nNauru          11300\nTuvalu         11300\nAnguilla       11300\nMontserrat      5200\ndtype: int64\n\nThe `n` smallest elements where ``n=5`` by default.\n\n>>> s.nsmallest()\nMontserrat    5200\nNauru        11300\nTuvalu       11300\nAnguilla     11300\nIceland     337000\ndtype: int64\n\nThe `n` smallest elements where ``n=3``. Default `keep` value is\n'first' so Nauru and Tuvalu will be kept.\n\n>>> s.nsmallest(3)\nMontserrat   5200\nNauru       11300\nTuvalu      11300\ndtype: int64\n\nThe `n` smallest elements where ``n=3`` and keeping the last\nduplicates. Anguilla and Tuvalu will be kept since they are the last\nwith value 11300 based on the index order.\n\n>>> s.nsmallest(3, keep='last')\nMontserrat   5200\nAnguilla    11300\nTuvalu      11300\ndtype: int64\n\nThe `n` smallest elements where ``n=3`` with all duplicates kept. Note\nthat the returned Series has four elements due to the three duplicates.\n\n>>> s.nsmallest(3, keep='all')\nMontserrat   5200\nNauru       11300\nTuvalu      11300\nAnguilla    11300\ndtype: int64"
  },
  {
    "symbol": "Series.nunique",
    "signature": "(self, dropna: 'bool' = True) -> 'int'",
    "doc": "Return number of unique elements in the object.\n\nExcludes NA values by default.\n\nParameters\n----------\ndropna : bool, default True\n    Don't include NaN in the count.\n\nReturns\n-------\nint\n\nSee Also\n--------\nDataFrame.nunique: Method nunique for DataFrame.\nSeries.count: Count non-NA/null observations in the Series.\n\nExamples\n--------\n>>> s = pd.Series([1, 3, 5, 7, 7])\n>>> s\n0    1\n1    3\n2    5\n3    7\n4    7\ndtype: int64\n\n>>> s.nunique()\n4"
  },
  {
    "symbol": "Series.pad",
    "signature": "(self, *, axis: 'None | Axis' = None, inplace: 'bool_t' = False, limit: 'None | int' = None, downcast: 'dict | None | lib.NoDefault' = <no_default>) -> 'Self | None'",
    "doc": "Fill NA/NaN values by propagating the last valid observation to next valid.\n\n.. deprecated:: 2.0\n\n    Series/DataFrame.pad is deprecated. Use Series/DataFrame.ffill instead.\n\nReturns\n-------\nSeries/DataFrame or None\n    Object with missing values filled or None if ``inplace=True``.\n\nExamples\n--------\nPlease see examples for :meth:`DataFrame.ffill` or :meth:`Series.ffill`."
  },
  {
    "symbol": "Series.pct_change",
    "signature": "(self, periods: 'int' = 1, fill_method: 'FillnaOptions | None | lib.NoDefault' = <no_default>, limit: 'int | None | lib.NoDefault' = <no_default>, freq=None, **kwargs) -> 'Self'",
    "doc": "Fractional change between the current and a prior element.\n\nComputes the fractional change from the immediately previous row by\ndefault. This is useful in comparing the fraction of change in a time\nseries of elements.\n\n.. note::\n\n    Despite the name of this method, it calculates fractional change\n    (also known as per unit change or relative change) and not\n    percentage change. If you need the percentage change, multiply\n    these values by 100.\n\nParameters\n----------\nperiods : int, default 1\n    Periods to shift for forming percent change.\nfill_method : {'backfill', 'bfill', 'pad', 'ffill', None}, default 'pad'\n    How to handle NAs **before** computing percent changes.\n\n    .. deprecated:: 2.1\n        All options of `fill_method` are deprecated except `fill_method=None`.\n\nlimit : int, default None\n    The number of consecutive NAs to fill before stopping.\n\n    .. deprecated:: 2.1\n\nfreq : DateOffset, timedelta, or str, optional\n    Increment to use from time series API (e.g. 'ME' or BDay()).\n**kwargs\n    Additional keyword arguments are passed into\n    `DataFrame.shift` or `Series.shift`.\n\nReturns\n-------\nSeries or DataFrame\n    The same type as the calling object.\n\nSee Also\n--------\nSeries.diff : Compute the difference of two elements in a Series.\nDataFrame.diff : Compute the difference of two elements in a DataFrame.\nSeries.shift : Shift the index by some number of periods.\nDataFrame.shift : Shift the index by some number of periods.\n\nExamples\n--------\n**Series**\n\n>>> s = pd.Series([90, 91, 85])\n>>> s\n0    90\n1    91\n2    85\ndtype: int64\n\n>>> s.pct_change()\n0         NaN\n1    0.011111\n2   -0.065934\ndtype: float64\n\n>>> s.pct_change(periods=2)\n0         NaN\n1         NaN\n2   -0.055556\ndtype: float64\n\nSee the percentage change in a Series where filling NAs with last\nvalid observation forward to next valid.\n\n>>> s = pd.Series([90, 91, None, 85])\n>>> s\n0    90.0\n1    91.0\n2     NaN\n3    85.0\ndtype: float64\n\n>>> s.ffill().pct_change()\n0         NaN\n1    0.011111\n2    0.000000\n3   -0.065934\ndtype: float64\n\n**DataFrame**\n\nPercentage change in French franc, Deutsche Mark, and Italian lira from\n1980-01-01 to 1980-03-01.\n\n>>> df = pd.DataFrame({\n...     'FR': [4.0405, 4.0963, 4.3149],\n...     'GR': [1.7246, 1.7482, 1.8519],\n...     'IT': [804.74, 810.01, 860.13]},\n...     index=['1980-01-01', '1980-02-01', '1980-03-01'])\n>>> df\n                FR      GR      IT\n1980-01-01  4.0405  1.7246  804.74\n1980-02-01  4.0963  1.7482  810.01\n1980-03-01  4.3149  1.8519  860.13\n\n>>> df.pct_change()\n                  FR        GR        IT\n1980-01-01       NaN       NaN       NaN\n1980-02-01  0.013810  0.013684  0.006549\n1980-03-01  0.053365  0.059318  0.061876\n\nPercentage of change in GOOG and APPL stock volume. Shows computing\nthe percentage change between columns.\n\n>>> df = pd.DataFrame({\n...     '2016': [1769950, 30586265],\n...     '2015': [1500923, 40912316],\n...     '2014': [1371819, 41403351]},\n...     index=['GOOG', 'APPL'])\n>>> df\n          2016      2015      2014\nGOOG   1769950   1500923   1371819\nAPPL  30586265  40912316  41403351\n\n>>> df.pct_change(axis='columns', periods=-1)\n          2016      2015  2014\nGOOG  0.179241  0.094112   NaN\nAPPL -0.252395 -0.011860   NaN"
  },
  {
    "symbol": "Series.pipe",
    "signature": "(self, func: 'Callable[..., T] | tuple[Callable[..., T], str]', *args, **kwargs) -> 'T'",
    "doc": "Apply chainable functions that expect Series or DataFrames.\n\nParameters\n----------\nfunc : function\n    Function to apply to the Series/DataFrame.\n    ``args``, and ``kwargs`` are passed into ``func``.\n    Alternatively a ``(callable, data_keyword)`` tuple where\n    ``data_keyword`` is a string indicating the keyword of\n    ``callable`` that expects the Series/DataFrame.\n*args : iterable, optional\n    Positional arguments passed into ``func``.\n**kwargs : mapping, optional\n    A dictionary of keyword arguments passed into ``func``.\n\nReturns\n-------\nthe return type of ``func``.\n\nSee Also\n--------\nDataFrame.apply : Apply a function along input axis of DataFrame.\nDataFrame.map : Apply a function elementwise on a whole DataFrame.\nSeries.map : Apply a mapping correspondence on a\n    :class:`~pandas.Series`.\n\nNotes\n-----\nUse ``.pipe`` when chaining together functions that expect\nSeries, DataFrames or GroupBy objects.\n\nExamples\n--------\nConstructing a income DataFrame from a dictionary.\n\n>>> data = [[8000, 1000], [9500, np.nan], [5000, 2000]]\n>>> df = pd.DataFrame(data, columns=['Salary', 'Others'])\n>>> df\n   Salary  Others\n0    8000  1000.0\n1    9500     NaN\n2    5000  2000.0\n\nFunctions that perform tax reductions on an income DataFrame.\n\n>>> def subtract_federal_tax(df):\n...     return df * 0.9\n>>> def subtract_state_tax(df, rate):\n...     return df * (1 - rate)\n>>> def subtract_national_insurance(df, rate, rate_increase):\n...     new_rate = rate + rate_increase\n...     return df * (1 - new_rate)\n\nInstead of writing\n\n>>> subtract_national_insurance(\n...     subtract_state_tax(subtract_federal_tax(df), rate=0.12),\n...     rate=0.05,\n...     rate_increase=0.02)  # doctest: +SKIP\n\nYou can write\n\n>>> (\n...     df.pipe(subtract_federal_tax)\n...     .pipe(subtract_state_tax, rate=0.12)\n...     .pipe(subtract_national_insurance, rate=0.05, rate_increase=0.02)\n... )\n    Salary   Others\n0  5892.48   736.56\n1  6997.32      NaN\n2  3682.80  1473.12\n\nIf you have a function that takes the data as (say) the second\nargument, pass a tuple indicating which keyword expects the\ndata. For example, suppose ``national_insurance`` takes its data as ``df``\nin the second argument:\n\n>>> def subtract_national_insurance(rate, df, rate_increase):\n...     new_rate = rate + rate_increase\n...     return df * (1 - new_rate)\n>>> (\n...     df.pipe(subtract_federal_tax)\n...     .pipe(subtract_state_tax, rate=0.12)\n...     .pipe(\n...         (subtract_national_insurance, 'df'),\n...         rate=0.05,\n...         rate_increase=0.02\n...     )\n... )\n    Salary   Others\n0  5892.48   736.56\n1  6997.32      NaN\n2  3682.80  1473.12"
  },
  {
    "symbol": "Series.pop",
    "signature": "(self, item: 'Hashable') -> 'Any'",
    "doc": "Return item and drops from series. Raise KeyError if not found.\n\nParameters\n----------\nitem : label\n    Index of the element that needs to be removed.\n\nReturns\n-------\nValue that is popped from series.\n\nExamples\n--------\n>>> ser = pd.Series([1, 2, 3])\n\n>>> ser.pop(0)\n1\n\n>>> ser\n1    2\n2    3\ndtype: int64"
  },
  {
    "symbol": "Series.pow",
    "signature": "(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'",
    "doc": "Return Exponential power of series and other, element-wise (binary operator `pow`).\n\nEquivalent to ``series ** other``, but with support to substitute a fill_value for\nmissing data in either one of the inputs.\n\nParameters\n----------\nother : Series or scalar value\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result of filling (at that location) will be missing.\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.\n\nReturns\n-------\nSeries\n    The result of the operation.\n\nSee Also\n--------\nSeries.rpow : Reverse of the Exponential power operator, see\n    `Python documentation\n    <https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types>`_\n    for more details.\n\nExamples\n--------\n>>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n>>> a\na    1.0\nb    1.0\nc    1.0\nd    NaN\ndtype: float64\n>>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n>>> b\na    1.0\nb    NaN\nd    1.0\ne    NaN\ndtype: float64\n>>> a.pow(b, fill_value=0)\na    1.0\nb    1.0\nc    1.0\nd    0.0\ne    NaN\ndtype: float64"
  },
  {
    "symbol": "Series.prod",
    "signature": "(self, axis: 'Axis | None' = None, skipna: 'bool' = True, numeric_only: 'bool' = False, min_count: 'int' = 0, **kwargs)",
    "doc": "Return the product of the values over the requested axis.\n\nParameters\n----------\naxis : {index (0)}\n    Axis for the function to be applied on.\n    For `Series` this parameter is unused and defaults to 0.\n\n    .. warning::\n\n        The behavior of DataFrame.prod with ``axis=None`` is deprecated,\n        in a future version this will reduce over both axes and return a scalar\n        To retain the old behavior, pass axis=0 (or do not pass axis).\n\n    .. versionadded:: 2.0.0\n\nskipna : bool, default True\n    Exclude NA/null values when computing the result.\nnumeric_only : bool, default False\n    Include only float, int, boolean columns. Not implemented for Series.\n\nmin_count : int, default 0\n    The required number of valid values to perform the operation. If fewer than\n    ``min_count`` non-NA values are present the result will be NA.\n**kwargs\n    Additional keyword arguments to be passed to the function.\n\nReturns\n-------\nscalar or scalar\n\nSee Also\n--------\nSeries.sum : Return the sum.\nSeries.min : Return the minimum.\nSeries.max : Return the maximum.\nSeries.idxmin : Return the index of the minimum.\nSeries.idxmax : Return the index of the maximum.\nDataFrame.sum : Return the sum over the requested axis.\nDataFrame.min : Return the minimum over the requested axis.\nDataFrame.max : Return the maximum over the requested axis.\nDataFrame.idxmin : Return the index of the minimum over the requested axis.\nDataFrame.idxmax : Return the index of the maximum over the requested axis.\n\nExamples\n--------\nBy default, the product of an empty or all-NA Series is ``1``\n\n>>> pd.Series([], dtype=\"float64\").prod()\n1.0\n\nThis can be controlled with the ``min_count`` parameter\n\n>>> pd.Series([], dtype=\"float64\").prod(min_count=1)\nnan\n\nThanks to the ``skipna`` parameter, ``min_count`` handles all-NA and\nempty series identically.\n\n>>> pd.Series([np.nan]).prod()\n1.0\n\n>>> pd.Series([np.nan]).prod(min_count=1)\nnan"
  },
  {
    "symbol": "Series.product",
    "signature": "(self, axis: 'Axis | None' = None, skipna: 'bool' = True, numeric_only: 'bool' = False, min_count: 'int' = 0, **kwargs)",
    "doc": "Return the product of the values over the requested axis.\n\nParameters\n----------\naxis : {index (0)}\n    Axis for the function to be applied on.\n    For `Series` this parameter is unused and defaults to 0.\n\n    .. warning::\n\n        The behavior of DataFrame.prod with ``axis=None`` is deprecated,\n        in a future version this will reduce over both axes and return a scalar\n        To retain the old behavior, pass axis=0 (or do not pass axis).\n\n    .. versionadded:: 2.0.0\n\nskipna : bool, default True\n    Exclude NA/null values when computing the result.\nnumeric_only : bool, default False\n    Include only float, int, boolean columns. Not implemented for Series.\n\nmin_count : int, default 0\n    The required number of valid values to perform the operation. If fewer than\n    ``min_count`` non-NA values are present the result will be NA.\n**kwargs\n    Additional keyword arguments to be passed to the function.\n\nReturns\n-------\nscalar or scalar\n\nSee Also\n--------\nSeries.sum : Return the sum.\nSeries.min : Return the minimum.\nSeries.max : Return the maximum.\nSeries.idxmin : Return the index of the minimum.\nSeries.idxmax : Return the index of the maximum.\nDataFrame.sum : Return the sum over the requested axis.\nDataFrame.min : Return the minimum over the requested axis.\nDataFrame.max : Return the maximum over the requested axis.\nDataFrame.idxmin : Return the index of the minimum over the requested axis.\nDataFrame.idxmax : Return the index of the maximum over the requested axis.\n\nExamples\n--------\nBy default, the product of an empty or all-NA Series is ``1``\n\n>>> pd.Series([], dtype=\"float64\").prod()\n1.0\n\nThis can be controlled with the ``min_count`` parameter\n\n>>> pd.Series([], dtype=\"float64\").prod(min_count=1)\nnan\n\nThanks to the ``skipna`` parameter, ``min_count`` handles all-NA and\nempty series identically.\n\n>>> pd.Series([np.nan]).prod()\n1.0\n\n>>> pd.Series([np.nan]).prod(min_count=1)\nnan"
  },
  {
    "symbol": "Series.quantile",
    "signature": "(self, q: 'float | Sequence[float] | AnyArrayLike' = 0.5, interpolation: 'QuantileInterpolation' = 'linear') -> 'float | Series'",
    "doc": "Return value at the given quantile.\n\nParameters\n----------\nq : float or array-like, default 0.5 (50% quantile)\n    The quantile(s) to compute, which can lie in range: 0 <= q <= 1.\ninterpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n    This optional parameter specifies the interpolation method to use,\n    when the desired quantile lies between two data points `i` and `j`:\n\n        * linear: `i + (j - i) * (x-i)/(j-i)`, where `(x-i)/(j-i)` is\n          the fractional part of the index surrounded by `i > j`.\n        * lower: `i`.\n        * higher: `j`.\n        * nearest: `i` or `j` whichever is nearest.\n        * midpoint: (`i` + `j`) / 2.\n\nReturns\n-------\nfloat or Series\n    If ``q`` is an array, a Series will be returned where the\n    index is ``q`` and the values are the quantiles, otherwise\n    a float will be returned.\n\nSee Also\n--------\ncore.window.Rolling.quantile : Calculate the rolling quantile.\nnumpy.percentile : Returns the q-th percentile(s) of the array elements.\n\nExamples\n--------\n>>> s = pd.Series([1, 2, 3, 4])\n>>> s.quantile(.5)\n2.5\n>>> s.quantile([.25, .5, .75])\n0.25    1.75\n0.50    2.50\n0.75    3.25\ndtype: float64"
  },
  {
    "symbol": "Series.radd",
    "signature": "(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'",
    "doc": "Return Addition of series and other, element-wise (binary operator `radd`).\n\nEquivalent to ``other + series``, but with support to substitute a fill_value for\nmissing data in either one of the inputs.\n\nParameters\n----------\nother : Series or scalar value\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result of filling (at that location) will be missing.\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.\n\nReturns\n-------\nSeries\n    The result of the operation.\n\nSee Also\n--------\nSeries.add : Element-wise Addition, see\n    `Python documentation\n    <https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types>`_\n    for more details.\n\nExamples\n--------\n>>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n>>> a\na    1.0\nb    1.0\nc    1.0\nd    NaN\ndtype: float64\n>>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n>>> b\na    1.0\nb    NaN\nd    1.0\ne    NaN\ndtype: float64\n>>> a.add(b, fill_value=0)\na    2.0\nb    1.0\nc    1.0\nd    1.0\ne    NaN\ndtype: float64"
  },
  {
    "symbol": "Series.rank",
    "signature": "(self, axis: 'Axis' = 0, method: \"Literal['average', 'min', 'max', 'first', 'dense']\" = 'average', numeric_only: 'bool_t' = False, na_option: \"Literal['keep', 'top', 'bottom']\" = 'keep', ascending: 'bool_t' = True, pct: 'bool_t' = False) -> 'Self'",
    "doc": "Compute numerical data ranks (1 through n) along axis.\n\nBy default, equal values are assigned a rank that is the average of the\nranks of those values.\n\nParameters\n----------\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    Index to direct ranking.\n    For `Series` this parameter is unused and defaults to 0.\nmethod : {'average', 'min', 'max', 'first', 'dense'}, default 'average'\n    How to rank the group of records that have the same value (i.e. ties):\n\n    * average: average rank of the group\n    * min: lowest rank in the group\n    * max: highest rank in the group\n    * first: ranks assigned in order they appear in the array\n    * dense: like 'min', but rank always increases by 1 between groups.\n\nnumeric_only : bool, default False\n    For DataFrame objects, rank only numeric columns if set to True.\n\n    .. versionchanged:: 2.0.0\n        The default value of ``numeric_only`` is now ``False``.\n\nna_option : {'keep', 'top', 'bottom'}, default 'keep'\n    How to rank NaN values:\n\n    * keep: assign NaN rank to NaN values\n    * top: assign lowest rank to NaN values\n    * bottom: assign highest rank to NaN values\n\nascending : bool, default True\n    Whether or not the elements should be ranked in ascending order.\npct : bool, default False\n    Whether or not to display the returned rankings in percentile\n    form.\n\nReturns\n-------\nsame type as caller\n    Return a Series or DataFrame with data ranks as values.\n\nSee Also\n--------\ncore.groupby.DataFrameGroupBy.rank : Rank of values within each group.\ncore.groupby.SeriesGroupBy.rank : Rank of values within each group.\n\nExamples\n--------\n>>> df = pd.DataFrame(data={'Animal': ['cat', 'penguin', 'dog',\n...                                    'spider', 'snake'],\n...                         'Number_legs': [4, 2, 4, 8, np.nan]})\n>>> df\n    Animal  Number_legs\n0      cat          4.0\n1  penguin          2.0\n2      dog          4.0\n3   spider          8.0\n4    snake          NaN\n\nTies are assigned the mean of the ranks (by default) for the group.\n\n>>> s = pd.Series(range(5), index=list(\"abcde\"))\n>>> s[\"d\"] = s[\"b\"]\n>>> s.rank()\na    1.0\nb    2.5\nc    4.0\nd    2.5\ne    5.0\ndtype: float64\n\nThe following example shows how the method behaves with the above\nparameters:\n\n* default_rank: this is the default behaviour obtained without using\n  any parameter.\n* max_rank: setting ``method = 'max'`` the records that have the\n  same values are ranked using the highest rank (e.g.: since 'cat'\n  and 'dog' are both in the 2nd and 3rd position, rank 3 is assigned.)\n* NA_bottom: choosing ``na_option = 'bottom'``, if there are records\n  with NaN values they are placed at the bottom of the ranking.\n* pct_rank: when setting ``pct = True``, the ranking is expressed as\n  percentile rank.\n\n>>> df['default_rank'] = df['Number_legs'].rank()\n>>> df['max_rank'] = df['Number_legs'].rank(method='max')\n>>> df['NA_bottom'] = df['Number_legs'].rank(na_option='bottom')\n>>> df['pct_rank'] = df['Number_legs'].rank(pct=True)\n>>> df\n    Animal  Number_legs  default_rank  max_rank  NA_bottom  pct_rank\n0      cat          4.0           2.5       3.0        2.5     0.625\n1  penguin          2.0           1.0       1.0        1.0     0.250\n2      dog          4.0           2.5       3.0        2.5     0.625\n3   spider          8.0           4.0       4.0        4.0     1.000\n4    snake          NaN           NaN       NaN        5.0       NaN"
  },
  {
    "symbol": "Series.ravel",
    "signature": "(self, order: 'str' = 'C') -> 'ArrayLike'",
    "doc": "Return the flattened underlying data as an ndarray or ExtensionArray.\n\n.. deprecated:: 2.2.0\n    Series.ravel is deprecated. The underlying array is already 1D, so\n    ravel is not necessary.  Use :meth:`to_numpy` for conversion to a numpy\n    array instead.\n\nReturns\n-------\nnumpy.ndarray or ExtensionArray\n    Flattened data of the Series.\n\nSee Also\n--------\nnumpy.ndarray.ravel : Return a flattened array.\n\nExamples\n--------\n>>> s = pd.Series([1, 2, 3])\n>>> s.ravel()  # doctest: +SKIP\narray([1, 2, 3])"
  },
  {
    "symbol": "Series.rdiv",
    "signature": "(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'",
    "doc": "Return Floating division of series and other, element-wise (binary operator `rtruediv`).\n\nEquivalent to ``other / series``, but with support to substitute a fill_value for\nmissing data in either one of the inputs.\n\nParameters\n----------\nother : Series or scalar value\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result of filling (at that location) will be missing.\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.\n\nReturns\n-------\nSeries\n    The result of the operation.\n\nSee Also\n--------\nSeries.truediv : Element-wise Floating division, see\n    `Python documentation\n    <https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types>`_\n    for more details.\n\nExamples\n--------\n>>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n>>> a\na    1.0\nb    1.0\nc    1.0\nd    NaN\ndtype: float64\n>>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n>>> b\na    1.0\nb    NaN\nd    1.0\ne    NaN\ndtype: float64\n>>> a.divide(b, fill_value=0)\na    1.0\nb    inf\nc    inf\nd    0.0\ne    NaN\ndtype: float64"
  },
  {
    "symbol": "Series.rdivmod",
    "signature": "(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'",
    "doc": "Return Integer division and modulo of series and other, element-wise (binary operator `rdivmod`).\n\nEquivalent to ``other divmod series``, but with support to substitute a fill_value for\nmissing data in either one of the inputs.\n\nParameters\n----------\nother : Series or scalar value\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result of filling (at that location) will be missing.\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.\n\nReturns\n-------\n2-Tuple of Series\n    The result of the operation.\n\nSee Also\n--------\nSeries.divmod : Element-wise Integer division and modulo, see\n    `Python documentation\n    <https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types>`_\n    for more details.\n\nExamples\n--------\n>>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n>>> a\na    1.0\nb    1.0\nc    1.0\nd    NaN\ndtype: float64\n>>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n>>> b\na    1.0\nb    NaN\nd    1.0\ne    NaN\ndtype: float64\n>>> a.divmod(b, fill_value=0)\n(a    1.0\n b    inf\n c    inf\n d    0.0\n e    NaN\n dtype: float64,\n a    0.0\n b    NaN\n c    NaN\n d    0.0\n e    NaN\n dtype: float64)"
  },
  {
    "symbol": "Series.reindex",
    "signature": "(self, index=None, *, axis: 'Axis | None' = None, method: 'ReindexMethod | None' = None, copy: 'bool | None' = None, level: 'Level | None' = None, fill_value: 'Scalar | None' = None, limit: 'int | None' = None, tolerance=None) -> 'Series'",
    "doc": "Conform Series to new index with optional filling logic.\n\nPlaces NA/NaN in locations having no value in the previous index. A new object\nis produced unless the new index is equivalent to the current one and\n``copy=False``.\n\nParameters\n----------\n\nindex : array-like, optional\n    New labels for the index. Preferably an Index object to avoid\n    duplicating data.\naxis : int or str, optional\n    Unused.\nmethod : {None, 'backfill'/'bfill', 'pad'/'ffill', 'nearest'}\n    Method to use for filling holes in reindexed DataFrame.\n    Please note: this is only applicable to DataFrames/Series with a\n    monotonically increasing/decreasing index.\n\n    * None (default): don't fill gaps\n    * pad / ffill: Propagate last valid observation forward to next\n      valid.\n    * backfill / bfill: Use next valid observation to fill gap.\n    * nearest: Use nearest valid observations to fill gap.\n\ncopy : bool, default True\n    Return a new object, even if the passed indexes are the same.\n\n    .. note::\n        The `copy` keyword will change behavior in pandas 3.0.\n        `Copy-on-Write\n        <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n        will be enabled by default, which means that all methods with a\n        `copy` keyword will use a lazy copy mechanism to defer the copy and\n        ignore the `copy` keyword. The `copy` keyword will be removed in a\n        future version of pandas.\n\n        You can already get the future behavior and improvements through\n        enabling copy on write ``pd.options.mode.copy_on_write = True``\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : scalar, default np.nan\n    Value to use for missing values. Defaults to NaN, but can be any\n    \"compatible\" value.\nlimit : int, default None\n    Maximum number of consecutive elements to forward or backward fill.\ntolerance : optional\n    Maximum distance between original and new labels for inexact\n    matches. The values of the index at the matching locations most\n    satisfy the equation ``abs(index[indexer] - target) <= tolerance``.\n\n    Tolerance may be a scalar value, which applies the same tolerance\n    to all values, or list-like, which applies variable tolerance per\n    element. List-like includes list, tuple, array, Series, and must be\n    the same size as the index and its dtype must exactly match the\n    index's type.\n\nReturns\n-------\nSeries with changed index.\n\nSee Also\n--------\nDataFrame.set_index : Set row labels.\nDataFrame.reset_index : Remove row labels or move them to new columns.\nDataFrame.reindex_like : Change to same indices as other DataFrame.\n\nExamples\n--------\n``DataFrame.reindex`` supports two calling conventions\n\n* ``(index=index_labels, columns=column_labels, ...)``\n* ``(labels, axis={'index', 'columns'}, ...)``\n\nWe *highly* recommend using keyword arguments to clarify your\nintent.\n\nCreate a dataframe with some fictional data.\n\n>>> index = ['Firefox', 'Chrome', 'Safari', 'IE10', 'Konqueror']\n>>> df = pd.DataFrame({'http_status': [200, 200, 404, 404, 301],\n...                   'response_time': [0.04, 0.02, 0.07, 0.08, 1.0]},\n...                   index=index)\n>>> df\n           http_status  response_time\nFirefox            200           0.04\nChrome             200           0.02\nSafari             404           0.07\nIE10               404           0.08\nKonqueror          301           1.00\n\nCreate a new index and reindex the dataframe. By default\nvalues in the new index that do not have corresponding\nrecords in the dataframe are assigned ``NaN``.\n\n>>> new_index = ['Safari', 'Iceweasel', 'Comodo Dragon', 'IE10',\n...              'Chrome']\n>>> df.reindex(new_index)\n               http_status  response_time\nSafari               404.0           0.07\nIceweasel              NaN            NaN\nComodo Dragon          NaN            NaN\nIE10                 404.0           0.08\nChrome               200.0           0.02\n\nWe can fill in the missing values by passing a value to\nthe keyword ``fill_value``. Because the index is not monotonically\nincreasing or decreasing, we cannot use arguments to the keyword\n``method`` to fill the ``NaN`` values.\n\n>>> df.reindex(new_index, fill_value=0)\n               http_status  response_time\nSafari                 404           0.07\nIceweasel                0           0.00\nComodo Dragon            0           0.00\nIE10                   404           0.08\nChrome                 200           0.02\n\n>>> df.reindex(new_index, fill_value='missing')\n              http_status response_time\nSafari                404          0.07\nIceweasel         missing       missing\nComodo Dragon     missing       missing\nIE10                  404          0.08\nChrome                200          0.02\n\nWe can also reindex the columns.\n\n>>> df.reindex(columns=['http_status', 'user_agent'])\n           http_status  user_agent\nFirefox            200         NaN\nChrome             200         NaN\nSafari             404         NaN\nIE10               404         NaN\nKonqueror          301         NaN\n\nOr we can use \"axis-style\" keyword arguments\n\n>>> df.reindex(['http_status', 'user_agent'], axis=\"columns\")\n           http_status  user_agent\nFirefox            200         NaN\nChrome             200         NaN\nSafari             404         NaN\nIE10               404         NaN\nKonqueror          301         NaN\n\nTo further illustrate the filling functionality in\n``reindex``, we will create a dataframe with a\nmonotonically increasing index (for example, a sequence\nof dates).\n\n>>> date_index = pd.date_range('1/1/2010', periods=6, freq='D')\n>>> df2 = pd.DataFrame({\"prices\": [100, 101, np.nan, 100, 89, 88]},\n...                    index=date_index)\n>>> df2\n            prices\n2010-01-01   100.0\n2010-01-02   101.0\n2010-01-03     NaN\n2010-01-04   100.0\n2010-01-05    89.0\n2010-01-06    88.0\n\nSuppose we decide to expand the dataframe to cover a wider\ndate range.\n\n>>> date_index2 = pd.date_range('12/29/2009', periods=10, freq='D')\n>>> df2.reindex(date_index2)\n            prices\n2009-12-29     NaN\n2009-12-30     NaN\n2009-12-31     NaN\n2010-01-01   100.0\n2010-01-02   101.0\n2010-01-03     NaN\n2010-01-04   100.0\n2010-01-05    89.0\n2010-01-06    88.0\n2010-01-07     NaN\n\nThe index entries that did not have a value in the original data frame\n(for example, '2009-12-29') are by default filled with ``NaN``.\nIf desired, we can fill in the missing values using one of several\noptions.\n\nFor example, to back-propagate the last valid value to fill the ``NaN``\nvalues, pass ``bfill`` as an argument to the ``method`` keyword.\n\n>>> df2.reindex(date_index2, method='bfill')\n            prices\n2009-12-29   100.0\n2009-12-30   100.0\n2009-12-31   100.0\n2010-01-01   100.0\n2010-01-02   101.0\n2010-01-03     NaN\n2010-01-04   100.0\n2010-01-05    89.0\n2010-01-06    88.0\n2010-01-07     NaN\n\nPlease note that the ``NaN`` value present in the original dataframe\n(at index value 2010-01-03) will not be filled by any of the\nvalue propagation schemes. This is because filling while reindexing\ndoes not look at dataframe values, but only compares the original and\ndesired indexes. If you do want to fill in the ``NaN`` values present\nin the original dataframe, use the ``fillna()`` method.\n\nSee the :ref:`user guide <basics.reindexing>` for more."
  },
  {
    "symbol": "Series.reindex_like",
    "signature": "(self, other, method: \"Literal['backfill', 'bfill', 'pad', 'ffill', 'nearest'] | None\" = None, copy: 'bool_t | None' = None, limit: 'int | None' = None, tolerance=None) -> 'Self'",
    "doc": "Return an object with matching indices as other object.\n\nConform the object to the same index on all axes. Optional\nfilling logic, placing NaN in locations having no value\nin the previous index. A new object is produced unless the\nnew index is equivalent to the current one and copy=False.\n\nParameters\n----------\nother : Object of the same data type\n    Its row and column indices are used to define the new indices\n    of this object.\nmethod : {None, 'backfill'/'bfill', 'pad'/'ffill', 'nearest'}\n    Method to use for filling holes in reindexed DataFrame.\n    Please note: this is only applicable to DataFrames/Series with a\n    monotonically increasing/decreasing index.\n\n    * None (default): don't fill gaps\n    * pad / ffill: propagate last valid observation forward to next\n      valid\n    * backfill / bfill: use next valid observation to fill gap\n    * nearest: use nearest valid observations to fill gap.\n\ncopy : bool, default True\n    Return a new object, even if the passed indexes are the same.\n\n    .. note::\n        The `copy` keyword will change behavior in pandas 3.0.\n        `Copy-on-Write\n        <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n        will be enabled by default, which means that all methods with a\n        `copy` keyword will use a lazy copy mechanism to defer the copy and\n        ignore the `copy` keyword. The `copy` keyword will be removed in a\n        future version of pandas.\n\n        You can already get the future behavior and improvements through\n        enabling copy on write ``pd.options.mode.copy_on_write = True``\nlimit : int, default None\n    Maximum number of consecutive labels to fill for inexact matches.\ntolerance : optional\n    Maximum distance between original and new labels for inexact\n    matches. The values of the index at the matching locations must\n    satisfy the equation ``abs(index[indexer] - target) <= tolerance``.\n\n    Tolerance may be a scalar value, which applies the same tolerance\n    to all values, or list-like, which applies variable tolerance per\n    element. List-like includes list, tuple, array, Series, and must be\n    the same size as the index and its dtype must exactly match the\n    index's type.\n\nReturns\n-------\nSeries or DataFrame\n    Same type as caller, but with changed indices on each axis.\n\nSee Also\n--------\nDataFrame.set_index : Set row labels.\nDataFrame.reset_index : Remove row labels or move them to new columns.\nDataFrame.reindex : Change to new indices or expand indices.\n\nNotes\n-----\nSame as calling\n``.reindex(index=other.index, columns=other.columns,...)``.\n\nExamples\n--------\n>>> df1 = pd.DataFrame([[24.3, 75.7, 'high'],\n...                     [31, 87.8, 'high'],\n...                     [22, 71.6, 'medium'],\n...                     [35, 95, 'medium']],\n...                    columns=['temp_celsius', 'temp_fahrenheit',\n...                             'windspeed'],\n...                    index=pd.date_range(start='2014-02-12',\n...                                        end='2014-02-15', freq='D'))\n\n>>> df1\n            temp_celsius  temp_fahrenheit windspeed\n2014-02-12          24.3             75.7      high\n2014-02-13          31.0             87.8      high\n2014-02-14          22.0             71.6    medium\n2014-02-15          35.0             95.0    medium\n\n>>> df2 = pd.DataFrame([[28, 'low'],\n...                     [30, 'low'],\n...                     [35.1, 'medium']],\n...                    columns=['temp_celsius', 'windspeed'],\n...                    index=pd.DatetimeIndex(['2014-02-12', '2014-02-13',\n...                                            '2014-02-15']))\n\n>>> df2\n            temp_celsius windspeed\n2014-02-12          28.0       low\n2014-02-13          30.0       low\n2014-02-15          35.1    medium\n\n>>> df2.reindex_like(df1)\n            temp_celsius  temp_fahrenheit windspeed\n2014-02-12          28.0              NaN       low\n2014-02-13          30.0              NaN       low\n2014-02-14           NaN              NaN       NaN\n2014-02-15          35.1              NaN    medium"
  },
  {
    "symbol": "Series.rename",
    "signature": "(self, index: 'Renamer | Hashable | None' = None, *, axis: 'Axis | None' = None, copy: 'bool | None' = None, inplace: 'bool' = False, level: 'Level | None' = None, errors: 'IgnoreRaise' = 'ignore') -> 'Series | None'",
    "doc": "Alter Series index labels or name.\n\nFunction / dict values must be unique (1-to-1). Labels not contained in\na dict / Series will be left as-is. Extra labels listed don't throw an\nerror.\n\nAlternatively, change ``Series.name`` with a scalar value.\n\nSee the :ref:`user guide <basics.rename>` for more.\n\nParameters\n----------\nindex : scalar, hashable sequence, dict-like or function optional\n    Functions or dict-like are transformations to apply to\n    the index.\n    Scalar or hashable sequence-like will alter the ``Series.name``\n    attribute.\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.\ncopy : bool, default True\n    Also copy underlying data.\n\n    .. note::\n        The `copy` keyword will change behavior in pandas 3.0.\n        `Copy-on-Write\n        <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n        will be enabled by default, which means that all methods with a\n        `copy` keyword will use a lazy copy mechanism to defer the copy and\n        ignore the `copy` keyword. The `copy` keyword will be removed in a\n        future version of pandas.\n\n        You can already get the future behavior and improvements through\n        enabling copy on write ``pd.options.mode.copy_on_write = True``\ninplace : bool, default False\n    Whether to return a new Series. If True the value of copy is ignored.\nlevel : int or level name, default None\n    In case of MultiIndex, only rename labels in the specified level.\nerrors : {'ignore', 'raise'}, default 'ignore'\n    If 'raise', raise `KeyError` when a `dict-like mapper` or\n    `index` contains labels that are not present in the index being transformed.\n    If 'ignore', existing keys will be renamed and extra keys will be ignored.\n\nReturns\n-------\nSeries or None\n    Series with index labels or name altered or None if ``inplace=True``.\n\nSee Also\n--------\nDataFrame.rename : Corresponding DataFrame method.\nSeries.rename_axis : Set the name of the axis.\n\nExamples\n--------\n>>> s = pd.Series([1, 2, 3])\n>>> s\n0    1\n1    2\n2    3\ndtype: int64\n>>> s.rename(\"my_name\")  # scalar, changes Series.name\n0    1\n1    2\n2    3\nName: my_name, dtype: int64\n>>> s.rename(lambda x: x ** 2)  # function, changes labels\n0    1\n1    2\n4    3\ndtype: int64\n>>> s.rename({1: 3, 2: 5})  # mapping, changes labels\n0    1\n3    2\n5    3\ndtype: int64"
  },
  {
    "symbol": "Series.rename_axis",
    "signature": "(self, mapper: 'IndexLabel | lib.NoDefault' = <no_default>, *, index=<no_default>, axis: 'Axis' = 0, copy: 'bool' = True, inplace: 'bool' = False) -> 'Self | None'",
    "doc": "Set the name of the axis for the index or columns.\n\nParameters\n----------\nmapper : scalar, list-like, optional\n    Value to set the axis name attribute.\nindex, columns : scalar, list-like, dict-like or function, optional\n    A scalar, list-like, dict-like or functions transformations to\n    apply to that axis' values.\n    Note that the ``columns`` parameter is not allowed if the\n    object is a Series. This parameter only apply for DataFrame\n    type objects.\n\n    Use either ``mapper`` and ``axis`` to\n    specify the axis to target with ``mapper``, or ``index``\n    and/or ``columns``.\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    The axis to rename. For `Series` this parameter is unused and defaults to 0.\ncopy : bool, default None\n    Also copy underlying data.\n\n    .. note::\n        The `copy` keyword will change behavior in pandas 3.0.\n        `Copy-on-Write\n        <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n        will be enabled by default, which means that all methods with a\n        `copy` keyword will use a lazy copy mechanism to defer the copy and\n        ignore the `copy` keyword. The `copy` keyword will be removed in a\n        future version of pandas.\n\n        You can already get the future behavior and improvements through\n        enabling copy on write ``pd.options.mode.copy_on_write = True``\ninplace : bool, default False\n    Modifies the object directly, instead of creating a new Series\n    or DataFrame.\n\nReturns\n-------\nSeries, DataFrame, or None\n    The same type as the caller or None if ``inplace=True``.\n\nSee Also\n--------\nSeries.rename : Alter Series index labels or name.\nDataFrame.rename : Alter DataFrame index labels or name.\nIndex.rename : Set new names on index.\n\nNotes\n-----\n``DataFrame.rename_axis`` supports two calling conventions\n\n* ``(index=index_mapper, columns=columns_mapper, ...)``\n* ``(mapper, axis={'index', 'columns'}, ...)``\n\nThe first calling convention will only modify the names of\nthe index and/or the names of the Index object that is the columns.\nIn this case, the parameter ``copy`` is ignored.\n\nThe second calling convention will modify the names of the\ncorresponding index if mapper is a list or a scalar.\nHowever, if mapper is dict-like or a function, it will use the\ndeprecated behavior of modifying the axis *labels*.\n\nWe *highly* recommend using keyword arguments to clarify your\nintent.\n\nExamples\n--------\n**Series**\n\n>>> s = pd.Series([\"dog\", \"cat\", \"monkey\"])\n>>> s\n0       dog\n1       cat\n2    monkey\ndtype: object\n>>> s.rename_axis(\"animal\")\nanimal\n0    dog\n1    cat\n2    monkey\ndtype: object\n\n**DataFrame**\n\n>>> df = pd.DataFrame({\"num_legs\": [4, 4, 2],\n...                    \"num_arms\": [0, 0, 2]},\n...                   [\"dog\", \"cat\", \"monkey\"])\n>>> df\n        num_legs  num_arms\ndog            4         0\ncat            4         0\nmonkey         2         2\n>>> df = df.rename_axis(\"animal\")\n>>> df\n        num_legs  num_arms\nanimal\ndog            4         0\ncat            4         0\nmonkey         2         2\n>>> df = df.rename_axis(\"limbs\", axis=\"columns\")\n>>> df\nlimbs   num_legs  num_arms\nanimal\ndog            4         0\ncat            4         0\nmonkey         2         2\n\n**MultiIndex**\n\n>>> df.index = pd.MultiIndex.from_product([['mammal'],\n...                                        ['dog', 'cat', 'monkey']],\n...                                       names=['type', 'name'])\n>>> df\nlimbs          num_legs  num_arms\ntype   name\nmammal dog            4         0\n       cat            4         0\n       monkey         2         2\n\n>>> df.rename_axis(index={'type': 'class'})\nlimbs          num_legs  num_arms\nclass  name\nmammal dog            4         0\n       cat            4         0\n       monkey         2         2\n\n>>> df.rename_axis(columns=str.upper)\nLIMBS          num_legs  num_arms\ntype   name\nmammal dog            4         0\n       cat            4         0\n       monkey         2         2"
  },
  {
    "symbol": "Series.reorder_levels",
    "signature": "(self, order: 'Sequence[Level]') -> 'Series'",
    "doc": "Rearrange index levels using input order.\n\nMay not drop or duplicate levels.\n\nParameters\n----------\norder : list of int representing new level order\n    Reference level by number or key.\n\nReturns\n-------\ntype of caller (new object)\n\nExamples\n--------\n>>> arrays = [np.array([\"dog\", \"dog\", \"cat\", \"cat\", \"bird\", \"bird\"]),\n...           np.array([\"white\", \"black\", \"white\", \"black\", \"white\", \"black\"])]\n>>> s = pd.Series([1, 2, 3, 3, 5, 2], index=arrays)\n>>> s\ndog   white    1\n      black    2\ncat   white    3\n      black    3\nbird  white    5\n      black    2\ndtype: int64\n>>> s.reorder_levels([1, 0])\nwhite  dog     1\nblack  dog     2\nwhite  cat     3\nblack  cat     3\nwhite  bird    5\nblack  bird    2\ndtype: int64"
  },
  {
    "symbol": "Series.repeat",
    "signature": "(self, repeats: 'int | Sequence[int]', axis: 'None' = None) -> 'Series'",
    "doc": "Repeat elements of a Series.\n\nReturns a new Series where each element of the current Series\nis repeated consecutively a given number of times.\n\nParameters\n----------\nrepeats : int or array of ints\n    The number of repetitions for each element. This should be a\n    non-negative integer. Repeating 0 times will return an empty\n    Series.\naxis : None\n    Unused. Parameter needed for compatibility with DataFrame.\n\nReturns\n-------\nSeries\n    Newly created Series with repeated elements.\n\nSee Also\n--------\nIndex.repeat : Equivalent function for Index.\nnumpy.repeat : Similar method for :class:`numpy.ndarray`.\n\nExamples\n--------\n>>> s = pd.Series(['a', 'b', 'c'])\n>>> s\n0    a\n1    b\n2    c\ndtype: object\n>>> s.repeat(2)\n0    a\n0    a\n1    b\n1    b\n2    c\n2    c\ndtype: object\n>>> s.repeat([1, 2, 3])\n0    a\n1    b\n1    b\n2    c\n2    c\n2    c\ndtype: object"
  },
  {
    "symbol": "Series.replace",
    "signature": "(self, to_replace=None, value=<no_default>, *, inplace: 'bool_t' = False, limit: 'int | None' = None, regex: 'bool_t' = False, method: \"Literal['pad', 'ffill', 'bfill'] | lib.NoDefault\" = <no_default>) -> 'Self | None'",
    "doc": "Replace values given in `to_replace` with `value`.\n\nValues of the Series/DataFrame are replaced with other values dynamically.\nThis differs from updating with ``.loc`` or ``.iloc``, which require\nyou to specify a location to update with some value.\n\nParameters\n----------\nto_replace : str, regex, list, dict, Series, int, float, or None\n    How to find the values that will be replaced.\n\n    * numeric, str or regex:\n\n        - numeric: numeric values equal to `to_replace` will be\n          replaced with `value`\n        - str: string exactly matching `to_replace` will be replaced\n          with `value`\n        - regex: regexs matching `to_replace` will be replaced with\n          `value`\n\n    * list of str, regex, or numeric:\n\n        - First, if `to_replace` and `value` are both lists, they\n          **must** be the same length.\n        - Second, if ``regex=True`` then all of the strings in **both**\n          lists will be interpreted as regexs otherwise they will match\n          directly. This doesn't matter much for `value` since there\n          are only a few possible substitution regexes you can use.\n        - str, regex and numeric rules apply as above.\n\n    * dict:\n\n        - Dicts can be used to specify different replacement values\n          for different existing values. For example,\n          ``{'a': 'b', 'y': 'z'}`` replaces the value 'a' with 'b' and\n          'y' with 'z'. To use a dict in this way, the optional `value`\n          parameter should not be given.\n        - For a DataFrame a dict can specify that different values\n          should be replaced in different columns. For example,\n          ``{'a': 1, 'b': 'z'}`` looks for the value 1 in column 'a'\n          and the value 'z' in column 'b' and replaces these values\n          with whatever is specified in `value`. The `value` parameter\n          should not be ``None`` in this case. You can treat this as a\n          special case of passing two lists except that you are\n          specifying the column to search in.\n        - For a DataFrame nested dictionaries, e.g.,\n          ``{'a': {'b': np.nan}}``, are read as follows: look in column\n          'a' for the value 'b' and replace it with NaN. The optional `value`\n          parameter should not be specified to use a nested dict in this\n          way. You can nest regular expressions as well. Note that\n          column names (the top-level dictionary keys in a nested\n          dictionary) **cannot** be regular expressions.\n\n    * None:\n\n        - This means that the `regex` argument must be a string,\n          compiled regular expression, or list, dict, ndarray or\n          Series of such elements. If `value` is also ``None`` then\n          this **must** be a nested dictionary or Series.\n\n    See the examples section for examples of each of these.\nvalue : scalar, dict, list, str, regex, default None\n    Value to replace any values matching `to_replace` with.\n    For a DataFrame a dict of values can be used to specify which\n    value to use for each column (columns not in the dict will not be\n    filled). Regular expressions, strings and lists or dicts of such\n    objects are also allowed.\n\ninplace : bool, default False\n    If True, performs operation inplace and returns None.\nlimit : int, default None\n    Maximum size gap to forward or backward fill.\n\n    .. deprecated:: 2.1.0\nregex : bool or same types as `to_replace`, default False\n    Whether to interpret `to_replace` and/or `value` as regular\n    expressions. Alternatively, this could be a regular expression or a\n    list, dict, or array of regular expressions in which case\n    `to_replace` must be ``None``.\nmethod : {'pad', 'ffill', 'bfill'}\n    The method to use when for replacement, when `to_replace` is a\n    scalar, list or tuple and `value` is ``None``.\n\n    .. deprecated:: 2.1.0\n\nReturns\n-------\nSeries/DataFrame\n    Object after replacement.\n\nRaises\n------\nAssertionError\n    * If `regex` is not a ``bool`` and `to_replace` is not\n      ``None``.\n\nTypeError\n    * If `to_replace` is not a scalar, array-like, ``dict``, or ``None``\n    * If `to_replace` is a ``dict`` and `value` is not a ``list``,\n      ``dict``, ``ndarray``, or ``Series``\n    * If `to_replace` is ``None`` and `regex` is not compilable\n      into a regular expression or is a list, dict, ndarray, or\n      Series.\n    * When replacing multiple ``bool`` or ``datetime64`` objects and\n      the arguments to `to_replace` does not match the type of the\n      value being replaced\n\nValueError\n    * If a ``list`` or an ``ndarray`` is passed to `to_replace` and\n      `value` but they are not the same length.\n\nSee Also\n--------\nSeries.fillna : Fill NA values.\nDataFrame.fillna : Fill NA values.\nSeries.where : Replace values based on boolean condition.\nDataFrame.where : Replace values based on boolean condition.\nDataFrame.map: Apply a function to a Dataframe elementwise.\nSeries.map: Map values of Series according to an input mapping or function.\nSeries.str.replace : Simple string replacement.\n\nNotes\n-----\n* Regex substitution is performed under the hood with ``re.sub``. The\n  rules for substitution for ``re.sub`` are the same.\n* Regular expressions will only substitute on strings, meaning you\n  cannot provide, for example, a regular expression matching floating\n  point numbers and expect the columns in your frame that have a\n  numeric dtype to be matched. However, if those floating point\n  numbers *are* strings, then you can do this.\n* This method has *a lot* of options. You are encouraged to experiment\n  and play with this method to gain intuition about how it works.\n* When dict is used as the `to_replace` value, it is like\n  key(s) in the dict are the to_replace part and\n  value(s) in the dict are the value parameter.\n\nExamples\n--------\n\n**Scalar `to_replace` and `value`**\n\n>>> s = pd.Series([1, 2, 3, 4, 5])\n>>> s.replace(1, 5)\n0    5\n1    2\n2    3\n3    4\n4    5\ndtype: int64\n\n>>> df = pd.DataFrame({'A': [0, 1, 2, 3, 4],\n...                    'B': [5, 6, 7, 8, 9],\n...                    'C': ['a', 'b', 'c', 'd', 'e']})\n>>> df.replace(0, 5)\n    A  B  C\n0  5  5  a\n1  1  6  b\n2  2  7  c\n3  3  8  d\n4  4  9  e\n\n**List-like `to_replace`**\n\n>>> df.replace([0, 1, 2, 3], 4)\n    A  B  C\n0  4  5  a\n1  4  6  b\n2  4  7  c\n3  4  8  d\n4  4  9  e\n\n>>> df.replace([0, 1, 2, 3], [4, 3, 2, 1])\n    A  B  C\n0  4  5  a\n1  3  6  b\n2  2  7  c\n3  1  8  d\n4  4  9  e\n\n>>> s.replace([1, 2], method='bfill')\n0    3\n1    3\n2    3\n3    4\n4    5\ndtype: int64\n\n**dict-like `to_replace`**\n\n>>> df.replace({0: 10, 1: 100})\n        A  B  C\n0   10  5  a\n1  100  6  b\n2    2  7  c\n3    3  8  d\n4    4  9  e\n\n>>> df.replace({'A': 0, 'B': 5}, 100)\n        A    B  C\n0  100  100  a\n1    1    6  b\n2    2    7  c\n3    3    8  d\n4    4    9  e\n\n>>> df.replace({'A': {0: 100, 4: 400}})\n        A  B  C\n0  100  5  a\n1    1  6  b\n2    2  7  c\n3    3  8  d\n4  400  9  e\n\n**Regular expression `to_replace`**\n\n>>> df = pd.DataFrame({'A': ['bat', 'foo', 'bait'],\n...                    'B': ['abc', 'bar', 'xyz']})\n>>> df.replace(to_replace=r'^ba.$', value='new', regex=True)\n        A    B\n0   new  abc\n1   foo  new\n2  bait  xyz\n\n>>> df.replace({'A': r'^ba.$'}, {'A': 'new'}, regex=True)\n        A    B\n0   new  abc\n1   foo  bar\n2  bait  xyz\n\n>>> df.replace(regex=r'^ba.$', value='new')\n        A    B\n0   new  abc\n1   foo  new\n2  bait  xyz\n\n>>> df.replace(regex={r'^ba.$': 'new', 'foo': 'xyz'})\n        A    B\n0   new  abc\n1   xyz  new\n2  bait  xyz\n\n>>> df.replace(regex=[r'^ba.$', 'foo'], value='new')\n        A    B\n0   new  abc\n1   new  new\n2  bait  xyz\n\nCompare the behavior of ``s.replace({'a': None})`` and\n``s.replace('a', None)`` to understand the peculiarities\nof the `to_replace` parameter:\n\n>>> s = pd.Series([10, 'a', 'a', 'b', 'a'])\n\nWhen one uses a dict as the `to_replace` value, it is like the\nvalue(s) in the dict are equal to the `value` parameter.\n``s.replace({'a': None})`` is equivalent to\n``s.replace(to_replace={'a': None}, value=None, method=None)``:\n\n>>> s.replace({'a': None})\n0      10\n1    None\n2    None\n3       b\n4    None\ndtype: object\n\nWhen ``value`` is not explicitly passed and `to_replace` is a scalar, list\nor tuple, `replace` uses the method parameter (default 'pad') to do the\nreplacement. So this is why the 'a' values are being replaced by 10\nin rows 1 and 2 and 'b' in row 4 in this case.\n\n>>> s.replace('a')\n0    10\n1    10\n2    10\n3     b\n4     b\ndtype: object\n\n    .. deprecated:: 2.1.0\n        The 'method' parameter and padding behavior are deprecated.\n\nOn the other hand, if ``None`` is explicitly passed for ``value``, it will\nbe respected:\n\n>>> s.replace('a', None)\n0      10\n1    None\n2    None\n3       b\n4    None\ndtype: object\n\n    .. versionchanged:: 1.4.0\n        Previously the explicit ``None`` was silently ignored.\n\nWhen ``regex=True``, ``value`` is not ``None`` and `to_replace` is a string,\nthe replacement will be applied in all columns of the DataFrame.\n\n>>> df = pd.DataFrame({'A': [0, 1, 2, 3, 4],\n...                    'B': ['a', 'b', 'c', 'd', 'e'],\n...                    'C': ['f', 'g', 'h', 'i', 'j']})\n\n>>> df.replace(to_replace='^[a-g]', value='e', regex=True)\n    A  B  C\n0  0  e  e\n1  1  e  e\n2  2  e  h\n3  3  e  i\n4  4  e  j\n\nIf ``value`` is not ``None`` and `to_replace` is a dictionary, the dictionary\nkeys will be the DataFrame columns that the replacement will be applied.\n\n>>> df.replace(to_replace={'B': '^[a-c]', 'C': '^[h-j]'}, value='e', regex=True)\n    A  B  C\n0  0  e  f\n1  1  e  g\n2  2  e  e\n3  3  d  e\n4  4  e  e"
  },
  {
    "symbol": "Series.resample",
    "signature": "(self, rule, axis: 'Axis | lib.NoDefault' = <no_default>, closed: \"Literal['right', 'left'] | None\" = None, label: \"Literal['right', 'left'] | None\" = None, convention: \"Literal['start', 'end', 's', 'e'] | lib.NoDefault\" = <no_default>, kind: \"Literal['timestamp', 'period'] | None | lib.NoDefault\" = <no_default>, on: 'Level | None' = None, level: 'Level | None' = None, origin: 'str | TimestampConvertibleTypes' = 'start_day', offset: 'TimedeltaConvertibleTypes | None' = None, group_keys: 'bool_t' = False) -> 'Resampler'",
    "doc": "Resample time-series data.\n\nConvenience method for frequency conversion and resampling of time series.\nThe object must have a datetime-like index (`DatetimeIndex`, `PeriodIndex`,\nor `TimedeltaIndex`), or the caller must pass the label of a datetime-like\nseries/index to the ``on``/``level`` keyword parameter.\n\nParameters\n----------\nrule : DateOffset, Timedelta or str\n    The offset string or object representing target conversion.\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    Which axis to use for up- or down-sampling. For `Series` this parameter\n    is unused and defaults to 0. Must be\n    `DatetimeIndex`, `TimedeltaIndex` or `PeriodIndex`.\n\n    .. deprecated:: 2.0.0\n        Use frame.T.resample(...) instead.\nclosed : {'right', 'left'}, default None\n    Which side of bin interval is closed. The default is 'left'\n    for all frequency offsets except for 'ME', 'YE', 'QE', 'BME',\n    'BA', 'BQE', and 'W' which all have a default of 'right'.\nlabel : {'right', 'left'}, default None\n    Which bin edge label to label bucket with. The default is 'left'\n    for all frequency offsets except for 'ME', 'YE', 'QE', 'BME',\n    'BA', 'BQE', and 'W' which all have a default of 'right'.\nconvention : {'start', 'end', 's', 'e'}, default 'start'\n    For `PeriodIndex` only, controls whether to use the start or\n    end of `rule`.\n\n    .. deprecated:: 2.2.0\n        Convert PeriodIndex to DatetimeIndex before resampling instead.\nkind : {'timestamp', 'period'}, optional, default None\n    Pass 'timestamp' to convert the resulting index to a\n    `DateTimeIndex` or 'period' to convert it to a `PeriodIndex`.\n    By default the input representation is retained.\n\n    .. deprecated:: 2.2.0\n        Convert index to desired type explicitly instead.\n\non : str, optional\n    For a DataFrame, column to use instead of index for resampling.\n    Column must be datetime-like.\nlevel : str or int, optional\n    For a MultiIndex, level (name or number) to use for\n    resampling. `level` must be datetime-like.\norigin : Timestamp or str, default 'start_day'\n    The timestamp on which to adjust the grouping. The timezone of origin\n    must match the timezone of the index.\n    If string, must be one of the following:\n\n    - 'epoch': `origin` is 1970-01-01\n    - 'start': `origin` is the first value of the timeseries\n    - 'start_day': `origin` is the first day at midnight of the timeseries\n\n    - 'end': `origin` is the last value of the timeseries\n    - 'end_day': `origin` is the ceiling midnight of the last day\n\n    .. versionadded:: 1.3.0\n\n    .. note::\n\n        Only takes effect for Tick-frequencies (i.e. fixed frequencies like\n        days, hours, and minutes, rather than months or quarters).\noffset : Timedelta or str, default is None\n    An offset timedelta added to the origin.\n\ngroup_keys : bool, default False\n    Whether to include the group keys in the result index when using\n    ``.apply()`` on the resampled object.\n\n    .. versionadded:: 1.5.0\n\n        Not specifying ``group_keys`` will retain values-dependent behavior\n        from pandas 1.4 and earlier (see :ref:`pandas 1.5.0 Release notes\n        <whatsnew_150.enhancements.resample_group_keys>` for examples).\n\n    .. versionchanged:: 2.0.0\n\n        ``group_keys`` now defaults to ``False``.\n\nReturns\n-------\npandas.api.typing.Resampler\n    :class:`~pandas.core.Resampler` object.\n\nSee Also\n--------\nSeries.resample : Resample a Series.\nDataFrame.resample : Resample a DataFrame.\ngroupby : Group Series/DataFrame by mapping, function, label, or list of labels.\nasfreq : Reindex a Series/DataFrame with the given frequency without grouping.\n\nNotes\n-----\nSee the `user guide\n<https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#resampling>`__\nfor more.\n\nTo learn more about the offset strings, please see `this link\n<https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#dateoffset-objects>`__.\n\nExamples\n--------\nStart by creating a series with 9 one minute timestamps.\n\n>>> index = pd.date_range('1/1/2000', periods=9, freq='min')\n>>> series = pd.Series(range(9), index=index)\n>>> series\n2000-01-01 00:00:00    0\n2000-01-01 00:01:00    1\n2000-01-01 00:02:00    2\n2000-01-01 00:03:00    3\n2000-01-01 00:04:00    4\n2000-01-01 00:05:00    5\n2000-01-01 00:06:00    6\n2000-01-01 00:07:00    7\n2000-01-01 00:08:00    8\nFreq: min, dtype: int64\n\nDownsample the series into 3 minute bins and sum the values\nof the timestamps falling into a bin.\n\n>>> series.resample('3min').sum()\n2000-01-01 00:00:00     3\n2000-01-01 00:03:00    12\n2000-01-01 00:06:00    21\nFreq: 3min, dtype: int64\n\nDownsample the series into 3 minute bins as above, but label each\nbin using the right edge instead of the left. Please note that the\nvalue in the bucket used as the label is not included in the bucket,\nwhich it labels. For example, in the original series the\nbucket ``2000-01-01 00:03:00`` contains the value 3, but the summed\nvalue in the resampled bucket with the label ``2000-01-01 00:03:00``\ndoes not include 3 (if it did, the summed value would be 6, not 3).\n\n>>> series.resample('3min', label='right').sum()\n2000-01-01 00:03:00     3\n2000-01-01 00:06:00    12\n2000-01-01 00:09:00    21\nFreq: 3min, dtype: int64\n\nTo include this value close the right side of the bin interval,\nas shown below.\n\n>>> series.resample('3min', label='right', closed='right').sum()\n2000-01-01 00:00:00     0\n2000-01-01 00:03:00     6\n2000-01-01 00:06:00    15\n2000-01-01 00:09:00    15\nFreq: 3min, dtype: int64\n\nUpsample the series into 30 second bins.\n\n>>> series.resample('30s').asfreq()[0:5]   # Select first 5 rows\n2000-01-01 00:00:00   0.0\n2000-01-01 00:00:30   NaN\n2000-01-01 00:01:00   1.0\n2000-01-01 00:01:30   NaN\n2000-01-01 00:02:00   2.0\nFreq: 30s, dtype: float64\n\nUpsample the series into 30 second bins and fill the ``NaN``\nvalues using the ``ffill`` method.\n\n>>> series.resample('30s').ffill()[0:5]\n2000-01-01 00:00:00    0\n2000-01-01 00:00:30    0\n2000-01-01 00:01:00    1\n2000-01-01 00:01:30    1\n2000-01-01 00:02:00    2\nFreq: 30s, dtype: int64\n\nUpsample the series into 30 second bins and fill the\n``NaN`` values using the ``bfill`` method.\n\n>>> series.resample('30s').bfill()[0:5]\n2000-01-01 00:00:00    0\n2000-01-01 00:00:30    1\n2000-01-01 00:01:00    1\n2000-01-01 00:01:30    2\n2000-01-01 00:02:00    2\nFreq: 30s, dtype: int64\n\nPass a custom function via ``apply``\n\n>>> def custom_resampler(arraylike):\n...     return np.sum(arraylike) + 5\n...\n>>> series.resample('3min').apply(custom_resampler)\n2000-01-01 00:00:00     8\n2000-01-01 00:03:00    17\n2000-01-01 00:06:00    26\nFreq: 3min, dtype: int64\n\nFor DataFrame objects, the keyword `on` can be used to specify the\ncolumn instead of the index for resampling.\n\n>>> d = {'price': [10, 11, 9, 13, 14, 18, 17, 19],\n...      'volume': [50, 60, 40, 100, 50, 100, 40, 50]}\n>>> df = pd.DataFrame(d)\n>>> df['week_starting'] = pd.date_range('01/01/2018',\n...                                     periods=8,\n...                                     freq='W')\n>>> df\n   price  volume week_starting\n0     10      50    2018-01-07\n1     11      60    2018-01-14\n2      9      40    2018-01-21\n3     13     100    2018-01-28\n4     14      50    2018-02-04\n5     18     100    2018-02-11\n6     17      40    2018-02-18\n7     19      50    2018-02-25\n>>> df.resample('ME', on='week_starting').mean()\n               price  volume\nweek_starting\n2018-01-31     10.75    62.5\n2018-02-28     17.00    60.0\n\nFor a DataFrame with MultiIndex, the keyword `level` can be used to\nspecify on which level the resampling needs to take place.\n\n>>> days = pd.date_range('1/1/2000', periods=4, freq='D')\n>>> d2 = {'price': [10, 11, 9, 13, 14, 18, 17, 19],\n...       'volume': [50, 60, 40, 100, 50, 100, 40, 50]}\n>>> df2 = pd.DataFrame(\n...     d2,\n...     index=pd.MultiIndex.from_product(\n...         [days, ['morning', 'afternoon']]\n...     )\n... )\n>>> df2\n                      price  volume\n2000-01-01 morning       10      50\n           afternoon     11      60\n2000-01-02 morning        9      40\n           afternoon     13     100\n2000-01-03 morning       14      50\n           afternoon     18     100\n2000-01-04 morning       17      40\n           afternoon     19      50\n>>> df2.resample('D', level=0).sum()\n            price  volume\n2000-01-01     21     110\n2000-01-02     22     140\n2000-01-03     32     150\n2000-01-04     36      90\n\nIf you want to adjust the start of the bins based on a fixed timestamp:\n\n>>> start, end = '2000-10-01 23:30:00', '2000-10-02 00:30:00'\n>>> rng = pd.date_range(start, end, freq='7min')\n>>> ts = pd.Series(np.arange(len(rng)) * 3, index=rng)\n>>> ts\n2000-10-01 23:30:00     0\n2000-10-01 23:37:00     3\n2000-10-01 23:44:00     6\n2000-10-01 23:51:00     9\n2000-10-01 23:58:00    12\n2000-10-02 00:05:00    15\n2000-10-02 00:12:00    18\n2000-10-02 00:19:00    21\n2000-10-02 00:26:00    24\nFreq: 7min, dtype: int64\n\n>>> ts.resample('17min').sum()\n2000-10-01 23:14:00     0\n2000-10-01 23:31:00     9\n2000-10-01 23:48:00    21\n2000-10-02 00:05:00    54\n2000-10-02 00:22:00    24\nFreq: 17min, dtype: int64\n\n>>> ts.resample('17min', origin='epoch').sum()\n2000-10-01 23:18:00     0\n2000-10-01 23:35:00    18\n2000-10-01 23:52:00    27\n2000-10-02 00:09:00    39\n2000-10-02 00:26:00    24\nFreq: 17min, dtype: int64\n\n>>> ts.resample('17min', origin='2000-01-01').sum()\n2000-10-01 23:24:00     3\n2000-10-01 23:41:00    15\n2000-10-01 23:58:00    45\n2000-10-02 00:15:00    45\nFreq: 17min, dtype: int64\n\nIf you want to adjust the start of the bins with an `offset` Timedelta, the two\nfollowing lines are equivalent:\n\n>>> ts.resample('17min', origin='start').sum()\n2000-10-01 23:30:00     9\n2000-10-01 23:47:00    21\n2000-10-02 00:04:00    54\n2000-10-02 00:21:00    24\nFreq: 17min, dtype: int64\n\n>>> ts.resample('17min', offset='23h30min').sum()\n2000-10-01 23:30:00     9\n2000-10-01 23:47:00    21\n2000-10-02 00:04:00    54\n2000-10-02 00:21:00    24\nFreq: 17min, dtype: int64\n\nIf you want to take the largest Timestamp as the end of the bins:\n\n>>> ts.resample('17min', origin='end').sum()\n2000-10-01 23:35:00     0\n2000-10-01 23:52:00    18\n2000-10-02 00:09:00    27\n2000-10-02 00:26:00    63\nFreq: 17min, dtype: int64\n\nIn contrast with the `start_day`, you can use `end_day` to take the ceiling\nmidnight of the largest Timestamp as the end of the bins and drop the bins\nnot containing data:\n\n>>> ts.resample('17min', origin='end_day').sum()\n2000-10-01 23:38:00     3\n2000-10-01 23:55:00    15\n2000-10-02 00:12:00    45\n2000-10-02 00:29:00    45\nFreq: 17min, dtype: int64"
  },
  {
    "symbol": "Series.reset_index",
    "signature": "(self, level: 'IndexLabel | None' = None, *, drop: 'bool' = False, name: 'Level' = <no_default>, inplace: 'bool' = False, allow_duplicates: 'bool' = False) -> 'DataFrame | Series | None'",
    "doc": "Generate a new DataFrame or Series with the index reset.\n\nThis is useful when the index needs to be treated as a column, or\nwhen the index is meaningless and needs to be reset to the default\nbefore another operation.\n\nParameters\n----------\nlevel : int, str, tuple, or list, default optional\n    For a Series with a MultiIndex, only remove the specified levels\n    from the index. Removes all levels by default.\ndrop : bool, default False\n    Just reset the index, without inserting it as a column in\n    the new DataFrame.\nname : object, optional\n    The name to use for the column containing the original Series\n    values. Uses ``self.name`` by default. This argument is ignored\n    when `drop` is True.\ninplace : bool, default False\n    Modify the Series in place (do not create a new object).\nallow_duplicates : bool, default False\n    Allow duplicate column labels to be created.\n\n    .. versionadded:: 1.5.0\n\nReturns\n-------\nSeries or DataFrame or None\n    When `drop` is False (the default), a DataFrame is returned.\n    The newly created columns will come first in the DataFrame,\n    followed by the original Series values.\n    When `drop` is True, a `Series` is returned.\n    In either case, if ``inplace=True``, no value is returned.\n\nSee Also\n--------\nDataFrame.reset_index: Analogous function for DataFrame.\n\nExamples\n--------\n>>> s = pd.Series([1, 2, 3, 4], name='foo',\n...               index=pd.Index(['a', 'b', 'c', 'd'], name='idx'))\n\nGenerate a DataFrame with default index.\n\n>>> s.reset_index()\n  idx  foo\n0   a    1\n1   b    2\n2   c    3\n3   d    4\n\nTo specify the name of the new column use `name`.\n\n>>> s.reset_index(name='values')\n  idx  values\n0   a       1\n1   b       2\n2   c       3\n3   d       4\n\nTo generate a new Series with the default set `drop` to True.\n\n>>> s.reset_index(drop=True)\n0    1\n1    2\n2    3\n3    4\nName: foo, dtype: int64\n\nThe `level` parameter is interesting for Series with a multi-level\nindex.\n\n>>> arrays = [np.array(['bar', 'bar', 'baz', 'baz']),\n...           np.array(['one', 'two', 'one', 'two'])]\n>>> s2 = pd.Series(\n...     range(4), name='foo',\n...     index=pd.MultiIndex.from_arrays(arrays,\n...                                     names=['a', 'b']))\n\nTo remove a specific level from the Index, use `level`.\n\n>>> s2.reset_index(level='a')\n       a  foo\nb\none  bar    0\ntwo  bar    1\none  baz    2\ntwo  baz    3\n\nIf `level` is not set, all levels are removed from the Index.\n\n>>> s2.reset_index()\n     a    b  foo\n0  bar  one    0\n1  bar  two    1\n2  baz  one    2\n3  baz  two    3"
  },
  {
    "symbol": "Series.rfloordiv",
    "signature": "(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'",
    "doc": "Return Integer division of series and other, element-wise (binary operator `rfloordiv`).\n\nEquivalent to ``other // series``, but with support to substitute a fill_value for\nmissing data in either one of the inputs.\n\nParameters\n----------\nother : Series or scalar value\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result of filling (at that location) will be missing.\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.\n\nReturns\n-------\nSeries\n    The result of the operation.\n\nSee Also\n--------\nSeries.floordiv : Element-wise Integer division, see\n    `Python documentation\n    <https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types>`_\n    for more details.\n\nExamples\n--------\n>>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n>>> a\na    1.0\nb    1.0\nc    1.0\nd    NaN\ndtype: float64\n>>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n>>> b\na    1.0\nb    NaN\nd    1.0\ne    NaN\ndtype: float64\n>>> a.floordiv(b, fill_value=0)\na    1.0\nb    inf\nc    inf\nd    0.0\ne    NaN\ndtype: float64"
  },
  {
    "symbol": "Series.rmod",
    "signature": "(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'",
    "doc": "Return Modulo of series and other, element-wise (binary operator `rmod`).\n\nEquivalent to ``other % series``, but with support to substitute a fill_value for\nmissing data in either one of the inputs.\n\nParameters\n----------\nother : Series or scalar value\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result of filling (at that location) will be missing.\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.\n\nReturns\n-------\nSeries\n    The result of the operation.\n\nSee Also\n--------\nSeries.mod : Element-wise Modulo, see\n    `Python documentation\n    <https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types>`_\n    for more details.\n\nExamples\n--------\n>>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n>>> a\na    1.0\nb    1.0\nc    1.0\nd    NaN\ndtype: float64\n>>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n>>> b\na    1.0\nb    NaN\nd    1.0\ne    NaN\ndtype: float64\n>>> a.mod(b, fill_value=0)\na    0.0\nb    NaN\nc    NaN\nd    0.0\ne    NaN\ndtype: float64"
  },
  {
    "symbol": "Series.rmul",
    "signature": "(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'",
    "doc": "Return Multiplication of series and other, element-wise (binary operator `rmul`).\n\nEquivalent to ``other * series``, but with support to substitute a fill_value for\nmissing data in either one of the inputs.\n\nParameters\n----------\nother : Series or scalar value\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result of filling (at that location) will be missing.\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.\n\nReturns\n-------\nSeries\n    The result of the operation.\n\nSee Also\n--------\nSeries.mul : Element-wise Multiplication, see\n    `Python documentation\n    <https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types>`_\n    for more details.\n\nExamples\n--------\n>>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n>>> a\na    1.0\nb    1.0\nc    1.0\nd    NaN\ndtype: float64\n>>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n>>> b\na    1.0\nb    NaN\nd    1.0\ne    NaN\ndtype: float64\n>>> a.multiply(b, fill_value=0)\na    1.0\nb    0.0\nc    0.0\nd    0.0\ne    NaN\ndtype: float64"
  },
  {
    "symbol": "Series.rolling",
    "signature": "(self, window: 'int | dt.timedelta | str | BaseOffset | BaseIndexer', min_periods: 'int | None' = None, center: 'bool_t' = False, win_type: 'str | None' = None, on: 'str | None' = None, axis: 'Axis | lib.NoDefault' = <no_default>, closed: 'IntervalClosedType | None' = None, step: 'int | None' = None, method: 'str' = 'single') -> 'Window | Rolling'",
    "doc": "Provide rolling window calculations.\n\nParameters\n----------\nwindow : int, timedelta, str, offset, or BaseIndexer subclass\n    Size of the moving window.\n\n    If an integer, the fixed number of observations used for\n    each window.\n\n    If a timedelta, str, or offset, the time period of each window. Each\n    window will be a variable sized based on the observations included in\n    the time-period. This is only valid for datetimelike indexes.\n    To learn more about the offsets & frequency strings, please see `this link\n    <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\n    If a BaseIndexer subclass, the window boundaries\n    based on the defined ``get_window_bounds`` method. Additional rolling\n    keyword arguments, namely ``min_periods``, ``center``, ``closed`` and\n    ``step`` will be passed to ``get_window_bounds``.\n\nmin_periods : int, default None\n    Minimum number of observations in window required to have a value;\n    otherwise, result is ``np.nan``.\n\n    For a window that is specified by an offset, ``min_periods`` will default to 1.\n\n    For a window that is specified by an integer, ``min_periods`` will default\n    to the size of the window.\n\ncenter : bool, default False\n    If False, set the window labels as the right edge of the window index.\n\n    If True, set the window labels as the center of the window index.\n\nwin_type : str, default None\n    If ``None``, all points are evenly weighted.\n\n    If a string, it must be a valid `scipy.signal window function\n    <https://docs.scipy.org/doc/scipy/reference/signal.windows.html#module-scipy.signal.windows>`__.\n\n    Certain Scipy window types require additional parameters to be passed\n    in the aggregation function. The additional parameters must match\n    the keywords specified in the Scipy window type method signature.\n\non : str, optional\n    For a DataFrame, a column label or Index level on which\n    to calculate the rolling window, rather than the DataFrame's index.\n\n    Provided integer column is ignored and excluded from result since\n    an integer index is not used to calculate the rolling window.\n\naxis : int or str, default 0\n    If ``0`` or ``'index'``, roll across the rows.\n\n    If ``1`` or ``'columns'``, roll across the columns.\n\n    For `Series` this parameter is unused and defaults to 0.\n\n    .. deprecated:: 2.1.0\n\n        The axis keyword is deprecated. For ``axis=1``,\n        transpose the DataFrame first instead.\n\nclosed : str, default None\n    If ``'right'``, the first point in the window is excluded from calculations.\n\n    If ``'left'``, the last point in the window is excluded from calculations.\n\n    If ``'both'``, the no points in the window are excluded from calculations.\n\n    If ``'neither'``, the first and last points in the window are excluded\n    from calculations.\n\n    Default ``None`` (``'right'``).\n\nstep : int, default None\n\n    .. versionadded:: 1.5.0\n\n    Evaluate the window at every ``step`` result, equivalent to slicing as\n    ``[::step]``. ``window`` must be an integer. Using a step argument other\n    than None or 1 will produce a result with a different shape than the input.\n\nmethod : str {'single', 'table'}, default 'single'\n\n    .. versionadded:: 1.3.0\n\n    Execute the rolling operation per single column or row (``'single'``)\n    or over the entire object (``'table'``).\n\n    This argument is only implemented when specifying ``engine='numba'``\n    in the method call.\n\nReturns\n-------\npandas.api.typing.Window or pandas.api.typing.Rolling\n    An instance of Window is returned if ``win_type`` is passed. Otherwise,\n    an instance of Rolling is returned.\n\nSee Also\n--------\nexpanding : Provides expanding transformations.\newm : Provides exponential weighted functions.\n\nNotes\n-----\nSee :ref:`Windowing Operations <window.generic>` for further usage details\nand examples.\n\nExamples\n--------\n>>> df = pd.DataFrame({'B': [0, 1, 2, np.nan, 4]})\n>>> df\n     B\n0  0.0\n1  1.0\n2  2.0\n3  NaN\n4  4.0\n\n**window**\n\nRolling sum with a window length of 2 observations.\n\n>>> df.rolling(2).sum()\n     B\n0  NaN\n1  1.0\n2  3.0\n3  NaN\n4  NaN\n\nRolling sum with a window span of 2 seconds.\n\n>>> df_time = pd.DataFrame({'B': [0, 1, 2, np.nan, 4]},\n...                        index=[pd.Timestamp('20130101 09:00:00'),\n...                               pd.Timestamp('20130101 09:00:02'),\n...                               pd.Timestamp('20130101 09:00:03'),\n...                               pd.Timestamp('20130101 09:00:05'),\n...                               pd.Timestamp('20130101 09:00:06')])\n\n>>> df_time\n                       B\n2013-01-01 09:00:00  0.0\n2013-01-01 09:00:02  1.0\n2013-01-01 09:00:03  2.0\n2013-01-01 09:00:05  NaN\n2013-01-01 09:00:06  4.0\n\n>>> df_time.rolling('2s').sum()\n                       B\n2013-01-01 09:00:00  0.0\n2013-01-01 09:00:02  1.0\n2013-01-01 09:00:03  3.0\n2013-01-01 09:00:05  NaN\n2013-01-01 09:00:06  4.0\n\nRolling sum with forward looking windows with 2 observations.\n\n>>> indexer = pd.api.indexers.FixedForwardWindowIndexer(window_size=2)\n>>> df.rolling(window=indexer, min_periods=1).sum()\n     B\n0  1.0\n1  3.0\n2  2.0\n3  4.0\n4  4.0\n\n**min_periods**\n\nRolling sum with a window length of 2 observations, but only needs a minimum of 1\nobservation to calculate a value.\n\n>>> df.rolling(2, min_periods=1).sum()\n     B\n0  0.0\n1  1.0\n2  3.0\n3  2.0\n4  4.0\n\n**center**\n\nRolling sum with the result assigned to the center of the window index.\n\n>>> df.rolling(3, min_periods=1, center=True).sum()\n     B\n0  1.0\n1  3.0\n2  3.0\n3  6.0\n4  4.0\n\n>>> df.rolling(3, min_periods=1, center=False).sum()\n     B\n0  0.0\n1  1.0\n2  3.0\n3  3.0\n4  6.0\n\n**step**\n\nRolling sum with a window length of 2 observations, minimum of 1 observation to\ncalculate a value, and a step of 2.\n\n>>> df.rolling(2, min_periods=1, step=2).sum()\n     B\n0  0.0\n2  3.0\n4  4.0\n\n**win_type**\n\nRolling sum with a window length of 2, using the Scipy ``'gaussian'``\nwindow type. ``std`` is required in the aggregation function.\n\n>>> df.rolling(2, win_type='gaussian').sum(std=3)\n          B\n0       NaN\n1  0.986207\n2  2.958621\n3       NaN\n4       NaN\n\n**on**\n\nRolling sum with a window length of 2 days.\n\n>>> df = pd.DataFrame({\n...     'A': [pd.to_datetime('2020-01-01'),\n...           pd.to_datetime('2020-01-01'),\n...           pd.to_datetime('2020-01-02'),],\n...     'B': [1, 2, 3], },\n...     index=pd.date_range('2020', periods=3))\n\n>>> df\n                    A  B\n2020-01-01 2020-01-01  1\n2020-01-02 2020-01-01  2\n2020-01-03 2020-01-02  3\n\n>>> df.rolling('2D', on='A').sum()\n                    A    B\n2020-01-01 2020-01-01  1.0\n2020-01-02 2020-01-01  3.0\n2020-01-03 2020-01-02  6.0"
  },
  {
    "symbol": "Series.round",
    "signature": "(self, decimals: 'int' = 0, *args, **kwargs) -> 'Series'",
    "doc": "Round each value in a Series to the given number of decimals.\n\nParameters\n----------\ndecimals : int, default 0\n    Number of decimal places to round to. If decimals is negative,\n    it specifies the number of positions to the left of the decimal point.\n*args, **kwargs\n    Additional arguments and keywords have no effect but might be\n    accepted for compatibility with NumPy.\n\nReturns\n-------\nSeries\n    Rounded values of the Series.\n\nSee Also\n--------\nnumpy.around : Round values of an np.array.\nDataFrame.round : Round values of a DataFrame.\n\nExamples\n--------\n>>> s = pd.Series([0.1, 1.3, 2.7])\n>>> s.round()\n0    0.0\n1    1.0\n2    3.0\ndtype: float64"
  },
  {
    "symbol": "Series.rpow",
    "signature": "(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'",
    "doc": "Return Exponential power of series and other, element-wise (binary operator `rpow`).\n\nEquivalent to ``other ** series``, but with support to substitute a fill_value for\nmissing data in either one of the inputs.\n\nParameters\n----------\nother : Series or scalar value\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result of filling (at that location) will be missing.\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.\n\nReturns\n-------\nSeries\n    The result of the operation.\n\nSee Also\n--------\nSeries.pow : Element-wise Exponential power, see\n    `Python documentation\n    <https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types>`_\n    for more details.\n\nExamples\n--------\n>>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n>>> a\na    1.0\nb    1.0\nc    1.0\nd    NaN\ndtype: float64\n>>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n>>> b\na    1.0\nb    NaN\nd    1.0\ne    NaN\ndtype: float64\n>>> a.pow(b, fill_value=0)\na    1.0\nb    1.0\nc    1.0\nd    0.0\ne    NaN\ndtype: float64"
  },
  {
    "symbol": "Series.rsub",
    "signature": "(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'",
    "doc": "Return Subtraction of series and other, element-wise (binary operator `rsub`).\n\nEquivalent to ``other - series``, but with support to substitute a fill_value for\nmissing data in either one of the inputs.\n\nParameters\n----------\nother : Series or scalar value\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result of filling (at that location) will be missing.\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.\n\nReturns\n-------\nSeries\n    The result of the operation.\n\nSee Also\n--------\nSeries.sub : Element-wise Subtraction, see\n    `Python documentation\n    <https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types>`_\n    for more details.\n\nExamples\n--------\n>>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n>>> a\na    1.0\nb    1.0\nc    1.0\nd    NaN\ndtype: float64\n>>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n>>> b\na    1.0\nb    NaN\nd    1.0\ne    NaN\ndtype: float64\n>>> a.subtract(b, fill_value=0)\na    0.0\nb    1.0\nc    1.0\nd   -1.0\ne    NaN\ndtype: float64"
  },
  {
    "symbol": "Series.rtruediv",
    "signature": "(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'",
    "doc": "Return Floating division of series and other, element-wise (binary operator `rtruediv`).\n\nEquivalent to ``other / series``, but with support to substitute a fill_value for\nmissing data in either one of the inputs.\n\nParameters\n----------\nother : Series or scalar value\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result of filling (at that location) will be missing.\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.\n\nReturns\n-------\nSeries\n    The result of the operation.\n\nSee Also\n--------\nSeries.truediv : Element-wise Floating division, see\n    `Python documentation\n    <https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types>`_\n    for more details.\n\nExamples\n--------\n>>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n>>> a\na    1.0\nb    1.0\nc    1.0\nd    NaN\ndtype: float64\n>>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n>>> b\na    1.0\nb    NaN\nd    1.0\ne    NaN\ndtype: float64\n>>> a.divide(b, fill_value=0)\na    1.0\nb    inf\nc    inf\nd    0.0\ne    NaN\ndtype: float64"
  },
  {
    "symbol": "Series.sample",
    "signature": "(self, n: 'int | None' = None, frac: 'float | None' = None, replace: 'bool_t' = False, weights=None, random_state: 'RandomState | None' = None, axis: 'Axis | None' = None, ignore_index: 'bool_t' = False) -> 'Self'",
    "doc": "Return a random sample of items from an axis of object.\n\nYou can use `random_state` for reproducibility.\n\nParameters\n----------\nn : int, optional\n    Number of items from axis to return. Cannot be used with `frac`.\n    Default = 1 if `frac` = None.\nfrac : float, optional\n    Fraction of axis items to return. Cannot be used with `n`.\nreplace : bool, default False\n    Allow or disallow sampling of the same row more than once.\nweights : str or ndarray-like, optional\n    Default 'None' results in equal probability weighting.\n    If passed a Series, will align with target object on index. Index\n    values in weights not found in sampled object will be ignored and\n    index values in sampled object not in weights will be assigned\n    weights of zero.\n    If called on a DataFrame, will accept the name of a column\n    when axis = 0.\n    Unless weights are a Series, weights must be same length as axis\n    being sampled.\n    If weights do not sum to 1, they will be normalized to sum to 1.\n    Missing values in the weights column will be treated as zero.\n    Infinite values not allowed.\nrandom_state : int, array-like, BitGenerator, np.random.RandomState, np.random.Generator, optional\n    If int, array-like, or BitGenerator, seed for random number generator.\n    If np.random.RandomState or np.random.Generator, use as given.\n\n    .. versionchanged:: 1.4.0\n\n        np.random.Generator objects now accepted\n\naxis : {0 or 'index', 1 or 'columns', None}, default None\n    Axis to sample. Accepts axis number or name. Default is stat axis\n    for given data type. For `Series` this parameter is unused and defaults to `None`.\nignore_index : bool, default False\n    If True, the resulting index will be labeled 0, 1, …, n - 1.\n\n    .. versionadded:: 1.3.0\n\nReturns\n-------\nSeries or DataFrame\n    A new object of same type as caller containing `n` items randomly\n    sampled from the caller object.\n\nSee Also\n--------\nDataFrameGroupBy.sample: Generates random samples from each group of a\n    DataFrame object.\nSeriesGroupBy.sample: Generates random samples from each group of a\n    Series object.\nnumpy.random.choice: Generates a random sample from a given 1-D numpy\n    array.\n\nNotes\n-----\nIf `frac` > 1, `replacement` should be set to `True`.\n\nExamples\n--------\n>>> df = pd.DataFrame({'num_legs': [2, 4, 8, 0],\n...                    'num_wings': [2, 0, 0, 0],\n...                    'num_specimen_seen': [10, 2, 1, 8]},\n...                   index=['falcon', 'dog', 'spider', 'fish'])\n>>> df\n        num_legs  num_wings  num_specimen_seen\nfalcon         2          2                 10\ndog            4          0                  2\nspider         8          0                  1\nfish           0          0                  8\n\nExtract 3 random elements from the ``Series`` ``df['num_legs']``:\nNote that we use `random_state` to ensure the reproducibility of\nthe examples.\n\n>>> df['num_legs'].sample(n=3, random_state=1)\nfish      0\nspider    8\nfalcon    2\nName: num_legs, dtype: int64\n\nA random 50% sample of the ``DataFrame`` with replacement:\n\n>>> df.sample(frac=0.5, replace=True, random_state=1)\n      num_legs  num_wings  num_specimen_seen\ndog          4          0                  2\nfish         0          0                  8\n\nAn upsample sample of the ``DataFrame`` with replacement:\nNote that `replace` parameter has to be `True` for `frac` parameter > 1.\n\n>>> df.sample(frac=2, replace=True, random_state=1)\n        num_legs  num_wings  num_specimen_seen\ndog            4          0                  2\nfish           0          0                  8\nfalcon         2          2                 10\nfalcon         2          2                 10\nfish           0          0                  8\ndog            4          0                  2\nfish           0          0                  8\ndog            4          0                  2\n\nUsing a DataFrame column as weights. Rows with larger value in the\n`num_specimen_seen` column are more likely to be sampled.\n\n>>> df.sample(n=2, weights='num_specimen_seen', random_state=1)\n        num_legs  num_wings  num_specimen_seen\nfalcon         2          2                 10\nfish           0          0                  8"
  },
  {
    "symbol": "Series.searchsorted",
    "signature": "(self, value: 'NumpyValueArrayLike | ExtensionArray', side: \"Literal['left', 'right']\" = 'left', sorter: 'NumpySorter | None' = None) -> 'npt.NDArray[np.intp] | np.intp'",
    "doc": "Find indices where elements should be inserted to maintain order.\n\nFind the indices into a sorted Series `self` such that, if the\ncorresponding elements in `value` were inserted before the indices,\nthe order of `self` would be preserved.\n\n.. note::\n\n    The Series *must* be monotonically sorted, otherwise\n    wrong locations will likely be returned. Pandas does *not*\n    check this for you.\n\nParameters\n----------\nvalue : array-like or scalar\n    Values to insert into `self`.\nside : {'left', 'right'}, optional\n    If 'left', the index of the first suitable location found is given.\n    If 'right', return the last such index.  If there is no suitable\n    index, return either 0 or N (where N is the length of `self`).\nsorter : 1-D array-like, optional\n    Optional array of integer indices that sort `self` into ascending\n    order. They are typically the result of ``np.argsort``.\n\nReturns\n-------\nint or array of int\n    A scalar or array of insertion points with the\n    same shape as `value`.\n\nSee Also\n--------\nsort_values : Sort by the values along either axis.\nnumpy.searchsorted : Similar method from NumPy.\n\nNotes\n-----\nBinary search is used to find the required insertion points.\n\nExamples\n--------\n>>> ser = pd.Series([1, 2, 3])\n>>> ser\n0    1\n1    2\n2    3\ndtype: int64\n\n>>> ser.searchsorted(4)\n3\n\n>>> ser.searchsorted([0, 4])\narray([0, 3])\n\n>>> ser.searchsorted([1, 3], side='left')\narray([0, 2])\n\n>>> ser.searchsorted([1, 3], side='right')\narray([1, 3])\n\n>>> ser = pd.Series(pd.to_datetime(['3/11/2000', '3/12/2000', '3/13/2000']))\n>>> ser\n0   2000-03-11\n1   2000-03-12\n2   2000-03-13\ndtype: datetime64[ns]\n\n>>> ser.searchsorted('3/14/2000')\n3\n\n>>> ser = pd.Categorical(\n...     ['apple', 'bread', 'bread', 'cheese', 'milk'], ordered=True\n... )\n>>> ser\n['apple', 'bread', 'bread', 'cheese', 'milk']\nCategories (4, object): ['apple' < 'bread' < 'cheese' < 'milk']\n\n>>> ser.searchsorted('bread')\n1\n\n>>> ser.searchsorted(['bread'], side='right')\narray([3])\n\nIf the values are not monotonically sorted, wrong locations\nmay be returned:\n\n>>> ser = pd.Series([2, 1, 3])\n>>> ser\n0    2\n1    1\n2    3\ndtype: int64\n\n>>> ser.searchsorted(1)  # doctest: +SKIP\n0  # wrong result, correct would be 1"
  },
  {
    "symbol": "Series.sem",
    "signature": "(self, axis: 'Axis | None' = None, skipna: 'bool' = True, ddof: 'int' = 1, numeric_only: 'bool' = False, **kwargs)",
    "doc": "Return unbiased standard error of the mean over requested axis.\n\nNormalized by N-1 by default. This can be changed using the ddof argument\n\nParameters\n----------\naxis : {index (0)}\n    For `Series` this parameter is unused and defaults to 0.\n\n    .. warning::\n\n        The behavior of DataFrame.sem with ``axis=None`` is deprecated,\n        in a future version this will reduce over both axes and return a scalar\n        To retain the old behavior, pass axis=0 (or do not pass axis).\n\nskipna : bool, default True\n    Exclude NA/null values. If an entire row/column is NA, the result\n    will be NA.\nddof : int, default 1\n    Delta Degrees of Freedom. The divisor used in calculations is N - ddof,\n    where N represents the number of elements.\nnumeric_only : bool, default False\n    Include only float, int, boolean columns. Not implemented for Series.\n\nReturns\n-------\nscalar or Series (if level specified) \n\n            Examples\n            --------\n            >>> s = pd.Series([1, 2, 3])\n            >>> s.sem().round(6)\n            0.57735\n\n            With a DataFrame\n\n            >>> df = pd.DataFrame({'a': [1, 2], 'b': [2, 3]}, index=['tiger', 'zebra'])\n            >>> df\n                   a   b\n            tiger  1   2\n            zebra  2   3\n            >>> df.sem()\n            a   0.5\n            b   0.5\n            dtype: float64\n\n            Using axis=1\n\n            >>> df.sem(axis=1)\n            tiger   0.5\n            zebra   0.5\n            dtype: float64\n\n            In this case, `numeric_only` should be set to `True`\n            to avoid getting an error.\n\n            >>> df = pd.DataFrame({'a': [1, 2], 'b': ['T', 'Z']},\n            ...                   index=['tiger', 'zebra'])\n            >>> df.sem(numeric_only=True)\n            a   0.5\n            dtype: float64"
  },
  {
    "symbol": "Series.set_axis",
    "signature": "(self, labels, *, axis: 'Axis' = 0, copy: 'bool | None' = None) -> 'Series'",
    "doc": "Assign desired index to given axis.\n\nIndexes for row labels can be changed by assigning\na list-like or Index.\n\nParameters\n----------\nlabels : list-like, Index\n    The values for the new index.\n\naxis : {0 or 'index'}, default 0\n    The axis to update. The value 0 identifies the rows. For `Series`\n    this parameter is unused and defaults to 0.\n\ncopy : bool, default True\n    Whether to make a copy of the underlying data.\n\n    .. note::\n        The `copy` keyword will change behavior in pandas 3.0.\n        `Copy-on-Write\n        <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n        will be enabled by default, which means that all methods with a\n        `copy` keyword will use a lazy copy mechanism to defer the copy and\n        ignore the `copy` keyword. The `copy` keyword will be removed in a\n        future version of pandas.\n\n        You can already get the future behavior and improvements through\n        enabling copy on write ``pd.options.mode.copy_on_write = True``\n\nReturns\n-------\nSeries\n    An object of type Series.\n\nSee Also\n--------\nSeries.rename_axis : Alter the name of the index.\n\n        Examples\n        --------\n        >>> s = pd.Series([1, 2, 3])\n        >>> s\n        0    1\n        1    2\n        2    3\n        dtype: int64\n\n        >>> s.set_axis(['a', 'b', 'c'], axis=0)\n        a    1\n        b    2\n        c    3\n        dtype: int64"
  },
  {
    "symbol": "Series.set_flags",
    "signature": "(self, *, copy: 'bool_t' = False, allows_duplicate_labels: 'bool_t | None' = None) -> 'Self'",
    "doc": "Return a new object with updated flags.\n\nParameters\n----------\ncopy : bool, default False\n    Specify if a copy of the object should be made.\n\n    .. note::\n        The `copy` keyword will change behavior in pandas 3.0.\n        `Copy-on-Write\n        <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n        will be enabled by default, which means that all methods with a\n        `copy` keyword will use a lazy copy mechanism to defer the copy and\n        ignore the `copy` keyword. The `copy` keyword will be removed in a\n        future version of pandas.\n\n        You can already get the future behavior and improvements through\n        enabling copy on write ``pd.options.mode.copy_on_write = True``\nallows_duplicate_labels : bool, optional\n    Whether the returned object allows duplicate labels.\n\nReturns\n-------\nSeries or DataFrame\n    The same type as the caller.\n\nSee Also\n--------\nDataFrame.attrs : Global metadata applying to this dataset.\nDataFrame.flags : Global flags applying to this object.\n\nNotes\n-----\nThis method returns a new object that's a view on the same data\nas the input. Mutating the input or the output values will be reflected\nin the other.\n\nThis method is intended to be used in method chains.\n\n\"Flags\" differ from \"metadata\". Flags reflect properties of the\npandas object (the Series or DataFrame). Metadata refer to properties\nof the dataset, and should be stored in :attr:`DataFrame.attrs`.\n\nExamples\n--------\n>>> df = pd.DataFrame({\"A\": [1, 2]})\n>>> df.flags.allows_duplicate_labels\nTrue\n>>> df2 = df.set_flags(allows_duplicate_labels=False)\n>>> df2.flags.allows_duplicate_labels\nFalse"
  },
  {
    "symbol": "Series.shape",
    "signature": "(property)",
    "doc": "\nReturn a tuple of the shape of the underlying data.\n\nExamples\n--------\n>>> s = pd.Series([1, 2, 3])\n>>> s.shape\n(3,)\n"
  },
  {
    "symbol": "Series.shift",
    "signature": "(self, periods: 'int | Sequence[int]' = 1, freq=None, axis: 'Axis' = 0, fill_value: 'Hashable' = <no_default>, suffix: 'str | None' = None) -> 'Self | DataFrame'",
    "doc": "Shift index by desired number of periods with an optional time `freq`.\n\nWhen `freq` is not passed, shift the index without realigning the data.\nIf `freq` is passed (in this case, the index must be date or datetime,\nor it will raise a `NotImplementedError`), the index will be\nincreased using the periods and the `freq`. `freq` can be inferred\nwhen specified as \"infer\" as long as either freq or inferred_freq\nattribute is set in the index.\n\nParameters\n----------\nperiods : int or Sequence\n    Number of periods to shift. Can be positive or negative.\n    If an iterable of ints, the data will be shifted once by each int.\n    This is equivalent to shifting by one value at a time and\n    concatenating all resulting frames. The resulting columns will have\n    the shift suffixed to their column names. For multiple periods,\n    axis must not be 1.\nfreq : DateOffset, tseries.offsets, timedelta, or str, optional\n    Offset to use from the tseries module or time rule (e.g. 'EOM').\n    If `freq` is specified then the index values are shifted but the\n    data is not realigned. That is, use `freq` if you would like to\n    extend the index when shifting and preserve the original data.\n    If `freq` is specified as \"infer\" then it will be inferred from\n    the freq or inferred_freq attributes of the index. If neither of\n    those attributes exist, a ValueError is thrown.\naxis : {0 or 'index', 1 or 'columns', None}, default None\n    Shift direction. For `Series` this parameter is unused and defaults to 0.\nfill_value : object, optional\n    The scalar value to use for newly introduced missing values.\n    the default depends on the dtype of `self`.\n    For numeric data, ``np.nan`` is used.\n    For datetime, timedelta, or period data, etc. :attr:`NaT` is used.\n    For extension dtypes, ``self.dtype.na_value`` is used.\nsuffix : str, optional\n    If str and periods is an iterable, this is added after the column\n    name and before the shift value for each shifted column name.\n\nReturns\n-------\nSeries/DataFrame\n    Copy of input object, shifted.\n\nSee Also\n--------\nIndex.shift : Shift values of Index.\nDatetimeIndex.shift : Shift values of DatetimeIndex.\nPeriodIndex.shift : Shift values of PeriodIndex.\n\nExamples\n--------\n>>> df = pd.DataFrame({\"Col1\": [10, 20, 15, 30, 45],\n...                    \"Col2\": [13, 23, 18, 33, 48],\n...                    \"Col3\": [17, 27, 22, 37, 52]},\n...                   index=pd.date_range(\"2020-01-01\", \"2020-01-05\"))\n>>> df\n            Col1  Col2  Col3\n2020-01-01    10    13    17\n2020-01-02    20    23    27\n2020-01-03    15    18    22\n2020-01-04    30    33    37\n2020-01-05    45    48    52\n\n>>> df.shift(periods=3)\n            Col1  Col2  Col3\n2020-01-01   NaN   NaN   NaN\n2020-01-02   NaN   NaN   NaN\n2020-01-03   NaN   NaN   NaN\n2020-01-04  10.0  13.0  17.0\n2020-01-05  20.0  23.0  27.0\n\n>>> df.shift(periods=1, axis=\"columns\")\n            Col1  Col2  Col3\n2020-01-01   NaN    10    13\n2020-01-02   NaN    20    23\n2020-01-03   NaN    15    18\n2020-01-04   NaN    30    33\n2020-01-05   NaN    45    48\n\n>>> df.shift(periods=3, fill_value=0)\n            Col1  Col2  Col3\n2020-01-01     0     0     0\n2020-01-02     0     0     0\n2020-01-03     0     0     0\n2020-01-04    10    13    17\n2020-01-05    20    23    27\n\n>>> df.shift(periods=3, freq=\"D\")\n            Col1  Col2  Col3\n2020-01-04    10    13    17\n2020-01-05    20    23    27\n2020-01-06    15    18    22\n2020-01-07    30    33    37\n2020-01-08    45    48    52\n\n>>> df.shift(periods=3, freq=\"infer\")\n            Col1  Col2  Col3\n2020-01-04    10    13    17\n2020-01-05    20    23    27\n2020-01-06    15    18    22\n2020-01-07    30    33    37\n2020-01-08    45    48    52\n\n>>> df['Col1'].shift(periods=[0, 1, 2])\n            Col1_0  Col1_1  Col1_2\n2020-01-01      10     NaN     NaN\n2020-01-02      20    10.0     NaN\n2020-01-03      15    20.0    10.0\n2020-01-04      30    15.0    20.0\n2020-01-05      45    30.0    15.0"
  },
  {
    "symbol": "Series.size",
    "signature": "(property)",
    "doc": "\nReturn the number of elements in the underlying data.\n\nExamples\n--------\nFor Series:\n\n>>> s = pd.Series(['Ant', 'Bear', 'Cow'])\n>>> s\n0     Ant\n1    Bear\n2     Cow\ndtype: object\n>>> s.size\n3\n\nFor Index:\n\n>>> idx = pd.Index([1, 2, 3])\n>>> idx\nIndex([1, 2, 3], dtype='int64')\n>>> idx.size\n3\n"
  },
  {
    "symbol": "Series.skew",
    "signature": "(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs)",
    "doc": "Return unbiased skew over requested axis.\n\nNormalized by N-1.\n\nParameters\n----------\naxis : {index (0)}\n    Axis for the function to be applied on.\n    For `Series` this parameter is unused and defaults to 0.\n\n    For DataFrames, specifying ``axis=None`` will apply the aggregation\n    across both axes.\n\n    .. versionadded:: 2.0.0\n\nskipna : bool, default True\n    Exclude NA/null values when computing the result.\nnumeric_only : bool, default False\n    Include only float, int, boolean columns. Not implemented for Series.\n\n**kwargs\n    Additional keyword arguments to be passed to the function.\n\nReturns\n-------\nscalar or scalar\n\n            Examples\n            --------\n            >>> s = pd.Series([1, 2, 3])\n            >>> s.skew()\n            0.0\n\n            With a DataFrame\n\n            >>> df = pd.DataFrame({'a': [1, 2, 3], 'b': [2, 3, 4], 'c': [1, 3, 5]},\n            ...                   index=['tiger', 'zebra', 'cow'])\n            >>> df\n                    a   b   c\n            tiger   1   2   1\n            zebra   2   3   3\n            cow     3   4   5\n            >>> df.skew()\n            a   0.0\n            b   0.0\n            c   0.0\n            dtype: float64\n\n            Using axis=1\n\n            >>> df.skew(axis=1)\n            tiger   1.732051\n            zebra  -1.732051\n            cow     0.000000\n            dtype: float64\n\n            In this case, `numeric_only` should be set to `True` to avoid\n            getting an error.\n\n            >>> df = pd.DataFrame({'a': [1, 2, 3], 'b': ['T', 'Z', 'X']},\n            ...                   index=['tiger', 'zebra', 'cow'])\n            >>> df.skew(numeric_only=True)\n            a   0.0\n            dtype: float64"
  },
  {
    "symbol": "Series.sort_index",
    "signature": "(self, *, axis: 'Axis' = 0, level: 'IndexLabel | None' = None, ascending: 'bool | Sequence[bool]' = True, inplace: 'bool' = False, kind: 'SortKind' = 'quicksort', na_position: 'NaPosition' = 'last', sort_remaining: 'bool' = True, ignore_index: 'bool' = False, key: 'IndexKeyFunc | None' = None) -> 'Series | None'",
    "doc": "Sort Series by index labels.\n\nReturns a new Series sorted by label if `inplace` argument is\n``False``, otherwise updates the original series and returns None.\n\nParameters\n----------\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.\nlevel : int, optional\n    If not None, sort on values in specified index level(s).\nascending : bool or list-like of bools, default True\n    Sort ascending vs. descending. When the index is a MultiIndex the\n    sort direction can be controlled for each level individually.\ninplace : bool, default False\n    If True, perform operation in-place.\nkind : {'quicksort', 'mergesort', 'heapsort', 'stable'}, default 'quicksort'\n    Choice of sorting algorithm. See also :func:`numpy.sort` for more\n    information. 'mergesort' and 'stable' are the only stable algorithms. For\n    DataFrames, this option is only applied when sorting on a single\n    column or label.\nna_position : {'first', 'last'}, default 'last'\n    If 'first' puts NaNs at the beginning, 'last' puts NaNs at the end.\n    Not implemented for MultiIndex.\nsort_remaining : bool, default True\n    If True and sorting by level and index is multilevel, sort by other\n    levels too (in order) after sorting by specified level.\nignore_index : bool, default False\n    If True, the resulting axis will be labeled 0, 1, …, n - 1.\nkey : callable, optional\n    If not None, apply the key function to the index values\n    before sorting. This is similar to the `key` argument in the\n    builtin :meth:`sorted` function, with the notable difference that\n    this `key` function should be *vectorized*. It should expect an\n    ``Index`` and return an ``Index`` of the same shape.\n\nReturns\n-------\nSeries or None\n    The original Series sorted by the labels or None if ``inplace=True``.\n\nSee Also\n--------\nDataFrame.sort_index: Sort DataFrame by the index.\nDataFrame.sort_values: Sort DataFrame by the value.\nSeries.sort_values : Sort Series by the value.\n\nExamples\n--------\n>>> s = pd.Series(['a', 'b', 'c', 'd'], index=[3, 2, 1, 4])\n>>> s.sort_index()\n1    c\n2    b\n3    a\n4    d\ndtype: object\n\nSort Descending\n\n>>> s.sort_index(ascending=False)\n4    d\n3    a\n2    b\n1    c\ndtype: object\n\nBy default NaNs are put at the end, but use `na_position` to place\nthem at the beginning\n\n>>> s = pd.Series(['a', 'b', 'c', 'd'], index=[3, 2, 1, np.nan])\n>>> s.sort_index(na_position='first')\nNaN     d\n 1.0    c\n 2.0    b\n 3.0    a\ndtype: object\n\nSpecify index level to sort\n\n>>> arrays = [np.array(['qux', 'qux', 'foo', 'foo',\n...                     'baz', 'baz', 'bar', 'bar']),\n...           np.array(['two', 'one', 'two', 'one',\n...                     'two', 'one', 'two', 'one'])]\n>>> s = pd.Series([1, 2, 3, 4, 5, 6, 7, 8], index=arrays)\n>>> s.sort_index(level=1)\nbar  one    8\nbaz  one    6\nfoo  one    4\nqux  one    2\nbar  two    7\nbaz  two    5\nfoo  two    3\nqux  two    1\ndtype: int64\n\nDoes not sort by remaining levels when sorting by levels\n\n>>> s.sort_index(level=1, sort_remaining=False)\nqux  one    2\nfoo  one    4\nbaz  one    6\nbar  one    8\nqux  two    1\nfoo  two    3\nbaz  two    5\nbar  two    7\ndtype: int64\n\nApply a key function before sorting\n\n>>> s = pd.Series([1, 2, 3, 4], index=['A', 'b', 'C', 'd'])\n>>> s.sort_index(key=lambda x : x.str.lower())\nA    1\nb    2\nC    3\nd    4\ndtype: int64"
  },
  {
    "symbol": "Series.sort_values",
    "signature": "(self, *, axis: 'Axis' = 0, ascending: 'bool | Sequence[bool]' = True, inplace: 'bool' = False, kind: 'SortKind' = 'quicksort', na_position: 'NaPosition' = 'last', ignore_index: 'bool' = False, key: 'ValueKeyFunc | None' = None) -> 'Series | None'",
    "doc": "Sort by the values.\n\nSort a Series in ascending or descending order by some\ncriterion.\n\nParameters\n----------\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.\nascending : bool or list of bools, default True\n    If True, sort values in ascending order, otherwise descending.\ninplace : bool, default False\n    If True, perform operation in-place.\nkind : {'quicksort', 'mergesort', 'heapsort', 'stable'}, default 'quicksort'\n    Choice of sorting algorithm. See also :func:`numpy.sort` for more\n    information. 'mergesort' and 'stable' are the only stable  algorithms.\nna_position : {'first' or 'last'}, default 'last'\n    Argument 'first' puts NaNs at the beginning, 'last' puts NaNs at\n    the end.\nignore_index : bool, default False\n    If True, the resulting axis will be labeled 0, 1, …, n - 1.\nkey : callable, optional\n    If not None, apply the key function to the series values\n    before sorting. This is similar to the `key` argument in the\n    builtin :meth:`sorted` function, with the notable difference that\n    this `key` function should be *vectorized*. It should expect a\n    ``Series`` and return an array-like.\n\nReturns\n-------\nSeries or None\n    Series ordered by values or None if ``inplace=True``.\n\nSee Also\n--------\nSeries.sort_index : Sort by the Series indices.\nDataFrame.sort_values : Sort DataFrame by the values along either axis.\nDataFrame.sort_index : Sort DataFrame by indices.\n\nExamples\n--------\n>>> s = pd.Series([np.nan, 1, 3, 10, 5])\n>>> s\n0     NaN\n1     1.0\n2     3.0\n3     10.0\n4     5.0\ndtype: float64\n\nSort values ascending order (default behaviour)\n\n>>> s.sort_values(ascending=True)\n1     1.0\n2     3.0\n4     5.0\n3    10.0\n0     NaN\ndtype: float64\n\nSort values descending order\n\n>>> s.sort_values(ascending=False)\n3    10.0\n4     5.0\n2     3.0\n1     1.0\n0     NaN\ndtype: float64\n\nSort values putting NAs first\n\n>>> s.sort_values(na_position='first')\n0     NaN\n1     1.0\n2     3.0\n4     5.0\n3    10.0\ndtype: float64\n\nSort a series of strings\n\n>>> s = pd.Series(['z', 'b', 'd', 'a', 'c'])\n>>> s\n0    z\n1    b\n2    d\n3    a\n4    c\ndtype: object\n\n>>> s.sort_values()\n3    a\n1    b\n4    c\n2    d\n0    z\ndtype: object\n\nSort using a key function. Your `key` function will be\ngiven the ``Series`` of values and should return an array-like.\n\n>>> s = pd.Series(['a', 'B', 'c', 'D', 'e'])\n>>> s.sort_values()\n1    B\n3    D\n0    a\n2    c\n4    e\ndtype: object\n>>> s.sort_values(key=lambda x: x.str.lower())\n0    a\n1    B\n2    c\n3    D\n4    e\ndtype: object\n\nNumPy ufuncs work well here. For example, we can\nsort by the ``sin`` of the value\n\n>>> s = pd.Series([-4, -2, 0, 2, 4])\n>>> s.sort_values(key=np.sin)\n1   -2\n4    4\n2    0\n0   -4\n3    2\ndtype: int64\n\nMore complicated user-defined functions can be used,\nas long as they expect a Series and return an array-like\n\n>>> s.sort_values(key=lambda x: (np.tan(x.cumsum())))\n0   -4\n3    2\n4    4\n1   -2\n2    0\ndtype: int64"
  },
  {
    "symbol": "Series.squeeze",
    "signature": "(self, axis: 'Axis | None' = None)",
    "doc": "Squeeze 1 dimensional axis objects into scalars.\n\nSeries or DataFrames with a single element are squeezed to a scalar.\nDataFrames with a single column or a single row are squeezed to a\nSeries. Otherwise the object is unchanged.\n\nThis method is most useful when you don't know if your\nobject is a Series or DataFrame, but you do know it has just a single\ncolumn. In that case you can safely call `squeeze` to ensure you have a\nSeries.\n\nParameters\n----------\naxis : {0 or 'index', 1 or 'columns', None}, default None\n    A specific axis to squeeze. By default, all length-1 axes are\n    squeezed. For `Series` this parameter is unused and defaults to `None`.\n\nReturns\n-------\nDataFrame, Series, or scalar\n    The projection after squeezing `axis` or all the axes.\n\nSee Also\n--------\nSeries.iloc : Integer-location based indexing for selecting scalars.\nDataFrame.iloc : Integer-location based indexing for selecting Series.\nSeries.to_frame : Inverse of DataFrame.squeeze for a\n    single-column DataFrame.\n\nExamples\n--------\n>>> primes = pd.Series([2, 3, 5, 7])\n\nSlicing might produce a Series with a single value:\n\n>>> even_primes = primes[primes % 2 == 0]\n>>> even_primes\n0    2\ndtype: int64\n\n>>> even_primes.squeeze()\n2\n\nSqueezing objects with more than one value in every axis does nothing:\n\n>>> odd_primes = primes[primes % 2 == 1]\n>>> odd_primes\n1    3\n2    5\n3    7\ndtype: int64\n\n>>> odd_primes.squeeze()\n1    3\n2    5\n3    7\ndtype: int64\n\nSqueezing is even more effective when used with DataFrames.\n\n>>> df = pd.DataFrame([[1, 2], [3, 4]], columns=['a', 'b'])\n>>> df\n   a  b\n0  1  2\n1  3  4\n\nSlicing a single column will produce a DataFrame with the columns\nhaving only one value:\n\n>>> df_a = df[['a']]\n>>> df_a\n   a\n0  1\n1  3\n\nSo the columns can be squeezed down, resulting in a Series:\n\n>>> df_a.squeeze('columns')\n0    1\n1    3\nName: a, dtype: int64\n\nSlicing a single row from a single column will produce a single\nscalar DataFrame:\n\n>>> df_0a = df.loc[df.index < 1, ['a']]\n>>> df_0a\n   a\n0  1\n\nSqueezing the rows produces a single scalar Series:\n\n>>> df_0a.squeeze('rows')\na    1\nName: 0, dtype: int64\n\nSqueezing all axes will project directly into a scalar:\n\n>>> df_0a.squeeze()\n1"
  },
  {
    "symbol": "Series.std",
    "signature": "(self, axis: 'Axis | None' = None, skipna: 'bool' = True, ddof: 'int' = 1, numeric_only: 'bool' = False, **kwargs)",
    "doc": "Return sample standard deviation over requested axis.\n\nNormalized by N-1 by default. This can be changed using the ddof argument.\n\nParameters\n----------\naxis : {index (0)}\n    For `Series` this parameter is unused and defaults to 0.\n\n    .. warning::\n\n        The behavior of DataFrame.std with ``axis=None`` is deprecated,\n        in a future version this will reduce over both axes and return a scalar\n        To retain the old behavior, pass axis=0 (or do not pass axis).\n\nskipna : bool, default True\n    Exclude NA/null values. If an entire row/column is NA, the result\n    will be NA.\nddof : int, default 1\n    Delta Degrees of Freedom. The divisor used in calculations is N - ddof,\n    where N represents the number of elements.\nnumeric_only : bool, default False\n    Include only float, int, boolean columns. Not implemented for Series.\n\nReturns\n-------\nscalar or Series (if level specified) \n\nNotes\n-----\nTo have the same behaviour as `numpy.std`, use `ddof=0` (instead of the\ndefault `ddof=1`)\n\nExamples\n--------\n>>> df = pd.DataFrame({'person_id': [0, 1, 2, 3],\n...                    'age': [21, 25, 62, 43],\n...                    'height': [1.61, 1.87, 1.49, 2.01]}\n...                   ).set_index('person_id')\n>>> df\n           age  height\nperson_id\n0           21    1.61\n1           25    1.87\n2           62    1.49\n3           43    2.01\n\nThe standard deviation of the columns can be found as follows:\n\n>>> df.std()\nage       18.786076\nheight     0.237417\ndtype: float64\n\nAlternatively, `ddof=0` can be set to normalize by N instead of N-1:\n\n>>> df.std(ddof=0)\nage       16.269219\nheight     0.205609\ndtype: float64"
  },
  {
    "symbol": "Series.str",
    "signature": "(accessor)",
    "doc": "Vectorized string functions for Series and Index.\n\nNAs stay NA unless handled otherwise by a particular method.\nPatterned after Python's string methods, with some inspiration from\nR's stringr package.\n\nExamples\n--------\n>>> s = pd.Series([\"A_Str_Series\"])\n>>> s\n0    A_Str_Series\ndtype: object\n\n>>> s.str.split(\"_\")\n0    [A, Str, Series]\ndtype: object\n\n>>> s.str.replace(\"_\", \"\")\n0    AStrSeries\ndtype: object"
  },
  {
    "symbol": "Series.str.capitalize",
    "signature": "()",
    "doc": "Convert strings in the Series/Index to be capitalized.\n\nEquivalent to :meth:`str.capitalize`.\n\nReturns\n-------\nSeries or Index of object\n\nSee Also\n--------\nSeries.str.lower : Converts all characters to lowercase.\nSeries.str.upper : Converts all characters to uppercase.\nSeries.str.title : Converts first character of each word to uppercase and\n    remaining to lowercase.\nSeries.str.capitalize : Converts first character to uppercase and\n    remaining to lowercase.\nSeries.str.swapcase : Converts uppercase to lowercase and lowercase to\n    uppercase.\nSeries.str.casefold: Removes all case distinctions in the string.\n\nExamples\n--------\n>>> s = pd.Series(['lower', 'CAPITALS', 'this is a sentence', 'SwApCaSe'])\n>>> s\n0                 lower\n1              CAPITALS\n2    this is a sentence\n3              SwApCaSe\ndtype: object\n\n>>> s.str.lower()\n0                 lower\n1              capitals\n2    this is a sentence\n3              swapcase\ndtype: object\n\n>>> s.str.upper()\n0                 LOWER\n1              CAPITALS\n2    THIS IS A SENTENCE\n3              SWAPCASE\ndtype: object\n\n>>> s.str.title()\n0                 Lower\n1              Capitals\n2    This Is A Sentence\n3              Swapcase\ndtype: object\n\n>>> s.str.capitalize()\n0                 Lower\n1              Capitals\n2    This is a sentence\n3              Swapcase\ndtype: object\n\n>>> s.str.swapcase()\n0                 LOWER\n1              capitals\n2    THIS IS A SENTENCE\n3              sWaPcAsE\ndtype: object"
  },
  {
    "symbol": "Series.str.casefold",
    "signature": "()",
    "doc": "Convert strings in the Series/Index to be casefolded.\n\nEquivalent to :meth:`str.casefold`.\n\nReturns\n-------\nSeries or Index of object\n\nSee Also\n--------\nSeries.str.lower : Converts all characters to lowercase.\nSeries.str.upper : Converts all characters to uppercase.\nSeries.str.title : Converts first character of each word to uppercase and\n    remaining to lowercase.\nSeries.str.capitalize : Converts first character to uppercase and\n    remaining to lowercase.\nSeries.str.swapcase : Converts uppercase to lowercase and lowercase to\n    uppercase.\nSeries.str.casefold: Removes all case distinctions in the string.\n\nExamples\n--------\n>>> s = pd.Series(['lower', 'CAPITALS', 'this is a sentence', 'SwApCaSe'])\n>>> s\n0                 lower\n1              CAPITALS\n2    this is a sentence\n3              SwApCaSe\ndtype: object\n\n>>> s.str.lower()\n0                 lower\n1              capitals\n2    this is a sentence\n3              swapcase\ndtype: object\n\n>>> s.str.upper()\n0                 LOWER\n1              CAPITALS\n2    THIS IS A SENTENCE\n3              SWAPCASE\ndtype: object\n\n>>> s.str.title()\n0                 Lower\n1              Capitals\n2    This Is A Sentence\n3              Swapcase\ndtype: object\n\n>>> s.str.capitalize()\n0                 Lower\n1              Capitals\n2    This is a sentence\n3              Swapcase\ndtype: object\n\n>>> s.str.swapcase()\n0                 LOWER\n1              capitals\n2    THIS IS A SENTENCE\n3              sWaPcAsE\ndtype: object"
  },
  {
    "symbol": "Series.str.cat",
    "signature": "(others=None, sep: 'str | None' = None, na_rep=None, join: 'AlignJoin' = 'left') -> 'str | Series | Index'",
    "doc": "Concatenate strings in the Series/Index with given separator.\n\nIf `others` is specified, this function concatenates the Series/Index\nand elements of `others` element-wise.\nIf `others` is not passed, then all values in the Series/Index are\nconcatenated into a single string with a given `sep`.\n\nParameters\n----------\nothers : Series, Index, DataFrame, np.ndarray or list-like\n    Series, Index, DataFrame, np.ndarray (one- or two-dimensional) and\n    other list-likes of strings must have the same length as the\n    calling Series/Index, with the exception of indexed objects (i.e.\n    Series/Index/DataFrame) if `join` is not None.\n\n    If others is a list-like that contains a combination of Series,\n    Index or np.ndarray (1-dim), then all elements will be unpacked and\n    must satisfy the above criteria individually.\n\n    If others is None, the method returns the concatenation of all\n    strings in the calling Series/Index.\nsep : str, default ''\n    The separator between the different elements/columns. By default\n    the empty string `''` is used.\nna_rep : str or None, default None\n    Representation that is inserted for all missing values:\n\n    - If `na_rep` is None, and `others` is None, missing values in the\n      Series/Index are omitted from the result.\n    - If `na_rep` is None, and `others` is not None, a row containing a\n      missing value in any of the columns (before concatenation) will\n      have a missing value in the result.\njoin : {'left', 'right', 'outer', 'inner'}, default 'left'\n    Determines the join-style between the calling Series/Index and any\n    Series/Index/DataFrame in `others` (objects without an index need\n    to match the length of the calling Series/Index). To disable\n    alignment, use `.values` on any Series/Index/DataFrame in `others`.\n\nReturns\n-------\nstr, Series or Index\n    If `others` is None, `str` is returned, otherwise a `Series/Index`\n    (same type as caller) of objects is returned.\n\nSee Also\n--------\nsplit : Split each string in the Series/Index.\njoin : Join lists contained as elements in the Series/Index.\n\nExamples\n--------\nWhen not passing `others`, all values are concatenated into a single\nstring:\n\n>>> s = pd.Series(['a', 'b', np.nan, 'd'])\n>>> s.str.cat(sep=' ')\n'a b d'\n\nBy default, NA values in the Series are ignored. Using `na_rep`, they\ncan be given a representation:\n\n>>> s.str.cat(sep=' ', na_rep='?')\n'a b ? d'\n\nIf `others` is specified, corresponding values are concatenated with\nthe separator. Result will be a Series of strings.\n\n>>> s.str.cat(['A', 'B', 'C', 'D'], sep=',')\n0    a,A\n1    b,B\n2    NaN\n3    d,D\ndtype: object\n\nMissing values will remain missing in the result, but can again be\nrepresented using `na_rep`\n\n>>> s.str.cat(['A', 'B', 'C', 'D'], sep=',', na_rep='-')\n0    a,A\n1    b,B\n2    -,C\n3    d,D\ndtype: object\n\nIf `sep` is not specified, the values are concatenated without\nseparation.\n\n>>> s.str.cat(['A', 'B', 'C', 'D'], na_rep='-')\n0    aA\n1    bB\n2    -C\n3    dD\ndtype: object\n\nSeries with different indexes can be aligned before concatenation. The\n`join`-keyword works as in other methods.\n\n>>> t = pd.Series(['d', 'a', 'e', 'c'], index=[3, 0, 4, 2])\n>>> s.str.cat(t, join='left', na_rep='-')\n0    aa\n1    b-\n2    -c\n3    dd\ndtype: object\n>>>\n>>> s.str.cat(t, join='outer', na_rep='-')\n0    aa\n1    b-\n2    -c\n3    dd\n4    -e\ndtype: object\n>>>\n>>> s.str.cat(t, join='inner', na_rep='-')\n0    aa\n2    -c\n3    dd\ndtype: object\n>>>\n>>> s.str.cat(t, join='right', na_rep='-')\n3    dd\n0    aa\n4    -e\n2    -c\ndtype: object\n\nFor more examples, see :ref:`here <text.concatenate>`."
  },
  {
    "symbol": "Series.str.center",
    "signature": "(width: 'int', fillchar: 'str' = ' ')",
    "doc": "Pad left and right side of strings in the Series/Index.\n\nEquivalent to :meth:`str.center`.\n\nParameters\n----------\nwidth : int\n    Minimum width of resulting string; additional characters will be filled\n    with ``fillchar``.\nfillchar : str\n    Additional character for filling, default is whitespace.\n\nReturns\n-------\nSeries/Index of objects.\n\nExamples\n--------\nFor Series.str.center:\n\n>>> ser = pd.Series(['dog', 'bird', 'mouse'])\n>>> ser.str.center(8, fillchar='.')\n0   ..dog...\n1   ..bird..\n2   .mouse..\ndtype: object\n\nFor Series.str.ljust:\n\n>>> ser = pd.Series(['dog', 'bird', 'mouse'])\n>>> ser.str.ljust(8, fillchar='.')\n0   dog.....\n1   bird....\n2   mouse...\ndtype: object\n\nFor Series.str.rjust:\n\n>>> ser = pd.Series(['dog', 'bird', 'mouse'])\n>>> ser.str.rjust(8, fillchar='.')\n0   .....dog\n1   ....bird\n2   ...mouse\ndtype: object"
  },
  {
    "symbol": "Series.str.contains",
    "signature": "(pat, case: 'bool' = True, flags: 'int' = 0, na=<no_default>, regex: 'bool' = True)",
    "doc": "Test if pattern or regex is contained within a string of a Series or Index.\n\nReturn boolean Series or Index based on whether a given pattern or regex is\ncontained within a string of a Series or Index.\n\nParameters\n----------\npat : str\n    Character sequence or regular expression.\ncase : bool, default True\n    If True, case sensitive.\nflags : int, default 0 (no flags)\n    Flags to pass through to the re module, e.g. re.IGNORECASE.\nna : scalar, optional\n    Fill value for missing values. The default depends on dtype of the\n    array. For object-dtype, ``numpy.nan`` is used. For the nullable\n    ``StringDtype``, ``pandas.NA`` is used. For the ``\"str\"`` dtype,\n    ``False`` is used.\nregex : bool, default True\n    If True, assumes the pat is a regular expression.\n\n    If False, treats the pat as a literal string.\n\nReturns\n-------\nSeries or Index of boolean values\n    A Series or Index of boolean values indicating whether the\n    given pattern is contained within the string of each element\n    of the Series or Index.\n\nSee Also\n--------\nmatch : Analogous, but stricter, relying on re.match instead of re.search.\nSeries.str.startswith : Test if the start of each string element matches a\n    pattern.\nSeries.str.endswith : Same as startswith, but tests the end of string.\n\nExamples\n--------\nReturning a Series of booleans using only a literal pattern.\n\n>>> s1 = pd.Series(['Mouse', 'dog', 'house and parrot', '23', np.nan])\n>>> s1.str.contains('og', regex=False)\n0    False\n1     True\n2    False\n3    False\n4      NaN\ndtype: object\n\nReturning an Index of booleans using only a literal pattern.\n\n>>> ind = pd.Index(['Mouse', 'dog', 'house and parrot', '23.0', np.nan])\n>>> ind.str.contains('23', regex=False)\nIndex([False, False, False, True, nan], dtype='object')\n\nSpecifying case sensitivity using `case`.\n\n>>> s1.str.contains('oG', case=True, regex=True)\n0    False\n1    False\n2    False\n3    False\n4      NaN\ndtype: object\n\nSpecifying `na` to be `False` instead of `NaN` replaces NaN values\nwith `False`. If Series or Index does not contain NaN values\nthe resultant dtype will be `bool`, otherwise, an `object` dtype.\n\n>>> s1.str.contains('og', na=False, regex=True)\n0    False\n1     True\n2    False\n3    False\n4    False\ndtype: bool\n\nReturning 'house' or 'dog' when either expression occurs in a string.\n\n>>> s1.str.contains('house|dog', regex=True)\n0    False\n1     True\n2     True\n3    False\n4      NaN\ndtype: object\n\nIgnoring case sensitivity using `flags` with regex.\n\n>>> import re\n>>> s1.str.contains('PARROT', flags=re.IGNORECASE, regex=True)\n0    False\n1    False\n2     True\n3    False\n4      NaN\ndtype: object\n\nReturning any digit using regular expression.\n\n>>> s1.str.contains('\\\\d', regex=True)\n0    False\n1    False\n2    False\n3     True\n4      NaN\ndtype: object\n\nEnsure `pat` is a not a literal pattern when `regex` is set to True.\nNote in the following example one might expect only `s2[1]` and `s2[3]` to\nreturn `True`. However, '.0' as a regex matches any character\nfollowed by a 0.\n\n>>> s2 = pd.Series(['40', '40.0', '41', '41.0', '35'])\n>>> s2.str.contains('.0', regex=True)\n0     True\n1     True\n2    False\n3     True\n4    False\ndtype: bool"
  },
  {
    "symbol": "Series.str.count",
    "signature": "(pat, flags: 'int' = 0)",
    "doc": "Count occurrences of pattern in each string of the Series/Index.\n\nThis function is used to count the number of times a particular regex\npattern is repeated in each of the string elements of the\n:class:`~pandas.Series`.\n\nParameters\n----------\npat : str\n    Valid regular expression.\nflags : int, default 0, meaning no flags\n    Flags for the `re` module. For a complete list, `see here\n    <https://docs.python.org/3/howto/regex.html#compilation-flags>`_.\n**kwargs\n    For compatibility with other string methods. Not used.\n\nReturns\n-------\nSeries or Index\n    Same type as the calling object containing the integer counts.\n\nSee Also\n--------\nre : Standard library module for regular expressions.\nstr.count : Standard library version, without regular expression support.\n\nNotes\n-----\nSome characters need to be escaped when passing in `pat`.\neg. ``'$'`` has a special meaning in regex and must be escaped when\nfinding this literal character.\n\nExamples\n--------\n>>> s = pd.Series(['A', 'B', 'Aaba', 'Baca', np.nan, 'CABA', 'cat'])\n>>> s.str.count('a')\n0    0.0\n1    0.0\n2    2.0\n3    2.0\n4    NaN\n5    0.0\n6    1.0\ndtype: float64\n\nEscape ``'$'`` to find the literal dollar sign.\n\n>>> s = pd.Series(['$', 'B', 'Aab$', '$$ca', 'C$B$', 'cat'])\n>>> s.str.count('\\\\$')\n0    1\n1    0\n2    1\n3    2\n4    2\n5    0\ndtype: int64\n\nThis is also available on Index\n\n>>> pd.Index(['A', 'A', 'Aaba', 'cat']).str.count('a')\nIndex([0, 0, 2, 1], dtype='int64')"
  },
  {
    "symbol": "Series.str.decode",
    "signature": "(encoding, errors: 'str' = 'strict', dtype: 'str | DtypeObj | None' = None)",
    "doc": "Decode character string in the Series/Index using indicated encoding.\n\nEquivalent to :meth:`str.decode` in python2 and :meth:`bytes.decode` in\npython3.\n\nParameters\n----------\nencoding : str\nerrors : str, optional\n    Specifies the error handling scheme.\n    Possible values are those supported by :meth:`bytes.decode`.\ndtype : str or dtype, optional\n    The dtype of the result. When not ``None``, must be either a string or\n    object dtype. When ``None``, the dtype of the result is determined by\n    ``pd.options.future.infer_string``.\n\n    .. versionadded:: 2.3.0\n\nReturns\n-------\nSeries or Index\n\nExamples\n--------\nFor Series:\n\n>>> ser = pd.Series([b'cow', b'123', b'()'])\n>>> ser.str.decode('ascii')\n0   cow\n1   123\n2   ()\ndtype: object"
  },
  {
    "symbol": "Series.str.encode",
    "signature": "(encoding, errors: 'str' = 'strict')",
    "doc": "Encode character string in the Series/Index using indicated encoding.\n\nEquivalent to :meth:`str.encode`.\n\nParameters\n----------\nencoding : str\nerrors : str, optional\n\nReturns\n-------\nSeries/Index of objects\n\nExamples\n--------\n>>> ser = pd.Series(['cow', '123', '()'])\n>>> ser.str.encode(encoding='ascii')\n0     b'cow'\n1     b'123'\n2      b'()'\ndtype: object"
  },
  {
    "symbol": "Series.str.endswith",
    "signature": "(pat: 'str | tuple[str, ...]', na: 'Scalar | lib.NoDefault' = <no_default>) -> 'Series | Index'",
    "doc": "Test if the end of each string element matches a pattern.\n\nEquivalent to :meth:`str.endswith`.\n\nParameters\n----------\npat : str or tuple[str, ...]\n    Character sequence or tuple of strings. Regular expressions are not\n    accepted.\nna : scalar, optional\n    Object shown if element tested is not a string. The default depends\n    on dtype of the array. For object-dtype, ``numpy.nan`` is used.\n    For the nullable ``StringDtype``, ``pandas.NA`` is used.\n    For the ``\"str\"`` dtype, ``False`` is used.\n\nReturns\n-------\nSeries or Index of bool\n    A Series of booleans indicating whether the given pattern matches\n    the end of each string element.\n\nSee Also\n--------\nstr.endswith : Python standard library string method.\nSeries.str.startswith : Same as endswith, but tests the start of string.\nSeries.str.contains : Tests if string element contains a pattern.\n\nExamples\n--------\n>>> s = pd.Series(['bat', 'bear', 'caT', np.nan])\n>>> s\n0     bat\n1    bear\n2     caT\n3     NaN\ndtype: object\n\n>>> s.str.endswith('t')\n0     True\n1    False\n2    False\n3      NaN\ndtype: object\n\n>>> s.str.endswith(('t', 'T'))\n0     True\n1    False\n2     True\n3      NaN\ndtype: object\n\nSpecifying `na` to be `False` instead of `NaN`.\n\n>>> s.str.endswith('t', na=False)\n0     True\n1    False\n2    False\n3    False\ndtype: bool"
  },
  {
    "symbol": "Series.str.extract",
    "signature": "(pat: 'str', flags: 'int' = 0, expand: 'bool' = True) -> 'DataFrame | Series | Index'",
    "doc": "Extract capture groups in the regex `pat` as columns in a DataFrame.\n\nFor each subject string in the Series, extract groups from the\nfirst match of regular expression `pat`.\n\nParameters\n----------\npat : str\n    Regular expression pattern with capturing groups.\nflags : int, default 0 (no flags)\n    Flags from the ``re`` module, e.g. ``re.IGNORECASE``, that\n    modify regular expression matching for things like case,\n    spaces, etc. For more details, see :mod:`re`.\nexpand : bool, default True\n    If True, return DataFrame with one column per capture group.\n    If False, return a Series/Index if there is one capture group\n    or DataFrame if there are multiple capture groups.\n\nReturns\n-------\nDataFrame or Series or Index\n    A DataFrame with one row for each subject string, and one\n    column for each group. Any capture group names in regular\n    expression pat will be used for column names; otherwise\n    capture group numbers will be used. The dtype of each result\n    column is always object, even when no match is found. If\n    ``expand=False`` and pat has only one capture group, then\n    return a Series (if subject is a Series) or Index (if subject\n    is an Index).\n\nSee Also\n--------\nextractall : Returns all matches (not just the first match).\n\nExamples\n--------\nA pattern with two groups will return a DataFrame with two columns.\nNon-matches will be NaN.\n\n>>> s = pd.Series(['a1', 'b2', 'c3'])\n>>> s.str.extract(r'([ab])(\\d)')\n    0    1\n0    a    1\n1    b    2\n2  NaN  NaN\n\nA pattern may contain optional groups.\n\n>>> s.str.extract(r'([ab])?(\\d)')\n    0  1\n0    a  1\n1    b  2\n2  NaN  3\n\nNamed groups will become column names in the result.\n\n>>> s.str.extract(r'(?P<letter>[ab])(?P<digit>\\d)')\nletter digit\n0      a     1\n1      b     2\n2    NaN   NaN\n\nA pattern with one group will return a DataFrame with one column\nif expand=True.\n\n>>> s.str.extract(r'[ab](\\d)', expand=True)\n    0\n0    1\n1    2\n2  NaN\n\nA pattern with one group will return a Series if expand=False.\n\n>>> s.str.extract(r'[ab](\\d)', expand=False)\n0      1\n1      2\n2    NaN\ndtype: object"
  },
  {
    "symbol": "Series.str.extractall",
    "signature": "(pat, flags: 'int' = 0) -> 'DataFrame'",
    "doc": "Extract capture groups in the regex `pat` as columns in DataFrame.\n\nFor each subject string in the Series, extract groups from all\nmatches of regular expression pat. When each subject string in the\nSeries has exactly one match, extractall(pat).xs(0, level='match')\nis the same as extract(pat).\n\nParameters\n----------\npat : str\n    Regular expression pattern with capturing groups.\nflags : int, default 0 (no flags)\n    A ``re`` module flag, for example ``re.IGNORECASE``. These allow\n    to modify regular expression matching for things like case, spaces,\n    etc. Multiple flags can be combined with the bitwise OR operator,\n    for example ``re.IGNORECASE | re.MULTILINE``.\n\nReturns\n-------\nDataFrame\n    A ``DataFrame`` with one row for each match, and one column for each\n    group. Its rows have a ``MultiIndex`` with first levels that come from\n    the subject ``Series``. The last level is named 'match' and indexes the\n    matches in each item of the ``Series``. Any capture group names in\n    regular expression pat will be used for column names; otherwise capture\n    group numbers will be used.\n\nSee Also\n--------\nextract : Returns first match only (not all matches).\n\nExamples\n--------\nA pattern with one group will return a DataFrame with one column.\nIndices with no matches will not appear in the result.\n\n>>> s = pd.Series([\"a1a2\", \"b1\", \"c1\"], index=[\"A\", \"B\", \"C\"])\n>>> s.str.extractall(r\"[ab](\\d)\")\n        0\nmatch\nA 0      1\n  1      2\nB 0      1\n\nCapture group names are used for column names of the result.\n\n>>> s.str.extractall(r\"[ab](?P<digit>\\d)\")\n        digit\nmatch\nA 0         1\n  1         2\nB 0         1\n\nA pattern with two groups will return a DataFrame with two columns.\n\n>>> s.str.extractall(r\"(?P<letter>[ab])(?P<digit>\\d)\")\n        letter digit\nmatch\nA 0          a     1\n  1          a     2\nB 0          b     1\n\nOptional groups that do not match are NaN in the result.\n\n>>> s.str.extractall(r\"(?P<letter>[ab])?(?P<digit>\\d)\")\n        letter digit\nmatch\nA 0          a     1\n  1          a     2\nB 0          b     1\nC 0        NaN     1"
  },
  {
    "symbol": "Series.str.find",
    "signature": "(sub, start: 'int' = 0, end=None)",
    "doc": "Return lowest indexes in each strings in the Series/Index.\n\nEach of returned indexes corresponds to the position where the\nsubstring is fully contained between [start:end]. Return -1 on\nfailure. Equivalent to standard :meth:`str.find`.\n\nParameters\n----------\nsub : str\n    Substring being searched.\nstart : int\n    Left edge index.\nend : int\n    Right edge index.\n\nReturns\n-------\nSeries or Index of int.\n\nSee Also\n--------\nrfind : Return highest indexes in each strings.\n\nExamples\n--------\nFor Series.str.find:\n\n>>> ser = pd.Series([\"cow_\", \"duck_\", \"do_ve\"])\n>>> ser.str.find(\"_\")\n0   3\n1   4\n2   2\ndtype: int64\n\nFor Series.str.rfind:\n\n>>> ser = pd.Series([\"_cow_\", \"duck_\", \"do_v_e\"])\n>>> ser.str.rfind(\"_\")\n0   4\n1   4\n2   4\ndtype: int64"
  },
  {
    "symbol": "Series.str.findall",
    "signature": "(pat, flags: 'int' = 0)",
    "doc": "Find all occurrences of pattern or regular expression in the Series/Index.\n\nEquivalent to applying :func:`re.findall` to all the elements in the\nSeries/Index.\n\nParameters\n----------\npat : str\n    Pattern or regular expression.\nflags : int, default 0\n    Flags from ``re`` module, e.g. `re.IGNORECASE` (default is 0, which\n    means no flags).\n\nReturns\n-------\nSeries/Index of lists of strings\n    All non-overlapping matches of pattern or regular expression in each\n    string of this Series/Index.\n\nSee Also\n--------\ncount : Count occurrences of pattern or regular expression in each string\n    of the Series/Index.\nextractall : For each string in the Series, extract groups from all matches\n    of regular expression and return a DataFrame with one row for each\n    match and one column for each group.\nre.findall : The equivalent ``re`` function to all non-overlapping matches\n    of pattern or regular expression in string, as a list of strings.\n\nExamples\n--------\n>>> s = pd.Series(['Lion', 'Monkey', 'Rabbit'])\n\nThe search for the pattern 'Monkey' returns one match:\n\n>>> s.str.findall('Monkey')\n0          []\n1    [Monkey]\n2          []\ndtype: object\n\nOn the other hand, the search for the pattern 'MONKEY' doesn't return any\nmatch:\n\n>>> s.str.findall('MONKEY')\n0    []\n1    []\n2    []\ndtype: object\n\nFlags can be added to the pattern or regular expression. For instance,\nto find the pattern 'MONKEY' ignoring the case:\n\n>>> import re\n>>> s.str.findall('MONKEY', flags=re.IGNORECASE)\n0          []\n1    [Monkey]\n2          []\ndtype: object\n\nWhen the pattern matches more than one string in the Series, all matches\nare returned:\n\n>>> s.str.findall('on')\n0    [on]\n1    [on]\n2      []\ndtype: object\n\nRegular expressions are supported too. For instance, the search for all the\nstrings ending with the word 'on' is shown next:\n\n>>> s.str.findall('on$')\n0    [on]\n1      []\n2      []\ndtype: object\n\nIf the pattern is found more than once in the same string, then a list of\nmultiple strings is returned:\n\n>>> s.str.findall('b')\n0        []\n1        []\n2    [b, b]\ndtype: object"
  },
  {
    "symbol": "Series.str.fullmatch",
    "signature": "(pat, case: 'bool' = True, flags: 'int' = 0, na=<no_default>)",
    "doc": "Determine if each string entirely matches a regular expression.\n\nParameters\n----------\npat : str\n    Character sequence or regular expression.\ncase : bool, default True\n    If True, case sensitive.\nflags : int, default 0 (no flags)\n    Regex module flags, e.g. re.IGNORECASE.\nna : scalar, optional\n    Fill value for missing values. The default depends on dtype of the\n    array. For object-dtype, ``numpy.nan`` is used. For the nullable\n    ``StringDtype``, ``pandas.NA`` is used. For the ``\"str\"`` dtype,\n    ``False`` is used.\n\nReturns\n-------\nSeries/Index/array of boolean values\n\nSee Also\n--------\nmatch : Similar, but also returns `True` when only a *prefix* of the string\n    matches the regular expression.\nextract : Extract matched groups.\n\nExamples\n--------\n>>> ser = pd.Series([\"cat\", \"duck\", \"dove\"])\n>>> ser.str.fullmatch(r'd.+')\n0   False\n1    True\n2    True\ndtype: bool"
  },
  {
    "symbol": "Series.str.get",
    "signature": "(i)",
    "doc": "Extract element from each component at specified position or with specified key.\n\nExtract element from lists, tuples, dict, or strings in each element in the\nSeries/Index.\n\nParameters\n----------\ni : int or hashable dict label\n    Position or key of element to extract.\n\nReturns\n-------\nSeries or Index\n\nExamples\n--------\n>>> s = pd.Series([\"String\",\n...               (1, 2, 3),\n...               [\"a\", \"b\", \"c\"],\n...               123,\n...               -456,\n...               {1: \"Hello\", \"2\": \"World\"}])\n>>> s\n0                        String\n1                     (1, 2, 3)\n2                     [a, b, c]\n3                           123\n4                          -456\n5    {1: 'Hello', '2': 'World'}\ndtype: object\n\n>>> s.str.get(1)\n0        t\n1        2\n2        b\n3      NaN\n4      NaN\n5    Hello\ndtype: object\n\n>>> s.str.get(-1)\n0      g\n1      3\n2      c\n3    NaN\n4    NaN\n5    None\ndtype: object\n\nReturn element with given key\n\n>>> s = pd.Series([{\"name\": \"Hello\", \"value\": \"World\"},\n...               {\"name\": \"Goodbye\", \"value\": \"Planet\"}])\n>>> s.str.get('name')\n0      Hello\n1    Goodbye\ndtype: object"
  },
  {
    "symbol": "Series.str.get_dummies",
    "signature": "(sep: 'str' = '|')",
    "doc": "Return DataFrame of dummy/indicator variables for Series.\n\nEach string in Series is split by sep and returned as a DataFrame\nof dummy/indicator variables.\n\nParameters\n----------\nsep : str, default \"|\"\n    String to split on.\n\nReturns\n-------\nDataFrame\n    Dummy variables corresponding to values of the Series.\n\nSee Also\n--------\nget_dummies : Convert categorical variable into dummy/indicator\n    variables.\n\nExamples\n--------\n>>> pd.Series(['a|b', 'a', 'a|c']).str.get_dummies()\n   a  b  c\n0  1  1  0\n1  1  0  0\n2  1  0  1\n\n>>> pd.Series(['a|b', np.nan, 'a|c']).str.get_dummies()\n   a  b  c\n0  1  1  0\n1  0  0  0\n2  1  0  1"
  },
  {
    "symbol": "Series.str.index",
    "signature": "(sub, start: 'int' = 0, end=None)",
    "doc": "Return lowest indexes in each string in Series/Index.\n\nEach of the returned indexes corresponds to the position where the\nsubstring is fully contained between [start:end]. This is the same\nas ``str.find`` except instead of returning -1, it raises a\nValueError when the substring is not found. Equivalent to standard\n``str.index``.\n\nParameters\n----------\nsub : str\n    Substring being searched.\nstart : int\n    Left edge index.\nend : int\n    Right edge index.\n\nReturns\n-------\nSeries or Index of object\n\nSee Also\n--------\nrindex : Return highest indexes in each strings.\n\nExamples\n--------\nFor Series.str.index:\n\n>>> ser = pd.Series([\"horse\", \"eagle\", \"donkey\"])\n>>> ser.str.index(\"e\")\n0   4\n1   0\n2   4\ndtype: int64\n\nFor Series.str.rindex:\n\n>>> ser = pd.Series([\"Deer\", \"eagle\", \"Sheep\"])\n>>> ser.str.rindex(\"e\")\n0   2\n1   4\n2   3\ndtype: int64"
  },
  {
    "symbol": "Series.str.isalnum",
    "signature": "()",
    "doc": "Check whether all characters in each string are alphanumeric.\n\nThis is equivalent to running the Python string method\n:meth:`str.isalnum` for each element of the Series/Index. If a string\nhas zero characters, ``False`` is returned for that check.\n\nReturns\n-------\nSeries or Index of bool\n    Series or Index of boolean values with the same length as the original\n    Series/Index.\n\nSee Also\n--------\nSeries.str.isalpha : Check whether all characters are alphabetic.\nSeries.str.isnumeric : Check whether all characters are numeric.\nSeries.str.isalnum : Check whether all characters are alphanumeric.\nSeries.str.isdigit : Check whether all characters are digits.\nSeries.str.isdecimal : Check whether all characters are decimal.\nSeries.str.isspace : Check whether all characters are whitespace.\nSeries.str.islower : Check whether all characters are lowercase.\nSeries.str.isupper : Check whether all characters are uppercase.\nSeries.str.istitle : Check whether all characters are titlecase.\n\nExamples\n--------\n**Checks for Alphabetic and Numeric Characters**\n\n>>> s1 = pd.Series(['one', 'one1', '1', ''])\n\n>>> s1.str.isalpha()\n0     True\n1    False\n2    False\n3    False\ndtype: bool\n\n>>> s1.str.isnumeric()\n0    False\n1    False\n2     True\n3    False\ndtype: bool\n\n>>> s1.str.isalnum()\n0     True\n1     True\n2     True\n3    False\ndtype: bool\n\nNote that checks against characters mixed with any additional punctuation\nor whitespace will evaluate to false for an alphanumeric check.\n\n>>> s2 = pd.Series(['A B', '1.5', '3,000'])\n>>> s2.str.isalnum()\n0    False\n1    False\n2    False\ndtype: bool\n\n**More Detailed Checks for Numeric Characters**\n\nThere are several different but overlapping sets of numeric characters that\ncan be checked for.\n\n>>> s3 = pd.Series(['23', '³', '⅕', ''])\n\nThe ``s3.str.isdecimal`` method checks for characters used to form numbers\nin base 10.\n\n>>> s3.str.isdecimal()\n0     True\n1    False\n2    False\n3    False\ndtype: bool\n\nThe ``s.str.isdigit`` method is the same as ``s3.str.isdecimal`` but also\nincludes special digits, like superscripted and subscripted digits in\nunicode.\n\n>>> s3.str.isdigit()\n0     True\n1     True\n2    False\n3    False\ndtype: bool\n\nThe ``s.str.isnumeric`` method is the same as ``s3.str.isdigit`` but also\nincludes other characters that can represent quantities such as unicode\nfractions.\n\n>>> s3.str.isnumeric()\n0     True\n1     True\n2     True\n3    False\ndtype: bool\n\n**Checks for Whitespace**\n\n>>> s4 = pd.Series([' ', '\\t\\r\\n ', ''])\n>>> s4.str.isspace()\n0     True\n1     True\n2    False\ndtype: bool\n\n**Checks for Character Case**\n\n>>> s5 = pd.Series(['leopard', 'Golden Eagle', 'SNAKE', ''])\n\n>>> s5.str.islower()\n0     True\n1    False\n2    False\n3    False\ndtype: bool\n\n>>> s5.str.isupper()\n0    False\n1    False\n2     True\n3    False\ndtype: bool\n\nThe ``s5.str.istitle`` method checks for whether all words are in title\ncase (whether only the first letter of each word is capitalized). Words are\nassumed to be as any sequence of non-numeric characters separated by\nwhitespace characters.\n\n>>> s5.str.istitle()\n0    False\n1     True\n2    False\n3    False\ndtype: bool"
  },
  {
    "symbol": "Series.str.isalpha",
    "signature": "()",
    "doc": "Check whether all characters in each string are alphabetic.\n\nThis is equivalent to running the Python string method\n:meth:`str.isalpha` for each element of the Series/Index. If a string\nhas zero characters, ``False`` is returned for that check.\n\nReturns\n-------\nSeries or Index of bool\n    Series or Index of boolean values with the same length as the original\n    Series/Index.\n\nSee Also\n--------\nSeries.str.isalpha : Check whether all characters are alphabetic.\nSeries.str.isnumeric : Check whether all characters are numeric.\nSeries.str.isalnum : Check whether all characters are alphanumeric.\nSeries.str.isdigit : Check whether all characters are digits.\nSeries.str.isdecimal : Check whether all characters are decimal.\nSeries.str.isspace : Check whether all characters are whitespace.\nSeries.str.islower : Check whether all characters are lowercase.\nSeries.str.isupper : Check whether all characters are uppercase.\nSeries.str.istitle : Check whether all characters are titlecase.\n\nExamples\n--------\n**Checks for Alphabetic and Numeric Characters**\n\n>>> s1 = pd.Series(['one', 'one1', '1', ''])\n\n>>> s1.str.isalpha()\n0     True\n1    False\n2    False\n3    False\ndtype: bool\n\n>>> s1.str.isnumeric()\n0    False\n1    False\n2     True\n3    False\ndtype: bool\n\n>>> s1.str.isalnum()\n0     True\n1     True\n2     True\n3    False\ndtype: bool\n\nNote that checks against characters mixed with any additional punctuation\nor whitespace will evaluate to false for an alphanumeric check.\n\n>>> s2 = pd.Series(['A B', '1.5', '3,000'])\n>>> s2.str.isalnum()\n0    False\n1    False\n2    False\ndtype: bool\n\n**More Detailed Checks for Numeric Characters**\n\nThere are several different but overlapping sets of numeric characters that\ncan be checked for.\n\n>>> s3 = pd.Series(['23', '³', '⅕', ''])\n\nThe ``s3.str.isdecimal`` method checks for characters used to form numbers\nin base 10.\n\n>>> s3.str.isdecimal()\n0     True\n1    False\n2    False\n3    False\ndtype: bool\n\nThe ``s.str.isdigit`` method is the same as ``s3.str.isdecimal`` but also\nincludes special digits, like superscripted and subscripted digits in\nunicode.\n\n>>> s3.str.isdigit()\n0     True\n1     True\n2    False\n3    False\ndtype: bool\n\nThe ``s.str.isnumeric`` method is the same as ``s3.str.isdigit`` but also\nincludes other characters that can represent quantities such as unicode\nfractions.\n\n>>> s3.str.isnumeric()\n0     True\n1     True\n2     True\n3    False\ndtype: bool\n\n**Checks for Whitespace**\n\n>>> s4 = pd.Series([' ', '\\t\\r\\n ', ''])\n>>> s4.str.isspace()\n0     True\n1     True\n2    False\ndtype: bool\n\n**Checks for Character Case**\n\n>>> s5 = pd.Series(['leopard', 'Golden Eagle', 'SNAKE', ''])\n\n>>> s5.str.islower()\n0     True\n1    False\n2    False\n3    False\ndtype: bool\n\n>>> s5.str.isupper()\n0    False\n1    False\n2     True\n3    False\ndtype: bool\n\nThe ``s5.str.istitle`` method checks for whether all words are in title\ncase (whether only the first letter of each word is capitalized). Words are\nassumed to be as any sequence of non-numeric characters separated by\nwhitespace characters.\n\n>>> s5.str.istitle()\n0    False\n1     True\n2    False\n3    False\ndtype: bool"
  },
  {
    "symbol": "Series.str.isdecimal",
    "signature": "()",
    "doc": "Check whether all characters in each string are decimal.\n\nThis is equivalent to running the Python string method\n:meth:`str.isdecimal` for each element of the Series/Index. If a string\nhas zero characters, ``False`` is returned for that check.\n\nReturns\n-------\nSeries or Index of bool\n    Series or Index of boolean values with the same length as the original\n    Series/Index.\n\nSee Also\n--------\nSeries.str.isalpha : Check whether all characters are alphabetic.\nSeries.str.isnumeric : Check whether all characters are numeric.\nSeries.str.isalnum : Check whether all characters are alphanumeric.\nSeries.str.isdigit : Check whether all characters are digits.\nSeries.str.isdecimal : Check whether all characters are decimal.\nSeries.str.isspace : Check whether all characters are whitespace.\nSeries.str.islower : Check whether all characters are lowercase.\nSeries.str.isupper : Check whether all characters are uppercase.\nSeries.str.istitle : Check whether all characters are titlecase.\n\nExamples\n--------\n**Checks for Alphabetic and Numeric Characters**\n\n>>> s1 = pd.Series(['one', 'one1', '1', ''])\n\n>>> s1.str.isalpha()\n0     True\n1    False\n2    False\n3    False\ndtype: bool\n\n>>> s1.str.isnumeric()\n0    False\n1    False\n2     True\n3    False\ndtype: bool\n\n>>> s1.str.isalnum()\n0     True\n1     True\n2     True\n3    False\ndtype: bool\n\nNote that checks against characters mixed with any additional punctuation\nor whitespace will evaluate to false for an alphanumeric check.\n\n>>> s2 = pd.Series(['A B', '1.5', '3,000'])\n>>> s2.str.isalnum()\n0    False\n1    False\n2    False\ndtype: bool\n\n**More Detailed Checks for Numeric Characters**\n\nThere are several different but overlapping sets of numeric characters that\ncan be checked for.\n\n>>> s3 = pd.Series(['23', '³', '⅕', ''])\n\nThe ``s3.str.isdecimal`` method checks for characters used to form numbers\nin base 10.\n\n>>> s3.str.isdecimal()\n0     True\n1    False\n2    False\n3    False\ndtype: bool\n\nThe ``s.str.isdigit`` method is the same as ``s3.str.isdecimal`` but also\nincludes special digits, like superscripted and subscripted digits in\nunicode.\n\n>>> s3.str.isdigit()\n0     True\n1     True\n2    False\n3    False\ndtype: bool\n\nThe ``s.str.isnumeric`` method is the same as ``s3.str.isdigit`` but also\nincludes other characters that can represent quantities such as unicode\nfractions.\n\n>>> s3.str.isnumeric()\n0     True\n1     True\n2     True\n3    False\ndtype: bool\n\n**Checks for Whitespace**\n\n>>> s4 = pd.Series([' ', '\\t\\r\\n ', ''])\n>>> s4.str.isspace()\n0     True\n1     True\n2    False\ndtype: bool\n\n**Checks for Character Case**\n\n>>> s5 = pd.Series(['leopard', 'Golden Eagle', 'SNAKE', ''])\n\n>>> s5.str.islower()\n0     True\n1    False\n2    False\n3    False\ndtype: bool\n\n>>> s5.str.isupper()\n0    False\n1    False\n2     True\n3    False\ndtype: bool\n\nThe ``s5.str.istitle`` method checks for whether all words are in title\ncase (whether only the first letter of each word is capitalized). Words are\nassumed to be as any sequence of non-numeric characters separated by\nwhitespace characters.\n\n>>> s5.str.istitle()\n0    False\n1     True\n2    False\n3    False\ndtype: bool"
  },
  {
    "symbol": "Series.str.isdigit",
    "signature": "()",
    "doc": "Check whether all characters in each string are digits.\n\nThis is equivalent to running the Python string method\n:meth:`str.isdigit` for each element of the Series/Index. If a string\nhas zero characters, ``False`` is returned for that check.\n\nReturns\n-------\nSeries or Index of bool\n    Series or Index of boolean values with the same length as the original\n    Series/Index.\n\nSee Also\n--------\nSeries.str.isalpha : Check whether all characters are alphabetic.\nSeries.str.isnumeric : Check whether all characters are numeric.\nSeries.str.isalnum : Check whether all characters are alphanumeric.\nSeries.str.isdigit : Check whether all characters are digits.\nSeries.str.isdecimal : Check whether all characters are decimal.\nSeries.str.isspace : Check whether all characters are whitespace.\nSeries.str.islower : Check whether all characters are lowercase.\nSeries.str.isupper : Check whether all characters are uppercase.\nSeries.str.istitle : Check whether all characters are titlecase.\n\nExamples\n--------\n**Checks for Alphabetic and Numeric Characters**\n\n>>> s1 = pd.Series(['one', 'one1', '1', ''])\n\n>>> s1.str.isalpha()\n0     True\n1    False\n2    False\n3    False\ndtype: bool\n\n>>> s1.str.isnumeric()\n0    False\n1    False\n2     True\n3    False\ndtype: bool\n\n>>> s1.str.isalnum()\n0     True\n1     True\n2     True\n3    False\ndtype: bool\n\nNote that checks against characters mixed with any additional punctuation\nor whitespace will evaluate to false for an alphanumeric check.\n\n>>> s2 = pd.Series(['A B', '1.5', '3,000'])\n>>> s2.str.isalnum()\n0    False\n1    False\n2    False\ndtype: bool\n\n**More Detailed Checks for Numeric Characters**\n\nThere are several different but overlapping sets of numeric characters that\ncan be checked for.\n\n>>> s3 = pd.Series(['23', '³', '⅕', ''])\n\nThe ``s3.str.isdecimal`` method checks for characters used to form numbers\nin base 10.\n\n>>> s3.str.isdecimal()\n0     True\n1    False\n2    False\n3    False\ndtype: bool\n\nThe ``s.str.isdigit`` method is the same as ``s3.str.isdecimal`` but also\nincludes special digits, like superscripted and subscripted digits in\nunicode.\n\n>>> s3.str.isdigit()\n0     True\n1     True\n2    False\n3    False\ndtype: bool\n\nThe ``s.str.isnumeric`` method is the same as ``s3.str.isdigit`` but also\nincludes other characters that can represent quantities such as unicode\nfractions.\n\n>>> s3.str.isnumeric()\n0     True\n1     True\n2     True\n3    False\ndtype: bool\n\n**Checks for Whitespace**\n\n>>> s4 = pd.Series([' ', '\\t\\r\\n ', ''])\n>>> s4.str.isspace()\n0     True\n1     True\n2    False\ndtype: bool\n\n**Checks for Character Case**\n\n>>> s5 = pd.Series(['leopard', 'Golden Eagle', 'SNAKE', ''])\n\n>>> s5.str.islower()\n0     True\n1    False\n2    False\n3    False\ndtype: bool\n\n>>> s5.str.isupper()\n0    False\n1    False\n2     True\n3    False\ndtype: bool\n\nThe ``s5.str.istitle`` method checks for whether all words are in title\ncase (whether only the first letter of each word is capitalized). Words are\nassumed to be as any sequence of non-numeric characters separated by\nwhitespace characters.\n\n>>> s5.str.istitle()\n0    False\n1     True\n2    False\n3    False\ndtype: bool"
  },
  {
    "symbol": "Series.str.islower",
    "signature": "()",
    "doc": "Check whether all characters in each string are lowercase.\n\nThis is equivalent to running the Python string method\n:meth:`str.islower` for each element of the Series/Index. If a string\nhas zero characters, ``False`` is returned for that check.\n\nReturns\n-------\nSeries or Index of bool\n    Series or Index of boolean values with the same length as the original\n    Series/Index.\n\nSee Also\n--------\nSeries.str.isalpha : Check whether all characters are alphabetic.\nSeries.str.isnumeric : Check whether all characters are numeric.\nSeries.str.isalnum : Check whether all characters are alphanumeric.\nSeries.str.isdigit : Check whether all characters are digits.\nSeries.str.isdecimal : Check whether all characters are decimal.\nSeries.str.isspace : Check whether all characters are whitespace.\nSeries.str.islower : Check whether all characters are lowercase.\nSeries.str.isupper : Check whether all characters are uppercase.\nSeries.str.istitle : Check whether all characters are titlecase.\n\nExamples\n--------\n**Checks for Alphabetic and Numeric Characters**\n\n>>> s1 = pd.Series(['one', 'one1', '1', ''])\n\n>>> s1.str.isalpha()\n0     True\n1    False\n2    False\n3    False\ndtype: bool\n\n>>> s1.str.isnumeric()\n0    False\n1    False\n2     True\n3    False\ndtype: bool\n\n>>> s1.str.isalnum()\n0     True\n1     True\n2     True\n3    False\ndtype: bool\n\nNote that checks against characters mixed with any additional punctuation\nor whitespace will evaluate to false for an alphanumeric check.\n\n>>> s2 = pd.Series(['A B', '1.5', '3,000'])\n>>> s2.str.isalnum()\n0    False\n1    False\n2    False\ndtype: bool\n\n**More Detailed Checks for Numeric Characters**\n\nThere are several different but overlapping sets of numeric characters that\ncan be checked for.\n\n>>> s3 = pd.Series(['23', '³', '⅕', ''])\n\nThe ``s3.str.isdecimal`` method checks for characters used to form numbers\nin base 10.\n\n>>> s3.str.isdecimal()\n0     True\n1    False\n2    False\n3    False\ndtype: bool\n\nThe ``s.str.isdigit`` method is the same as ``s3.str.isdecimal`` but also\nincludes special digits, like superscripted and subscripted digits in\nunicode.\n\n>>> s3.str.isdigit()\n0     True\n1     True\n2    False\n3    False\ndtype: bool\n\nThe ``s.str.isnumeric`` method is the same as ``s3.str.isdigit`` but also\nincludes other characters that can represent quantities such as unicode\nfractions.\n\n>>> s3.str.isnumeric()\n0     True\n1     True\n2     True\n3    False\ndtype: bool\n\n**Checks for Whitespace**\n\n>>> s4 = pd.Series([' ', '\\t\\r\\n ', ''])\n>>> s4.str.isspace()\n0     True\n1     True\n2    False\ndtype: bool\n\n**Checks for Character Case**\n\n>>> s5 = pd.Series(['leopard', 'Golden Eagle', 'SNAKE', ''])\n\n>>> s5.str.islower()\n0     True\n1    False\n2    False\n3    False\ndtype: bool\n\n>>> s5.str.isupper()\n0    False\n1    False\n2     True\n3    False\ndtype: bool\n\nThe ``s5.str.istitle`` method checks for whether all words are in title\ncase (whether only the first letter of each word is capitalized). Words are\nassumed to be as any sequence of non-numeric characters separated by\nwhitespace characters.\n\n>>> s5.str.istitle()\n0    False\n1     True\n2    False\n3    False\ndtype: bool"
  },
  {
    "symbol": "Series.str.isnumeric",
    "signature": "()",
    "doc": "Check whether all characters in each string are numeric.\n\nThis is equivalent to running the Python string method\n:meth:`str.isnumeric` for each element of the Series/Index. If a string\nhas zero characters, ``False`` is returned for that check.\n\nReturns\n-------\nSeries or Index of bool\n    Series or Index of boolean values with the same length as the original\n    Series/Index.\n\nSee Also\n--------\nSeries.str.isalpha : Check whether all characters are alphabetic.\nSeries.str.isnumeric : Check whether all characters are numeric.\nSeries.str.isalnum : Check whether all characters are alphanumeric.\nSeries.str.isdigit : Check whether all characters are digits.\nSeries.str.isdecimal : Check whether all characters are decimal.\nSeries.str.isspace : Check whether all characters are whitespace.\nSeries.str.islower : Check whether all characters are lowercase.\nSeries.str.isupper : Check whether all characters are uppercase.\nSeries.str.istitle : Check whether all characters are titlecase.\n\nExamples\n--------\n**Checks for Alphabetic and Numeric Characters**\n\n>>> s1 = pd.Series(['one', 'one1', '1', ''])\n\n>>> s1.str.isalpha()\n0     True\n1    False\n2    False\n3    False\ndtype: bool\n\n>>> s1.str.isnumeric()\n0    False\n1    False\n2     True\n3    False\ndtype: bool\n\n>>> s1.str.isalnum()\n0     True\n1     True\n2     True\n3    False\ndtype: bool\n\nNote that checks against characters mixed with any additional punctuation\nor whitespace will evaluate to false for an alphanumeric check.\n\n>>> s2 = pd.Series(['A B', '1.5', '3,000'])\n>>> s2.str.isalnum()\n0    False\n1    False\n2    False\ndtype: bool\n\n**More Detailed Checks for Numeric Characters**\n\nThere are several different but overlapping sets of numeric characters that\ncan be checked for.\n\n>>> s3 = pd.Series(['23', '³', '⅕', ''])\n\nThe ``s3.str.isdecimal`` method checks for characters used to form numbers\nin base 10.\n\n>>> s3.str.isdecimal()\n0     True\n1    False\n2    False\n3    False\ndtype: bool\n\nThe ``s.str.isdigit`` method is the same as ``s3.str.isdecimal`` but also\nincludes special digits, like superscripted and subscripted digits in\nunicode.\n\n>>> s3.str.isdigit()\n0     True\n1     True\n2    False\n3    False\ndtype: bool\n\nThe ``s.str.isnumeric`` method is the same as ``s3.str.isdigit`` but also\nincludes other characters that can represent quantities such as unicode\nfractions.\n\n>>> s3.str.isnumeric()\n0     True\n1     True\n2     True\n3    False\ndtype: bool\n\n**Checks for Whitespace**\n\n>>> s4 = pd.Series([' ', '\\t\\r\\n ', ''])\n>>> s4.str.isspace()\n0     True\n1     True\n2    False\ndtype: bool\n\n**Checks for Character Case**\n\n>>> s5 = pd.Series(['leopard', 'Golden Eagle', 'SNAKE', ''])\n\n>>> s5.str.islower()\n0     True\n1    False\n2    False\n3    False\ndtype: bool\n\n>>> s5.str.isupper()\n0    False\n1    False\n2     True\n3    False\ndtype: bool\n\nThe ``s5.str.istitle`` method checks for whether all words are in title\ncase (whether only the first letter of each word is capitalized). Words are\nassumed to be as any sequence of non-numeric characters separated by\nwhitespace characters.\n\n>>> s5.str.istitle()\n0    False\n1     True\n2    False\n3    False\ndtype: bool"
  },
  {
    "symbol": "Series.str.isspace",
    "signature": "()",
    "doc": "Check whether all characters in each string are whitespace.\n\nThis is equivalent to running the Python string method\n:meth:`str.isspace` for each element of the Series/Index. If a string\nhas zero characters, ``False`` is returned for that check.\n\nReturns\n-------\nSeries or Index of bool\n    Series or Index of boolean values with the same length as the original\n    Series/Index.\n\nSee Also\n--------\nSeries.str.isalpha : Check whether all characters are alphabetic.\nSeries.str.isnumeric : Check whether all characters are numeric.\nSeries.str.isalnum : Check whether all characters are alphanumeric.\nSeries.str.isdigit : Check whether all characters are digits.\nSeries.str.isdecimal : Check whether all characters are decimal.\nSeries.str.isspace : Check whether all characters are whitespace.\nSeries.str.islower : Check whether all characters are lowercase.\nSeries.str.isupper : Check whether all characters are uppercase.\nSeries.str.istitle : Check whether all characters are titlecase.\n\nExamples\n--------\n**Checks for Alphabetic and Numeric Characters**\n\n>>> s1 = pd.Series(['one', 'one1', '1', ''])\n\n>>> s1.str.isalpha()\n0     True\n1    False\n2    False\n3    False\ndtype: bool\n\n>>> s1.str.isnumeric()\n0    False\n1    False\n2     True\n3    False\ndtype: bool\n\n>>> s1.str.isalnum()\n0     True\n1     True\n2     True\n3    False\ndtype: bool\n\nNote that checks against characters mixed with any additional punctuation\nor whitespace will evaluate to false for an alphanumeric check.\n\n>>> s2 = pd.Series(['A B', '1.5', '3,000'])\n>>> s2.str.isalnum()\n0    False\n1    False\n2    False\ndtype: bool\n\n**More Detailed Checks for Numeric Characters**\n\nThere are several different but overlapping sets of numeric characters that\ncan be checked for.\n\n>>> s3 = pd.Series(['23', '³', '⅕', ''])\n\nThe ``s3.str.isdecimal`` method checks for characters used to form numbers\nin base 10.\n\n>>> s3.str.isdecimal()\n0     True\n1    False\n2    False\n3    False\ndtype: bool\n\nThe ``s.str.isdigit`` method is the same as ``s3.str.isdecimal`` but also\nincludes special digits, like superscripted and subscripted digits in\nunicode.\n\n>>> s3.str.isdigit()\n0     True\n1     True\n2    False\n3    False\ndtype: bool\n\nThe ``s.str.isnumeric`` method is the same as ``s3.str.isdigit`` but also\nincludes other characters that can represent quantities such as unicode\nfractions.\n\n>>> s3.str.isnumeric()\n0     True\n1     True\n2     True\n3    False\ndtype: bool\n\n**Checks for Whitespace**\n\n>>> s4 = pd.Series([' ', '\\t\\r\\n ', ''])\n>>> s4.str.isspace()\n0     True\n1     True\n2    False\ndtype: bool\n\n**Checks for Character Case**\n\n>>> s5 = pd.Series(['leopard', 'Golden Eagle', 'SNAKE', ''])\n\n>>> s5.str.islower()\n0     True\n1    False\n2    False\n3    False\ndtype: bool\n\n>>> s5.str.isupper()\n0    False\n1    False\n2     True\n3    False\ndtype: bool\n\nThe ``s5.str.istitle`` method checks for whether all words are in title\ncase (whether only the first letter of each word is capitalized). Words are\nassumed to be as any sequence of non-numeric characters separated by\nwhitespace characters.\n\n>>> s5.str.istitle()\n0    False\n1     True\n2    False\n3    False\ndtype: bool"
  },
  {
    "symbol": "Series.str.istitle",
    "signature": "()",
    "doc": "Check whether all characters in each string are titlecase.\n\nThis is equivalent to running the Python string method\n:meth:`str.istitle` for each element of the Series/Index. If a string\nhas zero characters, ``False`` is returned for that check.\n\nReturns\n-------\nSeries or Index of bool\n    Series or Index of boolean values with the same length as the original\n    Series/Index.\n\nSee Also\n--------\nSeries.str.isalpha : Check whether all characters are alphabetic.\nSeries.str.isnumeric : Check whether all characters are numeric.\nSeries.str.isalnum : Check whether all characters are alphanumeric.\nSeries.str.isdigit : Check whether all characters are digits.\nSeries.str.isdecimal : Check whether all characters are decimal.\nSeries.str.isspace : Check whether all characters are whitespace.\nSeries.str.islower : Check whether all characters are lowercase.\nSeries.str.isupper : Check whether all characters are uppercase.\nSeries.str.istitle : Check whether all characters are titlecase.\n\nExamples\n--------\n**Checks for Alphabetic and Numeric Characters**\n\n>>> s1 = pd.Series(['one', 'one1', '1', ''])\n\n>>> s1.str.isalpha()\n0     True\n1    False\n2    False\n3    False\ndtype: bool\n\n>>> s1.str.isnumeric()\n0    False\n1    False\n2     True\n3    False\ndtype: bool\n\n>>> s1.str.isalnum()\n0     True\n1     True\n2     True\n3    False\ndtype: bool\n\nNote that checks against characters mixed with any additional punctuation\nor whitespace will evaluate to false for an alphanumeric check.\n\n>>> s2 = pd.Series(['A B', '1.5', '3,000'])\n>>> s2.str.isalnum()\n0    False\n1    False\n2    False\ndtype: bool\n\n**More Detailed Checks for Numeric Characters**\n\nThere are several different but overlapping sets of numeric characters that\ncan be checked for.\n\n>>> s3 = pd.Series(['23', '³', '⅕', ''])\n\nThe ``s3.str.isdecimal`` method checks for characters used to form numbers\nin base 10.\n\n>>> s3.str.isdecimal()\n0     True\n1    False\n2    False\n3    False\ndtype: bool\n\nThe ``s.str.isdigit`` method is the same as ``s3.str.isdecimal`` but also\nincludes special digits, like superscripted and subscripted digits in\nunicode.\n\n>>> s3.str.isdigit()\n0     True\n1     True\n2    False\n3    False\ndtype: bool\n\nThe ``s.str.isnumeric`` method is the same as ``s3.str.isdigit`` but also\nincludes other characters that can represent quantities such as unicode\nfractions.\n\n>>> s3.str.isnumeric()\n0     True\n1     True\n2     True\n3    False\ndtype: bool\n\n**Checks for Whitespace**\n\n>>> s4 = pd.Series([' ', '\\t\\r\\n ', ''])\n>>> s4.str.isspace()\n0     True\n1     True\n2    False\ndtype: bool\n\n**Checks for Character Case**\n\n>>> s5 = pd.Series(['leopard', 'Golden Eagle', 'SNAKE', ''])\n\n>>> s5.str.islower()\n0     True\n1    False\n2    False\n3    False\ndtype: bool\n\n>>> s5.str.isupper()\n0    False\n1    False\n2     True\n3    False\ndtype: bool\n\nThe ``s5.str.istitle`` method checks for whether all words are in title\ncase (whether only the first letter of each word is capitalized). Words are\nassumed to be as any sequence of non-numeric characters separated by\nwhitespace characters.\n\n>>> s5.str.istitle()\n0    False\n1     True\n2    False\n3    False\ndtype: bool"
  },
  {
    "symbol": "Series.str.isupper",
    "signature": "()",
    "doc": "Check whether all characters in each string are uppercase.\n\nThis is equivalent to running the Python string method\n:meth:`str.isupper` for each element of the Series/Index. If a string\nhas zero characters, ``False`` is returned for that check.\n\nReturns\n-------\nSeries or Index of bool\n    Series or Index of boolean values with the same length as the original\n    Series/Index.\n\nSee Also\n--------\nSeries.str.isalpha : Check whether all characters are alphabetic.\nSeries.str.isnumeric : Check whether all characters are numeric.\nSeries.str.isalnum : Check whether all characters are alphanumeric.\nSeries.str.isdigit : Check whether all characters are digits.\nSeries.str.isdecimal : Check whether all characters are decimal.\nSeries.str.isspace : Check whether all characters are whitespace.\nSeries.str.islower : Check whether all characters are lowercase.\nSeries.str.isupper : Check whether all characters are uppercase.\nSeries.str.istitle : Check whether all characters are titlecase.\n\nExamples\n--------\n**Checks for Alphabetic and Numeric Characters**\n\n>>> s1 = pd.Series(['one', 'one1', '1', ''])\n\n>>> s1.str.isalpha()\n0     True\n1    False\n2    False\n3    False\ndtype: bool\n\n>>> s1.str.isnumeric()\n0    False\n1    False\n2     True\n3    False\ndtype: bool\n\n>>> s1.str.isalnum()\n0     True\n1     True\n2     True\n3    False\ndtype: bool\n\nNote that checks against characters mixed with any additional punctuation\nor whitespace will evaluate to false for an alphanumeric check.\n\n>>> s2 = pd.Series(['A B', '1.5', '3,000'])\n>>> s2.str.isalnum()\n0    False\n1    False\n2    False\ndtype: bool\n\n**More Detailed Checks for Numeric Characters**\n\nThere are several different but overlapping sets of numeric characters that\ncan be checked for.\n\n>>> s3 = pd.Series(['23', '³', '⅕', ''])\n\nThe ``s3.str.isdecimal`` method checks for characters used to form numbers\nin base 10.\n\n>>> s3.str.isdecimal()\n0     True\n1    False\n2    False\n3    False\ndtype: bool\n\nThe ``s.str.isdigit`` method is the same as ``s3.str.isdecimal`` but also\nincludes special digits, like superscripted and subscripted digits in\nunicode.\n\n>>> s3.str.isdigit()\n0     True\n1     True\n2    False\n3    False\ndtype: bool\n\nThe ``s.str.isnumeric`` method is the same as ``s3.str.isdigit`` but also\nincludes other characters that can represent quantities such as unicode\nfractions.\n\n>>> s3.str.isnumeric()\n0     True\n1     True\n2     True\n3    False\ndtype: bool\n\n**Checks for Whitespace**\n\n>>> s4 = pd.Series([' ', '\\t\\r\\n ', ''])\n>>> s4.str.isspace()\n0     True\n1     True\n2    False\ndtype: bool\n\n**Checks for Character Case**\n\n>>> s5 = pd.Series(['leopard', 'Golden Eagle', 'SNAKE', ''])\n\n>>> s5.str.islower()\n0     True\n1    False\n2    False\n3    False\ndtype: bool\n\n>>> s5.str.isupper()\n0    False\n1    False\n2     True\n3    False\ndtype: bool\n\nThe ``s5.str.istitle`` method checks for whether all words are in title\ncase (whether only the first letter of each word is capitalized). Words are\nassumed to be as any sequence of non-numeric characters separated by\nwhitespace characters.\n\n>>> s5.str.istitle()\n0    False\n1     True\n2    False\n3    False\ndtype: bool"
  },
  {
    "symbol": "Series.str.join",
    "signature": "(sep: 'str')",
    "doc": "Join lists contained as elements in the Series/Index with passed delimiter.\n\nIf the elements of a Series are lists themselves, join the content of these\nlists using the delimiter passed to the function.\nThis function is an equivalent to :meth:`str.join`.\n\nParameters\n----------\nsep : str\n    Delimiter to use between list entries.\n\nReturns\n-------\nSeries/Index: object\n    The list entries concatenated by intervening occurrences of the\n    delimiter.\n\nRaises\n------\nAttributeError\n    If the supplied Series contains neither strings nor lists.\n\nSee Also\n--------\nstr.join : Standard library version of this method.\nSeries.str.split : Split strings around given separator/delimiter.\n\nNotes\n-----\nIf any of the list items is not a string object, the result of the join\nwill be `NaN`.\n\nExamples\n--------\nExample with a list that contains non-string elements.\n\n>>> s = pd.Series([['lion', 'elephant', 'zebra'],\n...                [1.1, 2.2, 3.3],\n...                ['cat', np.nan, 'dog'],\n...                ['cow', 4.5, 'goat'],\n...                ['duck', ['swan', 'fish'], 'guppy']])\n>>> s\n0        [lion, elephant, zebra]\n1                [1.1, 2.2, 3.3]\n2                [cat, nan, dog]\n3               [cow, 4.5, goat]\n4    [duck, [swan, fish], guppy]\ndtype: object\n\nJoin all lists using a '-'. The lists containing object(s) of types other\nthan str will produce a NaN.\n\n>>> s.str.join('-')\n0    lion-elephant-zebra\n1                    NaN\n2                    NaN\n3                    NaN\n4                    NaN\ndtype: object"
  },
  {
    "symbol": "Series.str.len",
    "signature": "()",
    "doc": "Compute the length of each element in the Series/Index.\n\nThe element may be a sequence (such as a string, tuple or list) or a collection\n(such as a dictionary).\n\nReturns\n-------\nSeries or Index of int\n    A Series or Index of integer values indicating the length of each\n    element in the Series or Index.\n\nSee Also\n--------\nstr.len : Python built-in function returning the length of an object.\nSeries.size : Returns the length of the Series.\n\nExamples\n--------\nReturns the length (number of characters) in a string. Returns the\nnumber of entries for dictionaries, lists or tuples.\n\n>>> s = pd.Series(['dog',\n...                 '',\n...                 5,\n...                 {'foo' : 'bar'},\n...                 [2, 3, 5, 7],\n...                 ('one', 'two', 'three')])\n>>> s\n0                  dog\n1\n2                    5\n3       {'foo': 'bar'}\n4         [2, 3, 5, 7]\n5    (one, two, three)\ndtype: object\n>>> s.str.len()\n0    3.0\n1    0.0\n2    NaN\n3    1.0\n4    4.0\n5    3.0\ndtype: float64"
  },
  {
    "symbol": "Series.str.ljust",
    "signature": "(width: 'int', fillchar: 'str' = ' ')",
    "doc": "Pad right side of strings in the Series/Index.\n\nEquivalent to :meth:`str.ljust`.\n\nParameters\n----------\nwidth : int\n    Minimum width of resulting string; additional characters will be filled\n    with ``fillchar``.\nfillchar : str\n    Additional character for filling, default is whitespace.\n\nReturns\n-------\nSeries/Index of objects.\n\nExamples\n--------\nFor Series.str.center:\n\n>>> ser = pd.Series(['dog', 'bird', 'mouse'])\n>>> ser.str.center(8, fillchar='.')\n0   ..dog...\n1   ..bird..\n2   .mouse..\ndtype: object\n\nFor Series.str.ljust:\n\n>>> ser = pd.Series(['dog', 'bird', 'mouse'])\n>>> ser.str.ljust(8, fillchar='.')\n0   dog.....\n1   bird....\n2   mouse...\ndtype: object\n\nFor Series.str.rjust:\n\n>>> ser = pd.Series(['dog', 'bird', 'mouse'])\n>>> ser.str.rjust(8, fillchar='.')\n0   .....dog\n1   ....bird\n2   ...mouse\ndtype: object"
  },
  {
    "symbol": "Series.str.lower",
    "signature": "()",
    "doc": "Convert strings in the Series/Index to lowercase.\n\nEquivalent to :meth:`str.lower`.\n\nReturns\n-------\nSeries or Index of object\n\nSee Also\n--------\nSeries.str.lower : Converts all characters to lowercase.\nSeries.str.upper : Converts all characters to uppercase.\nSeries.str.title : Converts first character of each word to uppercase and\n    remaining to lowercase.\nSeries.str.capitalize : Converts first character to uppercase and\n    remaining to lowercase.\nSeries.str.swapcase : Converts uppercase to lowercase and lowercase to\n    uppercase.\nSeries.str.casefold: Removes all case distinctions in the string.\n\nExamples\n--------\n>>> s = pd.Series(['lower', 'CAPITALS', 'this is a sentence', 'SwApCaSe'])\n>>> s\n0                 lower\n1              CAPITALS\n2    this is a sentence\n3              SwApCaSe\ndtype: object\n\n>>> s.str.lower()\n0                 lower\n1              capitals\n2    this is a sentence\n3              swapcase\ndtype: object\n\n>>> s.str.upper()\n0                 LOWER\n1              CAPITALS\n2    THIS IS A SENTENCE\n3              SWAPCASE\ndtype: object\n\n>>> s.str.title()\n0                 Lower\n1              Capitals\n2    This Is A Sentence\n3              Swapcase\ndtype: object\n\n>>> s.str.capitalize()\n0                 Lower\n1              Capitals\n2    This is a sentence\n3              Swapcase\ndtype: object\n\n>>> s.str.swapcase()\n0                 LOWER\n1              capitals\n2    THIS IS A SENTENCE\n3              sWaPcAsE\ndtype: object"
  },
  {
    "symbol": "Series.str.lstrip",
    "signature": "(to_strip=None)",
    "doc": "Remove leading characters.\n\nStrip whitespaces (including newlines) or a set of specified characters\nfrom each string in the Series/Index from left side.\nReplaces any non-strings in Series with NaNs.\nEquivalent to :meth:`str.lstrip`.\n\nParameters\n----------\nto_strip : str or None, default None\n    Specifying the set of characters to be removed.\n    All combinations of this set of characters will be stripped.\n    If None then whitespaces are removed.\n\nReturns\n-------\nSeries or Index of object\n\nSee Also\n--------\nSeries.str.strip : Remove leading and trailing characters in Series/Index.\nSeries.str.lstrip : Remove leading characters in Series/Index.\nSeries.str.rstrip : Remove trailing characters in Series/Index.\n\nExamples\n--------\n>>> s = pd.Series(['1. Ant.  ', '2. Bee!\\n', '3. Cat?\\t', np.nan, 10, True])\n>>> s\n0    1. Ant.\n1    2. Bee!\\n\n2    3. Cat?\\t\n3          NaN\n4           10\n5         True\ndtype: object\n\n>>> s.str.strip()\n0    1. Ant.\n1    2. Bee!\n2    3. Cat?\n3        NaN\n4        NaN\n5        NaN\ndtype: object\n\n>>> s.str.lstrip('123.')\n0    Ant.\n1    Bee!\\n\n2    Cat?\\t\n3       NaN\n4       NaN\n5       NaN\ndtype: object\n\n>>> s.str.rstrip('.!? \\n\\t')\n0    1. Ant\n1    2. Bee\n2    3. Cat\n3       NaN\n4       NaN\n5       NaN\ndtype: object\n\n>>> s.str.strip('123.!? \\n\\t')\n0    Ant\n1    Bee\n2    Cat\n3    NaN\n4    NaN\n5    NaN\ndtype: object"
  },
  {
    "symbol": "Series.str.match",
    "signature": "(pat: 'str', case: 'bool' = True, flags: 'int' = 0, na=<no_default>)",
    "doc": "Determine if each string starts with a match of a regular expression.\n\nParameters\n----------\npat : str or compiled regex\n    Character sequence or regular expression.\ncase : bool, default True\n    If True, case sensitive.\nflags : int, default 0 (no flags)\n    Regex module flags, e.g. re.IGNORECASE.\nna : scalar, optional\n    Fill value for missing values. The default depends on dtype of the\n    array. For object-dtype, ``numpy.nan`` is used. For the nullable\n    ``StringDtype``, ``pandas.NA`` is used. For the ``\"str\"`` dtype,\n    ``False`` is used.\n\nReturns\n-------\nSeries/Index/array of boolean values\n\nSee Also\n--------\nfullmatch : Stricter matching that requires the entire string to match.\ncontains : Analogous, but less strict, relying on re.search instead of\n    re.match.\nextract : Extract matched groups.\n\nExamples\n--------\n>>> ser = pd.Series([\"horse\", \"eagle\", \"donkey\"])\n>>> ser.str.match(\"e\")\n0   False\n1   True\n2   False\ndtype: bool"
  },
  {
    "symbol": "Series.str.normalize",
    "signature": "(form)",
    "doc": "Return the Unicode normal form for the strings in the Series/Index.\n\nFor more information on the forms, see the\n:func:`unicodedata.normalize`.\n\nParameters\n----------\nform : {'NFC', 'NFKC', 'NFD', 'NFKD'}\n    Unicode form.\n\nReturns\n-------\nSeries/Index of objects\n\nExamples\n--------\n>>> ser = pd.Series(['ñ'])\n>>> ser.str.normalize('NFC') == ser.str.normalize('NFD')\n0   False\ndtype: bool"
  },
  {
    "symbol": "Series.str.pad",
    "signature": "(width: 'int', side: \"Literal['left', 'right', 'both']\" = 'left', fillchar: 'str' = ' ')",
    "doc": "Pad strings in the Series/Index up to width.\n\nParameters\n----------\nwidth : int\n    Minimum width of resulting string; additional characters will be filled\n    with character defined in `fillchar`.\nside : {'left', 'right', 'both'}, default 'left'\n    Side from which to fill resulting string.\nfillchar : str, default ' '\n    Additional character for filling, default is whitespace.\n\nReturns\n-------\nSeries or Index of object\n    Returns Series or Index with minimum number of char in object.\n\nSee Also\n--------\nSeries.str.rjust : Fills the left side of strings with an arbitrary\n    character. Equivalent to ``Series.str.pad(side='left')``.\nSeries.str.ljust : Fills the right side of strings with an arbitrary\n    character. Equivalent to ``Series.str.pad(side='right')``.\nSeries.str.center : Fills both sides of strings with an arbitrary\n    character. Equivalent to ``Series.str.pad(side='both')``.\nSeries.str.zfill : Pad strings in the Series/Index by prepending '0'\n    character. Equivalent to ``Series.str.pad(side='left', fillchar='0')``.\n\nExamples\n--------\n>>> s = pd.Series([\"caribou\", \"tiger\"])\n>>> s\n0    caribou\n1      tiger\ndtype: object\n\n>>> s.str.pad(width=10)\n0       caribou\n1         tiger\ndtype: object\n\n>>> s.str.pad(width=10, side='right', fillchar='-')\n0    caribou---\n1    tiger-----\ndtype: object\n\n>>> s.str.pad(width=10, side='both', fillchar='-')\n0    -caribou--\n1    --tiger---\ndtype: object"
  },
  {
    "symbol": "Series.str.partition",
    "signature": "(sep: 'str' = ' ', expand: 'bool' = True)",
    "doc": "Split the string at the first occurrence of `sep`.\n\nThis method splits the string at the first occurrence of `sep`,\nand returns 3 elements containing the part before the separator,\nthe separator itself, and the part after the separator.\nIf the separator is not found, return 3 elements containing the string itself, followed by two empty strings.\n\nParameters\n----------\nsep : str, default whitespace\n    String to split on.\nexpand : bool, default True\n    If True, return DataFrame/MultiIndex expanding dimensionality.\n    If False, return Series/Index.\n\nReturns\n-------\nDataFrame/MultiIndex or Series/Index of objects\n\nSee Also\n--------\nrpartition : Split the string at the last occurrence of `sep`.\nSeries.str.split : Split strings around given separators.\nstr.partition : Standard library version.\n\nExamples\n--------\n\n>>> s = pd.Series(['Linda van der Berg', 'George Pitt-Rivers'])\n>>> s\n0    Linda van der Berg\n1    George Pitt-Rivers\ndtype: object\n\n>>> s.str.partition()\n        0  1             2\n0   Linda     van der Berg\n1  George      Pitt-Rivers\n\nTo partition by the last space instead of the first one:\n\n>>> s.str.rpartition()\n               0  1            2\n0  Linda van der            Berg\n1         George     Pitt-Rivers\n\nTo partition by something different than a space:\n\n>>> s.str.partition('-')\n                    0  1       2\n0  Linda van der Berg\n1         George Pitt  -  Rivers\n\nTo return a Series containing tuples instead of a DataFrame:\n\n>>> s.str.partition('-', expand=False)\n0    (Linda van der Berg, , )\n1    (George Pitt, -, Rivers)\ndtype: object\n\nAlso available on indices:\n\n>>> idx = pd.Index(['X 123', 'Y 999'])\n>>> idx\nIndex(['X 123', 'Y 999'], dtype='object')\n\nWhich will create a MultiIndex:\n\n>>> idx.str.partition()\nMultiIndex([('X', ' ', '123'),\n            ('Y', ' ', '999')],\n           )\n\nOr an index with tuples with ``expand=False``:\n\n>>> idx.str.partition(expand=False)\nIndex([('X', ' ', '123'), ('Y', ' ', '999')], dtype='object')"
  },
  {
    "symbol": "Series.str.removeprefix",
    "signature": "(prefix: 'str')",
    "doc": "Remove a prefix from an object series.\n\nIf the prefix is not present, the original string will be returned.\n\nParameters\n----------\nprefix : str\n    Remove the prefix of the string.\n\nReturns\n-------\nSeries/Index: object\n    The Series or Index with given prefix removed.\n\nSee Also\n--------\nSeries.str.removesuffix : Remove a suffix from an object series.\n\nExamples\n--------\n>>> s = pd.Series([\"str_foo\", \"str_bar\", \"no_prefix\"])\n>>> s\n0    str_foo\n1    str_bar\n2    no_prefix\ndtype: object\n>>> s.str.removeprefix(\"str_\")\n0    foo\n1    bar\n2    no_prefix\ndtype: object\n\n>>> s = pd.Series([\"foo_str\", \"bar_str\", \"no_suffix\"])\n>>> s\n0    foo_str\n1    bar_str\n2    no_suffix\ndtype: object\n>>> s.str.removesuffix(\"_str\")\n0    foo\n1    bar\n2    no_suffix\ndtype: object"
  },
  {
    "symbol": "Series.str.removesuffix",
    "signature": "(suffix: 'str')",
    "doc": "Remove a suffix from an object series.\n\nIf the suffix is not present, the original string will be returned.\n\nParameters\n----------\nsuffix : str\n    Remove the suffix of the string.\n\nReturns\n-------\nSeries/Index: object\n    The Series or Index with given suffix removed.\n\nSee Also\n--------\nSeries.str.removeprefix : Remove a prefix from an object series.\n\nExamples\n--------\n>>> s = pd.Series([\"str_foo\", \"str_bar\", \"no_prefix\"])\n>>> s\n0    str_foo\n1    str_bar\n2    no_prefix\ndtype: object\n>>> s.str.removeprefix(\"str_\")\n0    foo\n1    bar\n2    no_prefix\ndtype: object\n\n>>> s = pd.Series([\"foo_str\", \"bar_str\", \"no_suffix\"])\n>>> s\n0    foo_str\n1    bar_str\n2    no_suffix\ndtype: object\n>>> s.str.removesuffix(\"_str\")\n0    foo\n1    bar\n2    no_suffix\ndtype: object"
  },
  {
    "symbol": "Series.str.repeat",
    "signature": "(repeats)",
    "doc": "Duplicate each string in the Series or Index.\n\nParameters\n----------\nrepeats : int or sequence of int\n    Same value for all (int) or different value per (sequence).\n\nReturns\n-------\nSeries or pandas.Index\n    Series or Index of repeated string objects specified by\n    input parameter repeats.\n\nExamples\n--------\n>>> s = pd.Series(['a', 'b', 'c'])\n>>> s\n0    a\n1    b\n2    c\ndtype: object\n\nSingle int repeats string in Series\n\n>>> s.str.repeat(repeats=2)\n0    aa\n1    bb\n2    cc\ndtype: object\n\nSequence of int repeats corresponding string in Series\n\n>>> s.str.repeat(repeats=[1, 2, 3])\n0      a\n1     bb\n2    ccc\ndtype: object"
  },
  {
    "symbol": "Series.str.replace",
    "signature": "(pat: 'str | re.Pattern', repl: 'str | Callable', n: 'int' = -1, case: 'bool | None' = None, flags: 'int' = 0, regex: 'bool' = False)",
    "doc": "Replace each occurrence of pattern/regex in the Series/Index.\n\nEquivalent to :meth:`str.replace` or :func:`re.sub`, depending on\nthe regex value.\n\nParameters\n----------\npat : str or compiled regex\n    String can be a character sequence or regular expression.\nrepl : str or callable\n    Replacement string or a callable. The callable is passed the regex\n    match object and must return a replacement string to be used.\n    See :func:`re.sub`.\nn : int, default -1 (all)\n    Number of replacements to make from start.\ncase : bool, default None\n    Determines if replace is case sensitive:\n\n    - If True, case sensitive (the default if `pat` is a string)\n    - Set to False for case insensitive\n    - Cannot be set if `pat` is a compiled regex.\n\nflags : int, default 0 (no flags)\n    Regex module flags, e.g. re.IGNORECASE. Cannot be set if `pat` is a compiled\n    regex.\nregex : bool, default False\n    Determines if the passed-in pattern is a regular expression:\n\n    - If True, assumes the passed-in pattern is a regular expression.\n    - If False, treats the pattern as a literal string\n    - Cannot be set to False if `pat` is a compiled regex or `repl` is\n      a callable.\n\nReturns\n-------\nSeries or Index of object\n    A copy of the object with all matching occurrences of `pat` replaced by\n    `repl`.\n\nRaises\n------\nValueError\n    * if `regex` is False and `repl` is a callable or `pat` is a compiled\n      regex\n    * if `pat` is a compiled regex and `case` or `flags` is set\n\nNotes\n-----\nWhen `pat` is a compiled regex, all flags should be included in the\ncompiled regex. Use of `case`, `flags`, or `regex=False` with a compiled\nregex will raise an error.\n\nExamples\n--------\nWhen `pat` is a string and `regex` is True, the given `pat`\nis compiled as a regex. When `repl` is a string, it replaces matching\nregex patterns as with :meth:`re.sub`. NaN value(s) in the Series are\nleft as is:\n\n>>> pd.Series(['foo', 'fuz', np.nan]).str.replace('f.', 'ba', regex=True)\n0    bao\n1    baz\n2    NaN\ndtype: object\n\nWhen `pat` is a string and `regex` is False, every `pat` is replaced with\n`repl` as with :meth:`str.replace`:\n\n>>> pd.Series(['f.o', 'fuz', np.nan]).str.replace('f.', 'ba', regex=False)\n0    bao\n1    fuz\n2    NaN\ndtype: object\n\nWhen `repl` is a callable, it is called on every `pat` using\n:func:`re.sub`. The callable should expect one positional argument\n(a regex object) and return a string.\n\nTo get the idea:\n\n>>> pd.Series(['foo', 'fuz', np.nan]).str.replace('f', repr, regex=True)\n0    <re.Match object; span=(0, 1), match='f'>oo\n1    <re.Match object; span=(0, 1), match='f'>uz\n2                                            NaN\ndtype: object\n\nReverse every lowercase alphabetic word:\n\n>>> repl = lambda m: m.group(0)[::-1]\n>>> ser = pd.Series(['foo 123', 'bar baz', np.nan])\n>>> ser.str.replace(r'[a-z]+', repl, regex=True)\n0    oof 123\n1    rab zab\n2        NaN\ndtype: object\n\nUsing regex groups (extract second group and swap case):\n\n>>> pat = r\"(?P<one>\\w+) (?P<two>\\w+) (?P<three>\\w+)\"\n>>> repl = lambda m: m.group('two').swapcase()\n>>> ser = pd.Series(['One Two Three', 'Foo Bar Baz'])\n>>> ser.str.replace(pat, repl, regex=True)\n0    tWO\n1    bAR\ndtype: object\n\nUsing a compiled regex with flags\n\n>>> import re\n>>> regex_pat = re.compile(r'FUZ', flags=re.IGNORECASE)\n>>> pd.Series(['foo', 'fuz', np.nan]).str.replace(regex_pat, 'bar', regex=True)\n0    foo\n1    bar\n2    NaN\ndtype: object"
  },
  {
    "symbol": "Series.str.rfind",
    "signature": "(sub, start: 'int' = 0, end=None)",
    "doc": "Return highest indexes in each strings in the Series/Index.\n\nEach of returned indexes corresponds to the position where the\nsubstring is fully contained between [start:end]. Return -1 on\nfailure. Equivalent to standard :meth:`str.rfind`.\n\nParameters\n----------\nsub : str\n    Substring being searched.\nstart : int\n    Left edge index.\nend : int\n    Right edge index.\n\nReturns\n-------\nSeries or Index of int.\n\nSee Also\n--------\nfind : Return lowest indexes in each strings.\n\nExamples\n--------\nFor Series.str.find:\n\n>>> ser = pd.Series([\"cow_\", \"duck_\", \"do_ve\"])\n>>> ser.str.find(\"_\")\n0   3\n1   4\n2   2\ndtype: int64\n\nFor Series.str.rfind:\n\n>>> ser = pd.Series([\"_cow_\", \"duck_\", \"do_v_e\"])\n>>> ser.str.rfind(\"_\")\n0   4\n1   4\n2   4\ndtype: int64"
  },
  {
    "symbol": "Series.str.rindex",
    "signature": "(sub, start: 'int' = 0, end=None)",
    "doc": "Return highest indexes in each string in Series/Index.\n\nEach of the returned indexes corresponds to the position where the\nsubstring is fully contained between [start:end]. This is the same\nas ``str.rfind`` except instead of returning -1, it raises a\nValueError when the substring is not found. Equivalent to standard\n``str.rindex``.\n\nParameters\n----------\nsub : str\n    Substring being searched.\nstart : int\n    Left edge index.\nend : int\n    Right edge index.\n\nReturns\n-------\nSeries or Index of object\n\nSee Also\n--------\nindex : Return lowest indexes in each strings.\n\nExamples\n--------\nFor Series.str.index:\n\n>>> ser = pd.Series([\"horse\", \"eagle\", \"donkey\"])\n>>> ser.str.index(\"e\")\n0   4\n1   0\n2   4\ndtype: int64\n\nFor Series.str.rindex:\n\n>>> ser = pd.Series([\"Deer\", \"eagle\", \"Sheep\"])\n>>> ser.str.rindex(\"e\")\n0   2\n1   4\n2   3\ndtype: int64"
  },
  {
    "symbol": "Series.str.rjust",
    "signature": "(width: 'int', fillchar: 'str' = ' ')",
    "doc": "Pad left side of strings in the Series/Index.\n\nEquivalent to :meth:`str.rjust`.\n\nParameters\n----------\nwidth : int\n    Minimum width of resulting string; additional characters will be filled\n    with ``fillchar``.\nfillchar : str\n    Additional character for filling, default is whitespace.\n\nReturns\n-------\nSeries/Index of objects.\n\nExamples\n--------\nFor Series.str.center:\n\n>>> ser = pd.Series(['dog', 'bird', 'mouse'])\n>>> ser.str.center(8, fillchar='.')\n0   ..dog...\n1   ..bird..\n2   .mouse..\ndtype: object\n\nFor Series.str.ljust:\n\n>>> ser = pd.Series(['dog', 'bird', 'mouse'])\n>>> ser.str.ljust(8, fillchar='.')\n0   dog.....\n1   bird....\n2   mouse...\ndtype: object\n\nFor Series.str.rjust:\n\n>>> ser = pd.Series(['dog', 'bird', 'mouse'])\n>>> ser.str.rjust(8, fillchar='.')\n0   .....dog\n1   ....bird\n2   ...mouse\ndtype: object"
  },
  {
    "symbol": "Series.str.rpartition",
    "signature": "(sep: 'str' = ' ', expand: 'bool' = True)",
    "doc": "Split the string at the last occurrence of `sep`.\n\nThis method splits the string at the last occurrence of `sep`,\nand returns 3 elements containing the part before the separator,\nthe separator itself, and the part after the separator.\nIf the separator is not found, return 3 elements containing two empty strings, followed by the string itself.\n\nParameters\n----------\nsep : str, default whitespace\n    String to split on.\nexpand : bool, default True\n    If True, return DataFrame/MultiIndex expanding dimensionality.\n    If False, return Series/Index.\n\nReturns\n-------\nDataFrame/MultiIndex or Series/Index of objects\n\nSee Also\n--------\npartition : Split the string at the first occurrence of `sep`.\nSeries.str.split : Split strings around given separators.\nstr.partition : Standard library version.\n\nExamples\n--------\n\n>>> s = pd.Series(['Linda van der Berg', 'George Pitt-Rivers'])\n>>> s\n0    Linda van der Berg\n1    George Pitt-Rivers\ndtype: object\n\n>>> s.str.partition()\n        0  1             2\n0   Linda     van der Berg\n1  George      Pitt-Rivers\n\nTo partition by the last space instead of the first one:\n\n>>> s.str.rpartition()\n               0  1            2\n0  Linda van der            Berg\n1         George     Pitt-Rivers\n\nTo partition by something different than a space:\n\n>>> s.str.partition('-')\n                    0  1       2\n0  Linda van der Berg\n1         George Pitt  -  Rivers\n\nTo return a Series containing tuples instead of a DataFrame:\n\n>>> s.str.partition('-', expand=False)\n0    (Linda van der Berg, , )\n1    (George Pitt, -, Rivers)\ndtype: object\n\nAlso available on indices:\n\n>>> idx = pd.Index(['X 123', 'Y 999'])\n>>> idx\nIndex(['X 123', 'Y 999'], dtype='object')\n\nWhich will create a MultiIndex:\n\n>>> idx.str.partition()\nMultiIndex([('X', ' ', '123'),\n            ('Y', ' ', '999')],\n           )\n\nOr an index with tuples with ``expand=False``:\n\n>>> idx.str.partition(expand=False)\nIndex([('X', ' ', '123'), ('Y', ' ', '999')], dtype='object')"
  },
  {
    "symbol": "Series.str.rsplit",
    "signature": "(pat=None, *, n=-1, expand: 'bool' = False)",
    "doc": "Split strings around given separator/delimiter.\n\nSplits the string in the Series/Index from the end,\nat the specified delimiter string.\n\nParameters\n----------\npat : str, optional\n    String to split on.\n    If not specified, split on whitespace.\nn : int, default -1 (all)\n    Limit number of splits in output.\n    ``None``, 0 and -1 will be interpreted as return all splits.\nexpand : bool, default False\n    Expand the split strings into separate columns.\n\n    - If ``True``, return DataFrame/MultiIndex expanding dimensionality.\n    - If ``False``, return Series/Index, containing lists of strings.\n\nReturns\n-------\nSeries, Index, DataFrame or MultiIndex\n    Type matches caller unless ``expand=True`` (see Notes).\n\nSee Also\n--------\nSeries.str.split : Split strings around given separator/delimiter.\nSeries.str.rsplit : Splits string around given separator/delimiter,\n    starting from the right.\nSeries.str.join : Join lists contained as elements in the Series/Index\n    with passed delimiter.\nstr.split : Standard library version for split.\nstr.rsplit : Standard library version for rsplit.\n\nNotes\n-----\nThe handling of the `n` keyword depends on the number of found splits:\n\n- If found splits > `n`,  make first `n` splits only\n- If found splits <= `n`, make all splits\n- If for a certain row the number of found splits < `n`,\n  append `None` for padding up to `n` if ``expand=True``\n\nIf using ``expand=True``, Series and Index callers return DataFrame and\nMultiIndex objects, respectively.\n\nExamples\n--------\n>>> s = pd.Series(\n...     [\n...         \"this is a regular sentence\",\n...         \"https://docs.python.org/3/tutorial/index.html\",\n...         np.nan\n...     ]\n... )\n>>> s\n0                       this is a regular sentence\n1    https://docs.python.org/3/tutorial/index.html\n2                                              NaN\ndtype: object\n\nIn the default setting, the string is split by whitespace.\n\n>>> s.str.split()\n0                   [this, is, a, regular, sentence]\n1    [https://docs.python.org/3/tutorial/index.html]\n2                                                NaN\ndtype: object\n\nWithout the `n` parameter, the outputs of `rsplit` and `split`\nare identical.\n\n>>> s.str.rsplit()\n0                   [this, is, a, regular, sentence]\n1    [https://docs.python.org/3/tutorial/index.html]\n2                                                NaN\ndtype: object\n\nThe `n` parameter can be used to limit the number of splits on the\ndelimiter. The outputs of `split` and `rsplit` are different.\n\n>>> s.str.split(n=2)\n0                     [this, is, a regular sentence]\n1    [https://docs.python.org/3/tutorial/index.html]\n2                                                NaN\ndtype: object\n\n>>> s.str.rsplit(n=2)\n0                     [this is a, regular, sentence]\n1    [https://docs.python.org/3/tutorial/index.html]\n2                                                NaN\ndtype: object\n\nThe `pat` parameter can be used to split by other characters.\n\n>>> s.str.split(pat=\"/\")\n0                         [this is a regular sentence]\n1    [https:, , docs.python.org, 3, tutorial, index...\n2                                                  NaN\ndtype: object\n\nWhen using ``expand=True``, the split elements will expand out into\nseparate columns. If NaN is present, it is propagated throughout\nthe columns during the split.\n\n>>> s.str.split(expand=True)\n                                               0     1     2        3         4\n0                                           this    is     a  regular  sentence\n1  https://docs.python.org/3/tutorial/index.html  None  None     None      None\n2                                            NaN   NaN   NaN      NaN       NaN\n\nFor slightly more complex use cases like splitting the html document name\nfrom a url, a combination of parameter settings can be used.\n\n>>> s.str.rsplit(\"/\", n=1, expand=True)\n                                    0           1\n0          this is a regular sentence        None\n1  https://docs.python.org/3/tutorial  index.html\n2                                 NaN         NaN"
  },
  {
    "symbol": "Series.str.rstrip",
    "signature": "(to_strip=None)",
    "doc": "Remove trailing characters.\n\nStrip whitespaces (including newlines) or a set of specified characters\nfrom each string in the Series/Index from right side.\nReplaces any non-strings in Series with NaNs.\nEquivalent to :meth:`str.rstrip`.\n\nParameters\n----------\nto_strip : str or None, default None\n    Specifying the set of characters to be removed.\n    All combinations of this set of characters will be stripped.\n    If None then whitespaces are removed.\n\nReturns\n-------\nSeries or Index of object\n\nSee Also\n--------\nSeries.str.strip : Remove leading and trailing characters in Series/Index.\nSeries.str.lstrip : Remove leading characters in Series/Index.\nSeries.str.rstrip : Remove trailing characters in Series/Index.\n\nExamples\n--------\n>>> s = pd.Series(['1. Ant.  ', '2. Bee!\\n', '3. Cat?\\t', np.nan, 10, True])\n>>> s\n0    1. Ant.\n1    2. Bee!\\n\n2    3. Cat?\\t\n3          NaN\n4           10\n5         True\ndtype: object\n\n>>> s.str.strip()\n0    1. Ant.\n1    2. Bee!\n2    3. Cat?\n3        NaN\n4        NaN\n5        NaN\ndtype: object\n\n>>> s.str.lstrip('123.')\n0    Ant.\n1    Bee!\\n\n2    Cat?\\t\n3       NaN\n4       NaN\n5       NaN\ndtype: object\n\n>>> s.str.rstrip('.!? \\n\\t')\n0    1. Ant\n1    2. Bee\n2    3. Cat\n3       NaN\n4       NaN\n5       NaN\ndtype: object\n\n>>> s.str.strip('123.!? \\n\\t')\n0    Ant\n1    Bee\n2    Cat\n3    NaN\n4    NaN\n5    NaN\ndtype: object"
  },
  {
    "symbol": "Series.str.slice",
    "signature": "(start=None, stop=None, step=None)",
    "doc": "Slice substrings from each element in the Series or Index.\n\nParameters\n----------\nstart : int, optional\n    Start position for slice operation.\nstop : int, optional\n    Stop position for slice operation.\nstep : int, optional\n    Step size for slice operation.\n\nReturns\n-------\nSeries or Index of object\n    Series or Index from sliced substring from original string object.\n\nSee Also\n--------\nSeries.str.slice_replace : Replace a slice with a string.\nSeries.str.get : Return element at position.\n    Equivalent to `Series.str.slice(start=i, stop=i+1)` with `i`\n    being the position.\n\nExamples\n--------\n>>> s = pd.Series([\"koala\", \"dog\", \"chameleon\"])\n>>> s\n0        koala\n1          dog\n2    chameleon\ndtype: object\n\n>>> s.str.slice(start=1)\n0        oala\n1          og\n2    hameleon\ndtype: object\n\n>>> s.str.slice(start=-1)\n0           a\n1           g\n2           n\ndtype: object\n\n>>> s.str.slice(stop=2)\n0    ko\n1    do\n2    ch\ndtype: object\n\n>>> s.str.slice(step=2)\n0      kaa\n1       dg\n2    caeen\ndtype: object\n\n>>> s.str.slice(start=0, stop=5, step=3)\n0    kl\n1     d\n2    cm\ndtype: object\n\nEquivalent behaviour to:\n\n>>> s.str[0:5:3]\n0    kl\n1     d\n2    cm\ndtype: object"
  },
  {
    "symbol": "Series.str.slice_replace",
    "signature": "(start=None, stop=None, repl=None)",
    "doc": "Replace a positional slice of a string with another value.\n\nParameters\n----------\nstart : int, optional\n    Left index position to use for the slice. If not specified (None),\n    the slice is unbounded on the left, i.e. slice from the start\n    of the string.\nstop : int, optional\n    Right index position to use for the slice. If not specified (None),\n    the slice is unbounded on the right, i.e. slice until the\n    end of the string.\nrepl : str, optional\n    String for replacement. If not specified (None), the sliced region\n    is replaced with an empty string.\n\nReturns\n-------\nSeries or Index\n    Same type as the original object.\n\nSee Also\n--------\nSeries.str.slice : Just slicing without replacement.\n\nExamples\n--------\n>>> s = pd.Series(['a', 'ab', 'abc', 'abdc', 'abcde'])\n>>> s\n0        a\n1       ab\n2      abc\n3     abdc\n4    abcde\ndtype: object\n\nSpecify just `start`, meaning replace `start` until the end of the\nstring with `repl`.\n\n>>> s.str.slice_replace(1, repl='X')\n0    aX\n1    aX\n2    aX\n3    aX\n4    aX\ndtype: object\n\nSpecify just `stop`, meaning the start of the string to `stop` is replaced\nwith `repl`, and the rest of the string is included.\n\n>>> s.str.slice_replace(stop=2, repl='X')\n0       X\n1       X\n2      Xc\n3     Xdc\n4    Xcde\ndtype: object\n\nSpecify `start` and `stop`, meaning the slice from `start` to `stop` is\nreplaced with `repl`. Everything before or after `start` and `stop` is\nincluded as is.\n\n>>> s.str.slice_replace(start=1, stop=3, repl='X')\n0      aX\n1      aX\n2      aX\n3     aXc\n4    aXde\ndtype: object"
  },
  {
    "symbol": "Series.str.split",
    "signature": "(pat: 'str | re.Pattern | None' = None, *, n=-1, expand: 'bool' = False, regex: 'bool | None' = None)",
    "doc": "Split strings around given separator/delimiter.\n\nSplits the string in the Series/Index from the beginning,\nat the specified delimiter string.\n\nParameters\n----------\npat : str or compiled regex, optional\n    String or regular expression to split on.\n    If not specified, split on whitespace.\nn : int, default -1 (all)\n    Limit number of splits in output.\n    ``None``, 0 and -1 will be interpreted as return all splits.\nexpand : bool, default False\n    Expand the split strings into separate columns.\n\n    - If ``True``, return DataFrame/MultiIndex expanding dimensionality.\n    - If ``False``, return Series/Index, containing lists of strings.\n\nregex : bool, default None\n    Determines if the passed-in pattern is a regular expression:\n\n    - If ``True``, assumes the passed-in pattern is a regular expression\n    - If ``False``, treats the pattern as a literal string.\n    - If ``None`` and `pat` length is 1, treats `pat` as a literal string.\n    - If ``None`` and `pat` length is not 1, treats `pat` as a regular expression.\n    - Cannot be set to False if `pat` is a compiled regex\n\n    .. versionadded:: 1.4.0\n\nReturns\n-------\nSeries, Index, DataFrame or MultiIndex\n    Type matches caller unless ``expand=True`` (see Notes).\n\n                  Raises\n                  ------\n                  ValueError\n                      * if `regex` is False and `pat` is a compiled regex\n\nSee Also\n--------\nSeries.str.split : Split strings around given separator/delimiter.\nSeries.str.rsplit : Splits string around given separator/delimiter,\n    starting from the right.\nSeries.str.join : Join lists contained as elements in the Series/Index\n    with passed delimiter.\nstr.split : Standard library version for split.\nstr.rsplit : Standard library version for rsplit.\n\nNotes\n-----\nThe handling of the `n` keyword depends on the number of found splits:\n\n- If found splits > `n`,  make first `n` splits only\n- If found splits <= `n`, make all splits\n- If for a certain row the number of found splits < `n`,\n  append `None` for padding up to `n` if ``expand=True``\n\nIf using ``expand=True``, Series and Index callers return DataFrame and\nMultiIndex objects, respectively.\n\nUse of `regex =False` with a `pat` as a compiled regex will raise an error.\n\nExamples\n--------\n>>> s = pd.Series(\n...     [\n...         \"this is a regular sentence\",\n...         \"https://docs.python.org/3/tutorial/index.html\",\n...         np.nan\n...     ]\n... )\n>>> s\n0                       this is a regular sentence\n1    https://docs.python.org/3/tutorial/index.html\n2                                              NaN\ndtype: object\n\nIn the default setting, the string is split by whitespace.\n\n>>> s.str.split()\n0                   [this, is, a, regular, sentence]\n1    [https://docs.python.org/3/tutorial/index.html]\n2                                                NaN\ndtype: object\n\nWithout the `n` parameter, the outputs of `rsplit` and `split`\nare identical.\n\n>>> s.str.rsplit()\n0                   [this, is, a, regular, sentence]\n1    [https://docs.python.org/3/tutorial/index.html]\n2                                                NaN\ndtype: object\n\nThe `n` parameter can be used to limit the number of splits on the\ndelimiter. The outputs of `split` and `rsplit` are different.\n\n>>> s.str.split(n=2)\n0                     [this, is, a regular sentence]\n1    [https://docs.python.org/3/tutorial/index.html]\n2                                                NaN\ndtype: object\n\n>>> s.str.rsplit(n=2)\n0                     [this is a, regular, sentence]\n1    [https://docs.python.org/3/tutorial/index.html]\n2                                                NaN\ndtype: object\n\nThe `pat` parameter can be used to split by other characters.\n\n>>> s.str.split(pat=\"/\")\n0                         [this is a regular sentence]\n1    [https:, , docs.python.org, 3, tutorial, index...\n2                                                  NaN\ndtype: object\n\nWhen using ``expand=True``, the split elements will expand out into\nseparate columns. If NaN is present, it is propagated throughout\nthe columns during the split.\n\n>>> s.str.split(expand=True)\n                                               0     1     2        3         4\n0                                           this    is     a  regular  sentence\n1  https://docs.python.org/3/tutorial/index.html  None  None     None      None\n2                                            NaN   NaN   NaN      NaN       NaN\n\nFor slightly more complex use cases like splitting the html document name\nfrom a url, a combination of parameter settings can be used.\n\n>>> s.str.rsplit(\"/\", n=1, expand=True)\n                                    0           1\n0          this is a regular sentence        None\n1  https://docs.python.org/3/tutorial  index.html\n2                                 NaN         NaN\n\nRemember to escape special characters when explicitly using regular expressions.\n\n>>> s = pd.Series([\"foo and bar plus baz\"])\n>>> s.str.split(r\"and|plus\", expand=True)\n    0   1   2\n0 foo bar baz\n\nRegular expressions can be used to handle urls or file names.\nWhen `pat` is a string and ``regex=None`` (the default), the given `pat` is compiled\nas a regex only if ``len(pat) != 1``.\n\n>>> s = pd.Series(['foojpgbar.jpg'])\n>>> s.str.split(r\".\", expand=True)\n           0    1\n0  foojpgbar  jpg\n\n>>> s.str.split(r\"\\.jpg\", expand=True)\n           0 1\n0  foojpgbar\n\nWhen ``regex=True``, `pat` is interpreted as a regex\n\n>>> s.str.split(r\"\\.jpg\", regex=True, expand=True)\n           0 1\n0  foojpgbar\n\nA compiled regex can be passed as `pat`\n\n>>> import re\n>>> s.str.split(re.compile(r\"\\.jpg\"), expand=True)\n           0 1\n0  foojpgbar\n\nWhen ``regex=False``, `pat` is interpreted as the string itself\n\n>>> s.str.split(r\"\\.jpg\", regex=False, expand=True)\n               0\n0  foojpgbar.jpg"
  },
  {
    "symbol": "Series.str.startswith",
    "signature": "(pat: 'str | tuple[str, ...]', na: 'Scalar | lib.NoDefault' = <no_default>) -> 'Series | Index'",
    "doc": "Test if the start of each string element matches a pattern.\n\nEquivalent to :meth:`str.startswith`.\n\nParameters\n----------\npat : str or tuple[str, ...]\n    Character sequence or tuple of strings. Regular expressions are not\n    accepted.\nna : scalar, optional\n    Object shown if element tested is not a string. The default depends\n    on dtype of the array. For object-dtype, ``numpy.nan`` is used.\n    For the nullable ``StringDtype``, ``pandas.NA`` is used.\n    For the ``\"str\"`` dtype, ``False`` is used.\n\nReturns\n-------\nSeries or Index of bool\n    A Series of booleans indicating whether the given pattern matches\n    the start of each string element.\n\nSee Also\n--------\nstr.startswith : Python standard library string method.\nSeries.str.endswith : Same as startswith, but tests the end of string.\nSeries.str.contains : Tests if string element contains a pattern.\n\nExamples\n--------\n>>> s = pd.Series(['bat', 'Bear', 'cat', np.nan])\n>>> s\n0     bat\n1    Bear\n2     cat\n3     NaN\ndtype: object\n\n>>> s.str.startswith('b')\n0     True\n1    False\n2    False\n3      NaN\ndtype: object\n\n>>> s.str.startswith(('b', 'B'))\n0     True\n1     True\n2    False\n3      NaN\ndtype: object\n\nSpecifying `na` to be `False` instead of `NaN`.\n\n>>> s.str.startswith('b', na=False)\n0     True\n1    False\n2    False\n3    False\ndtype: bool"
  },
  {
    "symbol": "Series.str.strip",
    "signature": "(to_strip=None)",
    "doc": "Remove leading and trailing characters.\n\nStrip whitespaces (including newlines) or a set of specified characters\nfrom each string in the Series/Index from left and right sides.\nReplaces any non-strings in Series with NaNs.\nEquivalent to :meth:`str.strip`.\n\nParameters\n----------\nto_strip : str or None, default None\n    Specifying the set of characters to be removed.\n    All combinations of this set of characters will be stripped.\n    If None then whitespaces are removed.\n\nReturns\n-------\nSeries or Index of object\n\nSee Also\n--------\nSeries.str.strip : Remove leading and trailing characters in Series/Index.\nSeries.str.lstrip : Remove leading characters in Series/Index.\nSeries.str.rstrip : Remove trailing characters in Series/Index.\n\nExamples\n--------\n>>> s = pd.Series(['1. Ant.  ', '2. Bee!\\n', '3. Cat?\\t', np.nan, 10, True])\n>>> s\n0    1. Ant.\n1    2. Bee!\\n\n2    3. Cat?\\t\n3          NaN\n4           10\n5         True\ndtype: object\n\n>>> s.str.strip()\n0    1. Ant.\n1    2. Bee!\n2    3. Cat?\n3        NaN\n4        NaN\n5        NaN\ndtype: object\n\n>>> s.str.lstrip('123.')\n0    Ant.\n1    Bee!\\n\n2    Cat?\\t\n3       NaN\n4       NaN\n5       NaN\ndtype: object\n\n>>> s.str.rstrip('.!? \\n\\t')\n0    1. Ant\n1    2. Bee\n2    3. Cat\n3       NaN\n4       NaN\n5       NaN\ndtype: object\n\n>>> s.str.strip('123.!? \\n\\t')\n0    Ant\n1    Bee\n2    Cat\n3    NaN\n4    NaN\n5    NaN\ndtype: object"
  },
  {
    "symbol": "Series.str.swapcase",
    "signature": "()",
    "doc": "Convert strings in the Series/Index to be swapcased.\n\nEquivalent to :meth:`str.swapcase`.\n\nReturns\n-------\nSeries or Index of object\n\nSee Also\n--------\nSeries.str.lower : Converts all characters to lowercase.\nSeries.str.upper : Converts all characters to uppercase.\nSeries.str.title : Converts first character of each word to uppercase and\n    remaining to lowercase.\nSeries.str.capitalize : Converts first character to uppercase and\n    remaining to lowercase.\nSeries.str.swapcase : Converts uppercase to lowercase and lowercase to\n    uppercase.\nSeries.str.casefold: Removes all case distinctions in the string.\n\nExamples\n--------\n>>> s = pd.Series(['lower', 'CAPITALS', 'this is a sentence', 'SwApCaSe'])\n>>> s\n0                 lower\n1              CAPITALS\n2    this is a sentence\n3              SwApCaSe\ndtype: object\n\n>>> s.str.lower()\n0                 lower\n1              capitals\n2    this is a sentence\n3              swapcase\ndtype: object\n\n>>> s.str.upper()\n0                 LOWER\n1              CAPITALS\n2    THIS IS A SENTENCE\n3              SWAPCASE\ndtype: object\n\n>>> s.str.title()\n0                 Lower\n1              Capitals\n2    This Is A Sentence\n3              Swapcase\ndtype: object\n\n>>> s.str.capitalize()\n0                 Lower\n1              Capitals\n2    This is a sentence\n3              Swapcase\ndtype: object\n\n>>> s.str.swapcase()\n0                 LOWER\n1              capitals\n2    THIS IS A SENTENCE\n3              sWaPcAsE\ndtype: object"
  },
  {
    "symbol": "Series.str.title",
    "signature": "()",
    "doc": "Convert strings in the Series/Index to titlecase.\n\nEquivalent to :meth:`str.title`.\n\nReturns\n-------\nSeries or Index of object\n\nSee Also\n--------\nSeries.str.lower : Converts all characters to lowercase.\nSeries.str.upper : Converts all characters to uppercase.\nSeries.str.title : Converts first character of each word to uppercase and\n    remaining to lowercase.\nSeries.str.capitalize : Converts first character to uppercase and\n    remaining to lowercase.\nSeries.str.swapcase : Converts uppercase to lowercase and lowercase to\n    uppercase.\nSeries.str.casefold: Removes all case distinctions in the string.\n\nExamples\n--------\n>>> s = pd.Series(['lower', 'CAPITALS', 'this is a sentence', 'SwApCaSe'])\n>>> s\n0                 lower\n1              CAPITALS\n2    this is a sentence\n3              SwApCaSe\ndtype: object\n\n>>> s.str.lower()\n0                 lower\n1              capitals\n2    this is a sentence\n3              swapcase\ndtype: object\n\n>>> s.str.upper()\n0                 LOWER\n1              CAPITALS\n2    THIS IS A SENTENCE\n3              SWAPCASE\ndtype: object\n\n>>> s.str.title()\n0                 Lower\n1              Capitals\n2    This Is A Sentence\n3              Swapcase\ndtype: object\n\n>>> s.str.capitalize()\n0                 Lower\n1              Capitals\n2    This is a sentence\n3              Swapcase\ndtype: object\n\n>>> s.str.swapcase()\n0                 LOWER\n1              capitals\n2    THIS IS A SENTENCE\n3              sWaPcAsE\ndtype: object"
  },
  {
    "symbol": "Series.str.translate",
    "signature": "(table)",
    "doc": "Map all characters in the string through the given mapping table.\n\nEquivalent to standard :meth:`str.translate`.\n\nParameters\n----------\ntable : dict\n    Table is a mapping of Unicode ordinals to Unicode ordinals, strings, or\n    None. Unmapped characters are left untouched.\n    Characters mapped to None are deleted. :meth:`str.maketrans` is a\n    helper function for making translation tables.\n\nReturns\n-------\nSeries or Index\n\nExamples\n--------\n>>> ser = pd.Series([\"El niño\", \"Françoise\"])\n>>> mytable = str.maketrans({'ñ': 'n', 'ç': 'c'})\n>>> ser.str.translate(mytable)\n0   El nino\n1   Francoise\ndtype: object"
  },
  {
    "symbol": "Series.str.upper",
    "signature": "()",
    "doc": "Convert strings in the Series/Index to uppercase.\n\nEquivalent to :meth:`str.upper`.\n\nReturns\n-------\nSeries or Index of object\n\nSee Also\n--------\nSeries.str.lower : Converts all characters to lowercase.\nSeries.str.upper : Converts all characters to uppercase.\nSeries.str.title : Converts first character of each word to uppercase and\n    remaining to lowercase.\nSeries.str.capitalize : Converts first character to uppercase and\n    remaining to lowercase.\nSeries.str.swapcase : Converts uppercase to lowercase and lowercase to\n    uppercase.\nSeries.str.casefold: Removes all case distinctions in the string.\n\nExamples\n--------\n>>> s = pd.Series(['lower', 'CAPITALS', 'this is a sentence', 'SwApCaSe'])\n>>> s\n0                 lower\n1              CAPITALS\n2    this is a sentence\n3              SwApCaSe\ndtype: object\n\n>>> s.str.lower()\n0                 lower\n1              capitals\n2    this is a sentence\n3              swapcase\ndtype: object\n\n>>> s.str.upper()\n0                 LOWER\n1              CAPITALS\n2    THIS IS A SENTENCE\n3              SWAPCASE\ndtype: object\n\n>>> s.str.title()\n0                 Lower\n1              Capitals\n2    This Is A Sentence\n3              Swapcase\ndtype: object\n\n>>> s.str.capitalize()\n0                 Lower\n1              Capitals\n2    This is a sentence\n3              Swapcase\ndtype: object\n\n>>> s.str.swapcase()\n0                 LOWER\n1              capitals\n2    THIS IS A SENTENCE\n3              sWaPcAsE\ndtype: object"
  },
  {
    "symbol": "Series.str.wrap",
    "signature": "(width: 'int', **kwargs)",
    "doc": "Wrap strings in Series/Index at specified line width.\n\nThis method has the same keyword parameters and defaults as\n:class:`textwrap.TextWrapper`.\n\nParameters\n----------\nwidth : int\n    Maximum line width.\nexpand_tabs : bool, optional\n    If True, tab characters will be expanded to spaces (default: True).\nreplace_whitespace : bool, optional\n    If True, each whitespace character (as defined by string.whitespace)\n    remaining after tab expansion will be replaced by a single space\n    (default: True).\ndrop_whitespace : bool, optional\n    If True, whitespace that, after wrapping, happens to end up at the\n    beginning or end of a line is dropped (default: True).\nbreak_long_words : bool, optional\n    If True, then words longer than width will be broken in order to ensure\n    that no lines are longer than width. If it is false, long words will\n    not be broken, and some lines may be longer than width (default: True).\nbreak_on_hyphens : bool, optional\n    If True, wrapping will occur preferably on whitespace and right after\n    hyphens in compound words, as it is customary in English. If false,\n    only whitespaces will be considered as potentially good places for line\n    breaks, but you need to set break_long_words to false if you want truly\n    insecable words (default: True).\n\nReturns\n-------\nSeries or Index\n\nNotes\n-----\nInternally, this method uses a :class:`textwrap.TextWrapper` instance with\ndefault settings. To achieve behavior matching R's stringr library str_wrap\nfunction, use the arguments:\n\n- expand_tabs = False\n- replace_whitespace = True\n- drop_whitespace = True\n- break_long_words = False\n- break_on_hyphens = False\n\nExamples\n--------\n>>> s = pd.Series(['line to be wrapped', 'another line to be wrapped'])\n>>> s.str.wrap(12)\n0             line to be\\nwrapped\n1    another line\\nto be\\nwrapped\ndtype: object"
  },
  {
    "symbol": "Series.str.zfill",
    "signature": "(width: 'int')",
    "doc": "Pad strings in the Series/Index by prepending '0' characters.\n\nStrings in the Series/Index are padded with '0' characters on the\nleft of the string to reach a total string length  `width`. Strings\nin the Series/Index with length greater or equal to `width` are\nunchanged.\n\nParameters\n----------\nwidth : int\n    Minimum length of resulting string; strings with length less\n    than `width` be prepended with '0' characters.\n\nReturns\n-------\nSeries/Index of objects.\n\nSee Also\n--------\nSeries.str.rjust : Fills the left side of strings with an arbitrary\n    character.\nSeries.str.ljust : Fills the right side of strings with an arbitrary\n    character.\nSeries.str.pad : Fills the specified sides of strings with an arbitrary\n    character.\nSeries.str.center : Fills both sides of strings with an arbitrary\n    character.\n\nNotes\n-----\nDiffers from :meth:`str.zfill` which has special handling\nfor '+'/'-' in the string.\n\nExamples\n--------\n>>> s = pd.Series(['-1', '1', '1000', 10, np.nan])\n>>> s\n0      -1\n1       1\n2    1000\n3      10\n4     NaN\ndtype: object\n\nNote that ``10`` and ``NaN`` are not strings, therefore they are\nconverted to ``NaN``. The minus sign in ``'-1'`` is treated as a\nspecial character and the zero is added to the right of it\n(:meth:`str.zfill` would have moved it to the left). ``1000``\nremains unchanged as it is longer than `width`.\n\n>>> s.str.zfill(3)\n0     -01\n1     001\n2    1000\n3     NaN\n4     NaN\ndtype: object"
  },
  {
    "symbol": "Series.sub",
    "signature": "(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'",
    "doc": "Return Subtraction of series and other, element-wise (binary operator `sub`).\n\nEquivalent to ``series - other``, but with support to substitute a fill_value for\nmissing data in either one of the inputs.\n\nParameters\n----------\nother : Series or scalar value\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result of filling (at that location) will be missing.\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.\n\nReturns\n-------\nSeries\n    The result of the operation.\n\nSee Also\n--------\nSeries.rsub : Reverse of the Subtraction operator, see\n    `Python documentation\n    <https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types>`_\n    for more details.\n\nExamples\n--------\n>>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n>>> a\na    1.0\nb    1.0\nc    1.0\nd    NaN\ndtype: float64\n>>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n>>> b\na    1.0\nb    NaN\nd    1.0\ne    NaN\ndtype: float64\n>>> a.subtract(b, fill_value=0)\na    0.0\nb    1.0\nc    1.0\nd   -1.0\ne    NaN\ndtype: float64"
  },
  {
    "symbol": "Series.subtract",
    "signature": "(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'",
    "doc": "Return Subtraction of series and other, element-wise (binary operator `sub`).\n\nEquivalent to ``series - other``, but with support to substitute a fill_value for\nmissing data in either one of the inputs.\n\nParameters\n----------\nother : Series or scalar value\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result of filling (at that location) will be missing.\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.\n\nReturns\n-------\nSeries\n    The result of the operation.\n\nSee Also\n--------\nSeries.rsub : Reverse of the Subtraction operator, see\n    `Python documentation\n    <https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types>`_\n    for more details.\n\nExamples\n--------\n>>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n>>> a\na    1.0\nb    1.0\nc    1.0\nd    NaN\ndtype: float64\n>>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n>>> b\na    1.0\nb    NaN\nd    1.0\ne    NaN\ndtype: float64\n>>> a.subtract(b, fill_value=0)\na    0.0\nb    1.0\nc    1.0\nd   -1.0\ne    NaN\ndtype: float64"
  },
  {
    "symbol": "Series.sum",
    "signature": "(self, axis: 'Axis | None' = None, skipna: 'bool' = True, numeric_only: 'bool' = False, min_count: 'int' = 0, **kwargs)",
    "doc": "Return the sum of the values over the requested axis.\n\nThis is equivalent to the method ``numpy.sum``.\n\nParameters\n----------\naxis : {index (0)}\n    Axis for the function to be applied on.\n    For `Series` this parameter is unused and defaults to 0.\n\n    .. warning::\n\n        The behavior of DataFrame.sum with ``axis=None`` is deprecated,\n        in a future version this will reduce over both axes and return a scalar\n        To retain the old behavior, pass axis=0 (or do not pass axis).\n\n    .. versionadded:: 2.0.0\n\nskipna : bool, default True\n    Exclude NA/null values when computing the result.\nnumeric_only : bool, default False\n    Include only float, int, boolean columns. Not implemented for Series.\n\nmin_count : int, default 0\n    The required number of valid values to perform the operation. If fewer than\n    ``min_count`` non-NA values are present the result will be NA.\n**kwargs\n    Additional keyword arguments to be passed to the function.\n\nReturns\n-------\nscalar or scalar\n\nSee Also\n--------\nSeries.sum : Return the sum.\nSeries.min : Return the minimum.\nSeries.max : Return the maximum.\nSeries.idxmin : Return the index of the minimum.\nSeries.idxmax : Return the index of the maximum.\nDataFrame.sum : Return the sum over the requested axis.\nDataFrame.min : Return the minimum over the requested axis.\nDataFrame.max : Return the maximum over the requested axis.\nDataFrame.idxmin : Return the index of the minimum over the requested axis.\nDataFrame.idxmax : Return the index of the maximum over the requested axis.\n\nExamples\n--------\n>>> idx = pd.MultiIndex.from_arrays([\n...     ['warm', 'warm', 'cold', 'cold'],\n...     ['dog', 'falcon', 'fish', 'spider']],\n...     names=['blooded', 'animal'])\n>>> s = pd.Series([4, 2, 0, 8], name='legs', index=idx)\n>>> s\nblooded  animal\nwarm     dog       4\n         falcon    2\ncold     fish      0\n         spider    8\nName: legs, dtype: int64\n\n>>> s.sum()\n14\n\nBy default, the sum of an empty or all-NA Series is ``0``.\n\n>>> pd.Series([], dtype=\"float64\").sum()  # min_count=0 is the default\n0.0\n\nThis can be controlled with the ``min_count`` parameter. For example, if\nyou'd like the sum of an empty series to be NaN, pass ``min_count=1``.\n\n>>> pd.Series([], dtype=\"float64\").sum(min_count=1)\nnan\n\nThanks to the ``skipna`` parameter, ``min_count`` handles all-NA and\nempty series identically.\n\n>>> pd.Series([np.nan]).sum()\n0.0\n\n>>> pd.Series([np.nan]).sum(min_count=1)\nnan"
  },
  {
    "symbol": "Series.swapaxes",
    "signature": "(self, axis1: 'Axis', axis2: 'Axis', copy: 'bool_t | None' = None) -> 'Self'",
    "doc": "Interchange axes and swap values axes appropriately.\n\n.. deprecated:: 2.1.0\n    ``swapaxes`` is deprecated and will be removed.\n    Please use ``transpose`` instead.\n\nReturns\n-------\nsame as input\n\nExamples\n--------\nPlease see examples for :meth:`DataFrame.transpose`."
  },
  {
    "symbol": "Series.swaplevel",
    "signature": "(self, i: 'Level' = -2, j: 'Level' = -1, copy: 'bool | None' = None) -> 'Series'",
    "doc": "Swap levels i and j in a :class:`MultiIndex`.\n\nDefault is to swap the two innermost levels of the index.\n\nParameters\n----------\ni, j : int or str\n    Levels of the indices to be swapped. Can pass level name as string.\ncopy : bool, default True\n            Whether to copy underlying data.\n\n            .. note::\n                The `copy` keyword will change behavior in pandas 3.0.\n                `Copy-on-Write\n                <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n                will be enabled by default, which means that all methods with a\n                `copy` keyword will use a lazy copy mechanism to defer the copy and\n                ignore the `copy` keyword. The `copy` keyword will be removed in a\n                future version of pandas.\n\n                You can already get the future behavior and improvements through\n                enabling copy on write ``pd.options.mode.copy_on_write = True``\n\nReturns\n-------\nSeries\n    Series with levels swapped in MultiIndex.\n\nExamples\n--------\n>>> s = pd.Series(\n...     [\"A\", \"B\", \"A\", \"C\"],\n...     index=[\n...         [\"Final exam\", \"Final exam\", \"Coursework\", \"Coursework\"],\n...         [\"History\", \"Geography\", \"History\", \"Geography\"],\n...         [\"January\", \"February\", \"March\", \"April\"],\n...     ],\n... )\n>>> s\nFinal exam  History     January      A\n            Geography   February     B\nCoursework  History     March        A\n            Geography   April        C\ndtype: object\n\nIn the following example, we will swap the levels of the indices.\nHere, we will swap the levels column-wise, but levels can be swapped row-wise\nin a similar manner. Note that column-wise is the default behaviour.\nBy not supplying any arguments for i and j, we swap the last and second to\nlast indices.\n\n>>> s.swaplevel()\nFinal exam  January     History         A\n            February    Geography       B\nCoursework  March       History         A\n            April       Geography       C\ndtype: object\n\nBy supplying one argument, we can choose which index to swap the last\nindex with. We can for example swap the first index with the last one as\nfollows.\n\n>>> s.swaplevel(0)\nJanuary     History     Final exam      A\nFebruary    Geography   Final exam      B\nMarch       History     Coursework      A\nApril       Geography   Coursework      C\ndtype: object\n\nWe can also define explicitly which indices we want to swap by supplying values\nfor both i and j. Here, we for example swap the first and second indices.\n\n>>> s.swaplevel(0, 1)\nHistory     Final exam  January         A\nGeography   Final exam  February        B\nHistory     Coursework  March           A\nGeography   Coursework  April           C\ndtype: object"
  },
  {
    "symbol": "Series.tail",
    "signature": "(self, n: 'int' = 5) -> 'Self'",
    "doc": "Return the last `n` rows.\n\nThis function returns last `n` rows from the object based on\nposition. It is useful for quickly verifying data, for example,\nafter sorting or appending rows.\n\nFor negative values of `n`, this function returns all rows except\nthe first `|n|` rows, equivalent to ``df[|n|:]``.\n\nIf n is larger than the number of rows, this function returns all rows.\n\nParameters\n----------\nn : int, default 5\n    Number of rows to select.\n\nReturns\n-------\ntype of caller\n    The last `n` rows of the caller object.\n\nSee Also\n--------\nDataFrame.head : The first `n` rows of the caller object.\n\nExamples\n--------\n>>> df = pd.DataFrame({'animal': ['alligator', 'bee', 'falcon', 'lion',\n...                    'monkey', 'parrot', 'shark', 'whale', 'zebra']})\n>>> df\n      animal\n0  alligator\n1        bee\n2     falcon\n3       lion\n4     monkey\n5     parrot\n6      shark\n7      whale\n8      zebra\n\nViewing the last 5 lines\n\n>>> df.tail()\n   animal\n4  monkey\n5  parrot\n6   shark\n7   whale\n8   zebra\n\nViewing the last `n` lines (three in this case)\n\n>>> df.tail(3)\n  animal\n6  shark\n7  whale\n8  zebra\n\nFor negative values of `n`\n\n>>> df.tail(-3)\n   animal\n3    lion\n4  monkey\n5  parrot\n6   shark\n7   whale\n8   zebra"
  },
  {
    "symbol": "Series.take",
    "signature": "(self, indices, axis: 'Axis' = 0, **kwargs) -> 'Self'",
    "doc": "Return the elements in the given *positional* indices along an axis.\n\nThis means that we are not indexing according to actual values in\nthe index attribute of the object. We are indexing according to the\nactual position of the element in the object.\n\nParameters\n----------\nindices : array-like\n    An array of ints indicating which positions to take.\naxis : {0 or 'index', 1 or 'columns', None}, default 0\n    The axis on which to select elements. ``0`` means that we are\n    selecting rows, ``1`` means that we are selecting columns.\n    For `Series` this parameter is unused and defaults to 0.\n**kwargs\n    For compatibility with :meth:`numpy.take`. Has no effect on the\n    output.\n\nReturns\n-------\nsame type as caller\n    An array-like containing the elements taken from the object.\n\nSee Also\n--------\nDataFrame.loc : Select a subset of a DataFrame by labels.\nDataFrame.iloc : Select a subset of a DataFrame by positions.\nnumpy.take : Take elements from an array along an axis.\n\nExamples\n--------\n>>> df = pd.DataFrame([('falcon', 'bird', 389.0),\n...                    ('parrot', 'bird', 24.0),\n...                    ('lion', 'mammal', 80.5),\n...                    ('monkey', 'mammal', np.nan)],\n...                   columns=['name', 'class', 'max_speed'],\n...                   index=[0, 2, 3, 1])\n>>> df\n     name   class  max_speed\n0  falcon    bird      389.0\n2  parrot    bird       24.0\n3    lion  mammal       80.5\n1  monkey  mammal        NaN\n\nTake elements at positions 0 and 3 along the axis 0 (default).\n\nNote how the actual indices selected (0 and 1) do not correspond to\nour selected indices 0 and 3. That's because we are selecting the 0th\nand 3rd rows, not rows whose indices equal 0 and 3.\n\n>>> df.take([0, 3])\n     name   class  max_speed\n0  falcon    bird      389.0\n1  monkey  mammal        NaN\n\nTake elements at indices 1 and 2 along the axis 1 (column selection).\n\n>>> df.take([1, 2], axis=1)\n    class  max_speed\n0    bird      389.0\n2    bird       24.0\n3  mammal       80.5\n1  mammal        NaN\n\nWe may take elements using negative integers for positive indices,\nstarting from the end of the object, just like with Python lists.\n\n>>> df.take([-1, -2])\n     name   class  max_speed\n1  monkey  mammal        NaN\n3    lion  mammal       80.5"
  },
  {
    "symbol": "Series.to_clipboard",
    "signature": "(self, *, excel: 'bool_t' = True, sep: 'str | None' = None, **kwargs) -> 'None'",
    "doc": "Copy object to the system clipboard.\n\nWrite a text representation of object to the system clipboard.\nThis can be pasted into Excel, for example.\n\nParameters\n----------\nexcel : bool, default True\n    Produce output in a csv format for easy pasting into excel.\n\n    - True, use the provided separator for csv pasting.\n    - False, write a string representation of the object to the clipboard.\n\nsep : str, default ``'\\t'``\n    Field delimiter.\n**kwargs\n    These parameters will be passed to DataFrame.to_csv.\n\nSee Also\n--------\nDataFrame.to_csv : Write a DataFrame to a comma-separated values\n    (csv) file.\nread_clipboard : Read text from clipboard and pass to read_csv.\n\nNotes\n-----\nRequirements for your platform.\n\n  - Linux : `xclip`, or `xsel` (with `PyQt4` modules)\n  - Windows : none\n  - macOS : none\n\nThis method uses the processes developed for the package `pyperclip`. A\nsolution to render any output string format is given in the examples.\n\nExamples\n--------\nCopy the contents of a DataFrame to the clipboard.\n\n>>> df = pd.DataFrame([[1, 2, 3], [4, 5, 6]], columns=['A', 'B', 'C'])\n\n>>> df.to_clipboard(sep=',')  # doctest: +SKIP\n... # Wrote the following to the system clipboard:\n... # ,A,B,C\n... # 0,1,2,3\n... # 1,4,5,6\n\nWe can omit the index by passing the keyword `index` and setting\nit to false.\n\n>>> df.to_clipboard(sep=',', index=False)  # doctest: +SKIP\n... # Wrote the following to the system clipboard:\n... # A,B,C\n... # 1,2,3\n... # 4,5,6\n\nUsing the original `pyperclip` package for any string output format.\n\n.. code-block:: python\n\n   import pyperclip\n   html = df.style.to_html()\n   pyperclip.copy(html)"
  },
  {
    "symbol": "Series.to_csv",
    "signature": "(self, path_or_buf: 'FilePath | WriteBuffer[bytes] | WriteBuffer[str] | None' = None, *, sep: 'str' = ',', na_rep: 'str' = '', float_format: 'str | Callable | None' = None, columns: 'Sequence[Hashable] | None' = None, header: 'bool_t | list[str]' = True, index: 'bool_t' = True, index_label: 'IndexLabel | None' = None, mode: 'str' = 'w', encoding: 'str | None' = None, compression: 'CompressionOptions' = 'infer', quoting: 'int | None' = None, quotechar: 'str' = '\"', lineterminator: 'str | None' = None, chunksize: 'int | None' = None, date_format: 'str | None' = None, doublequote: 'bool_t' = True, escapechar: 'str | None' = None, decimal: 'str' = '.', errors: 'OpenFileErrors' = 'strict', storage_options: 'StorageOptions | None' = None) -> 'str | None'",
    "doc": "Write object to a comma-separated values (csv) file.\n\nParameters\n----------\npath_or_buf : str, path object, file-like object, or None, default None\n    String, path object (implementing os.PathLike[str]), or file-like\n    object implementing a write() function. If None, the result is\n    returned as a string. If a non-binary file object is passed, it should\n    be opened with `newline=''`, disabling universal newlines. If a binary\n    file object is passed, `mode` might need to contain a `'b'`.\nsep : str, default ','\n    String of length 1. Field delimiter for the output file.\nna_rep : str, default ''\n    Missing data representation.\nfloat_format : str, Callable, default None\n    Format string for floating point numbers. If a Callable is given, it takes\n    precedence over other numeric formatting parameters, like decimal.\ncolumns : sequence, optional\n    Columns to write.\nheader : bool or list of str, default True\n    Write out the column names. If a list of strings is given it is\n    assumed to be aliases for the column names.\nindex : bool, default True\n    Write row names (index).\nindex_label : str or sequence, or False, default None\n    Column label for index column(s) if desired. If None is given, and\n    `header` and `index` are True, then the index names are used. A\n    sequence should be given if the object uses MultiIndex. If\n    False do not print fields for index names. Use index_label=False\n    for easier importing in R.\nmode : {'w', 'x', 'a'}, default 'w'\n    Forwarded to either `open(mode=)` or `fsspec.open(mode=)` to control\n    the file opening. Typical values include:\n\n    - 'w', truncate the file first.\n    - 'x', exclusive creation, failing if the file already exists.\n    - 'a', append to the end of file if it exists.\n\nencoding : str, optional\n    A string representing the encoding to use in the output file,\n    defaults to 'utf-8'. `encoding` is not supported if `path_or_buf`\n    is a non-binary file object.\ncompression : str or dict, default 'infer'\n    For on-the-fly compression of the output data. If 'infer' and 'path_or_buf' is\n    path-like, then detect compression from the following extensions: '.gz',\n    '.bz2', '.zip', '.xz', '.zst', '.tar', '.tar.gz', '.tar.xz' or '.tar.bz2'\n    (otherwise no compression).\n    Set to ``None`` for no compression.\n    Can also be a dict with key ``'method'`` set\n    to one of {``'zip'``, ``'gzip'``, ``'bz2'``, ``'zstd'``, ``'xz'``, ``'tar'``} and\n    other key-value pairs are forwarded to\n    ``zipfile.ZipFile``, ``gzip.GzipFile``,\n    ``bz2.BZ2File``, ``zstandard.ZstdCompressor``, ``lzma.LZMAFile`` or\n    ``tarfile.TarFile``, respectively.\n    As an example, the following could be passed for faster compression and to create\n    a reproducible gzip archive:\n    ``compression={'method': 'gzip', 'compresslevel': 1, 'mtime': 1}``.\n\n    .. versionadded:: 1.5.0\n        Added support for `.tar` files.\n\n       May be a dict with key 'method' as compression mode\n       and other entries as additional compression options if\n       compression mode is 'zip'.\n\n       Passing compression options as keys in dict is\n       supported for compression modes 'gzip', 'bz2', 'zstd', and 'zip'.\nquoting : optional constant from csv module\n    Defaults to csv.QUOTE_MINIMAL. If you have set a `float_format`\n    then floats are converted to strings and thus csv.QUOTE_NONNUMERIC\n    will treat them as non-numeric.\nquotechar : str, default '\\\"'\n    String of length 1. Character used to quote fields.\nlineterminator : str, optional\n    The newline character or character sequence to use in the output\n    file. Defaults to `os.linesep`, which depends on the OS in which\n    this method is called ('\\\\n' for linux, '\\\\r\\\\n' for Windows, i.e.).\n\n    .. versionchanged:: 1.5.0\n\n        Previously was line_terminator, changed for consistency with\n        read_csv and the standard library 'csv' module.\n\nchunksize : int or None\n    Rows to write at a time.\ndate_format : str, default None\n    Format string for datetime objects.\ndoublequote : bool, default True\n    Control quoting of `quotechar` inside a field.\nescapechar : str, default None\n    String of length 1. Character used to escape `sep` and `quotechar`\n    when appropriate.\ndecimal : str, default '.'\n    Character recognized as decimal separator. E.g. use ',' for\n    European data.\nerrors : str, default 'strict'\n    Specifies how encoding and decoding errors are to be handled.\n    See the errors argument for :func:`open` for a full list\n    of options.\n\nstorage_options : dict, optional\n    Extra options that make sense for a particular storage connection, e.g.\n    host, port, username, password, etc. For HTTP(S) URLs the key-value pairs\n    are forwarded to ``urllib.request.Request`` as header options. For other\n    URLs (e.g. starting with \"s3://\", and \"gcs://\") the key-value pairs are\n    forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more\n    details, and for more examples on storage options refer `here\n    <https://pandas.pydata.org/docs/user_guide/io.html?\n    highlight=storage_options#reading-writing-remote-files>`_.\n\nReturns\n-------\nNone or str\n    If path_or_buf is None, returns the resulting csv format as a\n    string. Otherwise returns None.\n\nSee Also\n--------\nread_csv : Load a CSV file into a DataFrame.\nto_excel : Write DataFrame to an Excel file.\n\nExamples\n--------\nCreate 'out.csv' containing 'df' without indices\n\n>>> df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n...                    'mask': ['red', 'purple'],\n...                    'weapon': ['sai', 'bo staff']})\n>>> df.to_csv('out.csv', index=False)  # doctest: +SKIP\n\nCreate 'out.zip' containing 'out.csv'\n\n>>> df.to_csv(index=False)\n'name,mask,weapon\\nRaphael,red,sai\\nDonatello,purple,bo staff\\n'\n>>> compression_opts = dict(method='zip',\n...                         archive_name='out.csv')  # doctest: +SKIP\n>>> df.to_csv('out.zip', index=False,\n...           compression=compression_opts)  # doctest: +SKIP\n\nTo write a csv file to a new folder or nested folder you will first\nneed to create it using either Pathlib or os:\n\n>>> from pathlib import Path  # doctest: +SKIP\n>>> filepath = Path('folder/subfolder/out.csv')  # doctest: +SKIP\n>>> filepath.parent.mkdir(parents=True, exist_ok=True)  # doctest: +SKIP\n>>> df.to_csv(filepath)  # doctest: +SKIP\n\n>>> import os  # doctest: +SKIP\n>>> os.makedirs('folder/subfolder', exist_ok=True)  # doctest: +SKIP\n>>> df.to_csv('folder/subfolder/out.csv')  # doctest: +SKIP"
  },
  {
    "symbol": "Series.to_dict",
    "signature": "(self, *, into: 'type[MutableMappingT] | MutableMappingT' = <class 'dict'>) -> 'MutableMappingT'",
    "doc": "Convert Series to {label -> value} dict or dict-like object.\n\nParameters\n----------\ninto : class, default dict\n    The collections.abc.MutableMapping subclass to use as the return\n    object. Can be the actual class or an empty instance of the mapping\n    type you want.  If you want a collections.defaultdict, you must\n    pass it initialized.\n\nReturns\n-------\ncollections.abc.MutableMapping\n    Key-value representation of Series.\n\nExamples\n--------\n>>> s = pd.Series([1, 2, 3, 4])\n>>> s.to_dict()\n{0: 1, 1: 2, 2: 3, 3: 4}\n>>> from collections import OrderedDict, defaultdict\n>>> s.to_dict(into=OrderedDict)\nOrderedDict([(0, 1), (1, 2), (2, 3), (3, 4)])\n>>> dd = defaultdict(list)\n>>> s.to_dict(into=dd)\ndefaultdict(<class 'list'>, {0: 1, 1: 2, 2: 3, 3: 4})"
  },
  {
    "symbol": "Series.to_excel",
    "signature": "(self, excel_writer: 'FilePath | WriteExcelBuffer | ExcelWriter', *, sheet_name: 'str' = 'Sheet1', na_rep: 'str' = '', float_format: 'str | None' = None, columns: 'Sequence[Hashable] | None' = None, header: 'Sequence[Hashable] | bool_t' = True, index: 'bool_t' = True, index_label: 'IndexLabel | None' = None, startrow: 'int' = 0, startcol: 'int' = 0, engine: \"Literal['openpyxl', 'xlsxwriter'] | None\" = None, merge_cells: 'bool_t' = True, inf_rep: 'str' = 'inf', freeze_panes: 'tuple[int, int] | None' = None, storage_options: 'StorageOptions | None' = None, engine_kwargs: 'dict[str, Any] | None' = None) -> 'None'",
    "doc": "Write object to an Excel sheet.\n\nTo write a single object to an Excel .xlsx file it is only necessary to\nspecify a target file name. To write to multiple sheets it is necessary to\ncreate an `ExcelWriter` object with a target file name, and specify a sheet\nin the file to write to.\n\nMultiple sheets may be written to by specifying unique `sheet_name`.\nWith all data written to the file it is necessary to save the changes.\nNote that creating an `ExcelWriter` object with a file name that already\nexists will result in the contents of the existing file being erased.\n\nParameters\n----------\nexcel_writer : path-like, file-like, or ExcelWriter object\n    File path or existing ExcelWriter.\nsheet_name : str, default 'Sheet1'\n    Name of sheet which will contain DataFrame.\nna_rep : str, default ''\n    Missing data representation.\nfloat_format : str, optional\n    Format string for floating point numbers. For example\n    ``float_format=\"%.2f\"`` will format 0.1234 to 0.12.\ncolumns : sequence or list of str, optional\n    Columns to write.\nheader : bool or list of str, default True\n    Write out the column names. If a list of string is given it is\n    assumed to be aliases for the column names.\nindex : bool, default True\n    Write row names (index).\nindex_label : str or sequence, optional\n    Column label for index column(s) if desired. If not specified, and\n    `header` and `index` are True, then the index names are used. A\n    sequence should be given if the DataFrame uses MultiIndex.\nstartrow : int, default 0\n    Upper left cell row to dump data frame.\nstartcol : int, default 0\n    Upper left cell column to dump data frame.\nengine : str, optional\n    Write engine to use, 'openpyxl' or 'xlsxwriter'. You can also set this\n    via the options ``io.excel.xlsx.writer`` or\n    ``io.excel.xlsm.writer``.\n\nmerge_cells : bool, default True\n    Write MultiIndex and Hierarchical Rows as merged cells.\ninf_rep : str, default 'inf'\n    Representation for infinity (there is no native representation for\n    infinity in Excel).\nfreeze_panes : tuple of int (length 2), optional\n    Specifies the one-based bottommost row and rightmost column that\n    is to be frozen.\nstorage_options : dict, optional\n    Extra options that make sense for a particular storage connection, e.g.\n    host, port, username, password, etc. For HTTP(S) URLs the key-value pairs\n    are forwarded to ``urllib.request.Request`` as header options. For other\n    URLs (e.g. starting with \"s3://\", and \"gcs://\") the key-value pairs are\n    forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more\n    details, and for more examples on storage options refer `here\n    <https://pandas.pydata.org/docs/user_guide/io.html?\n    highlight=storage_options#reading-writing-remote-files>`_.\n\n    .. versionadded:: 1.2.0\nengine_kwargs : dict, optional\n    Arbitrary keyword arguments passed to excel engine.\n\nSee Also\n--------\nto_csv : Write DataFrame to a comma-separated values (csv) file.\nExcelWriter : Class for writing DataFrame objects into excel sheets.\nread_excel : Read an Excel file into a pandas DataFrame.\nread_csv : Read a comma-separated values (csv) file into DataFrame.\nio.formats.style.Styler.to_excel : Add styles to Excel sheet.\n\nNotes\n-----\nFor compatibility with :meth:`~DataFrame.to_csv`,\nto_excel serializes lists and dicts to strings before writing.\n\nOnce a workbook has been saved it is not possible to write further\ndata without rewriting the whole workbook.\n\nExamples\n--------\n\nCreate, write to and save a workbook:\n\n>>> df1 = pd.DataFrame([['a', 'b'], ['c', 'd']],\n...                    index=['row 1', 'row 2'],\n...                    columns=['col 1', 'col 2'])\n>>> df1.to_excel(\"output.xlsx\")  # doctest: +SKIP\n\nTo specify the sheet name:\n\n>>> df1.to_excel(\"output.xlsx\",\n...              sheet_name='Sheet_name_1')  # doctest: +SKIP\n\nIf you wish to write to more than one sheet in the workbook, it is\nnecessary to specify an ExcelWriter object:\n\n>>> df2 = df1.copy()\n>>> with pd.ExcelWriter('output.xlsx') as writer:  # doctest: +SKIP\n...     df1.to_excel(writer, sheet_name='Sheet_name_1')\n...     df2.to_excel(writer, sheet_name='Sheet_name_2')\n\nExcelWriter can also be used to append to an existing Excel file:\n\n>>> with pd.ExcelWriter('output.xlsx',\n...                     mode='a') as writer:  # doctest: +SKIP\n...     df1.to_excel(writer, sheet_name='Sheet_name_3')\n\nTo set the library that is used to write the Excel file,\nyou can pass the `engine` keyword (the default engine is\nautomatically chosen depending on the file extension):\n\n>>> df1.to_excel('output1.xlsx', engine='xlsxwriter')  # doctest: +SKIP"
  },
  {
    "symbol": "Series.to_frame",
    "signature": "(self, name: 'Hashable' = <no_default>) -> 'DataFrame'",
    "doc": "Convert Series to DataFrame.\n\nParameters\n----------\nname : object, optional\n    The passed name should substitute for the series name (if it has\n    one).\n\nReturns\n-------\nDataFrame\n    DataFrame representation of Series.\n\nExamples\n--------\n>>> s = pd.Series([\"a\", \"b\", \"c\"],\n...               name=\"vals\")\n>>> s.to_frame()\n  vals\n0    a\n1    b\n2    c"
  },
  {
    "symbol": "Series.to_hdf",
    "signature": "(self, path_or_buf: 'FilePath | HDFStore', *, key: 'str', mode: \"Literal['a', 'w', 'r+']\" = 'a', complevel: 'int | None' = None, complib: \"Literal['zlib', 'lzo', 'bzip2', 'blosc'] | None\" = None, append: 'bool_t' = False, format: \"Literal['fixed', 'table'] | None\" = None, index: 'bool_t' = True, min_itemsize: 'int | dict[str, int] | None' = None, nan_rep=None, dropna: 'bool_t | None' = None, data_columns: 'Literal[True] | list[str] | None' = None, errors: 'OpenFileErrors' = 'strict', encoding: 'str' = 'UTF-8') -> 'None'",
    "doc": "Write the contained data to an HDF5 file using HDFStore.\n\nHierarchical Data Format (HDF) is self-describing, allowing an\napplication to interpret the structure and contents of a file with\nno outside information. One HDF file can hold a mix of related objects\nwhich can be accessed as a group or as individual objects.\n\nIn order to add another DataFrame or Series to an existing HDF file\nplease use append mode and a different a key.\n\n.. warning::\n\n   One can store a subclass of ``DataFrame`` or ``Series`` to HDF5,\n   but the type of the subclass is lost upon storing.\n\nFor more information see the :ref:`user guide <io.hdf5>`.\n\nParameters\n----------\npath_or_buf : str or pandas.HDFStore\n    File path or HDFStore object.\nkey : str\n    Identifier for the group in the store.\nmode : {'a', 'w', 'r+'}, default 'a'\n    Mode to open file:\n\n    - 'w': write, a new file is created (an existing file with\n      the same name would be deleted).\n    - 'a': append, an existing file is opened for reading and\n      writing, and if the file does not exist it is created.\n    - 'r+': similar to 'a', but the file must already exist.\ncomplevel : {0-9}, default None\n    Specifies a compression level for data.\n    A value of 0 or None disables compression.\ncomplib : {'zlib', 'lzo', 'bzip2', 'blosc'}, default 'zlib'\n    Specifies the compression library to be used.\n    These additional compressors for Blosc are supported\n    (default if no compressor specified: 'blosc:blosclz'):\n    {'blosc:blosclz', 'blosc:lz4', 'blosc:lz4hc', 'blosc:snappy',\n    'blosc:zlib', 'blosc:zstd'}.\n    Specifying a compression library which is not available issues\n    a ValueError.\nappend : bool, default False\n    For Table formats, append the input data to the existing.\nformat : {'fixed', 'table', None}, default 'fixed'\n    Possible values:\n\n    - 'fixed': Fixed format. Fast writing/reading. Not-appendable,\n      nor searchable.\n    - 'table': Table format. Write as a PyTables Table structure\n      which may perform worse but allow more flexible operations\n      like searching / selecting subsets of the data.\n    - If None, pd.get_option('io.hdf.default_format') is checked,\n      followed by fallback to \"fixed\".\nindex : bool, default True\n    Write DataFrame index as a column.\nmin_itemsize : dict or int, optional\n    Map column names to minimum string sizes for columns.\nnan_rep : Any, optional\n    How to represent null values as str.\n    Not allowed with append=True.\ndropna : bool, default False, optional\n    Remove missing values.\ndata_columns : list of columns or True, optional\n    List of columns to create as indexed data columns for on-disk\n    queries, or True to use all columns. By default only the axes\n    of the object are indexed. See\n    :ref:`Query via data columns<io.hdf5-query-data-columns>`. for\n    more information.\n    Applicable only to format='table'.\nerrors : str, default 'strict'\n    Specifies how encoding and decoding errors are to be handled.\n    See the errors argument for :func:`open` for a full list\n    of options.\nencoding : str, default \"UTF-8\"\n\nSee Also\n--------\nread_hdf : Read from HDF file.\nDataFrame.to_orc : Write a DataFrame to the binary orc format.\nDataFrame.to_parquet : Write a DataFrame to the binary parquet format.\nDataFrame.to_sql : Write to a SQL table.\nDataFrame.to_feather : Write out feather-format for DataFrames.\nDataFrame.to_csv : Write out to a csv file.\n\nExamples\n--------\n>>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]},\n...                   index=['a', 'b', 'c'])  # doctest: +SKIP\n>>> df.to_hdf('data.h5', key='df', mode='w')  # doctest: +SKIP\n\nWe can add another object to the same file:\n\n>>> s = pd.Series([1, 2, 3, 4])  # doctest: +SKIP\n>>> s.to_hdf('data.h5', key='s')  # doctest: +SKIP\n\nReading from HDF file:\n\n>>> pd.read_hdf('data.h5', 'df')  # doctest: +SKIP\nA  B\na  1  4\nb  2  5\nc  3  6\n>>> pd.read_hdf('data.h5', 's')  # doctest: +SKIP\n0    1\n1    2\n2    3\n3    4\ndtype: int64"
  },
  {
    "symbol": "Series.to_json",
    "signature": "(self, path_or_buf: 'FilePath | WriteBuffer[bytes] | WriteBuffer[str] | None' = None, *, orient: \"Literal['split', 'records', 'index', 'table', 'columns', 'values'] | None\" = None, date_format: 'str | None' = None, double_precision: 'int' = 10, force_ascii: 'bool_t' = True, date_unit: 'TimeUnit' = 'ms', default_handler: 'Callable[[Any], JSONSerializable] | None' = None, lines: 'bool_t' = False, compression: 'CompressionOptions' = 'infer', index: 'bool_t | None' = None, indent: 'int | None' = None, storage_options: 'StorageOptions | None' = None, mode: \"Literal['a', 'w']\" = 'w') -> 'str | None'",
    "doc": "Convert the object to a JSON string.\n\nNote NaN's and None will be converted to null and datetime objects\nwill be converted to UNIX timestamps.\n\nParameters\n----------\npath_or_buf : str, path object, file-like object, or None, default None\n    String, path object (implementing os.PathLike[str]), or file-like\n    object implementing a write() function. If None, the result is\n    returned as a string.\norient : str\n    Indication of expected JSON string format.\n\n    * Series:\n\n        - default is 'index'\n        - allowed values are: {'split', 'records', 'index', 'table'}.\n\n    * DataFrame:\n\n        - default is 'columns'\n        - allowed values are: {'split', 'records', 'index', 'columns',\n          'values', 'table'}.\n\n    * The format of the JSON string:\n\n        - 'split' : dict like {'index' -> [index], 'columns' -> [columns],\n          'data' -> [values]}\n        - 'records' : list like [{column -> value}, ... , {column -> value}]\n        - 'index' : dict like {index -> {column -> value}}\n        - 'columns' : dict like {column -> {index -> value}}\n        - 'values' : just the values array\n        - 'table' : dict like {'schema': {schema}, 'data': {data}}\n\n        Describing the data, where data component is like ``orient='records'``.\n\ndate_format : {None, 'epoch', 'iso'}\n    Type of date conversion. 'epoch' = epoch milliseconds,\n    'iso' = ISO8601. The default depends on the `orient`. For\n    ``orient='table'``, the default is 'iso'. For all other orients,\n    the default is 'epoch'.\ndouble_precision : int, default 10\n    The number of decimal places to use when encoding\n    floating point values. The possible maximal value is 15.\n    Passing double_precision greater than 15 will raise a ValueError.\nforce_ascii : bool, default True\n    Force encoded string to be ASCII.\ndate_unit : str, default 'ms' (milliseconds)\n    The time unit to encode to, governs timestamp and ISO8601\n    precision.  One of 's', 'ms', 'us', 'ns' for second, millisecond,\n    microsecond, and nanosecond respectively.\ndefault_handler : callable, default None\n    Handler to call if object cannot otherwise be converted to a\n    suitable format for JSON. Should receive a single argument which is\n    the object to convert and return a serialisable object.\nlines : bool, default False\n    If 'orient' is 'records' write out line-delimited json format. Will\n    throw ValueError if incorrect 'orient' since others are not\n    list-like.\ncompression : str or dict, default 'infer'\n    For on-the-fly compression of the output data. If 'infer' and 'path_or_buf' is\n    path-like, then detect compression from the following extensions: '.gz',\n    '.bz2', '.zip', '.xz', '.zst', '.tar', '.tar.gz', '.tar.xz' or '.tar.bz2'\n    (otherwise no compression).\n    Set to ``None`` for no compression.\n    Can also be a dict with key ``'method'`` set\n    to one of {``'zip'``, ``'gzip'``, ``'bz2'``, ``'zstd'``, ``'xz'``, ``'tar'``} and\n    other key-value pairs are forwarded to\n    ``zipfile.ZipFile``, ``gzip.GzipFile``,\n    ``bz2.BZ2File``, ``zstandard.ZstdCompressor``, ``lzma.LZMAFile`` or\n    ``tarfile.TarFile``, respectively.\n    As an example, the following could be passed for faster compression and to create\n    a reproducible gzip archive:\n    ``compression={'method': 'gzip', 'compresslevel': 1, 'mtime': 1}``.\n\n    .. versionadded:: 1.5.0\n        Added support for `.tar` files.\n\n    .. versionchanged:: 1.4.0 Zstandard support.\n\nindex : bool or None, default None\n    The index is only used when 'orient' is 'split', 'index', 'column',\n    or 'table'. Of these, 'index' and 'column' do not support\n    `index=False`.\n\nindent : int, optional\n   Length of whitespace used to indent each record.\n\nstorage_options : dict, optional\n    Extra options that make sense for a particular storage connection, e.g.\n    host, port, username, password, etc. For HTTP(S) URLs the key-value pairs\n    are forwarded to ``urllib.request.Request`` as header options. For other\n    URLs (e.g. starting with \"s3://\", and \"gcs://\") the key-value pairs are\n    forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more\n    details, and for more examples on storage options refer `here\n    <https://pandas.pydata.org/docs/user_guide/io.html?\n    highlight=storage_options#reading-writing-remote-files>`_.\n\nmode : str, default 'w' (writing)\n    Specify the IO mode for output when supplying a path_or_buf.\n    Accepted args are 'w' (writing) and 'a' (append) only.\n    mode='a' is only supported when lines is True and orient is 'records'.\n\nReturns\n-------\nNone or str\n    If path_or_buf is None, returns the resulting json format as a\n    string. Otherwise returns None.\n\nSee Also\n--------\nread_json : Convert a JSON string to pandas object.\n\nNotes\n-----\nThe behavior of ``indent=0`` varies from the stdlib, which does not\nindent the output but does insert newlines. Currently, ``indent=0``\nand the default ``indent=None`` are equivalent in pandas, though this\nmay change in a future release.\n\n``orient='table'`` contains a 'pandas_version' field under 'schema'.\nThis stores the version of `pandas` used in the latest revision of the\nschema.\n\nExamples\n--------\n>>> from json import loads, dumps\n>>> df = pd.DataFrame(\n...     [[\"a\", \"b\"], [\"c\", \"d\"]],\n...     index=[\"row 1\", \"row 2\"],\n...     columns=[\"col 1\", \"col 2\"],\n... )\n\n>>> result = df.to_json(orient=\"split\")\n>>> parsed = loads(result)\n>>> dumps(parsed, indent=4)  # doctest: +SKIP\n{\n    \"columns\": [\n        \"col 1\",\n        \"col 2\"\n    ],\n    \"index\": [\n        \"row 1\",\n        \"row 2\"\n    ],\n    \"data\": [\n        [\n            \"a\",\n            \"b\"\n        ],\n        [\n            \"c\",\n            \"d\"\n        ]\n    ]\n}\n\nEncoding/decoding a Dataframe using ``'records'`` formatted JSON.\nNote that index labels are not preserved with this encoding.\n\n>>> result = df.to_json(orient=\"records\")\n>>> parsed = loads(result)\n>>> dumps(parsed, indent=4)  # doctest: +SKIP\n[\n    {\n        \"col 1\": \"a\",\n        \"col 2\": \"b\"\n    },\n    {\n        \"col 1\": \"c\",\n        \"col 2\": \"d\"\n    }\n]\n\nEncoding/decoding a Dataframe using ``'index'`` formatted JSON:\n\n>>> result = df.to_json(orient=\"index\")\n>>> parsed = loads(result)\n>>> dumps(parsed, indent=4)  # doctest: +SKIP\n{\n    \"row 1\": {\n        \"col 1\": \"a\",\n        \"col 2\": \"b\"\n    },\n    \"row 2\": {\n        \"col 1\": \"c\",\n        \"col 2\": \"d\"\n    }\n}\n\nEncoding/decoding a Dataframe using ``'columns'`` formatted JSON:\n\n>>> result = df.to_json(orient=\"columns\")\n>>> parsed = loads(result)\n>>> dumps(parsed, indent=4)  # doctest: +SKIP\n{\n    \"col 1\": {\n        \"row 1\": \"a\",\n        \"row 2\": \"c\"\n    },\n    \"col 2\": {\n        \"row 1\": \"b\",\n        \"row 2\": \"d\"\n    }\n}\n\nEncoding/decoding a Dataframe using ``'values'`` formatted JSON:\n\n>>> result = df.to_json(orient=\"values\")\n>>> parsed = loads(result)\n>>> dumps(parsed, indent=4)  # doctest: +SKIP\n[\n    [\n        \"a\",\n        \"b\"\n    ],\n    [\n        \"c\",\n        \"d\"\n    ]\n]\n\nEncoding with Table Schema:\n\n>>> result = df.to_json(orient=\"table\")\n>>> parsed = loads(result)\n>>> dumps(parsed, indent=4)  # doctest: +SKIP\n{\n    \"schema\": {\n        \"fields\": [\n            {\n                \"name\": \"index\",\n                \"type\": \"string\"\n            },\n            {\n                \"name\": \"col 1\",\n                \"type\": \"string\"\n            },\n            {\n                \"name\": \"col 2\",\n                \"type\": \"string\"\n            }\n        ],\n        \"primaryKey\": [\n            \"index\"\n        ],\n        \"pandas_version\": \"1.4.0\"\n    },\n    \"data\": [\n        {\n            \"index\": \"row 1\",\n            \"col 1\": \"a\",\n            \"col 2\": \"b\"\n        },\n        {\n            \"index\": \"row 2\",\n            \"col 1\": \"c\",\n            \"col 2\": \"d\"\n        }\n    ]\n}"
  },
  {
    "symbol": "Series.to_latex",
    "signature": "(self, buf: 'FilePath | WriteBuffer[str] | None' = None, *, columns: 'Sequence[Hashable] | None' = None, header: 'bool_t | SequenceNotStr[str]' = True, index: 'bool_t' = True, na_rep: 'str' = 'NaN', formatters: 'FormattersType | None' = None, float_format: 'FloatFormatType | None' = None, sparsify: 'bool_t | None' = None, index_names: 'bool_t' = True, bold_rows: 'bool_t' = False, column_format: 'str | None' = None, longtable: 'bool_t | None' = None, escape: 'bool_t | None' = None, encoding: 'str | None' = None, decimal: 'str' = '.', multicolumn: 'bool_t | None' = None, multicolumn_format: 'str | None' = None, multirow: 'bool_t | None' = None, caption: 'str | tuple[str, str] | None' = None, label: 'str | None' = None, position: 'str | None' = None) -> 'str | None'",
    "doc": "Render object to a LaTeX tabular, longtable, or nested table.\n\nRequires ``\\usepackage{{booktabs}}``.  The output can be copy/pasted\ninto a main LaTeX document or read from an external file\nwith ``\\input{{table.tex}}``.\n\n.. versionchanged:: 2.0.0\n   Refactored to use the Styler implementation via jinja2 templating.\n\nParameters\n----------\nbuf : str, Path or StringIO-like, optional, default None\n    Buffer to write to. If None, the output is returned as a string.\ncolumns : list of label, optional\n    The subset of columns to write. Writes all columns by default.\nheader : bool or list of str, default True\n    Write out the column names. If a list of strings is given,\n    it is assumed to be aliases for the column names.\nindex : bool, default True\n    Write row names (index).\nna_rep : str, default 'NaN'\n    Missing data representation.\nformatters : list of functions or dict of {{str: function}}, optional\n    Formatter functions to apply to columns' elements by position or\n    name. The result of each function must be a unicode string.\n    List must be of length equal to the number of columns.\nfloat_format : one-parameter function or str, optional, default None\n    Formatter for floating point numbers. For example\n    ``float_format=\"%.2f\"`` and ``float_format=\"{{:0.2f}}\".format`` will\n    both result in 0.1234 being formatted as 0.12.\nsparsify : bool, optional\n    Set to False for a DataFrame with a hierarchical index to print\n    every multiindex key at each row. By default, the value will be\n    read from the config module.\nindex_names : bool, default True\n    Prints the names of the indexes.\nbold_rows : bool, default False\n    Make the row labels bold in the output.\ncolumn_format : str, optional\n    The columns format as specified in `LaTeX table format\n    <https://en.wikibooks.org/wiki/LaTeX/Tables>`__ e.g. 'rcl' for 3\n    columns. By default, 'l' will be used for all columns except\n    columns of numbers, which default to 'r'.\nlongtable : bool, optional\n    Use a longtable environment instead of tabular. Requires\n    adding a \\usepackage{{longtable}} to your LaTeX preamble.\n    By default, the value will be read from the pandas config\n    module, and set to `True` if the option ``styler.latex.environment`` is\n    `\"longtable\"`.\n\n    .. versionchanged:: 2.0.0\n       The pandas option affecting this argument has changed.\nescape : bool, optional\n    By default, the value will be read from the pandas config\n    module and set to `True` if the option ``styler.format.escape`` is\n    `\"latex\"`. When set to False prevents from escaping latex special\n    characters in column names.\n\n    .. versionchanged:: 2.0.0\n       The pandas option affecting this argument has changed, as has the\n       default value to `False`.\nencoding : str, optional\n    A string representing the encoding to use in the output file,\n    defaults to 'utf-8'.\ndecimal : str, default '.'\n    Character recognized as decimal separator, e.g. ',' in Europe.\nmulticolumn : bool, default True\n    Use \\multicolumn to enhance MultiIndex columns.\n    The default will be read from the config module, and is set\n    as the option ``styler.sparse.columns``.\n\n    .. versionchanged:: 2.0.0\n       The pandas option affecting this argument has changed.\nmulticolumn_format : str, default 'r'\n    The alignment for multicolumns, similar to `column_format`\n    The default will be read from the config module, and is set as the option\n    ``styler.latex.multicol_align``.\n\n    .. versionchanged:: 2.0.0\n       The pandas option affecting this argument has changed, as has the\n       default value to \"r\".\nmultirow : bool, default True\n    Use \\multirow to enhance MultiIndex rows. Requires adding a\n    \\usepackage{{multirow}} to your LaTeX preamble. Will print\n    centered labels (instead of top-aligned) across the contained\n    rows, separating groups via clines. The default will be read\n    from the pandas config module, and is set as the option\n    ``styler.sparse.index``.\n\n    .. versionchanged:: 2.0.0\n       The pandas option affecting this argument has changed, as has the\n       default value to `True`.\ncaption : str or tuple, optional\n    Tuple (full_caption, short_caption),\n    which results in ``\\caption[short_caption]{{full_caption}}``;\n    if a single string is passed, no short caption will be set.\nlabel : str, optional\n    The LaTeX label to be placed inside ``\\label{{}}`` in the output.\n    This is used with ``\\ref{{}}`` in the main ``.tex`` file.\n\nposition : str, optional\n    The LaTeX positional argument for tables, to be placed after\n    ``\\begin{{}}`` in the output.\n\nReturns\n-------\nstr or None\n    If buf is None, returns the result as a string. Otherwise returns None.\n\nSee Also\n--------\nio.formats.style.Styler.to_latex : Render a DataFrame to LaTeX\n    with conditional formatting.\nDataFrame.to_string : Render a DataFrame to a console-friendly\n    tabular output.\nDataFrame.to_html : Render a DataFrame as an HTML table.\n\nNotes\n-----\nAs of v2.0.0 this method has changed to use the Styler implementation as\npart of :meth:`.Styler.to_latex` via ``jinja2`` templating. This means\nthat ``jinja2`` is a requirement, and needs to be installed, for this method\nto function. It is advised that users switch to using Styler, since that\nimplementation is more frequently updated and contains much more\nflexibility with the output.\n\nExamples\n--------\nConvert a general DataFrame to LaTeX with formatting:\n\n>>> df = pd.DataFrame(dict(name=['Raphael', 'Donatello'],\n...                        age=[26, 45],\n...                        height=[181.23, 177.65]))\n>>> print(df.to_latex(index=False,\n...                   formatters={\"name\": str.upper},\n...                   float_format=\"{:.1f}\".format,\n... ))  # doctest: +SKIP\n\\begin{tabular}{lrr}\n\\toprule\nname & age & height \\\\\n\\midrule\nRAPHAEL & 26 & 181.2 \\\\\nDONATELLO & 45 & 177.7 \\\\\n\\bottomrule\n\\end{tabular}"
  },
  {
    "symbol": "Series.to_list",
    "signature": "(self)",
    "doc": "Return a list of the values.\n\nThese are each a scalar type, which is a Python scalar\n(for str, int, float) or a pandas scalar\n(for Timestamp/Timedelta/Interval/Period)\n\nReturns\n-------\nlist\n\nSee Also\n--------\nnumpy.ndarray.tolist : Return the array as an a.ndim-levels deep\n    nested list of Python scalars.\n\nExamples\n--------\nFor Series\n\n>>> s = pd.Series([1, 2, 3])\n>>> s.to_list()\n[1, 2, 3]\n\nFor Index:\n\n>>> idx = pd.Index([1, 2, 3])\n>>> idx\nIndex([1, 2, 3], dtype='int64')\n\n>>> idx.to_list()\n[1, 2, 3]"
  },
  {
    "symbol": "Series.to_markdown",
    "signature": "(self, buf: 'IO[str] | None' = None, mode: 'str' = 'wt', index: 'bool' = True, storage_options: 'StorageOptions | None' = None, **kwargs) -> 'str | None'",
    "doc": "Print Series in Markdown-friendly format.\n\nParameters\n----------\nbuf : str, Path or StringIO-like, optional, default None\n    Buffer to write to. If None, the output is returned as a string.\nmode : str, optional\n    Mode in which file is opened, \"wt\" by default.\nindex : bool, optional, default True\n    Add index (row) labels.\n\nstorage_options : dict, optional\n    Extra options that make sense for a particular storage connection, e.g.\n    host, port, username, password, etc. For HTTP(S) URLs the key-value pairs\n    are forwarded to ``urllib.request.Request`` as header options. For other\n    URLs (e.g. starting with \"s3://\", and \"gcs://\") the key-value pairs are\n    forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more\n    details, and for more examples on storage options refer `here\n    <https://pandas.pydata.org/docs/user_guide/io.html?\n    highlight=storage_options#reading-writing-remote-files>`_.\n\n**kwargs\n    These parameters will be passed to `tabulate                 <https://pypi.org/project/tabulate>`_.\n\nReturns\n-------\nstr\n    Series in Markdown-friendly format.\n\nNotes\n-----\nRequires the `tabulate <https://pypi.org/project/tabulate>`_ package.\n\nExamples\n            --------\n            >>> s = pd.Series([\"elk\", \"pig\", \"dog\", \"quetzal\"], name=\"animal\")\n            >>> print(s.to_markdown())\n            |    | animal   |\n            |---:|:---------|\n            |  0 | elk      |\n            |  1 | pig      |\n            |  2 | dog      |\n            |  3 | quetzal  |\n\n            Output markdown with a tabulate option.\n\n            >>> print(s.to_markdown(tablefmt=\"grid\"))\n            +----+----------+\n            |    | animal   |\n            +====+==========+\n            |  0 | elk      |\n            +----+----------+\n            |  1 | pig      |\n            +----+----------+\n            |  2 | dog      |\n            +----+----------+\n            |  3 | quetzal  |\n            +----+----------+"
  },
  {
    "symbol": "Series.to_numpy",
    "signature": "(self, dtype: 'npt.DTypeLike | None' = None, copy: 'bool' = False, na_value: 'object' = <no_default>, **kwargs) -> 'np.ndarray'",
    "doc": "A NumPy ndarray representing the values in this Series or Index.\n\nParameters\n----------\ndtype : str or numpy.dtype, optional\n    The dtype to pass to :meth:`numpy.asarray`.\ncopy : bool, default False\n    Whether to ensure that the returned value is not a view on\n    another array. Note that ``copy=False`` does not *ensure* that\n    ``to_numpy()`` is no-copy. Rather, ``copy=True`` ensure that\n    a copy is made, even if not strictly necessary.\nna_value : Any, optional\n    The value to use for missing values. The default value depends\n    on `dtype` and the type of the array.\n**kwargs\n    Additional keywords passed through to the ``to_numpy`` method\n    of the underlying array (for extension arrays).\n\nReturns\n-------\nnumpy.ndarray\n\nSee Also\n--------\nSeries.array : Get the actual data stored within.\nIndex.array : Get the actual data stored within.\nDataFrame.to_numpy : Similar method for DataFrame.\n\nNotes\n-----\nThe returned array will be the same up to equality (values equal\nin `self` will be equal in the returned array; likewise for values\nthat are not equal). When `self` contains an ExtensionArray, the\ndtype may be different. For example, for a category-dtype Series,\n``to_numpy()`` will return a NumPy array and the categorical dtype\nwill be lost.\n\nFor NumPy dtypes, this will be a reference to the actual data stored\nin this Series or Index (assuming ``copy=False``). Modifying the result\nin place will modify the data stored in the Series or Index (not that\nwe recommend doing that).\n\nFor extension types, ``to_numpy()`` *may* require copying data and\ncoercing the result to a NumPy type (possibly object), which may be\nexpensive. When you need a no-copy reference to the underlying data,\n:attr:`Series.array` should be used instead.\n\nThis table lays out the different dtypes and default return types of\n``to_numpy()`` for various dtypes within pandas.\n\n================== ================================\ndtype              array type\n================== ================================\ncategory[T]        ndarray[T] (same dtype as input)\nperiod             ndarray[object] (Periods)\ninterval           ndarray[object] (Intervals)\nIntegerNA          ndarray[object]\ndatetime64[ns]     datetime64[ns]\ndatetime64[ns, tz] ndarray[object] (Timestamps)\n================== ================================\n\nExamples\n--------\n>>> ser = pd.Series(pd.Categorical(['a', 'b', 'a']))\n>>> ser.to_numpy()\narray(['a', 'b', 'a'], dtype=object)\n\nSpecify the `dtype` to control how datetime-aware data is represented.\nUse ``dtype=object`` to return an ndarray of pandas :class:`Timestamp`\nobjects, each with the correct ``tz``.\n\n>>> ser = pd.Series(pd.date_range('2000', periods=2, tz=\"CET\"))\n>>> ser.to_numpy(dtype=object)\narray([Timestamp('2000-01-01 00:00:00+0100', tz='CET'),\n       Timestamp('2000-01-02 00:00:00+0100', tz='CET')],\n      dtype=object)\n\nOr ``dtype='datetime64[ns]'`` to return an ndarray of native\ndatetime64 values. The values are converted to UTC and the timezone\ninfo is dropped.\n\n>>> ser.to_numpy(dtype=\"datetime64[ns]\")\n... # doctest: +ELLIPSIS\narray(['1999-12-31T23:00:00.000000000', '2000-01-01T23:00:00...'],\n      dtype='datetime64[ns]')"
  },
  {
    "symbol": "Series.to_period",
    "signature": "(self, freq: 'str | None' = None, copy: 'bool | None' = None) -> 'Series'",
    "doc": "Convert Series from DatetimeIndex to PeriodIndex.\n\nParameters\n----------\nfreq : str, default None\n    Frequency associated with the PeriodIndex.\ncopy : bool, default True\n    Whether or not to return a copy.\n\n    .. note::\n        The `copy` keyword will change behavior in pandas 3.0.\n        `Copy-on-Write\n        <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n        will be enabled by default, which means that all methods with a\n        `copy` keyword will use a lazy copy mechanism to defer the copy and\n        ignore the `copy` keyword. The `copy` keyword will be removed in a\n        future version of pandas.\n\n        You can already get the future behavior and improvements through\n        enabling copy on write ``pd.options.mode.copy_on_write = True``\n\nReturns\n-------\nSeries\n    Series with index converted to PeriodIndex.\n\nExamples\n--------\n>>> idx = pd.DatetimeIndex(['2023', '2024', '2025'])\n>>> s = pd.Series([1, 2, 3], index=idx)\n>>> s = s.to_period()\n>>> s\n2023    1\n2024    2\n2025    3\nFreq: Y-DEC, dtype: int64\n\nViewing the index\n\n>>> s.index\nPeriodIndex(['2023', '2024', '2025'], dtype='period[Y-DEC]')"
  },
  {
    "symbol": "Series.to_pickle",
    "signature": "(self, path: 'FilePath | WriteBuffer[bytes]', *, compression: 'CompressionOptions' = 'infer', protocol: 'int' = 5, storage_options: 'StorageOptions | None' = None) -> 'None'",
    "doc": "Pickle (serialize) object to file.\n\nParameters\n----------\npath : str, path object, or file-like object\n    String, path object (implementing ``os.PathLike[str]``), or file-like\n    object implementing a binary ``write()`` function. File path where\n    the pickled object will be stored.\ncompression : str or dict, default 'infer'\n    For on-the-fly compression of the output data. If 'infer' and 'path' is\n    path-like, then detect compression from the following extensions: '.gz',\n    '.bz2', '.zip', '.xz', '.zst', '.tar', '.tar.gz', '.tar.xz' or '.tar.bz2'\n    (otherwise no compression).\n    Set to ``None`` for no compression.\n    Can also be a dict with key ``'method'`` set\n    to one of {``'zip'``, ``'gzip'``, ``'bz2'``, ``'zstd'``, ``'xz'``, ``'tar'``} and\n    other key-value pairs are forwarded to\n    ``zipfile.ZipFile``, ``gzip.GzipFile``,\n    ``bz2.BZ2File``, ``zstandard.ZstdCompressor``, ``lzma.LZMAFile`` or\n    ``tarfile.TarFile``, respectively.\n    As an example, the following could be passed for faster compression and to create\n    a reproducible gzip archive:\n    ``compression={'method': 'gzip', 'compresslevel': 1, 'mtime': 1}``.\n\n    .. versionadded:: 1.5.0\n        Added support for `.tar` files.\nprotocol : int\n    Int which indicates which protocol should be used by the pickler,\n    default HIGHEST_PROTOCOL (see [1]_ paragraph 12.1.2). The possible\n    values are 0, 1, 2, 3, 4, 5. A negative value for the protocol\n    parameter is equivalent to setting its value to HIGHEST_PROTOCOL.\n\n    .. [1] https://docs.python.org/3/library/pickle.html.\n\nstorage_options : dict, optional\n    Extra options that make sense for a particular storage connection, e.g.\n    host, port, username, password, etc. For HTTP(S) URLs the key-value pairs\n    are forwarded to ``urllib.request.Request`` as header options. For other\n    URLs (e.g. starting with \"s3://\", and \"gcs://\") the key-value pairs are\n    forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more\n    details, and for more examples on storage options refer `here\n    <https://pandas.pydata.org/docs/user_guide/io.html?\n    highlight=storage_options#reading-writing-remote-files>`_.\n\nSee Also\n--------\nread_pickle : Load pickled pandas object (or any object) from file.\nDataFrame.to_hdf : Write DataFrame to an HDF5 file.\nDataFrame.to_sql : Write DataFrame to a SQL database.\nDataFrame.to_parquet : Write a DataFrame to the binary parquet format.\n\nExamples\n--------\n>>> original_df = pd.DataFrame({\"foo\": range(5), \"bar\": range(5, 10)})  # doctest: +SKIP\n>>> original_df  # doctest: +SKIP\n   foo  bar\n0    0    5\n1    1    6\n2    2    7\n3    3    8\n4    4    9\n>>> original_df.to_pickle(\"./dummy.pkl\")  # doctest: +SKIP\n\n>>> unpickled_df = pd.read_pickle(\"./dummy.pkl\")  # doctest: +SKIP\n>>> unpickled_df  # doctest: +SKIP\n   foo  bar\n0    0    5\n1    1    6\n2    2    7\n3    3    8\n4    4    9"
  },
  {
    "symbol": "Series.to_sql",
    "signature": "(self, name: 'str', con, *, schema: 'str | None' = None, if_exists: \"Literal['fail', 'replace', 'append']\" = 'fail', index: 'bool_t' = True, index_label: 'IndexLabel | None' = None, chunksize: 'int | None' = None, dtype: 'DtypeArg | None' = None, method: \"Literal['multi'] | Callable | None\" = None) -> 'int | None'",
    "doc": "Write records stored in a DataFrame to a SQL database.\n\nDatabases supported by SQLAlchemy [1]_ are supported. Tables can be\nnewly created, appended to, or overwritten.\n\nParameters\n----------\nname : str\n    Name of SQL table.\ncon : sqlalchemy.engine.(Engine or Connection) or sqlite3.Connection\n    Using SQLAlchemy makes it possible to use any DB supported by that\n    library. Legacy support is provided for sqlite3.Connection objects. The user\n    is responsible for engine disposal and connection closure for the SQLAlchemy\n    connectable. See `here                 <https://docs.sqlalchemy.org/en/20/core/connections.html>`_.\n    If passing a sqlalchemy.engine.Connection which is already in a transaction,\n    the transaction will not be committed.  If passing a sqlite3.Connection,\n    it will not be possible to roll back the record insertion.\n\nschema : str, optional\n    Specify the schema (if database flavor supports this). If None, use\n    default schema.\nif_exists : {'fail', 'replace', 'append'}, default 'fail'\n    How to behave if the table already exists.\n\n    * fail: Raise a ValueError.\n    * replace: Drop the table before inserting new values.\n    * append: Insert new values to the existing table.\n\nindex : bool, default True\n    Write DataFrame index as a column. Uses `index_label` as the column\n    name in the table. Creates a table index for this column.\nindex_label : str or sequence, default None\n    Column label for index column(s). If None is given (default) and\n    `index` is True, then the index names are used.\n    A sequence should be given if the DataFrame uses MultiIndex.\nchunksize : int, optional\n    Specify the number of rows in each batch to be written at a time.\n    By default, all rows will be written at once.\ndtype : dict or scalar, optional\n    Specifying the datatype for columns. If a dictionary is used, the\n    keys should be the column names and the values should be the\n    SQLAlchemy types or strings for the sqlite3 legacy mode. If a\n    scalar is provided, it will be applied to all columns.\nmethod : {None, 'multi', callable}, optional\n    Controls the SQL insertion clause used:\n\n    * None : Uses standard SQL ``INSERT`` clause (one per row).\n    * 'multi': Pass multiple values in a single ``INSERT`` clause.\n    * callable with signature ``(pd_table, conn, keys, data_iter)``.\n\n    Details and a sample callable implementation can be found in the\n    section :ref:`insert method <io.sql.method>`.\n\nReturns\n-------\nNone or int\n    Number of rows affected by to_sql. None is returned if the callable\n    passed into ``method`` does not return an integer number of rows.\n\n    The number of returned rows affected is the sum of the ``rowcount``\n    attribute of ``sqlite3.Cursor`` or SQLAlchemy connectable which may not\n    reflect the exact number of written rows as stipulated in the\n    `sqlite3 <https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.rowcount>`__ or\n    `SQLAlchemy <https://docs.sqlalchemy.org/en/20/core/connections.html#sqlalchemy.engine.CursorResult.rowcount>`__.\n\n    .. versionadded:: 1.4.0\n\nRaises\n------\nValueError\n    When the table already exists and `if_exists` is 'fail' (the\n    default).\n\nSee Also\n--------\nread_sql : Read a DataFrame from a table.\n\nNotes\n-----\nTimezone aware datetime columns will be written as\n``Timestamp with timezone`` type with SQLAlchemy if supported by the\ndatabase. Otherwise, the datetimes will be stored as timezone unaware\ntimestamps local to the original timezone.\n\nNot all datastores support ``method=\"multi\"``. Oracle, for example,\ndoes not support multi-value insert.\n\nReferences\n----------\n.. [1] https://docs.sqlalchemy.org\n.. [2] https://www.python.org/dev/peps/pep-0249/\n\nExamples\n--------\nCreate an in-memory SQLite database.\n\n>>> from sqlalchemy import create_engine\n>>> engine = create_engine('sqlite://', echo=False)\n\nCreate a table from scratch with 3 rows.\n\n>>> df = pd.DataFrame({'name' : ['User 1', 'User 2', 'User 3']})\n>>> df\n     name\n0  User 1\n1  User 2\n2  User 3\n\n>>> df.to_sql(name='users', con=engine)\n3\n>>> from sqlalchemy import text\n>>> with engine.connect() as conn:\n...    conn.execute(text(\"SELECT * FROM users\")).fetchall()\n[(0, 'User 1'), (1, 'User 2'), (2, 'User 3')]\n\nAn `sqlalchemy.engine.Connection` can also be passed to `con`:\n\n>>> with engine.begin() as connection:\n...     df1 = pd.DataFrame({'name' : ['User 4', 'User 5']})\n...     df1.to_sql(name='users', con=connection, if_exists='append')\n2\n\nThis is allowed to support operations that require that the same\nDBAPI connection is used for the entire operation.\n\n>>> df2 = pd.DataFrame({'name' : ['User 6', 'User 7']})\n>>> df2.to_sql(name='users', con=engine, if_exists='append')\n2\n>>> with engine.connect() as conn:\n...    conn.execute(text(\"SELECT * FROM users\")).fetchall()\n[(0, 'User 1'), (1, 'User 2'), (2, 'User 3'),\n (0, 'User 4'), (1, 'User 5'), (0, 'User 6'),\n (1, 'User 7')]\n\nOverwrite the table with just ``df2``.\n\n>>> df2.to_sql(name='users', con=engine, if_exists='replace',\n...            index_label='id')\n2\n>>> with engine.connect() as conn:\n...    conn.execute(text(\"SELECT * FROM users\")).fetchall()\n[(0, 'User 6'), (1, 'User 7')]\n\nUse ``method`` to define a callable insertion method to do nothing\nif there's a primary key conflict on a table in a PostgreSQL database.\n\n>>> from sqlalchemy.dialects.postgresql import insert\n>>> def insert_on_conflict_nothing(table, conn, keys, data_iter):\n...     # \"a\" is the primary key in \"conflict_table\"\n...     data = [dict(zip(keys, row)) for row in data_iter]\n...     stmt = insert(table.table).values(data).on_conflict_do_nothing(index_elements=[\"a\"])\n...     result = conn.execute(stmt)\n...     return result.rowcount\n>>> df_conflict.to_sql(name=\"conflict_table\", con=conn, if_exists=\"append\", method=insert_on_conflict_nothing)  # doctest: +SKIP\n0\n\nFor MySQL, a callable to update columns ``b`` and ``c`` if there's a conflict\non a primary key.\n\n>>> from sqlalchemy.dialects.mysql import insert\n>>> def insert_on_conflict_update(table, conn, keys, data_iter):\n...     # update columns \"b\" and \"c\" on primary key conflict\n...     data = [dict(zip(keys, row)) for row in data_iter]\n...     stmt = (\n...         insert(table.table)\n...         .values(data)\n...     )\n...     stmt = stmt.on_duplicate_key_update(b=stmt.inserted.b, c=stmt.inserted.c)\n...     result = conn.execute(stmt)\n...     return result.rowcount\n>>> df_conflict.to_sql(name=\"conflict_table\", con=conn, if_exists=\"append\", method=insert_on_conflict_update)  # doctest: +SKIP\n2\n\nSpecify the dtype (especially useful for integers with missing values).\nNotice that while pandas is forced to store the data as floating point,\nthe database supports nullable integers. When fetching the data with\nPython, we get back integer scalars.\n\n>>> df = pd.DataFrame({\"A\": [1, None, 2]})\n>>> df\n     A\n0  1.0\n1  NaN\n2  2.0\n\n>>> from sqlalchemy.types import Integer\n>>> df.to_sql(name='integers', con=engine, index=False,\n...           dtype={\"A\": Integer()})\n3\n\n>>> with engine.connect() as conn:\n...   conn.execute(text(\"SELECT * FROM integers\")).fetchall()\n[(1,), (None,), (2,)]"
  },
  {
    "symbol": "Series.to_string",
    "signature": "(self, buf: 'FilePath | WriteBuffer[str] | None' = None, na_rep: 'str' = 'NaN', float_format: 'str | None' = None, header: 'bool' = True, index: 'bool' = True, length: 'bool' = False, dtype: 'bool' = False, name: 'bool' = False, max_rows: 'int | None' = None, min_rows: 'int | None' = None) -> 'str | None'",
    "doc": "Render a string representation of the Series.\n\nParameters\n----------\nbuf : StringIO-like, optional\n    Buffer to write to.\nna_rep : str, optional\n    String representation of NaN to use, default 'NaN'.\nfloat_format : one-parameter function, optional\n    Formatter function to apply to columns' elements if they are\n    floats, default None.\nheader : bool, default True\n    Add the Series header (index name).\nindex : bool, optional\n    Add index (row) labels, default True.\nlength : bool, default False\n    Add the Series length.\ndtype : bool, default False\n    Add the Series dtype.\nname : bool, default False\n    Add the Series name if not None.\nmax_rows : int, optional\n    Maximum number of rows to show before truncating. If None, show\n    all.\nmin_rows : int, optional\n    The number of rows to display in a truncated repr (when number\n    of rows is above `max_rows`).\n\nReturns\n-------\nstr or None\n    String representation of Series if ``buf=None``, otherwise None.\n\nExamples\n--------\n>>> ser = pd.Series([1, 2, 3]).to_string()\n>>> ser\n'0    1\\n1    2\\n2    3'"
  },
  {
    "symbol": "Series.to_timestamp",
    "signature": "(self, freq: 'Frequency | None' = None, how: \"Literal['s', 'e', 'start', 'end']\" = 'start', copy: 'bool | None' = None) -> 'Series'",
    "doc": "Cast to DatetimeIndex of Timestamps, at *beginning* of period.\n\nParameters\n----------\nfreq : str, default frequency of PeriodIndex\n    Desired frequency.\nhow : {'s', 'e', 'start', 'end'}\n    Convention for converting period to timestamp; start of period\n    vs. end.\ncopy : bool, default True\n    Whether or not to return a copy.\n\n    .. note::\n        The `copy` keyword will change behavior in pandas 3.0.\n        `Copy-on-Write\n        <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n        will be enabled by default, which means that all methods with a\n        `copy` keyword will use a lazy copy mechanism to defer the copy and\n        ignore the `copy` keyword. The `copy` keyword will be removed in a\n        future version of pandas.\n\n        You can already get the future behavior and improvements through\n        enabling copy on write ``pd.options.mode.copy_on_write = True``\n\nReturns\n-------\nSeries with DatetimeIndex\n\nExamples\n--------\n>>> idx = pd.PeriodIndex(['2023', '2024', '2025'], freq='Y')\n>>> s1 = pd.Series([1, 2, 3], index=idx)\n>>> s1\n2023    1\n2024    2\n2025    3\nFreq: Y-DEC, dtype: int64\n\nThe resulting frequency of the Timestamps is `YearBegin`\n\n>>> s1 = s1.to_timestamp()\n>>> s1\n2023-01-01    1\n2024-01-01    2\n2025-01-01    3\nFreq: YS-JAN, dtype: int64\n\nUsing `freq` which is the offset that the Timestamps will have\n\n>>> s2 = pd.Series([1, 2, 3], index=idx)\n>>> s2 = s2.to_timestamp(freq='M')\n>>> s2\n2023-01-31    1\n2024-01-31    2\n2025-01-31    3\nFreq: YE-JAN, dtype: int64"
  },
  {
    "symbol": "Series.to_xarray",
    "signature": "(self)",
    "doc": "Return an xarray object from the pandas object.\n\nReturns\n-------\nxarray.DataArray or xarray.Dataset\n    Data in the pandas structure converted to Dataset if the object is\n    a DataFrame, or a DataArray if the object is a Series.\n\nSee Also\n--------\nDataFrame.to_hdf : Write DataFrame to an HDF5 file.\nDataFrame.to_parquet : Write a DataFrame to the binary parquet format.\n\nNotes\n-----\nSee the `xarray docs <https://xarray.pydata.org/en/stable/>`__\n\nExamples\n--------\n>>> df = pd.DataFrame([('falcon', 'bird', 389.0, 2),\n...                    ('parrot', 'bird', 24.0, 2),\n...                    ('lion', 'mammal', 80.5, 4),\n...                    ('monkey', 'mammal', np.nan, 4)],\n...                   columns=['name', 'class', 'max_speed',\n...                            'num_legs'])\n>>> df\n     name   class  max_speed  num_legs\n0  falcon    bird      389.0         2\n1  parrot    bird       24.0         2\n2    lion  mammal       80.5         4\n3  monkey  mammal        NaN         4\n\n>>> df.to_xarray()  # doctest: +SKIP\n<xarray.Dataset>\nDimensions:    (index: 4)\nCoordinates:\n  * index      (index) int64 32B 0 1 2 3\nData variables:\n    name       (index) object 32B 'falcon' 'parrot' 'lion' 'monkey'\n    class      (index) object 32B 'bird' 'bird' 'mammal' 'mammal'\n    max_speed  (index) float64 32B 389.0 24.0 80.5 nan\n    num_legs   (index) int64 32B 2 2 4 4\n\n>>> df['max_speed'].to_xarray()  # doctest: +SKIP\n<xarray.DataArray 'max_speed' (index: 4)>\narray([389. ,  24. ,  80.5,   nan])\nCoordinates:\n  * index    (index) int64 0 1 2 3\n\n>>> dates = pd.to_datetime(['2018-01-01', '2018-01-01',\n...                         '2018-01-02', '2018-01-02'])\n>>> df_multiindex = pd.DataFrame({'date': dates,\n...                               'animal': ['falcon', 'parrot',\n...                                          'falcon', 'parrot'],\n...                               'speed': [350, 18, 361, 15]})\n>>> df_multiindex = df_multiindex.set_index(['date', 'animal'])\n\n>>> df_multiindex\n                   speed\ndate       animal\n2018-01-01 falcon    350\n           parrot     18\n2018-01-02 falcon    361\n           parrot     15\n\n>>> df_multiindex.to_xarray()  # doctest: +SKIP\n<xarray.Dataset>\nDimensions:  (date: 2, animal: 2)\nCoordinates:\n  * date     (date) datetime64[ns] 2018-01-01 2018-01-02\n  * animal   (animal) object 'falcon' 'parrot'\nData variables:\n    speed    (date, animal) int64 350 18 361 15"
  },
  {
    "symbol": "Series.tolist",
    "signature": "(self)",
    "doc": "Return a list of the values.\n\nThese are each a scalar type, which is a Python scalar\n(for str, int, float) or a pandas scalar\n(for Timestamp/Timedelta/Interval/Period)\n\nReturns\n-------\nlist\n\nSee Also\n--------\nnumpy.ndarray.tolist : Return the array as an a.ndim-levels deep\n    nested list of Python scalars.\n\nExamples\n--------\nFor Series\n\n>>> s = pd.Series([1, 2, 3])\n>>> s.to_list()\n[1, 2, 3]\n\nFor Index:\n\n>>> idx = pd.Index([1, 2, 3])\n>>> idx\nIndex([1, 2, 3], dtype='int64')\n\n>>> idx.to_list()\n[1, 2, 3]"
  },
  {
    "symbol": "Series.transform",
    "signature": "(self, func: 'AggFuncType', axis: 'Axis' = 0, *args, **kwargs) -> 'DataFrame | Series'",
    "doc": "Call ``func`` on self producing a Series with the same axis shape as self.\n\nParameters\n----------\nfunc : function, str, list-like or dict-like\n    Function to use for transforming the data. If a function, must either\n    work when passed a Series or when passed to Series.apply. If func\n    is both list-like and dict-like, dict-like behavior takes precedence.\n\n    Accepted combinations are:\n\n    - function\n    - string function name\n    - list-like of functions and/or function names, e.g. ``[np.exp, 'sqrt']``\n    - dict-like of axis labels -> functions, function names or list-like of such.\naxis : {0 or 'index'}\n        Unused. Parameter needed for compatibility with DataFrame.\n*args\n    Positional arguments to pass to `func`.\n**kwargs\n    Keyword arguments to pass to `func`.\n\nReturns\n-------\nSeries\n    A Series that must have the same length as self.\n\nRaises\n------\nValueError : If the returned Series has a different length than self.\n\nSee Also\n--------\nSeries.agg : Only perform aggregating type operations.\nSeries.apply : Invoke function on a Series.\n\nNotes\n-----\nFunctions that mutate the passed object can produce unexpected\nbehavior or errors and are not supported. See :ref:`gotchas.udf-mutation`\nfor more details.\n\nExamples\n--------\n>>> df = pd.DataFrame({'A': range(3), 'B': range(1, 4)})\n>>> df\n   A  B\n0  0  1\n1  1  2\n2  2  3\n>>> df.transform(lambda x: x + 1)\n   A  B\n0  1  2\n1  2  3\n2  3  4\n\nEven though the resulting Series must have the same length as the\ninput Series, it is possible to provide several input functions:\n\n>>> s = pd.Series(range(3))\n>>> s\n0    0\n1    1\n2    2\ndtype: int64\n>>> s.transform([np.sqrt, np.exp])\n       sqrt        exp\n0  0.000000   1.000000\n1  1.000000   2.718282\n2  1.414214   7.389056\n\nYou can call transform on a GroupBy object:\n\n>>> df = pd.DataFrame({\n...     \"Date\": [\n...         \"2015-05-08\", \"2015-05-07\", \"2015-05-06\", \"2015-05-05\",\n...         \"2015-05-08\", \"2015-05-07\", \"2015-05-06\", \"2015-05-05\"],\n...     \"Data\": [5, 8, 6, 1, 50, 100, 60, 120],\n... })\n>>> df\n         Date  Data\n0  2015-05-08     5\n1  2015-05-07     8\n2  2015-05-06     6\n3  2015-05-05     1\n4  2015-05-08    50\n5  2015-05-07   100\n6  2015-05-06    60\n7  2015-05-05   120\n>>> df.groupby('Date')['Data'].transform('sum')\n0     55\n1    108\n2     66\n3    121\n4     55\n5    108\n6     66\n7    121\nName: Data, dtype: int64\n\n>>> df = pd.DataFrame({\n...     \"c\": [1, 1, 1, 2, 2, 2, 2],\n...     \"type\": [\"m\", \"n\", \"o\", \"m\", \"m\", \"n\", \"n\"]\n... })\n>>> df\n   c type\n0  1    m\n1  1    n\n2  1    o\n3  2    m\n4  2    m\n5  2    n\n6  2    n\n>>> df['size'] = df.groupby('c')['type'].transform(len)\n>>> df\n   c type size\n0  1    m    3\n1  1    n    3\n2  1    o    3\n3  2    m    4\n4  2    m    4\n5  2    n    4\n6  2    n    4"
  },
  {
    "symbol": "Series.transpose",
    "signature": "(self, *args, **kwargs) -> 'Self'",
    "doc": "Return the transpose, which is by definition self.\n\nReturns\n-------\n%(klass)s"
  },
  {
    "symbol": "Series.truediv",
    "signature": "(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'",
    "doc": "Return Floating division of series and other, element-wise (binary operator `truediv`).\n\nEquivalent to ``series / other``, but with support to substitute a fill_value for\nmissing data in either one of the inputs.\n\nParameters\n----------\nother : Series or scalar value\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result of filling (at that location) will be missing.\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.\n\nReturns\n-------\nSeries\n    The result of the operation.\n\nSee Also\n--------\nSeries.rtruediv : Reverse of the Floating division operator, see\n    `Python documentation\n    <https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types>`_\n    for more details.\n\nExamples\n--------\n>>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n>>> a\na    1.0\nb    1.0\nc    1.0\nd    NaN\ndtype: float64\n>>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n>>> b\na    1.0\nb    NaN\nd    1.0\ne    NaN\ndtype: float64\n>>> a.divide(b, fill_value=0)\na    1.0\nb    inf\nc    inf\nd    0.0\ne    NaN\ndtype: float64"
  },
  {
    "symbol": "Series.truncate",
    "signature": "(self, before=None, after=None, axis: 'Axis | None' = None, copy: 'bool_t | None' = None) -> 'Self'",
    "doc": "Truncate a Series or DataFrame before and after some index value.\n\nThis is a useful shorthand for boolean indexing based on index\nvalues above or below certain thresholds.\n\nParameters\n----------\nbefore : date, str, int\n    Truncate all rows before this index value.\nafter : date, str, int\n    Truncate all rows after this index value.\naxis : {0 or 'index', 1 or 'columns'}, optional\n    Axis to truncate. Truncates the index (rows) by default.\n    For `Series` this parameter is unused and defaults to 0.\ncopy : bool, default is True,\n    Return a copy of the truncated section.\n\n    .. note::\n        The `copy` keyword will change behavior in pandas 3.0.\n        `Copy-on-Write\n        <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n        will be enabled by default, which means that all methods with a\n        `copy` keyword will use a lazy copy mechanism to defer the copy and\n        ignore the `copy` keyword. The `copy` keyword will be removed in a\n        future version of pandas.\n\n        You can already get the future behavior and improvements through\n        enabling copy on write ``pd.options.mode.copy_on_write = True``\n\nReturns\n-------\ntype of caller\n    The truncated Series or DataFrame.\n\nSee Also\n--------\nDataFrame.loc : Select a subset of a DataFrame by label.\nDataFrame.iloc : Select a subset of a DataFrame by position.\n\nNotes\n-----\nIf the index being truncated contains only datetime values,\n`before` and `after` may be specified as strings instead of\nTimestamps.\n\nExamples\n--------\n>>> df = pd.DataFrame({'A': ['a', 'b', 'c', 'd', 'e'],\n...                    'B': ['f', 'g', 'h', 'i', 'j'],\n...                    'C': ['k', 'l', 'm', 'n', 'o']},\n...                   index=[1, 2, 3, 4, 5])\n>>> df\n   A  B  C\n1  a  f  k\n2  b  g  l\n3  c  h  m\n4  d  i  n\n5  e  j  o\n\n>>> df.truncate(before=2, after=4)\n   A  B  C\n2  b  g  l\n3  c  h  m\n4  d  i  n\n\nThe columns of a DataFrame can be truncated.\n\n>>> df.truncate(before=\"A\", after=\"B\", axis=\"columns\")\n   A  B\n1  a  f\n2  b  g\n3  c  h\n4  d  i\n5  e  j\n\nFor Series, only rows can be truncated.\n\n>>> df['A'].truncate(before=2, after=4)\n2    b\n3    c\n4    d\nName: A, dtype: object\n\nThe index values in ``truncate`` can be datetimes or string\ndates.\n\n>>> dates = pd.date_range('2016-01-01', '2016-02-01', freq='s')\n>>> df = pd.DataFrame(index=dates, data={'A': 1})\n>>> df.tail()\n                     A\n2016-01-31 23:59:56  1\n2016-01-31 23:59:57  1\n2016-01-31 23:59:58  1\n2016-01-31 23:59:59  1\n2016-02-01 00:00:00  1\n\n>>> df.truncate(before=pd.Timestamp('2016-01-05'),\n...             after=pd.Timestamp('2016-01-10')).tail()\n                     A\n2016-01-09 23:59:56  1\n2016-01-09 23:59:57  1\n2016-01-09 23:59:58  1\n2016-01-09 23:59:59  1\n2016-01-10 00:00:00  1\n\nBecause the index is a DatetimeIndex containing only dates, we can\nspecify `before` and `after` as strings. They will be coerced to\nTimestamps before truncation.\n\n>>> df.truncate('2016-01-05', '2016-01-10').tail()\n                     A\n2016-01-09 23:59:56  1\n2016-01-09 23:59:57  1\n2016-01-09 23:59:58  1\n2016-01-09 23:59:59  1\n2016-01-10 00:00:00  1\n\nNote that ``truncate`` assumes a 0 value for any unspecified time\ncomponent (midnight). This differs from partial string slicing, which\nreturns any partially matching dates.\n\n>>> df.loc['2016-01-05':'2016-01-10', :].tail()\n                     A\n2016-01-10 23:59:55  1\n2016-01-10 23:59:56  1\n2016-01-10 23:59:57  1\n2016-01-10 23:59:58  1\n2016-01-10 23:59:59  1"
  },
  {
    "symbol": "Series.tz_convert",
    "signature": "(self, tz, axis: 'Axis' = 0, level=None, copy: 'bool_t | None' = None) -> 'Self'",
    "doc": "Convert tz-aware axis to target time zone.\n\nParameters\n----------\ntz : str or tzinfo object or None\n    Target time zone. Passing ``None`` will convert to\n    UTC and remove the timezone information.\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    The axis to convert\nlevel : int, str, default None\n    If axis is a MultiIndex, convert a specific level. Otherwise\n    must be None.\ncopy : bool, default True\n    Also make a copy of the underlying data.\n\n    .. note::\n        The `copy` keyword will change behavior in pandas 3.0.\n        `Copy-on-Write\n        <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n        will be enabled by default, which means that all methods with a\n        `copy` keyword will use a lazy copy mechanism to defer the copy and\n        ignore the `copy` keyword. The `copy` keyword will be removed in a\n        future version of pandas.\n\n        You can already get the future behavior and improvements through\n        enabling copy on write ``pd.options.mode.copy_on_write = True``\n\nReturns\n-------\nSeries/DataFrame\n    Object with time zone converted axis.\n\nRaises\n------\nTypeError\n    If the axis is tz-naive.\n\nExamples\n--------\nChange to another time zone:\n\n>>> s = pd.Series(\n...     [1],\n...     index=pd.DatetimeIndex(['2018-09-15 01:30:00+02:00']),\n... )\n>>> s.tz_convert('Asia/Shanghai')\n2018-09-15 07:30:00+08:00    1\ndtype: int64\n\nPass None to convert to UTC and get a tz-naive index:\n\n>>> s = pd.Series([1],\n...               index=pd.DatetimeIndex(['2018-09-15 01:30:00+02:00']))\n>>> s.tz_convert(None)\n2018-09-14 23:30:00    1\ndtype: int64"
  },
  {
    "symbol": "Series.tz_localize",
    "signature": "(self, tz, axis: 'Axis' = 0, level=None, copy: 'bool_t | None' = None, ambiguous: 'TimeAmbiguous' = 'raise', nonexistent: 'TimeNonexistent' = 'raise') -> 'Self'",
    "doc": "Localize tz-naive index of a Series or DataFrame to target time zone.\n\nThis operation localizes the Index. To localize the values in a\ntimezone-naive Series, use :meth:`Series.dt.tz_localize`.\n\nParameters\n----------\ntz : str or tzinfo or None\n    Time zone to localize. Passing ``None`` will remove the\n    time zone information and preserve local time.\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    The axis to localize\nlevel : int, str, default None\n    If axis ia a MultiIndex, localize a specific level. Otherwise\n    must be None.\ncopy : bool, default True\n    Also make a copy of the underlying data.\n\n    .. note::\n        The `copy` keyword will change behavior in pandas 3.0.\n        `Copy-on-Write\n        <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n        will be enabled by default, which means that all methods with a\n        `copy` keyword will use a lazy copy mechanism to defer the copy and\n        ignore the `copy` keyword. The `copy` keyword will be removed in a\n        future version of pandas.\n\n        You can already get the future behavior and improvements through\n        enabling copy on write ``pd.options.mode.copy_on_write = True``\nambiguous : 'infer', bool-ndarray, 'NaT', default 'raise'\n    When clocks moved backward due to DST, ambiguous times may arise.\n    For example in Central European Time (UTC+01), when going from\n    03:00 DST to 02:00 non-DST, 02:30:00 local time occurs both at\n    00:30:00 UTC and at 01:30:00 UTC. In such a situation, the\n    `ambiguous` parameter dictates how ambiguous times should be\n    handled.\n\n    - 'infer' will attempt to infer fall dst-transition hours based on\n      order\n    - bool-ndarray where True signifies a DST time, False designates\n      a non-DST time (note that this flag is only applicable for\n      ambiguous times)\n    - 'NaT' will return NaT where there are ambiguous times\n    - 'raise' will raise an AmbiguousTimeError if there are ambiguous\n      times.\nnonexistent : str, default 'raise'\n    A nonexistent time does not exist in a particular timezone\n    where clocks moved forward due to DST. Valid values are:\n\n    - 'shift_forward' will shift the nonexistent time forward to the\n      closest existing time\n    - 'shift_backward' will shift the nonexistent time backward to the\n      closest existing time\n    - 'NaT' will return NaT where there are nonexistent times\n    - timedelta objects will shift nonexistent times by the timedelta\n    - 'raise' will raise an NonExistentTimeError if there are\n      nonexistent times.\n\nReturns\n-------\nSeries/DataFrame\n    Same type as the input.\n\nRaises\n------\nTypeError\n    If the TimeSeries is tz-aware and tz is not None.\n\nExamples\n--------\nLocalize local times:\n\n>>> s = pd.Series(\n...     [1],\n...     index=pd.DatetimeIndex(['2018-09-15 01:30:00']),\n... )\n>>> s.tz_localize('CET')\n2018-09-15 01:30:00+02:00    1\ndtype: int64\n\nPass None to convert to tz-naive index and preserve local time:\n\n>>> s = pd.Series([1],\n...               index=pd.DatetimeIndex(['2018-09-15 01:30:00+02:00']))\n>>> s.tz_localize(None)\n2018-09-15 01:30:00    1\ndtype: int64\n\nBe careful with DST changes. When there is sequential data, pandas\ncan infer the DST time:\n\n>>> s = pd.Series(range(7),\n...               index=pd.DatetimeIndex(['2018-10-28 01:30:00',\n...                                       '2018-10-28 02:00:00',\n...                                       '2018-10-28 02:30:00',\n...                                       '2018-10-28 02:00:00',\n...                                       '2018-10-28 02:30:00',\n...                                       '2018-10-28 03:00:00',\n...                                       '2018-10-28 03:30:00']))\n>>> s.tz_localize('CET', ambiguous='infer')\n2018-10-28 01:30:00+02:00    0\n2018-10-28 02:00:00+02:00    1\n2018-10-28 02:30:00+02:00    2\n2018-10-28 02:00:00+01:00    3\n2018-10-28 02:30:00+01:00    4\n2018-10-28 03:00:00+01:00    5\n2018-10-28 03:30:00+01:00    6\ndtype: int64\n\nIn some cases, inferring the DST is impossible. In such cases, you can\npass an ndarray to the ambiguous parameter to set the DST explicitly\n\n>>> s = pd.Series(range(3),\n...               index=pd.DatetimeIndex(['2018-10-28 01:20:00',\n...                                       '2018-10-28 02:36:00',\n...                                       '2018-10-28 03:46:00']))\n>>> s.tz_localize('CET', ambiguous=np.array([True, True, False]))\n2018-10-28 01:20:00+02:00    0\n2018-10-28 02:36:00+02:00    1\n2018-10-28 03:46:00+01:00    2\ndtype: int64\n\nIf the DST transition causes nonexistent times, you can shift these\ndates forward or backward with a timedelta object or `'shift_forward'`\nor `'shift_backward'`.\n\n>>> s = pd.Series(range(2),\n...               index=pd.DatetimeIndex(['2015-03-29 02:30:00',\n...                                       '2015-03-29 03:30:00']))\n>>> s.tz_localize('Europe/Warsaw', nonexistent='shift_forward')\n2015-03-29 03:00:00+02:00    0\n2015-03-29 03:30:00+02:00    1\ndtype: int64\n>>> s.tz_localize('Europe/Warsaw', nonexistent='shift_backward')\n2015-03-29 01:59:59.999999999+01:00    0\n2015-03-29 03:30:00+02:00              1\ndtype: int64\n>>> s.tz_localize('Europe/Warsaw', nonexistent=pd.Timedelta('1h'))\n2015-03-29 03:30:00+02:00    0\n2015-03-29 03:30:00+02:00    1\ndtype: int64"
  },
  {
    "symbol": "Series.unique",
    "signature": "(self) -> 'ArrayLike'",
    "doc": "Return unique values of Series object.\n\nUniques are returned in order of appearance. Hash table-based unique,\ntherefore does NOT sort.\n\nReturns\n-------\nndarray or ExtensionArray\n    The unique values returned as a NumPy array. See Notes.\n\nSee Also\n--------\nSeries.drop_duplicates : Return Series with duplicate values removed.\nunique : Top-level unique method for any 1-d array-like object.\nIndex.unique : Return Index with unique values from an Index object.\n\nNotes\n-----\nReturns the unique values as a NumPy array. In case of an\nextension-array backed Series, a new\n:class:`~api.extensions.ExtensionArray` of that type with just\nthe unique values is returned. This includes\n\n    * Categorical\n    * Period\n    * Datetime with Timezone\n    * Datetime without Timezone\n    * Timedelta\n    * Interval\n    * Sparse\n    * IntegerNA\n\nSee Examples section.\n\nExamples\n--------\n>>> pd.Series([2, 1, 3, 3], name='A').unique()\narray([2, 1, 3])\n\n>>> pd.Series([pd.Timestamp('2016-01-01') for _ in range(3)]).unique()\n<DatetimeArray>\n['2016-01-01 00:00:00']\nLength: 1, dtype: datetime64[ns]\n\n>>> pd.Series([pd.Timestamp('2016-01-01', tz='US/Eastern')\n...            for _ in range(3)]).unique()\n<DatetimeArray>\n['2016-01-01 00:00:00-05:00']\nLength: 1, dtype: datetime64[ns, US/Eastern]\n\nAn Categorical will return categories in the order of\nappearance and with the same dtype.\n\n>>> pd.Series(pd.Categorical(list('baabc'))).unique()\n['b', 'a', 'c']\nCategories (3, object): ['a', 'b', 'c']\n>>> pd.Series(pd.Categorical(list('baabc'), categories=list('abc'),\n...                          ordered=True)).unique()\n['b', 'a', 'c']\nCategories (3, object): ['a' < 'b' < 'c']"
  },
  {
    "symbol": "Series.unstack",
    "signature": "(self, level: 'IndexLabel' = -1, fill_value: 'Hashable | None' = None, sort: 'bool' = True) -> 'DataFrame'",
    "doc": "Unstack, also known as pivot, Series with MultiIndex to produce DataFrame.\n\nParameters\n----------\nlevel : int, str, or list of these, default last level\n    Level(s) to unstack, can pass level name.\nfill_value : scalar value, default None\n    Value to use when replacing NaN values.\nsort : bool, default True\n    Sort the level(s) in the resulting MultiIndex columns.\n\nReturns\n-------\nDataFrame\n    Unstacked Series.\n\nNotes\n-----\nReference :ref:`the user guide <reshaping.stacking>` for more examples.\n\nExamples\n--------\n>>> s = pd.Series([1, 2, 3, 4],\n...               index=pd.MultiIndex.from_product([['one', 'two'],\n...                                                 ['a', 'b']]))\n>>> s\none  a    1\n     b    2\ntwo  a    3\n     b    4\ndtype: int64\n\n>>> s.unstack(level=-1)\n     a  b\none  1  2\ntwo  3  4\n\n>>> s.unstack(level=0)\n   one  two\na    1    3\nb    2    4"
  },
  {
    "symbol": "Series.update",
    "signature": "(self, other: 'Series | Sequence | Mapping') -> 'None'",
    "doc": "Modify Series in place using values from passed Series.\n\nUses non-NA values from passed Series to make updates. Aligns\non index.\n\nParameters\n----------\nother : Series, or object coercible into Series\n\nExamples\n--------\n>>> s = pd.Series([1, 2, 3])\n>>> s.update(pd.Series([4, 5, 6]))\n>>> s\n0    4\n1    5\n2    6\ndtype: int64\n\n>>> s = pd.Series(['a', 'b', 'c'])\n>>> s.update(pd.Series(['d', 'e'], index=[0, 2]))\n>>> s\n0    d\n1    b\n2    e\ndtype: object\n\n>>> s = pd.Series([1, 2, 3])\n>>> s.update(pd.Series([4, 5, 6, 7, 8]))\n>>> s\n0    4\n1    5\n2    6\ndtype: int64\n\nIf ``other`` contains NaNs the corresponding values are not updated\nin the original Series.\n\n>>> s = pd.Series([1, 2, 3])\n>>> s.update(pd.Series([4, np.nan, 6]))\n>>> s\n0    4\n1    2\n2    6\ndtype: int64\n\n``other`` can also be a non-Series object type\nthat is coercible into a Series\n\n>>> s = pd.Series([1, 2, 3])\n>>> s.update([4, np.nan, 6])\n>>> s\n0    4\n1    2\n2    6\ndtype: int64\n\n>>> s = pd.Series([1, 2, 3])\n>>> s.update({1: 9})\n>>> s\n0    1\n1    9\n2    3\ndtype: int64"
  },
  {
    "symbol": "Series.value_counts",
    "signature": "(self, normalize: 'bool' = False, sort: 'bool' = True, ascending: 'bool' = False, bins=None, dropna: 'bool' = True) -> 'Series'",
    "doc": "Return a Series containing counts of unique values.\n\nThe resulting object will be in descending order so that the\nfirst element is the most frequently-occurring element.\nExcludes NA values by default.\n\nParameters\n----------\nnormalize : bool, default False\n    If True then the object returned will contain the relative\n    frequencies of the unique values.\nsort : bool, default True\n    Sort by frequencies when True. Preserve the order of the data when False.\nascending : bool, default False\n    Sort in ascending order.\nbins : int, optional\n    Rather than count values, group them into half-open bins,\n    a convenience for ``pd.cut``, only works with numeric data.\ndropna : bool, default True\n    Don't include counts of NaN.\n\nReturns\n-------\nSeries\n\nSee Also\n--------\nSeries.count: Number of non-NA elements in a Series.\nDataFrame.count: Number of non-NA elements in a DataFrame.\nDataFrame.value_counts: Equivalent method on DataFrames.\n\nExamples\n--------\n>>> index = pd.Index([3, 1, 2, 3, 4, np.nan])\n>>> index.value_counts()\n3.0    2\n1.0    1\n2.0    1\n4.0    1\nName: count, dtype: int64\n\nWith `normalize` set to `True`, returns the relative frequency by\ndividing all values by the sum of values.\n\n>>> s = pd.Series([3, 1, 2, 3, 4, np.nan])\n>>> s.value_counts(normalize=True)\n3.0    0.4\n1.0    0.2\n2.0    0.2\n4.0    0.2\nName: proportion, dtype: float64\n\n**bins**\n\nBins can be useful for going from a continuous variable to a\ncategorical variable; instead of counting unique\napparitions of values, divide the index in the specified\nnumber of half-open bins.\n\n>>> s.value_counts(bins=3)\n(0.996, 2.0]    2\n(2.0, 3.0]      2\n(3.0, 4.0]      1\nName: count, dtype: int64\n\n**dropna**\n\nWith `dropna` set to `False` we can also see NaN index values.\n\n>>> s.value_counts(dropna=False)\n3.0    2\n1.0    1\n2.0    1\n4.0    1\nNaN    1\nName: count, dtype: int64"
  },
  {
    "symbol": "Series.values",
    "signature": "(property)",
    "doc": "\nReturn Series as ndarray or ndarray-like depending on the dtype.\n\n.. warning::\n\n   We recommend using :attr:`Series.array` or\n   :meth:`Series.to_numpy`, depending on whether you need\n   a reference to the underlying data or a NumPy array.\n\nReturns\n-------\nnumpy.ndarray or ndarray-like\n\nSee Also\n--------\nSeries.array : Reference to the underlying data.\nSeries.to_numpy : A NumPy array representing the underlying data.\n\nExamples\n--------\n>>> pd.Series([1, 2, 3]).values\narray([1, 2, 3])\n\n>>> pd.Series(list('aabc')).values\narray(['a', 'a', 'b', 'c'], dtype=object)\n\n>>> pd.Series(list('aabc')).astype('category').values\n['a', 'a', 'b', 'c']\nCategories (3, object): ['a', 'b', 'c']\n\nTimezone aware datetime data is converted to UTC:\n\n>>> pd.Series(pd.date_range('20130101', periods=3,\n...                         tz='US/Eastern')).values\narray(['2013-01-01T05:00:00.000000000',\n       '2013-01-02T05:00:00.000000000',\n       '2013-01-03T05:00:00.000000000'], dtype='datetime64[ns]')\n"
  },
  {
    "symbol": "Series.var",
    "signature": "(self, axis: 'Axis | None' = None, skipna: 'bool' = True, ddof: 'int' = 1, numeric_only: 'bool' = False, **kwargs)",
    "doc": "Return unbiased variance over requested axis.\n\nNormalized by N-1 by default. This can be changed using the ddof argument.\n\nParameters\n----------\naxis : {index (0)}\n    For `Series` this parameter is unused and defaults to 0.\n\n    .. warning::\n\n        The behavior of DataFrame.var with ``axis=None`` is deprecated,\n        in a future version this will reduce over both axes and return a scalar\n        To retain the old behavior, pass axis=0 (or do not pass axis).\n\nskipna : bool, default True\n    Exclude NA/null values. If an entire row/column is NA, the result\n    will be NA.\nddof : int, default 1\n    Delta Degrees of Freedom. The divisor used in calculations is N - ddof,\n    where N represents the number of elements.\nnumeric_only : bool, default False\n    Include only float, int, boolean columns. Not implemented for Series.\n\nReturns\n-------\nscalar or Series (if level specified) \n\nExamples\n--------\n>>> df = pd.DataFrame({'person_id': [0, 1, 2, 3],\n...                    'age': [21, 25, 62, 43],\n...                    'height': [1.61, 1.87, 1.49, 2.01]}\n...                   ).set_index('person_id')\n>>> df\n           age  height\nperson_id\n0           21    1.61\n1           25    1.87\n2           62    1.49\n3           43    2.01\n\n>>> df.var()\nage       352.916667\nheight      0.056367\ndtype: float64\n\nAlternatively, ``ddof=0`` can be set to normalize by N instead of N-1:\n\n>>> df.var(ddof=0)\nage       264.687500\nheight      0.042275\ndtype: float64"
  },
  {
    "symbol": "Series.view",
    "signature": "(self, dtype: 'Dtype | None' = None) -> 'Series'",
    "doc": "Create a new view of the Series.\n\n.. deprecated:: 2.2.0\n    ``Series.view`` is deprecated and will be removed in a future version.\n    Use :meth:`Series.astype` as an alternative to change the dtype.\n\nThis function will return a new Series with a view of the same\nunderlying values in memory, optionally reinterpreted with a new data\ntype. The new data type must preserve the same size in bytes as to not\ncause index misalignment.\n\nParameters\n----------\ndtype : data type\n    Data type object or one of their string representations.\n\nReturns\n-------\nSeries\n    A new Series object as a view of the same data in memory.\n\nSee Also\n--------\nnumpy.ndarray.view : Equivalent numpy function to create a new view of\n    the same data in memory.\n\nNotes\n-----\nSeries are instantiated with ``dtype=float64`` by default. While\n``numpy.ndarray.view()`` will return a view with the same data type as\nthe original array, ``Series.view()`` (without specified dtype)\nwill try using ``float64`` and may fail if the original data type size\nin bytes is not the same.\n\nExamples\n--------\nUse ``astype`` to change the dtype instead."
  },
  {
    "symbol": "Series.where",
    "signature": "(self, cond, other=nan, *, inplace: 'bool_t' = False, axis: 'Axis | None' = None, level: 'Level | None' = None) -> 'Self | None'",
    "doc": "Replace values where the condition is False.\n\nParameters\n----------\ncond : bool Series/DataFrame, array-like, or callable\n    Where `cond` is True, keep the original value. Where\n    False, replace with corresponding value from `other`.\n    If `cond` is callable, it is computed on the Series/DataFrame and\n    should return boolean Series/DataFrame or array. The callable must\n    not change input Series/DataFrame (though pandas doesn't check it).\nother : scalar, Series/DataFrame, or callable\n    Entries where `cond` is False are replaced with\n    corresponding value from `other`.\n    If other is callable, it is computed on the Series/DataFrame and\n    should return scalar or Series/DataFrame. The callable must not\n    change input Series/DataFrame (though pandas doesn't check it).\n    If not specified, entries will be filled with the corresponding\n    NULL value (``np.nan`` for numpy dtypes, ``pd.NA`` for extension\n    dtypes).\ninplace : bool, default False\n    Whether to perform the operation in place on the data.\naxis : int, default None\n    Alignment axis if needed. For `Series` this parameter is\n    unused and defaults to 0.\nlevel : int, default None\n    Alignment level if needed.\n\nReturns\n-------\nSame type as caller or None if ``inplace=True``.\n\nSee Also\n--------\n:func:`DataFrame.mask` : Return an object of same shape as\n    self.\n\nNotes\n-----\nThe where method is an application of the if-then idiom. For each\nelement in the calling DataFrame, if ``cond`` is ``True`` the\nelement is used; otherwise the corresponding element from the DataFrame\n``other`` is used. If the axis of ``other`` does not align with axis of\n``cond`` Series/DataFrame, the misaligned index positions will be filled with\nFalse.\n\nThe signature for :func:`DataFrame.where` differs from\n:func:`numpy.where`. Roughly ``df1.where(m, df2)`` is equivalent to\n``np.where(m, df1, df2)``.\n\nFor further details and examples see the ``where`` documentation in\n:ref:`indexing <indexing.where_mask>`.\n\nThe dtype of the object takes precedence. The fill value is casted to\nthe object's dtype, if this can be done losslessly.\n\nExamples\n--------\n>>> s = pd.Series(range(5))\n>>> s.where(s > 0)\n0    NaN\n1    1.0\n2    2.0\n3    3.0\n4    4.0\ndtype: float64\n>>> s.mask(s > 0)\n0    0.0\n1    NaN\n2    NaN\n3    NaN\n4    NaN\ndtype: float64\n\n>>> s = pd.Series(range(5))\n>>> t = pd.Series([True, False])\n>>> s.where(t, 99)\n0     0\n1    99\n2    99\n3    99\n4    99\ndtype: int64\n>>> s.mask(t, 99)\n0    99\n1     1\n2    99\n3    99\n4    99\ndtype: int64\n\n>>> s.where(s > 1, 10)\n0    10\n1    10\n2    2\n3    3\n4    4\ndtype: int64\n>>> s.mask(s > 1, 10)\n0     0\n1     1\n2    10\n3    10\n4    10\ndtype: int64\n\n>>> df = pd.DataFrame(np.arange(10).reshape(-1, 2), columns=['A', 'B'])\n>>> df\n   A  B\n0  0  1\n1  2  3\n2  4  5\n3  6  7\n4  8  9\n>>> m = df % 3 == 0\n>>> df.where(m, -df)\n   A  B\n0  0 -1\n1 -2  3\n2 -4 -5\n3  6 -7\n4 -8  9\n>>> df.where(m, -df) == np.where(m, df, -df)\n      A     B\n0  True  True\n1  True  True\n2  True  True\n3  True  True\n4  True  True\n>>> df.where(m, -df) == df.mask(~m, -df)\n      A     B\n0  True  True\n1  True  True\n2  True  True\n3  True  True\n4  True  True"
  },
  {
    "symbol": "Series.xs",
    "signature": "(self, key: 'IndexLabel', axis: 'Axis' = 0, level: 'IndexLabel | None' = None, drop_level: 'bool_t' = True) -> 'Self'",
    "doc": "Return cross-section from the Series/DataFrame.\n\nThis method takes a `key` argument to select data at a particular\nlevel of a MultiIndex.\n\nParameters\n----------\nkey : label or tuple of label\n    Label contained in the index, or partially in a MultiIndex.\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    Axis to retrieve cross-section on.\nlevel : object, defaults to first n levels (n=1 or len(key))\n    In case of a key partially contained in a MultiIndex, indicate\n    which levels are used. Levels can be referred by label or position.\ndrop_level : bool, default True\n    If False, returns object with same levels as self.\n\nReturns\n-------\nSeries or DataFrame\n    Cross-section from the original Series or DataFrame\n    corresponding to the selected index levels.\n\nSee Also\n--------\nDataFrame.loc : Access a group of rows and columns\n    by label(s) or a boolean array.\nDataFrame.iloc : Purely integer-location based indexing\n    for selection by position.\n\nNotes\n-----\n`xs` can not be used to set values.\n\nMultiIndex Slicers is a generic way to get/set values on\nany level or levels.\nIt is a superset of `xs` functionality, see\n:ref:`MultiIndex Slicers <advanced.mi_slicers>`.\n\nExamples\n--------\n>>> d = {'num_legs': [4, 4, 2, 2],\n...      'num_wings': [0, 0, 2, 2],\n...      'class': ['mammal', 'mammal', 'mammal', 'bird'],\n...      'animal': ['cat', 'dog', 'bat', 'penguin'],\n...      'locomotion': ['walks', 'walks', 'flies', 'walks']}\n>>> df = pd.DataFrame(data=d)\n>>> df = df.set_index(['class', 'animal', 'locomotion'])\n>>> df\n                           num_legs  num_wings\nclass  animal  locomotion\nmammal cat     walks              4          0\n       dog     walks              4          0\n       bat     flies              2          2\nbird   penguin walks              2          2\n\nGet values at specified index\n\n>>> df.xs('mammal')\n                   num_legs  num_wings\nanimal locomotion\ncat    walks              4          0\ndog    walks              4          0\nbat    flies              2          2\n\nGet values at several indexes\n\n>>> df.xs(('mammal', 'dog', 'walks'))\nnum_legs     4\nnum_wings    0\nName: (mammal, dog, walks), dtype: int64\n\nGet values at specified index and level\n\n>>> df.xs('cat', level=1)\n                   num_legs  num_wings\nclass  locomotion\nmammal walks              4          0\n\nGet values at several indexes and levels\n\n>>> df.xs(('bird', 'walks'),\n...       level=[0, 'locomotion'])\n         num_legs  num_wings\nanimal\npenguin         2          2\n\nGet values at specified column and axis\n\n>>> df.xs('num_wings', axis=1)\nclass   animal   locomotion\nmammal  cat      walks         0\n        dog      walks         0\n        bat      flies         2\nbird    penguin  walks         2\nName: num_wings, dtype: int64"
  },
  {
    "symbol": "pandas.ArrowDtype",
    "signature": "(pyarrow_dtype: 'pa.DataType') -> 'None'",
    "doc": "An ExtensionDtype for PyArrow data types.\n\n.. warning::\n\n   ArrowDtype is considered experimental. The implementation and\n   parts of the API may change without warning.\n\nWhile most ``dtype`` arguments can accept the \"string\"\nconstructor, e.g. ``\"int64[pyarrow]\"``, ArrowDtype is useful\nif the data type contains parameters like ``pyarrow.timestamp``.\n\nParameters\n----------\npyarrow_dtype : pa.DataType\n    An instance of a `pyarrow.DataType <https://arrow.apache.org/docs/python/api/datatypes.html#factory-functions>`__.\n\nAttributes\n----------\npyarrow_dtype\n\nMethods\n-------\nNone\n\nReturns\n-------\nArrowDtype\n\nExamples\n--------\n>>> import pyarrow as pa\n>>> pd.ArrowDtype(pa.int64())\nint64[pyarrow]\n\nTypes with parameters must be constructed with ArrowDtype.\n\n>>> pd.ArrowDtype(pa.timestamp(\"s\", tz=\"America/New_York\"))\ntimestamp[s, tz=America/New_York][pyarrow]\n>>> pd.ArrowDtype(pa.list_(pa.int64()))\nlist<item: int64>[pyarrow]"
  },
  {
    "symbol": "pandas.BooleanDtype",
    "signature": "()",
    "doc": "Extension dtype for boolean data.\n\n.. warning::\n\n   BooleanDtype is considered experimental. The implementation and\n   parts of the API may change without warning.\n\nAttributes\n----------\nNone\n\nMethods\n-------\nNone\n\nExamples\n--------\n>>> pd.BooleanDtype()\nBooleanDtype"
  },
  {
    "symbol": "pandas.Categorical",
    "signature": "(values, categories=None, ordered=None, dtype: 'Dtype | None' = None, fastpath: 'bool | lib.NoDefault' = <no_default>, copy: 'bool' = True) -> 'None'",
    "doc": "Represent a categorical variable in classic R / S-plus fashion.\n\n`Categoricals` can only take on a limited, and usually fixed, number\nof possible values (`categories`). In contrast to statistical categorical\nvariables, a `Categorical` might have an order, but numerical operations\n(additions, divisions, ...) are not possible.\n\nAll values of the `Categorical` are either in `categories` or `np.nan`.\nAssigning values outside of `categories` will raise a `ValueError`. Order\nis defined by the order of the `categories`, not lexical order of the\nvalues.\n\nParameters\n----------\nvalues : list-like\n    The values of the categorical. If categories are given, values not in\n    categories will be replaced with NaN.\ncategories : Index-like (unique), optional\n    The unique categories for this categorical. If not given, the\n    categories are assumed to be the unique values of `values` (sorted, if\n    possible, otherwise in the order in which they appear).\nordered : bool, default False\n    Whether or not this categorical is treated as a ordered categorical.\n    If True, the resulting categorical will be ordered.\n    An ordered categorical respects, when sorted, the order of its\n    `categories` attribute (which in turn is the `categories` argument, if\n    provided).\ndtype : CategoricalDtype\n    An instance of ``CategoricalDtype`` to use for this categorical.\n\nAttributes\n----------\ncategories : Index\n    The categories of this categorical.\ncodes : ndarray\n    The codes (integer positions, which point to the categories) of this\n    categorical, read only.\nordered : bool\n    Whether or not this Categorical is ordered.\ndtype : CategoricalDtype\n    The instance of ``CategoricalDtype`` storing the ``categories``\n    and ``ordered``.\n\nMethods\n-------\nfrom_codes\n__array__\n\nRaises\n------\nValueError\n    If the categories do not validate.\nTypeError\n    If an explicit ``ordered=True`` is given but no `categories` and the\n    `values` are not sortable.\n\nSee Also\n--------\nCategoricalDtype : Type for categorical data.\nCategoricalIndex : An Index with an underlying ``Categorical``.\n\nNotes\n-----\nSee the `user guide\n<https://pandas.pydata.org/pandas-docs/stable/user_guide/categorical.html>`__\nfor more.\n\nExamples\n--------\n>>> pd.Categorical([1, 2, 3, 1, 2, 3])\n[1, 2, 3, 1, 2, 3]\nCategories (3, int64): [1, 2, 3]\n\n>>> pd.Categorical(['a', 'b', 'c', 'a', 'b', 'c'])\n['a', 'b', 'c', 'a', 'b', 'c']\nCategories (3, object): ['a', 'b', 'c']\n\nMissing values are not included as a category.\n\n>>> c = pd.Categorical([1, 2, 3, 1, 2, 3, np.nan])\n>>> c\n[1, 2, 3, 1, 2, 3, NaN]\nCategories (3, int64): [1, 2, 3]\n\nHowever, their presence is indicated in the `codes` attribute\nby code `-1`.\n\n>>> c.codes\narray([ 0,  1,  2,  0,  1,  2, -1], dtype=int8)\n\nOrdered `Categoricals` can be sorted according to the custom order\nof the categories and can have a min and max value.\n\n>>> c = pd.Categorical(['a', 'b', 'c', 'a', 'b', 'c'], ordered=True,\n...                    categories=['c', 'b', 'a'])\n>>> c\n['a', 'b', 'c', 'a', 'b', 'c']\nCategories (3, object): ['c' < 'b' < 'a']\n>>> c.min()\n'c'"
  },
  {
    "symbol": "pandas.CategoricalDtype",
    "signature": "(categories=None, ordered: 'Ordered' = False) -> 'None'",
    "doc": "Type for categorical data with the categories and orderedness.\n\nParameters\n----------\ncategories : sequence, optional\n    Must be unique, and must not contain any nulls.\n    The categories are stored in an Index,\n    and if an index is provided the dtype of that index will be used.\nordered : bool or None, default False\n    Whether or not this categorical is treated as a ordered categorical.\n    None can be used to maintain the ordered value of existing categoricals when\n    used in operations that combine categoricals, e.g. astype, and will resolve to\n    False if there is no existing ordered to maintain.\n\nAttributes\n----------\ncategories\nordered\n\nMethods\n-------\nNone\n\nSee Also\n--------\nCategorical : Represent a categorical variable in classic R / S-plus fashion.\n\nNotes\n-----\nThis class is useful for specifying the type of a ``Categorical``\nindependent of the values. See :ref:`categorical.categoricaldtype`\nfor more.\n\nExamples\n--------\n>>> t = pd.CategoricalDtype(categories=['b', 'a'], ordered=True)\n>>> pd.Series(['a', 'b', 'a', 'c'], dtype=t)\n0      a\n1      b\n2      a\n3    NaN\ndtype: category\nCategories (2, object): ['b' < 'a']\n\nAn empty CategoricalDtype with a specific dtype can be created\nby providing an empty index. As follows,\n\n>>> pd.CategoricalDtype(pd.DatetimeIndex([])).categories.dtype\ndtype('<M8[ns]')"
  },
  {
    "symbol": "pandas.CategoricalIndex",
    "signature": "(data=None, categories=None, ordered=None, dtype: 'Dtype | None' = None, copy: 'bool' = False, name: 'Hashable | None' = None) -> 'Self'",
    "doc": "Index based on an underlying :class:`Categorical`.\n\nCategoricalIndex, like Categorical, can only take on a limited,\nand usually fixed, number of possible values (`categories`). Also,\nlike Categorical, it might have an order, but numerical operations\n(additions, divisions, ...) are not possible.\n\nParameters\n----------\ndata : array-like (1-dimensional)\n    The values of the categorical. If `categories` are given, values not in\n    `categories` will be replaced with NaN.\ncategories : index-like, optional\n    The categories for the categorical. Items need to be unique.\n    If the categories are not given here (and also not in `dtype`), they\n    will be inferred from the `data`.\nordered : bool, optional\n    Whether or not this categorical is treated as an ordered\n    categorical. If not given here or in `dtype`, the resulting\n    categorical will be unordered.\ndtype : CategoricalDtype or \"category\", optional\n    If :class:`CategoricalDtype`, cannot be used together with\n    `categories` or `ordered`.\ncopy : bool, default False\n    Make a copy of input ndarray.\nname : object, optional\n    Name to be stored in the index.\n\nAttributes\n----------\ncodes\ncategories\nordered\n\nMethods\n-------\nrename_categories\nreorder_categories\nadd_categories\nremove_categories\nremove_unused_categories\nset_categories\nas_ordered\nas_unordered\nmap\n\nRaises\n------\nValueError\n    If the categories do not validate.\nTypeError\n    If an explicit ``ordered=True`` is given but no `categories` and the\n    `values` are not sortable.\n\nSee Also\n--------\nIndex : The base pandas Index type.\nCategorical : A categorical array.\nCategoricalDtype : Type for categorical data.\n\nNotes\n-----\nSee the `user guide\n<https://pandas.pydata.org/pandas-docs/stable/user_guide/advanced.html#categoricalindex>`__\nfor more.\n\nExamples\n--------\n>>> pd.CategoricalIndex([\"a\", \"b\", \"c\", \"a\", \"b\", \"c\"])\nCategoricalIndex(['a', 'b', 'c', 'a', 'b', 'c'],\n                 categories=['a', 'b', 'c'], ordered=False, dtype='category')\n\n``CategoricalIndex`` can also be instantiated from a ``Categorical``:\n\n>>> c = pd.Categorical([\"a\", \"b\", \"c\", \"a\", \"b\", \"c\"])\n>>> pd.CategoricalIndex(c)\nCategoricalIndex(['a', 'b', 'c', 'a', 'b', 'c'],\n                 categories=['a', 'b', 'c'], ordered=False, dtype='category')\n\nOrdered ``CategoricalIndex`` can have a min and max value.\n\n>>> ci = pd.CategoricalIndex(\n...     [\"a\", \"b\", \"c\", \"a\", \"b\", \"c\"], ordered=True, categories=[\"c\", \"b\", \"a\"]\n... )\n>>> ci\nCategoricalIndex(['a', 'b', 'c', 'a', 'b', 'c'],\n                 categories=['c', 'b', 'a'], ordered=True, dtype='category')\n>>> ci.min()\n'c'"
  },
  {
    "symbol": "pandas.DataFrame",
    "signature": "(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, copy: 'bool | None' = None) -> 'None'",
    "doc": "Two-dimensional, size-mutable, potentially heterogeneous tabular data.\n\nData structure also contains labeled axes (rows and columns).\nArithmetic operations align on both row and column labels. Can be\nthought of as a dict-like container for Series objects. The primary\npandas data structure.\n\nParameters\n----------\ndata : ndarray (structured or homogeneous), Iterable, dict, or DataFrame\n    Dict can contain Series, arrays, constants, dataclass or list-like objects. If\n    data is a dict, column order follows insertion-order. If a dict contains Series\n    which have an index defined, it is aligned by its index. This alignment also\n    occurs if data is a Series or a DataFrame itself. Alignment is done on\n    Series/DataFrame inputs.\n\n    If data is a list of dicts, column order follows insertion-order.\n\nindex : Index or array-like\n    Index to use for resulting frame. Will default to RangeIndex if\n    no indexing information part of input data and no index provided.\ncolumns : Index or array-like\n    Column labels to use for resulting frame when data does not have them,\n    defaulting to RangeIndex(0, 1, 2, ..., n). If data contains column labels,\n    will perform column selection instead.\ndtype : dtype, default None\n    Data type to force. Only a single dtype is allowed. If None, infer.\ncopy : bool or None, default None\n    Copy data from inputs.\n    For dict data, the default of None behaves like ``copy=True``.  For DataFrame\n    or 2d ndarray input, the default of None behaves like ``copy=False``.\n    If data is a dict containing one or more Series (possibly of different dtypes),\n    ``copy=False`` will ensure that these inputs are not copied.\n\n    .. versionchanged:: 1.3.0\n\nSee Also\n--------\nDataFrame.from_records : Constructor from tuples, also record arrays.\nDataFrame.from_dict : From dicts of Series, arrays, or dicts.\nread_csv : Read a comma-separated values (csv) file into DataFrame.\nread_table : Read general delimited file into DataFrame.\nread_clipboard : Read text from clipboard into DataFrame.\n\nNotes\n-----\nPlease reference the :ref:`User Guide <basics.dataframe>` for more information.\n\nExamples\n--------\nConstructing DataFrame from a dictionary.\n\n>>> d = {'col1': [1, 2], 'col2': [3, 4]}\n>>> df = pd.DataFrame(data=d)\n>>> df\n   col1  col2\n0     1     3\n1     2     4\n\nNotice that the inferred dtype is int64.\n\n>>> df.dtypes\ncol1    int64\ncol2    int64\ndtype: object\n\nTo enforce a single dtype:\n\n>>> df = pd.DataFrame(data=d, dtype=np.int8)\n>>> df.dtypes\ncol1    int8\ncol2    int8\ndtype: object\n\nConstructing DataFrame from a dictionary including Series:\n\n>>> d = {'col1': [0, 1, 2, 3], 'col2': pd.Series([2, 3], index=[2, 3])}\n>>> pd.DataFrame(data=d, index=[0, 1, 2, 3])\n   col1  col2\n0     0   NaN\n1     1   NaN\n2     2   2.0\n3     3   3.0\n\nConstructing DataFrame from numpy ndarray:\n\n>>> df2 = pd.DataFrame(np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]),\n...                    columns=['a', 'b', 'c'])\n>>> df2\n   a  b  c\n0  1  2  3\n1  4  5  6\n2  7  8  9\n\nConstructing DataFrame from a numpy ndarray that has labeled columns:\n\n>>> data = np.array([(1, 2, 3), (4, 5, 6), (7, 8, 9)],\n...                 dtype=[(\"a\", \"i4\"), (\"b\", \"i4\"), (\"c\", \"i4\")])\n>>> df3 = pd.DataFrame(data, columns=['c', 'a'])\n...\n>>> df3\n   c  a\n0  3  1\n1  6  4\n2  9  7\n\nConstructing DataFrame from dataclass:\n\n>>> from dataclasses import make_dataclass\n>>> Point = make_dataclass(\"Point\", [(\"x\", int), (\"y\", int)])\n>>> pd.DataFrame([Point(0, 0), Point(0, 3), Point(2, 3)])\n   x  y\n0  0  0\n1  0  3\n2  2  3\n\nConstructing DataFrame from Series/DataFrame:\n\n>>> ser = pd.Series([1, 2, 3], index=[\"a\", \"b\", \"c\"])\n>>> df = pd.DataFrame(data=ser, index=[\"a\", \"c\"])\n>>> df\n   0\na  1\nc  3\n\n>>> df1 = pd.DataFrame([1, 2, 3], index=[\"a\", \"b\", \"c\"], columns=[\"x\"])\n>>> df2 = pd.DataFrame(data=df1, index=[\"a\", \"c\"])\n>>> df2\n   x\na  1\nc  3"
  },
  {
    "symbol": "pandas.DateOffset",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Standard kind of date increment used for a date range.\n\nWorks exactly like the keyword argument form of relativedelta.\nNote that the positional argument form of relativedelata is not\nsupported. Use of the keyword n is discouraged-- you would be better\noff specifying n in the keywords you use, but regardless it is\nthere for you. n is needed for DateOffset subclasses.\n\nDateOffset works as follows.  Each offset specify a set of dates\nthat conform to the DateOffset.  For example, Bday defines this\nset to be the set of dates that are weekdays (M-F).  To test if a\ndate is in the set of a DateOffset dateOffset we can use the\nis_on_offset method: dateOffset.is_on_offset(date).\n\nIf a date is not on a valid date, the rollback and rollforward\nmethods can be used to roll the date to the nearest valid date\nbefore/after the date.\n\nDateOffsets can be created to move dates forward a given number of\nvalid dates.  For example, Bday(2) can be added to a date to move\nit two business days forward.  If the date does not start on a\nvalid date, first it is moved to a valid date.  Thus pseudo code\nis::\n\n    def __add__(date):\n      date = rollback(date) # does nothing if date is valid\n      return date + <n number of periods>\n\nWhen a date offset is created for a negative number of periods,\nthe date is first rolled forward.  The pseudo code is::\n\n    def __add__(date):\n      date = rollforward(date) # does nothing if date is valid\n      return date + <n number of periods>\n\nZero presents a problem.  Should it roll forward or back?  We\narbitrarily have it rollforward:\n\ndate + BDay(0) == BDay.rollforward(date)\n\nSince 0 is a bit weird, we suggest avoiding its use.\n\nBesides, adding a DateOffsets specified by the singular form of the date\ncomponent can be used to replace certain component of the timestamp.\n\nParameters\n----------\nn : int, default 1\n    The number of time periods the offset represents.\n    If specified without a temporal pattern, defaults to n days.\nnormalize : bool, default False\n    Whether to round the result of a DateOffset addition down to the\n    previous midnight.\nweekday : int {0, 1, ..., 6}, default 0\n\n    A specific integer for the day of the week.\n\n    - 0 is Monday\n    - 1 is Tuesday\n    - 2 is Wednesday\n    - 3 is Thursday\n    - 4 is Friday\n    - 5 is Saturday\n    - 6 is Sunday\n\n    Instead Weekday type from dateutil.relativedelta can be used.\n\n    - MO is Monday\n    - TU is Tuesday\n    - WE is Wednesday\n    - TH is Thursday\n    - FR is Friday\n    - SA is Saturday\n    - SU is Sunday.\n\n**kwds\n    Temporal parameter that add to or replace the offset value.\n\n    Parameters that **add** to the offset (like Timedelta):\n\n    - years\n    - months\n    - weeks\n    - days\n    - hours\n    - minutes\n    - seconds\n    - milliseconds\n    - microseconds\n    - nanoseconds\n\n    Parameters that **replace** the offset value:\n\n    - year\n    - month\n    - day\n    - weekday\n    - hour\n    - minute\n    - second\n    - microsecond\n    - nanosecond.\n\nSee Also\n--------\ndateutil.relativedelta.relativedelta : The relativedelta type is designed\n    to be applied to an existing datetime an can replace specific components of\n    that datetime, or represents an interval of time.\n\nExamples\n--------\n>>> from pandas.tseries.offsets import DateOffset\n>>> ts = pd.Timestamp('2017-01-01 09:10:11')\n>>> ts + DateOffset(months=3)\nTimestamp('2017-04-01 09:10:11')\n\n>>> ts = pd.Timestamp('2017-01-01 09:10:11')\n>>> ts + DateOffset(months=2)\nTimestamp('2017-03-01 09:10:11')\n>>> ts + DateOffset(day=31)\nTimestamp('2017-01-31 09:10:11')\n\n>>> ts + pd.DateOffset(hour=8)\nTimestamp('2017-01-01 08:10:11')"
  },
  {
    "symbol": "pandas.DatetimeIndex",
    "signature": "(data=None, freq: 'Frequency | lib.NoDefault' = <no_default>, tz=<no_default>, normalize: 'bool | lib.NoDefault' = <no_default>, closed=<no_default>, ambiguous: 'TimeAmbiguous' = 'raise', dayfirst: 'bool' = False, yearfirst: 'bool' = False, dtype: 'Dtype | None' = None, copy: 'bool' = False, name: 'Hashable | None' = None) -> 'Self'",
    "doc": "Immutable ndarray-like of datetime64 data.\n\nRepresented internally as int64, and which can be boxed to Timestamp objects\nthat are subclasses of datetime and carry metadata.\n\n.. versionchanged:: 2.0.0\n    The various numeric date/time attributes (:attr:`~DatetimeIndex.day`,\n    :attr:`~DatetimeIndex.month`, :attr:`~DatetimeIndex.year` etc.) now have dtype\n    ``int32``. Previously they had dtype ``int64``.\n\nParameters\n----------\ndata : array-like (1-dimensional)\n    Datetime-like data to construct index with.\nfreq : str or pandas offset object, optional\n    One of pandas date offset strings or corresponding objects. The string\n    'infer' can be passed in order to set the frequency of the index as the\n    inferred frequency upon creation.\ntz : pytz.timezone or dateutil.tz.tzfile or datetime.tzinfo or str\n    Set the Timezone of the data.\nnormalize : bool, default False\n    Normalize start/end dates to midnight before generating date range.\n\n    .. deprecated:: 2.1.0\n\nclosed : {'left', 'right'}, optional\n    Set whether to include `start` and `end` that are on the\n    boundary. The default includes boundary points on either end.\n\n    .. deprecated:: 2.1.0\n\nambiguous : 'infer', bool-ndarray, 'NaT', default 'raise'\n    When clocks moved backward due to DST, ambiguous times may arise.\n    For example in Central European Time (UTC+01), when going from 03:00\n    DST to 02:00 non-DST, 02:30:00 local time occurs both at 00:30:00 UTC\n    and at 01:30:00 UTC. In such a situation, the `ambiguous` parameter\n    dictates how ambiguous times should be handled.\n\n    - 'infer' will attempt to infer fall dst-transition hours based on\n      order\n    - bool-ndarray where True signifies a DST time, False signifies a\n      non-DST time (note that this flag is only applicable for ambiguous\n      times)\n    - 'NaT' will return NaT where there are ambiguous times\n    - 'raise' will raise an AmbiguousTimeError if there are ambiguous times.\ndayfirst : bool, default False\n    If True, parse dates in `data` with the day first order.\nyearfirst : bool, default False\n    If True parse dates in `data` with the year first order.\ndtype : numpy.dtype or DatetimeTZDtype or str, default None\n    Note that the only NumPy dtype allowed is `datetime64[ns]`.\ncopy : bool, default False\n    Make a copy of input ndarray.\nname : label, default None\n    Name to be stored in the index.\n\nAttributes\n----------\nyear\nmonth\nday\nhour\nminute\nsecond\nmicrosecond\nnanosecond\ndate\ntime\ntimetz\ndayofyear\nday_of_year\ndayofweek\nday_of_week\nweekday\nquarter\ntz\nfreq\nfreqstr\nis_month_start\nis_month_end\nis_quarter_start\nis_quarter_end\nis_year_start\nis_year_end\nis_leap_year\ninferred_freq\n\nMethods\n-------\nnormalize\nstrftime\nsnap\ntz_convert\ntz_localize\nround\nfloor\nceil\nto_period\nto_pydatetime\nto_series\nto_frame\nmonth_name\nday_name\nmean\nstd\n\nSee Also\n--------\nIndex : The base pandas Index type.\nTimedeltaIndex : Index of timedelta64 data.\nPeriodIndex : Index of Period data.\nto_datetime : Convert argument to datetime.\ndate_range : Create a fixed-frequency DatetimeIndex.\n\nNotes\n-----\nTo learn more about the frequency strings, please see `this link\n<https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\nExamples\n--------\n>>> idx = pd.DatetimeIndex([\"1/1/2020 10:00:00+00:00\", \"2/1/2020 11:00:00+00:00\"])\n>>> idx\nDatetimeIndex(['2020-01-01 10:00:00+00:00', '2020-02-01 11:00:00+00:00'],\ndtype='datetime64[ns, UTC]', freq=None)"
  },
  {
    "symbol": "pandas.DatetimeTZDtype",
    "signature": "(unit: 'str_type | DatetimeTZDtype' = 'ns', tz=None) -> 'None'",
    "doc": "An ExtensionDtype for timezone-aware datetime data.\n\n**This is not an actual numpy dtype**, but a duck type.\n\nParameters\n----------\nunit : str, default \"ns\"\n    The precision of the datetime data. Currently limited\n    to ``\"ns\"``.\ntz : str, int, or datetime.tzinfo\n    The timezone.\n\nAttributes\n----------\nunit\ntz\n\nMethods\n-------\nNone\n\nRaises\n------\nZoneInfoNotFoundError\n    When the requested timezone cannot be found.\n\nExamples\n--------\n>>> from zoneinfo import ZoneInfo\n>>> pd.DatetimeTZDtype(tz=ZoneInfo('UTC'))\ndatetime64[ns, UTC]\n\n>>> pd.DatetimeTZDtype(tz=ZoneInfo('Europe/Paris'))\ndatetime64[ns, Europe/Paris]"
  },
  {
    "symbol": "pandas.ExcelFile",
    "signature": "(path_or_buffer, engine: 'str | None' = None, storage_options: 'StorageOptions | None' = None, engine_kwargs: 'dict | None' = None) -> 'None'",
    "doc": "Class for parsing tabular Excel sheets into DataFrame objects.\n\nSee read_excel for more documentation.\n\nParameters\n----------\npath_or_buffer : str, bytes, path object (pathlib.Path or py._path.local.LocalPath),\n    A file-like object, xlrd workbook or openpyxl workbook.\n    If a string or path object, expected to be a path to a\n    .xls, .xlsx, .xlsb, .xlsm, .odf, .ods, or .odt file.\nengine : str, default None\n    If io is not a buffer or path, this must be set to identify io.\n    Supported engines: ``xlrd``, ``openpyxl``, ``odf``, ``pyxlsb``, ``calamine``\n    Engine compatibility :\n\n    - ``xlrd`` supports old-style Excel files (.xls).\n    - ``openpyxl`` supports newer Excel file formats.\n    - ``odf`` supports OpenDocument file formats (.odf, .ods, .odt).\n    - ``pyxlsb`` supports Binary Excel files.\n    - ``calamine`` supports Excel (.xls, .xlsx, .xlsm, .xlsb)\n      and OpenDocument (.ods) file formats.\n\n    .. versionchanged:: 1.2.0\n\n       The engine `xlrd <https://xlrd.readthedocs.io/en/latest/>`_\n       now only supports old-style ``.xls`` files.\n       When ``engine=None``, the following logic will be\n       used to determine the engine:\n\n       - If ``path_or_buffer`` is an OpenDocument format (.odf, .ods, .odt),\n         then `odf <https://pypi.org/project/odfpy/>`_ will be used.\n       - Otherwise if ``path_or_buffer`` is an xls format,\n         ``xlrd`` will be used.\n       - Otherwise if ``path_or_buffer`` is in xlsb format,\n         `pyxlsb <https://pypi.org/project/pyxlsb/>`_ will be used.\n\n       .. versionadded:: 1.3.0\n\n       - Otherwise if `openpyxl <https://pypi.org/project/openpyxl/>`_ is installed,\n         then ``openpyxl`` will be used.\n       - Otherwise if ``xlrd >= 2.0`` is installed, a ``ValueError`` will be raised.\n\n       .. warning::\n\n        Please do not report issues when using ``xlrd`` to read ``.xlsx`` files.\n        This is not supported, switch to using ``openpyxl`` instead.\nengine_kwargs : dict, optional\n    Arbitrary keyword arguments passed to excel engine.\n\nExamples\n--------\n>>> file = pd.ExcelFile('myfile.xlsx')  # doctest: +SKIP\n>>> with pd.ExcelFile(\"myfile.xls\") as xls:  # doctest: +SKIP\n...     df1 = pd.read_excel(xls, \"Sheet1\")  # doctest: +SKIP"
  },
  {
    "symbol": "pandas.ExcelWriter",
    "signature": "(path: 'FilePath | WriteExcelBuffer | ExcelWriter', engine: 'str | None' = None, date_format: 'str | None' = None, datetime_format: 'str | None' = None, mode: 'str' = 'w', storage_options: 'StorageOptions | None' = None, if_sheet_exists: 'ExcelWriterIfSheetExists | None' = None, engine_kwargs: 'dict | None' = None) -> 'Self'",
    "doc": "Class for writing DataFrame objects into excel sheets.\n\nDefault is to use:\n\n* `xlsxwriter <https://pypi.org/project/XlsxWriter/>`__ for xlsx files if xlsxwriter\n  is installed otherwise `openpyxl <https://pypi.org/project/openpyxl/>`__\n* `odswriter <https://pypi.org/project/odswriter/>`__ for ods files\n\nSee ``DataFrame.to_excel`` for typical usage.\n\nThe writer should be used as a context manager. Otherwise, call `close()` to save\nand close any opened file handles.\n\nParameters\n----------\npath : str or typing.BinaryIO\n    Path to xls or xlsx or ods file.\nengine : str (optional)\n    Engine to use for writing. If None, defaults to\n    ``io.excel.<extension>.writer``.  NOTE: can only be passed as a keyword\n    argument.\ndate_format : str, default None\n    Format string for dates written into Excel files (e.g. 'YYYY-MM-DD').\ndatetime_format : str, default None\n    Format string for datetime objects written into Excel files.\n    (e.g. 'YYYY-MM-DD HH:MM:SS').\nmode : {'w', 'a'}, default 'w'\n    File mode to use (write or append). Append does not work with fsspec URLs.\nstorage_options : dict, optional\n    Extra options that make sense for a particular storage connection, e.g.\n    host, port, username, password, etc. For HTTP(S) URLs the key-value pairs\n    are forwarded to ``urllib.request.Request`` as header options. For other\n    URLs (e.g. starting with \"s3://\", and \"gcs://\") the key-value pairs are\n    forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more\n    details, and for more examples on storage options refer `here\n    <https://pandas.pydata.org/docs/user_guide/io.html?\n    highlight=storage_options#reading-writing-remote-files>`_.\n\nif_sheet_exists : {'error', 'new', 'replace', 'overlay'}, default 'error'\n    How to behave when trying to write to a sheet that already\n    exists (append mode only).\n\n    * error: raise a ValueError.\n    * new: Create a new sheet, with a name determined by the engine.\n    * replace: Delete the contents of the sheet before writing to it.\n    * overlay: Write contents to the existing sheet without first removing,\n      but possibly over top of, the existing contents.\n\n    .. versionadded:: 1.3.0\n\n    .. versionchanged:: 1.4.0\n\n       Added ``overlay`` option\n\nengine_kwargs : dict, optional\n    Keyword arguments to be passed into the engine. These will be passed to\n    the following functions of the respective engines:\n\n    * xlsxwriter: ``xlsxwriter.Workbook(file, **engine_kwargs)``\n    * openpyxl (write mode): ``openpyxl.Workbook(**engine_kwargs)``\n    * openpyxl (append mode): ``openpyxl.load_workbook(file, **engine_kwargs)``\n    * odswriter: ``odf.opendocument.OpenDocumentSpreadsheet(**engine_kwargs)``\n\n    .. versionadded:: 1.3.0\n\nNotes\n-----\nFor compatibility with CSV writers, ExcelWriter serializes lists\nand dicts to strings before writing.\n\nExamples\n--------\nDefault usage:\n\n>>> df = pd.DataFrame([[\"ABC\", \"XYZ\"]], columns=[\"Foo\", \"Bar\"])  # doctest: +SKIP\n>>> with pd.ExcelWriter(\"path_to_file.xlsx\") as writer:\n...     df.to_excel(writer)  # doctest: +SKIP\n\nTo write to separate sheets in a single file:\n\n>>> df1 = pd.DataFrame([[\"AAA\", \"BBB\"]], columns=[\"Spam\", \"Egg\"])  # doctest: +SKIP\n>>> df2 = pd.DataFrame([[\"ABC\", \"XYZ\"]], columns=[\"Foo\", \"Bar\"])  # doctest: +SKIP\n>>> with pd.ExcelWriter(\"path_to_file.xlsx\") as writer:\n...     df1.to_excel(writer, sheet_name=\"Sheet1\")  # doctest: +SKIP\n...     df2.to_excel(writer, sheet_name=\"Sheet2\")  # doctest: +SKIP\n\nYou can set the date format or datetime format:\n\n>>> from datetime import date, datetime  # doctest: +SKIP\n>>> df = pd.DataFrame(\n...     [\n...         [date(2014, 1, 31), date(1999, 9, 24)],\n...         [datetime(1998, 5, 26, 23, 33, 4), datetime(2014, 2, 28, 13, 5, 13)],\n...     ],\n...     index=[\"Date\", \"Datetime\"],\n...     columns=[\"X\", \"Y\"],\n... )  # doctest: +SKIP\n>>> with pd.ExcelWriter(\n...     \"path_to_file.xlsx\",\n...     date_format=\"YYYY-MM-DD\",\n...     datetime_format=\"YYYY-MM-DD HH:MM:SS\"\n... ) as writer:\n...     df.to_excel(writer)  # doctest: +SKIP\n\nYou can also append to an existing Excel file:\n\n>>> with pd.ExcelWriter(\"path_to_file.xlsx\", mode=\"a\", engine=\"openpyxl\") as writer:\n...     df.to_excel(writer, sheet_name=\"Sheet3\")  # doctest: +SKIP\n\nHere, the `if_sheet_exists` parameter can be set to replace a sheet if it\nalready exists:\n\n>>> with ExcelWriter(\n...     \"path_to_file.xlsx\",\n...     mode=\"a\",\n...     engine=\"openpyxl\",\n...     if_sheet_exists=\"replace\",\n... ) as writer:\n...     df.to_excel(writer, sheet_name=\"Sheet1\")  # doctest: +SKIP\n\nYou can also write multiple DataFrames to a single sheet. Note that the\n``if_sheet_exists`` parameter needs to be set to ``overlay``:\n\n>>> with ExcelWriter(\"path_to_file.xlsx\",\n...     mode=\"a\",\n...     engine=\"openpyxl\",\n...     if_sheet_exists=\"overlay\",\n... ) as writer:\n...     df1.to_excel(writer, sheet_name=\"Sheet1\")\n...     df2.to_excel(writer, sheet_name=\"Sheet1\", startcol=3)  # doctest: +SKIP\n\nYou can store Excel file in RAM:\n\n>>> import io\n>>> df = pd.DataFrame([[\"ABC\", \"XYZ\"]], columns=[\"Foo\", \"Bar\"])\n>>> buffer = io.BytesIO()\n>>> with pd.ExcelWriter(buffer) as writer:\n...     df.to_excel(writer)\n\nYou can pack Excel file into zip archive:\n\n>>> import zipfile  # doctest: +SKIP\n>>> df = pd.DataFrame([[\"ABC\", \"XYZ\"]], columns=[\"Foo\", \"Bar\"])  # doctest: +SKIP\n>>> with zipfile.ZipFile(\"path_to_file.zip\", \"w\") as zf:\n...     with zf.open(\"filename.xlsx\", \"w\") as buffer:\n...         with pd.ExcelWriter(buffer) as writer:\n...             df.to_excel(writer)  # doctest: +SKIP\n\nYou can specify additional arguments to the underlying engine:\n\n>>> with pd.ExcelWriter(\n...     \"path_to_file.xlsx\",\n...     engine=\"xlsxwriter\",\n...     engine_kwargs={\"options\": {\"nan_inf_to_errors\": True}}\n... ) as writer:\n...     df.to_excel(writer)  # doctest: +SKIP\n\nIn append mode, ``engine_kwargs`` are passed through to\nopenpyxl's ``load_workbook``:\n\n>>> with pd.ExcelWriter(\n...     \"path_to_file.xlsx\",\n...     engine=\"openpyxl\",\n...     mode=\"a\",\n...     engine_kwargs={\"keep_vba\": True}\n... ) as writer:\n...     df.to_excel(writer, sheet_name=\"Sheet2\")  # doctest: +SKIP"
  },
  {
    "symbol": "pandas.Flags",
    "signature": "(obj: 'NDFrame', *, allows_duplicate_labels: 'bool') -> 'None'",
    "doc": "Flags that apply to pandas objects.\n\nParameters\n----------\nobj : Series or DataFrame\n    The object these flags are associated with.\nallows_duplicate_labels : bool, default True\n    Whether to allow duplicate labels in this object. By default,\n    duplicate labels are permitted. Setting this to ``False`` will\n    cause an :class:`errors.DuplicateLabelError` to be raised when\n    `index` (or columns for DataFrame) is not unique, or any\n    subsequent operation on introduces duplicates.\n    See :ref:`duplicates.disallow` for more.\n\n    .. warning::\n\n       This is an experimental feature. Currently, many methods fail to\n       propagate the ``allows_duplicate_labels`` value. In future versions\n       it is expected that every method taking or returning one or more\n       DataFrame or Series objects will propagate ``allows_duplicate_labels``.\n\nExamples\n--------\nAttributes can be set in two ways:\n\n>>> df = pd.DataFrame()\n>>> df.flags\n<Flags(allows_duplicate_labels=True)>\n>>> df.flags.allows_duplicate_labels = False\n>>> df.flags\n<Flags(allows_duplicate_labels=False)>\n\n>>> df.flags['allows_duplicate_labels'] = True\n>>> df.flags\n<Flags(allows_duplicate_labels=True)>"
  },
  {
    "symbol": "pandas.Float32Dtype",
    "signature": "()",
    "doc": "An ExtensionDtype for float32 data.\n\nThis dtype uses ``pd.NA`` as missing value indicator.\n\nAttributes\n----------\nNone\n\nMethods\n-------\nNone\n\nExamples\n--------\nFor Float32Dtype:\n\n>>> ser = pd.Series([2.25, pd.NA], dtype=pd.Float32Dtype())\n>>> ser.dtype\nFloat32Dtype()\n\nFor Float64Dtype:\n\n>>> ser = pd.Series([2.25, pd.NA], dtype=pd.Float64Dtype())\n>>> ser.dtype\nFloat64Dtype()"
  },
  {
    "symbol": "pandas.Float64Dtype",
    "signature": "()",
    "doc": "An ExtensionDtype for float64 data.\n\nThis dtype uses ``pd.NA`` as missing value indicator.\n\nAttributes\n----------\nNone\n\nMethods\n-------\nNone\n\nExamples\n--------\nFor Float32Dtype:\n\n>>> ser = pd.Series([2.25, pd.NA], dtype=pd.Float32Dtype())\n>>> ser.dtype\nFloat32Dtype()\n\nFor Float64Dtype:\n\n>>> ser = pd.Series([2.25, pd.NA], dtype=pd.Float64Dtype())\n>>> ser.dtype\nFloat64Dtype()"
  },
  {
    "symbol": "pandas.Grouper",
    "signature": "(*args, **kwargs)",
    "doc": "A Grouper allows the user to specify a groupby instruction for an object.\n\nThis specification will select a column via the key parameter, or if the\nlevel and/or axis parameters are given, a level of the index of the target\nobject.\n\nIf `axis` and/or `level` are passed as keywords to both `Grouper` and\n`groupby`, the values passed to `Grouper` take precedence.\n\nParameters\n----------\nkey : str, defaults to None\n    Groupby key, which selects the grouping column of the target.\nlevel : name/number, defaults to None\n    The level for the target index.\nfreq : str / frequency object, defaults to None\n    This will groupby the specified frequency if the target selection\n    (via key or level) is a datetime-like object. For full specification\n    of available frequencies, please see `here\n    <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`_.\naxis : str, int, defaults to 0\n    Number/name of the axis.\nsort : bool, default to False\n    Whether to sort the resulting labels.\nclosed : {'left' or 'right'}\n    Closed end of interval. Only when `freq` parameter is passed.\nlabel : {'left' or 'right'}\n    Interval boundary to use for labeling.\n    Only when `freq` parameter is passed.\nconvention : {'start', 'end', 'e', 's'}\n    If grouper is PeriodIndex and `freq` parameter is passed.\n\norigin : Timestamp or str, default 'start_day'\n    The timestamp on which to adjust the grouping. The timezone of origin must\n    match the timezone of the index.\n    If string, must be one of the following:\n\n    - 'epoch': `origin` is 1970-01-01\n    - 'start': `origin` is the first value of the timeseries\n    - 'start_day': `origin` is the first day at midnight of the timeseries\n\n    - 'end': `origin` is the last value of the timeseries\n    - 'end_day': `origin` is the ceiling midnight of the last day\n\n    .. versionadded:: 1.3.0\n\noffset : Timedelta or str, default is None\n    An offset timedelta added to the origin.\n\ndropna : bool, default True\n    If True, and if group keys contain NA values, NA values together with\n    row/column will be dropped. If False, NA values will also be treated as\n    the key in groups.\n\nReturns\n-------\nGrouper or pandas.api.typing.TimeGrouper\n    A TimeGrouper is returned if ``freq`` is not ``None``. Otherwise, a Grouper\n    is returned.\n\nExamples\n--------\n``df.groupby(pd.Grouper(key=\"Animal\"))`` is equivalent to ``df.groupby('Animal')``\n\n>>> df = pd.DataFrame(\n...     {\n...         \"Animal\": [\"Falcon\", \"Parrot\", \"Falcon\", \"Falcon\", \"Parrot\"],\n...         \"Speed\": [100, 5, 200, 300, 15],\n...     }\n... )\n>>> df\n   Animal  Speed\n0  Falcon    100\n1  Parrot      5\n2  Falcon    200\n3  Falcon    300\n4  Parrot     15\n>>> df.groupby(pd.Grouper(key=\"Animal\")).mean()\n        Speed\nAnimal\nFalcon  200.0\nParrot   10.0\n\nSpecify a resample operation on the column 'Publish date'\n\n>>> df = pd.DataFrame(\n...    {\n...        \"Publish date\": [\n...             pd.Timestamp(\"2000-01-02\"),\n...             pd.Timestamp(\"2000-01-02\"),\n...             pd.Timestamp(\"2000-01-09\"),\n...             pd.Timestamp(\"2000-01-16\")\n...         ],\n...         \"ID\": [0, 1, 2, 3],\n...         \"Price\": [10, 20, 30, 40]\n...     }\n... )\n>>> df\n  Publish date  ID  Price\n0   2000-01-02   0     10\n1   2000-01-02   1     20\n2   2000-01-09   2     30\n3   2000-01-16   3     40\n>>> df.groupby(pd.Grouper(key=\"Publish date\", freq=\"1W\")).mean()\n               ID  Price\nPublish date\n2000-01-02    0.5   15.0\n2000-01-09    2.0   30.0\n2000-01-16    3.0   40.0\n\nIf you want to adjust the start of the bins based on a fixed timestamp:\n\n>>> start, end = '2000-10-01 23:30:00', '2000-10-02 00:30:00'\n>>> rng = pd.date_range(start, end, freq='7min')\n>>> ts = pd.Series(np.arange(len(rng)) * 3, index=rng)\n>>> ts\n2000-10-01 23:30:00     0\n2000-10-01 23:37:00     3\n2000-10-01 23:44:00     6\n2000-10-01 23:51:00     9\n2000-10-01 23:58:00    12\n2000-10-02 00:05:00    15\n2000-10-02 00:12:00    18\n2000-10-02 00:19:00    21\n2000-10-02 00:26:00    24\nFreq: 7min, dtype: int64\n\n>>> ts.groupby(pd.Grouper(freq='17min')).sum()\n2000-10-01 23:14:00     0\n2000-10-01 23:31:00     9\n2000-10-01 23:48:00    21\n2000-10-02 00:05:00    54\n2000-10-02 00:22:00    24\nFreq: 17min, dtype: int64\n\n>>> ts.groupby(pd.Grouper(freq='17min', origin='epoch')).sum()\n2000-10-01 23:18:00     0\n2000-10-01 23:35:00    18\n2000-10-01 23:52:00    27\n2000-10-02 00:09:00    39\n2000-10-02 00:26:00    24\nFreq: 17min, dtype: int64\n\n>>> ts.groupby(pd.Grouper(freq='17min', origin='2000-01-01')).sum()\n2000-10-01 23:24:00     3\n2000-10-01 23:41:00    15\n2000-10-01 23:58:00    45\n2000-10-02 00:15:00    45\nFreq: 17min, dtype: int64\n\nIf you want to adjust the start of the bins with an `offset` Timedelta, the two\nfollowing lines are equivalent:\n\n>>> ts.groupby(pd.Grouper(freq='17min', origin='start')).sum()\n2000-10-01 23:30:00     9\n2000-10-01 23:47:00    21\n2000-10-02 00:04:00    54\n2000-10-02 00:21:00    24\nFreq: 17min, dtype: int64\n\n>>> ts.groupby(pd.Grouper(freq='17min', offset='23h30min')).sum()\n2000-10-01 23:30:00     9\n2000-10-01 23:47:00    21\n2000-10-02 00:04:00    54\n2000-10-02 00:21:00    24\nFreq: 17min, dtype: int64\n\nTo replace the use of the deprecated `base` argument, you can now use `offset`,\nin this example it is equivalent to have `base=2`:\n\n>>> ts.groupby(pd.Grouper(freq='17min', offset='2min')).sum()\n2000-10-01 23:16:00     0\n2000-10-01 23:33:00     9\n2000-10-01 23:50:00    36\n2000-10-02 00:07:00    39\n2000-10-02 00:24:00    24\nFreq: 17min, dtype: int64"
  },
  {
    "symbol": "pandas.HDFStore",
    "signature": "(path, mode: 'str' = 'a', complevel: 'int | None' = None, complib=None, fletcher32: 'bool' = False, **kwargs) -> 'None'",
    "doc": "Dict-like IO interface for storing pandas objects in PyTables.\n\nEither Fixed or Table format.\n\n.. warning::\n\n   Pandas uses PyTables for reading and writing HDF5 files, which allows\n   serializing object-dtype data with pickle when using the \"fixed\" format.\n   Loading pickled data received from untrusted sources can be unsafe.\n\n   See: https://docs.python.org/3/library/pickle.html for more.\n\nParameters\n----------\npath : str\n    File path to HDF5 file.\nmode : {'a', 'w', 'r', 'r+'}, default 'a'\n\n    ``'r'``\n        Read-only; no data can be modified.\n    ``'w'``\n        Write; a new file is created (an existing file with the same\n        name would be deleted).\n    ``'a'``\n        Append; an existing file is opened for reading and writing,\n        and if the file does not exist it is created.\n    ``'r+'``\n        It is similar to ``'a'``, but the file must already exist.\ncomplevel : int, 0-9, default None\n    Specifies a compression level for data.\n    A value of 0 or None disables compression.\ncomplib : {'zlib', 'lzo', 'bzip2', 'blosc'}, default 'zlib'\n    Specifies the compression library to be used.\n    These additional compressors for Blosc are supported\n    (default if no compressor specified: 'blosc:blosclz'):\n    {'blosc:blosclz', 'blosc:lz4', 'blosc:lz4hc', 'blosc:snappy',\n     'blosc:zlib', 'blosc:zstd'}.\n    Specifying a compression library which is not available issues\n    a ValueError.\nfletcher32 : bool, default False\n    If applying compression use the fletcher32 checksum.\n**kwargs\n    These parameters will be passed to the PyTables open_file method.\n\nExamples\n--------\n>>> bar = pd.DataFrame(np.random.randn(10, 4))\n>>> store = pd.HDFStore('test.h5')\n>>> store['foo'] = bar   # write to HDF5\n>>> bar = store['foo']   # retrieve\n>>> store.close()\n\n**Create or load HDF5 file in-memory**\n\nWhen passing the `driver` option to the PyTables open_file method through\n**kwargs, the HDF5 file is loaded or created in-memory and will only be\nwritten when closed:\n\n>>> bar = pd.DataFrame(np.random.randn(10, 4))\n>>> store = pd.HDFStore('test.h5', driver='H5FD_CORE')\n>>> store['foo'] = bar\n>>> store.close()   # only now, data is written to disk"
  },
  {
    "symbol": "pandas.Index",
    "signature": "(data=None, dtype=None, copy: 'bool' = False, name=None, tupleize_cols: 'bool' = True) -> 'Self'",
    "doc": "Immutable sequence used for indexing and alignment.\n\nThe basic object storing axis labels for all pandas objects.\n\n.. versionchanged:: 2.0.0\n\n   Index can hold all numpy numeric dtypes (except float16). Previously only\n   int64/uint64/float64 dtypes were accepted.\n\nParameters\n----------\ndata : array-like (1-dimensional)\ndtype : str, numpy.dtype, or ExtensionDtype, optional\n    Data type for the output Index. If not specified, this will be\n    inferred from `data`.\n    See the :ref:`user guide <basics.dtypes>` for more usages.\ncopy : bool, default False\n    Copy input data.\nname : object\n    Name to be stored in the index.\ntupleize_cols : bool (default: True)\n    When True, attempt to create a MultiIndex if possible.\n\nSee Also\n--------\nRangeIndex : Index implementing a monotonic integer range.\nCategoricalIndex : Index of :class:`Categorical` s.\nMultiIndex : A multi-level, or hierarchical Index.\nIntervalIndex : An Index of :class:`Interval` s.\nDatetimeIndex : Index of datetime64 data.\nTimedeltaIndex : Index of timedelta64 data.\nPeriodIndex : Index of Period data.\n\nNotes\n-----\nAn Index instance can **only** contain hashable objects.\nAn Index instance *can not* hold numpy float16 dtype.\n\nExamples\n--------\n>>> pd.Index([1, 2, 3])\nIndex([1, 2, 3], dtype='int64')\n\n>>> pd.Index(list('abc'))\nIndex(['a', 'b', 'c'], dtype='object')\n\n>>> pd.Index([1, 2, 3], dtype=\"uint8\")\nIndex([1, 2, 3], dtype='uint8')"
  },
  {
    "symbol": "pandas.Int16Dtype",
    "signature": "()",
    "doc": "An ExtensionDtype for int16 integer data.\n\nUses :attr:`pandas.NA` as its missing value, rather than :attr:`numpy.nan`.\n\nAttributes\n----------\nNone\n\nMethods\n-------\nNone\n\nExamples\n--------\nFor Int8Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.Int8Dtype())\n>>> ser.dtype\nInt8Dtype()\n\nFor Int16Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.Int16Dtype())\n>>> ser.dtype\nInt16Dtype()\n\nFor Int32Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.Int32Dtype())\n>>> ser.dtype\nInt32Dtype()\n\nFor Int64Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.Int64Dtype())\n>>> ser.dtype\nInt64Dtype()\n\nFor UInt8Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.UInt8Dtype())\n>>> ser.dtype\nUInt8Dtype()\n\nFor UInt16Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.UInt16Dtype())\n>>> ser.dtype\nUInt16Dtype()\n\nFor UInt32Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.UInt32Dtype())\n>>> ser.dtype\nUInt32Dtype()\n\nFor UInt64Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.UInt64Dtype())\n>>> ser.dtype\nUInt64Dtype()"
  },
  {
    "symbol": "pandas.Int32Dtype",
    "signature": "()",
    "doc": "An ExtensionDtype for int32 integer data.\n\nUses :attr:`pandas.NA` as its missing value, rather than :attr:`numpy.nan`.\n\nAttributes\n----------\nNone\n\nMethods\n-------\nNone\n\nExamples\n--------\nFor Int8Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.Int8Dtype())\n>>> ser.dtype\nInt8Dtype()\n\nFor Int16Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.Int16Dtype())\n>>> ser.dtype\nInt16Dtype()\n\nFor Int32Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.Int32Dtype())\n>>> ser.dtype\nInt32Dtype()\n\nFor Int64Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.Int64Dtype())\n>>> ser.dtype\nInt64Dtype()\n\nFor UInt8Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.UInt8Dtype())\n>>> ser.dtype\nUInt8Dtype()\n\nFor UInt16Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.UInt16Dtype())\n>>> ser.dtype\nUInt16Dtype()\n\nFor UInt32Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.UInt32Dtype())\n>>> ser.dtype\nUInt32Dtype()\n\nFor UInt64Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.UInt64Dtype())\n>>> ser.dtype\nUInt64Dtype()"
  },
  {
    "symbol": "pandas.Int64Dtype",
    "signature": "()",
    "doc": "An ExtensionDtype for int64 integer data.\n\nUses :attr:`pandas.NA` as its missing value, rather than :attr:`numpy.nan`.\n\nAttributes\n----------\nNone\n\nMethods\n-------\nNone\n\nExamples\n--------\nFor Int8Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.Int8Dtype())\n>>> ser.dtype\nInt8Dtype()\n\nFor Int16Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.Int16Dtype())\n>>> ser.dtype\nInt16Dtype()\n\nFor Int32Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.Int32Dtype())\n>>> ser.dtype\nInt32Dtype()\n\nFor Int64Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.Int64Dtype())\n>>> ser.dtype\nInt64Dtype()\n\nFor UInt8Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.UInt8Dtype())\n>>> ser.dtype\nUInt8Dtype()\n\nFor UInt16Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.UInt16Dtype())\n>>> ser.dtype\nUInt16Dtype()\n\nFor UInt32Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.UInt32Dtype())\n>>> ser.dtype\nUInt32Dtype()\n\nFor UInt64Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.UInt64Dtype())\n>>> ser.dtype\nUInt64Dtype()"
  },
  {
    "symbol": "pandas.Int8Dtype",
    "signature": "()",
    "doc": "An ExtensionDtype for int8 integer data.\n\nUses :attr:`pandas.NA` as its missing value, rather than :attr:`numpy.nan`.\n\nAttributes\n----------\nNone\n\nMethods\n-------\nNone\n\nExamples\n--------\nFor Int8Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.Int8Dtype())\n>>> ser.dtype\nInt8Dtype()\n\nFor Int16Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.Int16Dtype())\n>>> ser.dtype\nInt16Dtype()\n\nFor Int32Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.Int32Dtype())\n>>> ser.dtype\nInt32Dtype()\n\nFor Int64Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.Int64Dtype())\n>>> ser.dtype\nInt64Dtype()\n\nFor UInt8Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.UInt8Dtype())\n>>> ser.dtype\nUInt8Dtype()\n\nFor UInt16Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.UInt16Dtype())\n>>> ser.dtype\nUInt16Dtype()\n\nFor UInt32Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.UInt32Dtype())\n>>> ser.dtype\nUInt32Dtype()\n\nFor UInt64Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.UInt64Dtype())\n>>> ser.dtype\nUInt64Dtype()"
  },
  {
    "symbol": "pandas.Interval",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Immutable object implementing an Interval, a bounded slice-like interval.\n\nParameters\n----------\nleft : orderable scalar\n    Left bound for the interval.\nright : orderable scalar\n    Right bound for the interval.\nclosed : {'right', 'left', 'both', 'neither'}, default 'right'\n    Whether the interval is closed on the left-side, right-side, both or\n    neither. See the Notes for more detailed explanation.\n\nSee Also\n--------\nIntervalIndex : An Index of Interval objects that are all closed on the\n    same side.\ncut : Convert continuous data into discrete bins (Categorical\n    of Interval objects).\nqcut : Convert continuous data into bins (Categorical of Interval objects)\n    based on quantiles.\nPeriod : Represents a period of time.\n\nNotes\n-----\nThe parameters `left` and `right` must be from the same type, you must be\nable to compare them and they must satisfy ``left <= right``.\n\nA closed interval (in mathematics denoted by square brackets) contains\nits endpoints, i.e. the closed interval ``[0, 5]`` is characterized by the\nconditions ``0 <= x <= 5``. This is what ``closed='both'`` stands for.\nAn open interval (in mathematics denoted by parentheses) does not contain\nits endpoints, i.e. the open interval ``(0, 5)`` is characterized by the\nconditions ``0 < x < 5``. This is what ``closed='neither'`` stands for.\nIntervals can also be half-open or half-closed, i.e. ``[0, 5)`` is\ndescribed by ``0 <= x < 5`` (``closed='left'``) and ``(0, 5]`` is\ndescribed by ``0 < x <= 5`` (``closed='right'``).\n\nExamples\n--------\nIt is possible to build Intervals of different types, like numeric ones:\n\n>>> iv = pd.Interval(left=0, right=5)\n>>> iv\nInterval(0, 5, closed='right')\n\nYou can check if an element belongs to it, or if it contains another interval:\n\n>>> 2.5 in iv\nTrue\n>>> pd.Interval(left=2, right=5, closed='both') in iv\nTrue\n\nYou can test the bounds (``closed='right'``, so ``0 < x <= 5``):\n\n>>> 0 in iv\nFalse\n>>> 5 in iv\nTrue\n>>> 0.0001 in iv\nTrue\n\nCalculate its length\n\n>>> iv.length\n5\n\nYou can operate with `+` and `*` over an Interval and the operation\nis applied to each of its bounds, so the result depends on the type\nof the bound elements\n\n>>> shifted_iv = iv + 3\n>>> shifted_iv\nInterval(3, 8, closed='right')\n>>> extended_iv = iv * 10.0\n>>> extended_iv\nInterval(0.0, 50.0, closed='right')\n\nTo create a time interval you can use Timestamps as the bounds\n\n>>> year_2017 = pd.Interval(pd.Timestamp('2017-01-01 00:00:00'),\n...                         pd.Timestamp('2018-01-01 00:00:00'),\n...                         closed='left')\n>>> pd.Timestamp('2017-01-01 00:00') in year_2017\nTrue\n>>> year_2017.length\nTimedelta('365 days 00:00:00')"
  },
  {
    "symbol": "pandas.IntervalDtype",
    "signature": "(subtype=None, closed: 'IntervalClosedType | None' = None) -> 'None'",
    "doc": "An ExtensionDtype for Interval data.\n\n**This is not an actual numpy dtype**, but a duck type.\n\nParameters\n----------\nsubtype : str, np.dtype\n    The dtype of the Interval bounds.\n\nAttributes\n----------\nsubtype\n\nMethods\n-------\nNone\n\nExamples\n--------\n>>> pd.IntervalDtype(subtype='int64', closed='both')\ninterval[int64, both]"
  },
  {
    "symbol": "pandas.IntervalIndex",
    "signature": "(data, closed: 'IntervalClosedType | None' = None, dtype: 'Dtype | None' = None, copy: 'bool' = False, name: 'Hashable | None' = None, verify_integrity: 'bool' = True) -> 'Self'",
    "doc": "Immutable index of intervals that are closed on the same side.\n\nParameters\n----------\ndata : array-like (1-dimensional)\n    Array-like (ndarray, :class:`DateTimeArray`, :class:`TimeDeltaArray`) containing\n    Interval objects from which to build the IntervalIndex.\nclosed : {'left', 'right', 'both', 'neither'}, default 'right'\n    Whether the intervals are closed on the left-side, right-side, both or\n    neither.\ndtype : dtype or None, default None\n    If None, dtype will be inferred.\ncopy : bool, default False\n    Copy the input data.\nname : object, optional\n     Name to be stored in the index.\nverify_integrity : bool, default True\n    Verify that the IntervalIndex is valid.\n\nAttributes\n----------\nleft\nright\nclosed\nmid\nlength\nis_empty\nis_non_overlapping_monotonic\nis_overlapping\nvalues\n\nMethods\n-------\nfrom_arrays\nfrom_tuples\nfrom_breaks\ncontains\noverlaps\nset_closed\nto_tuples\n\nSee Also\n--------\nIndex : The base pandas Index type.\nInterval : A bounded slice-like interval; the elements of an IntervalIndex.\ninterval_range : Function to create a fixed frequency IntervalIndex.\ncut : Bin values into discrete Intervals.\nqcut : Bin values into equal-sized Intervals based on rank or sample quantiles.\n\nNotes\n-----\nSee the `user guide\n<https://pandas.pydata.org/pandas-docs/stable/user_guide/advanced.html#intervalindex>`__\nfor more.\n\nExamples\n--------\nA new ``IntervalIndex`` is typically constructed using\n:func:`interval_range`:\n\n>>> pd.interval_range(start=0, end=5)\nIntervalIndex([(0, 1], (1, 2], (2, 3], (3, 4], (4, 5]],\n              dtype='interval[int64, right]')\n\nIt may also be constructed using one of the constructor\nmethods: :meth:`IntervalIndex.from_arrays`,\n:meth:`IntervalIndex.from_breaks`, and :meth:`IntervalIndex.from_tuples`.\n\nSee further examples in the doc strings of ``interval_range`` and the\nmentioned constructor methods."
  },
  {
    "symbol": "pandas.MultiIndex",
    "signature": "(levels=None, codes=None, sortorder=None, names=None, dtype=None, copy: 'bool' = False, name=None, verify_integrity: 'bool' = True) -> 'Self'",
    "doc": "A multi-level, or hierarchical, index object for pandas objects.\n\nParameters\n----------\nlevels : sequence of arrays\n    The unique labels for each level.\ncodes : sequence of arrays\n    Integers for each level designating which label at each location.\nsortorder : optional int\n    Level of sortedness (must be lexicographically sorted by that\n    level).\nnames : optional sequence of objects\n    Names for each of the index levels. (name is accepted for compat).\ncopy : bool, default False\n    Copy the meta-data.\nverify_integrity : bool, default True\n    Check that the levels/codes are consistent and valid.\n\nAttributes\n----------\nnames\nlevels\ncodes\nnlevels\nlevshape\ndtypes\n\nMethods\n-------\nfrom_arrays\nfrom_tuples\nfrom_product\nfrom_frame\nset_levels\nset_codes\nto_frame\nto_flat_index\nsortlevel\ndroplevel\nswaplevel\nreorder_levels\nremove_unused_levels\nget_level_values\nget_indexer\nget_loc\nget_locs\nget_loc_level\ndrop\n\nSee Also\n--------\nMultiIndex.from_arrays  : Convert list of arrays to MultiIndex.\nMultiIndex.from_product : Create a MultiIndex from the cartesian product\n                          of iterables.\nMultiIndex.from_tuples  : Convert list of tuples to a MultiIndex.\nMultiIndex.from_frame   : Make a MultiIndex from a DataFrame.\nIndex : The base pandas Index type.\n\nNotes\n-----\nSee the `user guide\n<https://pandas.pydata.org/pandas-docs/stable/user_guide/advanced.html>`__\nfor more.\n\nExamples\n--------\nA new ``MultiIndex`` is typically constructed using one of the helper\nmethods :meth:`MultiIndex.from_arrays`, :meth:`MultiIndex.from_product`\nand :meth:`MultiIndex.from_tuples`. For example (using ``.from_arrays``):\n\n>>> arrays = [[1, 1, 2, 2], ['red', 'blue', 'red', 'blue']]\n>>> pd.MultiIndex.from_arrays(arrays, names=('number', 'color'))\nMultiIndex([(1,  'red'),\n            (1, 'blue'),\n            (2,  'red'),\n            (2, 'blue')],\n           names=['number', 'color'])\n\nSee further examples for how to construct a MultiIndex in the doc strings\nof the mentioned helper methods."
  },
  {
    "symbol": "pandas.NamedAgg",
    "signature": "(column: ForwardRef('Hashable'), aggfunc: ForwardRef('AggScalar'))",
    "doc": "Helper for column specific aggregation with control over output column names.\n\nSubclass of typing.NamedTuple.\n\nParameters\n----------\ncolumn : Hashable\n    Column label in the DataFrame to apply aggfunc.\naggfunc : function or str\n    Function to apply to the provided column. If string, the name of a built-in\n    pandas function.\n\nExamples\n--------\n>>> df = pd.DataFrame({\"key\": [1, 1, 2], \"a\": [-1, 0, 1], 1: [10, 11, 12]})\n>>> agg_a = pd.NamedAgg(column=\"a\", aggfunc=\"min\")\n>>> agg_1 = pd.NamedAgg(column=1, aggfunc=lambda x: np.mean(x))\n>>> df.groupby(\"key\").agg(result_a=agg_a, result_1=agg_1)\n     result_a  result_1\nkey\n1          -1      10.5\n2           1      12.0"
  },
  {
    "symbol": "pandas.Period",
    "signature": "(value=None, freq=None, ordinal=None, year=None, month=None, quarter=None, day=None, hour=None, minute=None, second=None)",
    "doc": "Represents a period of time.\n\nParameters\n----------\nvalue : Period, str, datetime, date or pandas.Timestamp, default None\n    The time period represented (e.g., '4Q2005'). This represents neither\n    the start or the end of the period, but rather the entire period itself.\nfreq : str, default None\n    One of pandas period strings or corresponding objects. Accepted\n    strings are listed in the\n    :ref:`period alias section <timeseries.period_aliases>` in the user docs.\n    If value is datetime, freq is required.\nordinal : int, default None\n    The period offset from the proleptic Gregorian epoch.\nyear : int, default None\n    Year value of the period.\nmonth : int, default 1\n    Month value of the period.\nquarter : int, default None\n    Quarter value of the period.\nday : int, default 1\n    Day value of the period.\nhour : int, default 0\n    Hour value of the period.\nminute : int, default 0\n    Minute value of the period.\nsecond : int, default 0\n    Second value of the period.\n\nExamples\n--------\n>>> period = pd.Period('2012-1-1', freq='D')\n>>> period\nPeriod('2012-01-01', 'D')"
  },
  {
    "symbol": "pandas.PeriodDtype",
    "signature": "(freq) -> 'PeriodDtype'",
    "doc": "An ExtensionDtype for Period data.\n\n**This is not an actual numpy dtype**, but a duck type.\n\nParameters\n----------\nfreq : str or DateOffset\n    The frequency of this PeriodDtype.\n\nAttributes\n----------\nfreq\n\nMethods\n-------\nNone\n\nExamples\n--------\n>>> pd.PeriodDtype(freq='D')\nperiod[D]\n\n>>> pd.PeriodDtype(freq=pd.offsets.MonthEnd())\nperiod[M]"
  },
  {
    "symbol": "pandas.PeriodIndex",
    "signature": "(data=None, ordinal=None, freq=None, dtype: 'Dtype | None' = None, copy: 'bool' = False, name: 'Hashable | None' = None, **fields) -> 'Self'",
    "doc": "Immutable ndarray holding ordinal values indicating regular periods in time.\n\nIndex keys are boxed to Period objects which carries the metadata (eg,\nfrequency information).\n\nParameters\n----------\ndata : array-like (1d int np.ndarray or PeriodArray), optional\n    Optional period-like data to construct index with.\ncopy : bool\n    Make a copy of input ndarray.\nfreq : str or period object, optional\n    One of pandas period strings or corresponding objects.\nyear : int, array, or Series, default None\n\n    .. deprecated:: 2.2.0\n       Use PeriodIndex.from_fields instead.\nmonth : int, array, or Series, default None\n\n    .. deprecated:: 2.2.0\n       Use PeriodIndex.from_fields instead.\nquarter : int, array, or Series, default None\n\n    .. deprecated:: 2.2.0\n       Use PeriodIndex.from_fields instead.\nday : int, array, or Series, default None\n\n    .. deprecated:: 2.2.0\n       Use PeriodIndex.from_fields instead.\nhour : int, array, or Series, default None\n\n    .. deprecated:: 2.2.0\n       Use PeriodIndex.from_fields instead.\nminute : int, array, or Series, default None\n\n    .. deprecated:: 2.2.0\n       Use PeriodIndex.from_fields instead.\nsecond : int, array, or Series, default None\n\n    .. deprecated:: 2.2.0\n       Use PeriodIndex.from_fields instead.\ndtype : str or PeriodDtype, default None\n\nAttributes\n----------\nday\ndayofweek\nday_of_week\ndayofyear\nday_of_year\ndays_in_month\ndaysinmonth\nend_time\nfreq\nfreqstr\nhour\nis_leap_year\nminute\nmonth\nquarter\nqyear\nsecond\nstart_time\nweek\nweekday\nweekofyear\nyear\n\nMethods\n-------\nasfreq\nstrftime\nto_timestamp\nfrom_fields\nfrom_ordinals\n\nSee Also\n--------\nIndex : The base pandas Index type.\nPeriod : Represents a period of time.\nDatetimeIndex : Index with datetime64 data.\nTimedeltaIndex : Index of timedelta64 data.\nperiod_range : Create a fixed-frequency PeriodIndex.\n\nExamples\n--------\n>>> idx = pd.PeriodIndex.from_fields(year=[2000, 2002], quarter=[1, 3])\n>>> idx\nPeriodIndex(['2000Q1', '2002Q3'], dtype='period[Q-DEC]')"
  },
  {
    "symbol": "pandas.RangeIndex",
    "signature": "(start=None, stop=None, step=None, dtype: 'Dtype | None' = None, copy: 'bool' = False, name: 'Hashable | None' = None) -> 'Self'",
    "doc": "Immutable Index implementing a monotonic integer range.\n\nRangeIndex is a memory-saving special case of an Index limited to representing\nmonotonic ranges with a 64-bit dtype. Using RangeIndex may in some instances\nimprove computing speed.\n\nThis is the default index type used\nby DataFrame and Series when no explicit index is provided by the user.\n\nParameters\n----------\nstart : int (default: 0), range, or other RangeIndex instance\n    If int and \"stop\" is not given, interpreted as \"stop\" instead.\nstop : int (default: 0)\nstep : int (default: 1)\ndtype : np.int64\n    Unused, accepted for homogeneity with other index types.\ncopy : bool, default False\n    Unused, accepted for homogeneity with other index types.\nname : object, optional\n    Name to be stored in the index.\n\nAttributes\n----------\nstart\nstop\nstep\n\nMethods\n-------\nfrom_range\n\nSee Also\n--------\nIndex : The base pandas Index type.\n\nExamples\n--------\n>>> list(pd.RangeIndex(5))\n[0, 1, 2, 3, 4]\n\n>>> list(pd.RangeIndex(-2, 4))\n[-2, -1, 0, 1, 2, 3]\n\n>>> list(pd.RangeIndex(0, 10, 2))\n[0, 2, 4, 6, 8]\n\n>>> list(pd.RangeIndex(2, -10, -3))\n[2, -1, -4, -7]\n\n>>> list(pd.RangeIndex(0))\n[]\n\n>>> list(pd.RangeIndex(1, 0))\n[]"
  },
  {
    "symbol": "pandas.Series",
    "signature": "(data=None, index=None, dtype: 'Dtype | None' = None, name=None, copy: 'bool | None' = None, fastpath: 'bool | lib.NoDefault' = <no_default>) -> 'None'",
    "doc": "One-dimensional ndarray with axis labels (including time series).\n\nLabels need not be unique but must be a hashable type. The object\nsupports both integer- and label-based indexing and provides a host of\nmethods for performing operations involving the index. Statistical\nmethods from ndarray have been overridden to automatically exclude\nmissing data (currently represented as NaN).\n\nOperations between Series (+, -, /, \\*, \\*\\*) align values based on their\nassociated index values-- they need not be the same length. The result\nindex will be the sorted union of the two indexes.\n\nParameters\n----------\ndata : array-like, Iterable, dict, or scalar value\n    Contains data stored in Series. If data is a dict, argument order is\n    maintained.\nindex : array-like or Index (1d)\n    Values must be hashable and have the same length as `data`.\n    Non-unique index values are allowed. Will default to\n    RangeIndex (0, 1, 2, ..., n) if not provided. If data is dict-like\n    and index is None, then the keys in the data are used as the index. If the\n    index is not None, the resulting Series is reindexed with the index values.\ndtype : str, numpy.dtype, or ExtensionDtype, optional\n    Data type for the output Series. If not specified, this will be\n    inferred from `data`.\n    See the :ref:`user guide <basics.dtypes>` for more usages.\nname : Hashable, default None\n    The name to give to the Series.\ncopy : bool, default False\n    Copy input data. Only affects Series or 1d ndarray input. See examples.\n\nNotes\n-----\nPlease reference the :ref:`User Guide <basics.series>` for more information.\n\nExamples\n--------\nConstructing Series from a dictionary with an Index specified\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['a', 'b', 'c'])\n>>> ser\na   1\nb   2\nc   3\ndtype: int64\n\nThe keys of the dictionary match with the Index values, hence the Index\nvalues have no effect.\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['x', 'y', 'z'])\n>>> ser\nx   NaN\ny   NaN\nz   NaN\ndtype: float64\n\nNote that the Index is first build with the keys from the dictionary.\nAfter this the Series is reindexed with the given Index values, hence we\nget all NaN as a result.\n\nConstructing Series from a list with `copy=False`.\n\n>>> r = [1, 2]\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\n[1, 2]\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `copy` of\nthe original data even though `copy=False`, so\nthe data is unchanged.\n\nConstructing Series from a 1d ndarray with `copy=False`.\n\n>>> r = np.array([1, 2])\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\narray([999,   2])\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `view` on\nthe original data, so\nthe data is changed as well."
  },
  {
    "symbol": "pandas.SparseDtype",
    "signature": "(dtype: 'Dtype' = <class 'numpy.float64'>, fill_value: 'Any' = None) -> 'None'",
    "doc": "Dtype for data stored in :class:`SparseArray`.\n\nThis dtype implements the pandas ExtensionDtype interface.\n\nParameters\n----------\ndtype : str, ExtensionDtype, numpy.dtype, type, default numpy.float64\n    The dtype of the underlying array storing the non-fill value values.\nfill_value : scalar, optional\n    The scalar value not stored in the SparseArray. By default, this\n    depends on `dtype`.\n\n    =========== ==========\n    dtype       na_value\n    =========== ==========\n    float       ``np.nan``\n    int         ``0``\n    bool        ``False``\n    datetime64  ``pd.NaT``\n    timedelta64 ``pd.NaT``\n    =========== ==========\n\n    The default value may be overridden by specifying a `fill_value`.\n\nAttributes\n----------\nNone\n\nMethods\n-------\nNone\n\nExamples\n--------\n>>> ser = pd.Series([1, 0, 0], dtype=pd.SparseDtype(dtype=int, fill_value=0))\n>>> ser\n0    1\n1    0\n2    0\ndtype: Sparse[int64, 0]\n>>> ser.sparse.density\n0.3333333333333333"
  },
  {
    "symbol": "pandas.StringDtype",
    "signature": "(storage: 'str | None' = None, na_value: 'libmissing.NAType | float' = <NA>) -> 'None'",
    "doc": "Extension dtype for string data.\n\n.. warning::\n\n   StringDtype is considered experimental. The implementation and\n   parts of the API may change without warning.\n\nParameters\n----------\nstorage : {\"python\", \"pyarrow\"}, optional\n    If not given, the value of ``pd.options.mode.string_storage``.\nna_value : {np.nan, pd.NA}, default pd.NA\n    Whether the dtype follows NaN or NA missing value semantics.\n\nAttributes\n----------\nNone\n\nMethods\n-------\nNone\n\nExamples\n--------\n>>> pd.StringDtype()\nstring[python]\n\n>>> pd.StringDtype(storage=\"pyarrow\")\nstring[pyarrow]"
  },
  {
    "symbol": "pandas.Timedelta",
    "signature": "(value=<object object at 0x102402a70>, unit=None, **kwargs)",
    "doc": "Represents a duration, the difference between two dates or times.\n\nTimedelta is the pandas equivalent of python's ``datetime.timedelta``\nand is interchangeable with it in most cases.\n\nParameters\n----------\nvalue : Timedelta, timedelta, np.timedelta64, str, or int\nunit : str, default 'ns'\n    Denote the unit of the input, if input is an integer.\n\n    Possible values:\n\n    * 'W', or 'D'\n    * 'days', or 'day'\n    * 'hours', 'hour', 'hr', or 'h'\n    * 'minutes', 'minute', 'min', or 'm'\n    * 'seconds', 'second', 'sec', or 's'\n    * 'milliseconds', 'millisecond', 'millis', 'milli', or 'ms'\n    * 'microseconds', 'microsecond', 'micros', 'micro', or 'us'\n    * 'nanoseconds', 'nanosecond', 'nanos', 'nano', or 'ns'.\n\n    .. deprecated:: 2.2.0\n\n        Values `H`, `T`, `S`, `L`, `U`, and `N` are deprecated in favour\n        of the values `h`, `min`, `s`, `ms`, `us`, and `ns`.\n\n**kwargs\n    Available kwargs: {days, seconds, microseconds,\n    milliseconds, minutes, hours, weeks}.\n    Values for construction in compat with datetime.timedelta.\n    Numpy ints and floats will be coerced to python ints and floats.\n\nNotes\n-----\nThe constructor may take in either both values of value and unit or\nkwargs as above. Either one of them must be used during initialization\n\nThe ``.value`` attribute is always in ns.\n\nIf the precision is higher than nanoseconds, the precision of the duration is\ntruncated to nanoseconds.\n\nExamples\n--------\nHere we initialize Timedelta object with both value and unit\n\n>>> td = pd.Timedelta(1, \"d\")\n>>> td\nTimedelta('1 days 00:00:00')\n\nHere we initialize the Timedelta object with kwargs\n\n>>> td2 = pd.Timedelta(days=1)\n>>> td2\nTimedelta('1 days 00:00:00')\n\nWe see that either way we get the same result"
  },
  {
    "symbol": "pandas.TimedeltaIndex",
    "signature": "(data=None, unit=<no_default>, freq=<no_default>, closed=<no_default>, dtype=None, copy: 'bool' = False, name=None)",
    "doc": "Immutable Index of timedelta64 data.\n\nRepresented internally as int64, and scalars returned Timedelta objects.\n\nParameters\n----------\ndata : array-like (1-dimensional), optional\n    Optional timedelta-like data to construct index with.\nunit : {'D', 'h', 'm', 's', 'ms', 'us', 'ns'}, optional\n    The unit of ``data``.\n\n    .. deprecated:: 2.2.0\n     Use ``pd.to_timedelta`` instead.\n\nfreq : str or pandas offset object, optional\n    One of pandas date offset strings or corresponding objects. The string\n    ``'infer'`` can be passed in order to set the frequency of the index as\n    the inferred frequency upon creation.\ndtype : numpy.dtype or str, default None\n    Valid ``numpy`` dtypes are ``timedelta64[ns]``, ``timedelta64[us]``,\n    ``timedelta64[ms]``, and ``timedelta64[s]``.\ncopy : bool\n    Make a copy of input array.\nname : object\n    Name to be stored in the index.\n\nAttributes\n----------\ndays\nseconds\nmicroseconds\nnanoseconds\ncomponents\ninferred_freq\n\nMethods\n-------\nto_pytimedelta\nto_series\nround\nfloor\nceil\nto_frame\nmean\n\nSee Also\n--------\nIndex : The base pandas Index type.\nTimedelta : Represents a duration between two dates or times.\nDatetimeIndex : Index of datetime64 data.\nPeriodIndex : Index of Period data.\ntimedelta_range : Create a fixed-frequency TimedeltaIndex.\n\nNotes\n-----\nTo learn more about the frequency strings, please see `this link\n<https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\nExamples\n--------\n>>> pd.TimedeltaIndex(['0 days', '1 days', '2 days', '3 days', '4 days'])\nTimedeltaIndex(['0 days', '1 days', '2 days', '3 days', '4 days'],\n               dtype='timedelta64[ns]', freq=None)\n\nWe can also let pandas infer the frequency when possible.\n\n>>> pd.TimedeltaIndex(np.arange(5) * 24 * 3600 * 1e9, freq='infer')\nTimedeltaIndex(['0 days', '1 days', '2 days', '3 days', '4 days'],\n               dtype='timedelta64[ns]', freq='D')"
  },
  {
    "symbol": "pandas.Timestamp",
    "signature": "(ts_input=<object object at 0x102402a90>, year=None, month=None, day=None, hour=None, minute=None, second=None, microsecond=None, tzinfo=None, *, nanosecond=None, tz=None, unit=None, fold=None)",
    "doc": "Pandas replacement for python datetime.datetime object.\n\nTimestamp is the pandas equivalent of python's Datetime\nand is interchangeable with it in most cases. It's the type used\nfor the entries that make up a DatetimeIndex, and other timeseries\noriented data structures in pandas.\n\nParameters\n----------\nts_input : datetime-like, str, int, float\n    Value to be converted to Timestamp.\nyear, month, day : int\nhour, minute, second, microsecond : int, optional, default 0\ntzinfo : datetime.tzinfo, optional, default None\nnanosecond : int, optional, default 0\ntz : str, pytz.timezone, dateutil.tz.tzfile or None\n    Time zone for time which Timestamp will have.\nunit : str\n    Unit used for conversion if ts_input is of type int or float. The\n    valid values are 'D', 'h', 'm', 's', 'ms', 'us', and 'ns'. For\n    example, 's' means seconds and 'ms' means milliseconds.\n\n    For float inputs, the result will be stored in nanoseconds, and\n    the unit attribute will be set as ``'ns'``.\nfold : {0, 1}, default None, keyword-only\n    Due to daylight saving time, one wall clock time can occur twice\n    when shifting from summer to winter time; fold describes whether the\n    datetime-like corresponds  to the first (0) or the second time (1)\n    the wall clock hits the ambiguous time.\n\nNotes\n-----\nThere are essentially three calling conventions for the constructor. The\nprimary form accepts four parameters. They can be passed by position or\nkeyword.\n\nThe other two forms mimic the parameters from ``datetime.datetime``. They\ncan be passed by either position or keyword, but not both mixed together.\n\nExamples\n--------\nUsing the primary calling convention:\n\nThis converts a datetime-like string\n\n>>> pd.Timestamp('2017-01-01T12')\nTimestamp('2017-01-01 12:00:00')\n\nThis converts a float representing a Unix epoch in units of seconds\n\n>>> pd.Timestamp(1513393355.5, unit='s')\nTimestamp('2017-12-16 03:02:35.500000')\n\nThis converts an int representing a Unix-epoch in units of seconds\nand for a particular timezone\n\n>>> pd.Timestamp(1513393355, unit='s', tz='US/Pacific')\nTimestamp('2017-12-15 19:02:35-0800', tz='US/Pacific')\n\nUsing the other two forms that mimic the API for ``datetime.datetime``:\n\n>>> pd.Timestamp(2017, 1, 1, 12)\nTimestamp('2017-01-01 12:00:00')\n\n>>> pd.Timestamp(year=2017, month=1, day=1, hour=12)\nTimestamp('2017-01-01 12:00:00')"
  },
  {
    "symbol": "pandas.UInt16Dtype",
    "signature": "()",
    "doc": "An ExtensionDtype for uint16 integer data.\n\nUses :attr:`pandas.NA` as its missing value, rather than :attr:`numpy.nan`.\n\nAttributes\n----------\nNone\n\nMethods\n-------\nNone\n\nExamples\n--------\nFor Int8Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.Int8Dtype())\n>>> ser.dtype\nInt8Dtype()\n\nFor Int16Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.Int16Dtype())\n>>> ser.dtype\nInt16Dtype()\n\nFor Int32Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.Int32Dtype())\n>>> ser.dtype\nInt32Dtype()\n\nFor Int64Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.Int64Dtype())\n>>> ser.dtype\nInt64Dtype()\n\nFor UInt8Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.UInt8Dtype())\n>>> ser.dtype\nUInt8Dtype()\n\nFor UInt16Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.UInt16Dtype())\n>>> ser.dtype\nUInt16Dtype()\n\nFor UInt32Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.UInt32Dtype())\n>>> ser.dtype\nUInt32Dtype()\n\nFor UInt64Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.UInt64Dtype())\n>>> ser.dtype\nUInt64Dtype()"
  },
  {
    "symbol": "pandas.UInt32Dtype",
    "signature": "()",
    "doc": "An ExtensionDtype for uint32 integer data.\n\nUses :attr:`pandas.NA` as its missing value, rather than :attr:`numpy.nan`.\n\nAttributes\n----------\nNone\n\nMethods\n-------\nNone\n\nExamples\n--------\nFor Int8Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.Int8Dtype())\n>>> ser.dtype\nInt8Dtype()\n\nFor Int16Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.Int16Dtype())\n>>> ser.dtype\nInt16Dtype()\n\nFor Int32Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.Int32Dtype())\n>>> ser.dtype\nInt32Dtype()\n\nFor Int64Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.Int64Dtype())\n>>> ser.dtype\nInt64Dtype()\n\nFor UInt8Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.UInt8Dtype())\n>>> ser.dtype\nUInt8Dtype()\n\nFor UInt16Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.UInt16Dtype())\n>>> ser.dtype\nUInt16Dtype()\n\nFor UInt32Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.UInt32Dtype())\n>>> ser.dtype\nUInt32Dtype()\n\nFor UInt64Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.UInt64Dtype())\n>>> ser.dtype\nUInt64Dtype()"
  },
  {
    "symbol": "pandas.UInt64Dtype",
    "signature": "()",
    "doc": "An ExtensionDtype for uint64 integer data.\n\nUses :attr:`pandas.NA` as its missing value, rather than :attr:`numpy.nan`.\n\nAttributes\n----------\nNone\n\nMethods\n-------\nNone\n\nExamples\n--------\nFor Int8Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.Int8Dtype())\n>>> ser.dtype\nInt8Dtype()\n\nFor Int16Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.Int16Dtype())\n>>> ser.dtype\nInt16Dtype()\n\nFor Int32Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.Int32Dtype())\n>>> ser.dtype\nInt32Dtype()\n\nFor Int64Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.Int64Dtype())\n>>> ser.dtype\nInt64Dtype()\n\nFor UInt8Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.UInt8Dtype())\n>>> ser.dtype\nUInt8Dtype()\n\nFor UInt16Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.UInt16Dtype())\n>>> ser.dtype\nUInt16Dtype()\n\nFor UInt32Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.UInt32Dtype())\n>>> ser.dtype\nUInt32Dtype()\n\nFor UInt64Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.UInt64Dtype())\n>>> ser.dtype\nUInt64Dtype()"
  },
  {
    "symbol": "pandas.UInt8Dtype",
    "signature": "()",
    "doc": "An ExtensionDtype for uint8 integer data.\n\nUses :attr:`pandas.NA` as its missing value, rather than :attr:`numpy.nan`.\n\nAttributes\n----------\nNone\n\nMethods\n-------\nNone\n\nExamples\n--------\nFor Int8Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.Int8Dtype())\n>>> ser.dtype\nInt8Dtype()\n\nFor Int16Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.Int16Dtype())\n>>> ser.dtype\nInt16Dtype()\n\nFor Int32Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.Int32Dtype())\n>>> ser.dtype\nInt32Dtype()\n\nFor Int64Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.Int64Dtype())\n>>> ser.dtype\nInt64Dtype()\n\nFor UInt8Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.UInt8Dtype())\n>>> ser.dtype\nUInt8Dtype()\n\nFor UInt16Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.UInt16Dtype())\n>>> ser.dtype\nUInt16Dtype()\n\nFor UInt32Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.UInt32Dtype())\n>>> ser.dtype\nUInt32Dtype()\n\nFor UInt64Dtype:\n\n>>> ser = pd.Series([2, pd.NA], dtype=pd.UInt64Dtype())\n>>> ser.dtype\nUInt64Dtype()"
  },
  {
    "symbol": "pandas._config.detect_console_encoding",
    "signature": "() -> 'str'",
    "doc": "Try to find the most capable encoding supported by the console.\nslightly modified from the way IPython handles the same issue."
  },
  {
    "symbol": "pandas._config.option_context",
    "signature": "(*args) -> 'None'",
    "doc": "Context manager to temporarily set options in the `with` statement context.\n\nYou need to invoke as ``option_context(pat, val, [(pat, val), ...])``.\n\nExamples\n--------\n>>> from pandas import option_context\n>>> with option_context('display.max_rows', 10, 'display.max_columns', 5):\n...     pass"
  },
  {
    "symbol": "pandas._config.using_copy_on_write",
    "signature": "() -> bool",
    "doc": ""
  },
  {
    "symbol": "pandas._config.using_nullable_dtypes",
    "signature": "() -> bool",
    "doc": ""
  },
  {
    "symbol": "pandas._config.using_string_dtype",
    "signature": "() -> bool",
    "doc": ""
  },
  {
    "symbol": "pandas._config.warn_copy_on_write",
    "signature": "() -> bool",
    "doc": ""
  },
  {
    "symbol": "pandas._libs.Interval",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Immutable object implementing an Interval, a bounded slice-like interval.\n\nParameters\n----------\nleft : orderable scalar\n    Left bound for the interval.\nright : orderable scalar\n    Right bound for the interval.\nclosed : {'right', 'left', 'both', 'neither'}, default 'right'\n    Whether the interval is closed on the left-side, right-side, both or\n    neither. See the Notes for more detailed explanation.\n\nSee Also\n--------\nIntervalIndex : An Index of Interval objects that are all closed on the\n    same side.\ncut : Convert continuous data into discrete bins (Categorical\n    of Interval objects).\nqcut : Convert continuous data into bins (Categorical of Interval objects)\n    based on quantiles.\nPeriod : Represents a period of time.\n\nNotes\n-----\nThe parameters `left` and `right` must be from the same type, you must be\nable to compare them and they must satisfy ``left <= right``.\n\nA closed interval (in mathematics denoted by square brackets) contains\nits endpoints, i.e. the closed interval ``[0, 5]`` is characterized by the\nconditions ``0 <= x <= 5``. This is what ``closed='both'`` stands for.\nAn open interval (in mathematics denoted by parentheses) does not contain\nits endpoints, i.e. the open interval ``(0, 5)`` is characterized by the\nconditions ``0 < x < 5``. This is what ``closed='neither'`` stands for.\nIntervals can also be half-open or half-closed, i.e. ``[0, 5)`` is\ndescribed by ``0 <= x < 5`` (``closed='left'``) and ``(0, 5]`` is\ndescribed by ``0 < x <= 5`` (``closed='right'``).\n\nExamples\n--------\nIt is possible to build Intervals of different types, like numeric ones:\n\n>>> iv = pd.Interval(left=0, right=5)\n>>> iv\nInterval(0, 5, closed='right')\n\nYou can check if an element belongs to it, or if it contains another interval:\n\n>>> 2.5 in iv\nTrue\n>>> pd.Interval(left=2, right=5, closed='both') in iv\nTrue\n\nYou can test the bounds (``closed='right'``, so ``0 < x <= 5``):\n\n>>> 0 in iv\nFalse\n>>> 5 in iv\nTrue\n>>> 0.0001 in iv\nTrue\n\nCalculate its length\n\n>>> iv.length\n5\n\nYou can operate with `+` and `*` over an Interval and the operation\nis applied to each of its bounds, so the result depends on the type\nof the bound elements\n\n>>> shifted_iv = iv + 3\n>>> shifted_iv\nInterval(3, 8, closed='right')\n>>> extended_iv = iv * 10.0\n>>> extended_iv\nInterval(0.0, 50.0, closed='right')\n\nTo create a time interval you can use Timestamps as the bounds\n\n>>> year_2017 = pd.Interval(pd.Timestamp('2017-01-01 00:00:00'),\n...                         pd.Timestamp('2018-01-01 00:00:00'),\n...                         closed='left')\n>>> pd.Timestamp('2017-01-01 00:00') in year_2017\nTrue\n>>> year_2017.length\nTimedelta('365 days 00:00:00')"
  },
  {
    "symbol": "pandas._libs.NaTType",
    "signature": "()",
    "doc": "(N)ot-(A)-(T)ime, the time equivalent of NaN.\n\nExamples\n--------\n>>> pd.DataFrame([pd.Timestamp(\"2023\"), np.nan], columns=[\"col_1\"])\n        col_1\n0  2023-01-01\n1         NaT"
  },
  {
    "symbol": "pandas._libs.OutOfBoundsDatetime",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Raised when the datetime is outside the range that can be represented.\n\nExamples\n--------\n>>> pd.to_datetime(\"08335394550\")\nTraceback (most recent call last):\nOutOfBoundsDatetime: Parsing \"08335394550\" to datetime overflows,\nat position 0"
  },
  {
    "symbol": "pandas._libs.Period",
    "signature": "(value=None, freq=None, ordinal=None, year=None, month=None, quarter=None, day=None, hour=None, minute=None, second=None)",
    "doc": "Represents a period of time.\n\nParameters\n----------\nvalue : Period, str, datetime, date or pandas.Timestamp, default None\n    The time period represented (e.g., '4Q2005'). This represents neither\n    the start or the end of the period, but rather the entire period itself.\nfreq : str, default None\n    One of pandas period strings or corresponding objects. Accepted\n    strings are listed in the\n    :ref:`period alias section <timeseries.period_aliases>` in the user docs.\n    If value is datetime, freq is required.\nordinal : int, default None\n    The period offset from the proleptic Gregorian epoch.\nyear : int, default None\n    Year value of the period.\nmonth : int, default 1\n    Month value of the period.\nquarter : int, default None\n    Quarter value of the period.\nday : int, default 1\n    Day value of the period.\nhour : int, default 0\n    Hour value of the period.\nminute : int, default 0\n    Minute value of the period.\nsecond : int, default 0\n    Second value of the period.\n\nExamples\n--------\n>>> period = pd.Period('2012-1-1', freq='D')\n>>> period\nPeriod('2012-01-01', 'D')"
  },
  {
    "symbol": "pandas._libs.Timedelta",
    "signature": "(value=<object object at 0x102402a70>, unit=None, **kwargs)",
    "doc": "Represents a duration, the difference between two dates or times.\n\nTimedelta is the pandas equivalent of python's ``datetime.timedelta``\nand is interchangeable with it in most cases.\n\nParameters\n----------\nvalue : Timedelta, timedelta, np.timedelta64, str, or int\nunit : str, default 'ns'\n    Denote the unit of the input, if input is an integer.\n\n    Possible values:\n\n    * 'W', or 'D'\n    * 'days', or 'day'\n    * 'hours', 'hour', 'hr', or 'h'\n    * 'minutes', 'minute', 'min', or 'm'\n    * 'seconds', 'second', 'sec', or 's'\n    * 'milliseconds', 'millisecond', 'millis', 'milli', or 'ms'\n    * 'microseconds', 'microsecond', 'micros', 'micro', or 'us'\n    * 'nanoseconds', 'nanosecond', 'nanos', 'nano', or 'ns'.\n\n    .. deprecated:: 2.2.0\n\n        Values `H`, `T`, `S`, `L`, `U`, and `N` are deprecated in favour\n        of the values `h`, `min`, `s`, `ms`, `us`, and `ns`.\n\n**kwargs\n    Available kwargs: {days, seconds, microseconds,\n    milliseconds, minutes, hours, weeks}.\n    Values for construction in compat with datetime.timedelta.\n    Numpy ints and floats will be coerced to python ints and floats.\n\nNotes\n-----\nThe constructor may take in either both values of value and unit or\nkwargs as above. Either one of them must be used during initialization\n\nThe ``.value`` attribute is always in ns.\n\nIf the precision is higher than nanoseconds, the precision of the duration is\ntruncated to nanoseconds.\n\nExamples\n--------\nHere we initialize Timedelta object with both value and unit\n\n>>> td = pd.Timedelta(1, \"d\")\n>>> td\nTimedelta('1 days 00:00:00')\n\nHere we initialize the Timedelta object with kwargs\n\n>>> td2 = pd.Timedelta(days=1)\n>>> td2\nTimedelta('1 days 00:00:00')\n\nWe see that either way we get the same result"
  },
  {
    "symbol": "pandas._libs.Timestamp",
    "signature": "(ts_input=<object object at 0x102402a90>, year=None, month=None, day=None, hour=None, minute=None, second=None, microsecond=None, tzinfo=None, *, nanosecond=None, tz=None, unit=None, fold=None)",
    "doc": "Pandas replacement for python datetime.datetime object.\n\nTimestamp is the pandas equivalent of python's Datetime\nand is interchangeable with it in most cases. It's the type used\nfor the entries that make up a DatetimeIndex, and other timeseries\noriented data structures in pandas.\n\nParameters\n----------\nts_input : datetime-like, str, int, float\n    Value to be converted to Timestamp.\nyear, month, day : int\nhour, minute, second, microsecond : int, optional, default 0\ntzinfo : datetime.tzinfo, optional, default None\nnanosecond : int, optional, default 0\ntz : str, pytz.timezone, dateutil.tz.tzfile or None\n    Time zone for time which Timestamp will have.\nunit : str\n    Unit used for conversion if ts_input is of type int or float. The\n    valid values are 'D', 'h', 'm', 's', 'ms', 'us', and 'ns'. For\n    example, 's' means seconds and 'ms' means milliseconds.\n\n    For float inputs, the result will be stored in nanoseconds, and\n    the unit attribute will be set as ``'ns'``.\nfold : {0, 1}, default None, keyword-only\n    Due to daylight saving time, one wall clock time can occur twice\n    when shifting from summer to winter time; fold describes whether the\n    datetime-like corresponds  to the first (0) or the second time (1)\n    the wall clock hits the ambiguous time.\n\nNotes\n-----\nThere are essentially three calling conventions for the constructor. The\nprimary form accepts four parameters. They can be passed by position or\nkeyword.\n\nThe other two forms mimic the parameters from ``datetime.datetime``. They\ncan be passed by either position or keyword, but not both mixed together.\n\nExamples\n--------\nUsing the primary calling convention:\n\nThis converts a datetime-like string\n\n>>> pd.Timestamp('2017-01-01T12')\nTimestamp('2017-01-01 12:00:00')\n\nThis converts a float representing a Unix epoch in units of seconds\n\n>>> pd.Timestamp(1513393355.5, unit='s')\nTimestamp('2017-12-16 03:02:35.500000')\n\nThis converts an int representing a Unix-epoch in units of seconds\nand for a particular timezone\n\n>>> pd.Timestamp(1513393355, unit='s', tz='US/Pacific')\nTimestamp('2017-12-15 19:02:35-0800', tz='US/Pacific')\n\nUsing the other two forms that mimic the API for ``datetime.datetime``:\n\n>>> pd.Timestamp(2017, 1, 1, 12)\nTimestamp('2017-01-01 12:00:00')\n\n>>> pd.Timestamp(year=2017, month=1, day=1, hour=12)\nTimestamp('2017-01-01 12:00:00')"
  },
  {
    "symbol": "pandas._testing.ArrowDtype",
    "signature": "(pyarrow_dtype: 'pa.DataType') -> 'None'",
    "doc": "An ExtensionDtype for PyArrow data types.\n\n.. warning::\n\n   ArrowDtype is considered experimental. The implementation and\n   parts of the API may change without warning.\n\nWhile most ``dtype`` arguments can accept the \"string\"\nconstructor, e.g. ``\"int64[pyarrow]\"``, ArrowDtype is useful\nif the data type contains parameters like ``pyarrow.timestamp``.\n\nParameters\n----------\npyarrow_dtype : pa.DataType\n    An instance of a `pyarrow.DataType <https://arrow.apache.org/docs/python/api/datatypes.html#factory-functions>`__.\n\nAttributes\n----------\npyarrow_dtype\n\nMethods\n-------\nNone\n\nReturns\n-------\nArrowDtype\n\nExamples\n--------\n>>> import pyarrow as pa\n>>> pd.ArrowDtype(pa.int64())\nint64[pyarrow]\n\nTypes with parameters must be constructed with ArrowDtype.\n\n>>> pd.ArrowDtype(pa.timestamp(\"s\", tz=\"America/New_York\"))\ntimestamp[s, tz=America/New_York][pyarrow]\n>>> pd.ArrowDtype(pa.list_(pa.int64()))\nlist<item: int64>[pyarrow]"
  },
  {
    "symbol": "pandas._testing.ArrowExtensionArray",
    "signature": "(values: 'pa.Array | pa.ChunkedArray') -> 'None'",
    "doc": "Pandas ExtensionArray backed by a PyArrow ChunkedArray.\n\n.. warning::\n\n   ArrowExtensionArray is considered experimental. The implementation and\n   parts of the API may change without warning.\n\nParameters\n----------\nvalues : pyarrow.Array or pyarrow.ChunkedArray\n\nAttributes\n----------\nNone\n\nMethods\n-------\nNone\n\nReturns\n-------\nArrowExtensionArray\n\nNotes\n-----\nMost methods are implemented using `pyarrow compute functions. <https://arrow.apache.org/docs/python/api/compute.html>`__\nSome methods may either raise an exception or raise a ``PerformanceWarning`` if an\nassociated compute function is not available based on the installed version of PyArrow.\n\nPlease install the latest version of PyArrow to enable the best functionality and avoid\npotential bugs in prior versions of PyArrow.\n\nExamples\n--------\nCreate an ArrowExtensionArray with :func:`pandas.array`:\n\n>>> pd.array([1, 1, None], dtype=\"int64[pyarrow]\")\n<ArrowExtensionArray>\n[1, 1, <NA>]\nLength: 3, dtype: int64[pyarrow]"
  },
  {
    "symbol": "pandas._testing.BaseMaskedArray",
    "signature": "(values: 'np.ndarray', mask: 'npt.NDArray[np.bool_]', copy: 'bool' = False) -> 'None'",
    "doc": "Base class for masked arrays (which use _data and _mask to store the data).\n\nnumpy based"
  },
  {
    "symbol": "pandas._testing.DataFrame",
    "signature": "(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, copy: 'bool | None' = None) -> 'None'",
    "doc": "Two-dimensional, size-mutable, potentially heterogeneous tabular data.\n\nData structure also contains labeled axes (rows and columns).\nArithmetic operations align on both row and column labels. Can be\nthought of as a dict-like container for Series objects. The primary\npandas data structure.\n\nParameters\n----------\ndata : ndarray (structured or homogeneous), Iterable, dict, or DataFrame\n    Dict can contain Series, arrays, constants, dataclass or list-like objects. If\n    data is a dict, column order follows insertion-order. If a dict contains Series\n    which have an index defined, it is aligned by its index. This alignment also\n    occurs if data is a Series or a DataFrame itself. Alignment is done on\n    Series/DataFrame inputs.\n\n    If data is a list of dicts, column order follows insertion-order.\n\nindex : Index or array-like\n    Index to use for resulting frame. Will default to RangeIndex if\n    no indexing information part of input data and no index provided.\ncolumns : Index or array-like\n    Column labels to use for resulting frame when data does not have them,\n    defaulting to RangeIndex(0, 1, 2, ..., n). If data contains column labels,\n    will perform column selection instead.\ndtype : dtype, default None\n    Data type to force. Only a single dtype is allowed. If None, infer.\ncopy : bool or None, default None\n    Copy data from inputs.\n    For dict data, the default of None behaves like ``copy=True``.  For DataFrame\n    or 2d ndarray input, the default of None behaves like ``copy=False``.\n    If data is a dict containing one or more Series (possibly of different dtypes),\n    ``copy=False`` will ensure that these inputs are not copied.\n\n    .. versionchanged:: 1.3.0\n\nSee Also\n--------\nDataFrame.from_records : Constructor from tuples, also record arrays.\nDataFrame.from_dict : From dicts of Series, arrays, or dicts.\nread_csv : Read a comma-separated values (csv) file into DataFrame.\nread_table : Read general delimited file into DataFrame.\nread_clipboard : Read text from clipboard into DataFrame.\n\nNotes\n-----\nPlease reference the :ref:`User Guide <basics.dataframe>` for more information.\n\nExamples\n--------\nConstructing DataFrame from a dictionary.\n\n>>> d = {'col1': [1, 2], 'col2': [3, 4]}\n>>> df = pd.DataFrame(data=d)\n>>> df\n   col1  col2\n0     1     3\n1     2     4\n\nNotice that the inferred dtype is int64.\n\n>>> df.dtypes\ncol1    int64\ncol2    int64\ndtype: object\n\nTo enforce a single dtype:\n\n>>> df = pd.DataFrame(data=d, dtype=np.int8)\n>>> df.dtypes\ncol1    int8\ncol2    int8\ndtype: object\n\nConstructing DataFrame from a dictionary including Series:\n\n>>> d = {'col1': [0, 1, 2, 3], 'col2': pd.Series([2, 3], index=[2, 3])}\n>>> pd.DataFrame(data=d, index=[0, 1, 2, 3])\n   col1  col2\n0     0   NaN\n1     1   NaN\n2     2   2.0\n3     3   3.0\n\nConstructing DataFrame from numpy ndarray:\n\n>>> df2 = pd.DataFrame(np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]),\n...                    columns=['a', 'b', 'c'])\n>>> df2\n   a  b  c\n0  1  2  3\n1  4  5  6\n2  7  8  9\n\nConstructing DataFrame from a numpy ndarray that has labeled columns:\n\n>>> data = np.array([(1, 2, 3), (4, 5, 6), (7, 8, 9)],\n...                 dtype=[(\"a\", \"i4\"), (\"b\", \"i4\"), (\"c\", \"i4\")])\n>>> df3 = pd.DataFrame(data, columns=['c', 'a'])\n...\n>>> df3\n   c  a\n0  3  1\n1  6  4\n2  9  7\n\nConstructing DataFrame from dataclass:\n\n>>> from dataclasses import make_dataclass\n>>> Point = make_dataclass(\"Point\", [(\"x\", int), (\"y\", int)])\n>>> pd.DataFrame([Point(0, 0), Point(0, 3), Point(2, 3)])\n   x  y\n0  0  0\n1  0  3\n2  2  3\n\nConstructing DataFrame from Series/DataFrame:\n\n>>> ser = pd.Series([1, 2, 3], index=[\"a\", \"b\", \"c\"])\n>>> df = pd.DataFrame(data=ser, index=[\"a\", \"c\"])\n>>> df\n   0\na  1\nc  3\n\n>>> df1 = pd.DataFrame([1, 2, 3], index=[\"a\", \"b\", \"c\"], columns=[\"x\"])\n>>> df2 = pd.DataFrame(data=df1, index=[\"a\", \"c\"])\n>>> df2\n   x\na  1\nc  3"
  },
  {
    "symbol": "pandas._testing.Decimal",
    "signature": "(value='0', context=None)",
    "doc": "Construct a new Decimal object. 'value' can be an integer, string, tuple,\nor another Decimal object. If no value is given, return Decimal('0'). The\ncontext does not affect the conversion and is only passed to determine if\nthe InvalidOperation trap is active."
  },
  {
    "symbol": "pandas._testing.Index",
    "signature": "(data=None, dtype=None, copy: 'bool' = False, name=None, tupleize_cols: 'bool' = True) -> 'Self'",
    "doc": "Immutable sequence used for indexing and alignment.\n\nThe basic object storing axis labels for all pandas objects.\n\n.. versionchanged:: 2.0.0\n\n   Index can hold all numpy numeric dtypes (except float16). Previously only\n   int64/uint64/float64 dtypes were accepted.\n\nParameters\n----------\ndata : array-like (1-dimensional)\ndtype : str, numpy.dtype, or ExtensionDtype, optional\n    Data type for the output Index. If not specified, this will be\n    inferred from `data`.\n    See the :ref:`user guide <basics.dtypes>` for more usages.\ncopy : bool, default False\n    Copy input data.\nname : object\n    Name to be stored in the index.\ntupleize_cols : bool (default: True)\n    When True, attempt to create a MultiIndex if possible.\n\nSee Also\n--------\nRangeIndex : Index implementing a monotonic integer range.\nCategoricalIndex : Index of :class:`Categorical` s.\nMultiIndex : A multi-level, or hierarchical Index.\nIntervalIndex : An Index of :class:`Interval` s.\nDatetimeIndex : Index of datetime64 data.\nTimedeltaIndex : Index of timedelta64 data.\nPeriodIndex : Index of Period data.\n\nNotes\n-----\nAn Index instance can **only** contain hashable objects.\nAn Index instance *can not* hold numpy float16 dtype.\n\nExamples\n--------\n>>> pd.Index([1, 2, 3])\nIndex([1, 2, 3], dtype='int64')\n\n>>> pd.Index(list('abc'))\nIndex(['a', 'b', 'c'], dtype='object')\n\n>>> pd.Index([1, 2, 3], dtype=\"uint8\")\nIndex([1, 2, 3], dtype='uint8')"
  },
  {
    "symbol": "pandas._testing.MultiIndex",
    "signature": "(levels=None, codes=None, sortorder=None, names=None, dtype=None, copy: 'bool' = False, name=None, verify_integrity: 'bool' = True) -> 'Self'",
    "doc": "A multi-level, or hierarchical, index object for pandas objects.\n\nParameters\n----------\nlevels : sequence of arrays\n    The unique labels for each level.\ncodes : sequence of arrays\n    Integers for each level designating which label at each location.\nsortorder : optional int\n    Level of sortedness (must be lexicographically sorted by that\n    level).\nnames : optional sequence of objects\n    Names for each of the index levels. (name is accepted for compat).\ncopy : bool, default False\n    Copy the meta-data.\nverify_integrity : bool, default True\n    Check that the levels/codes are consistent and valid.\n\nAttributes\n----------\nnames\nlevels\ncodes\nnlevels\nlevshape\ndtypes\n\nMethods\n-------\nfrom_arrays\nfrom_tuples\nfrom_product\nfrom_frame\nset_levels\nset_codes\nto_frame\nto_flat_index\nsortlevel\ndroplevel\nswaplevel\nreorder_levels\nremove_unused_levels\nget_level_values\nget_indexer\nget_loc\nget_locs\nget_loc_level\ndrop\n\nSee Also\n--------\nMultiIndex.from_arrays  : Convert list of arrays to MultiIndex.\nMultiIndex.from_product : Create a MultiIndex from the cartesian product\n                          of iterables.\nMultiIndex.from_tuples  : Convert list of tuples to a MultiIndex.\nMultiIndex.from_frame   : Make a MultiIndex from a DataFrame.\nIndex : The base pandas Index type.\n\nNotes\n-----\nSee the `user guide\n<https://pandas.pydata.org/pandas-docs/stable/user_guide/advanced.html>`__\nfor more.\n\nExamples\n--------\nA new ``MultiIndex`` is typically constructed using one of the helper\nmethods :meth:`MultiIndex.from_arrays`, :meth:`MultiIndex.from_product`\nand :meth:`MultiIndex.from_tuples`. For example (using ``.from_arrays``):\n\n>>> arrays = [[1, 1, 2, 2], ['red', 'blue', 'red', 'blue']]\n>>> pd.MultiIndex.from_arrays(arrays, names=('number', 'color'))\nMultiIndex([(1,  'red'),\n            (1, 'blue'),\n            (2,  'red'),\n            (2, 'blue')],\n           names=['number', 'color'])\n\nSee further examples for how to construct a MultiIndex in the doc strings\nof the mentioned helper methods."
  },
  {
    "symbol": "pandas._testing.NDArrayBackedExtensionArray",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "ExtensionArray that is backed by a single NumPy ndarray."
  },
  {
    "symbol": "pandas._testing.NumpyExtensionArray",
    "signature": "(values: 'np.ndarray | NumpyExtensionArray', copy: 'bool' = False) -> 'None'",
    "doc": "A pandas ExtensionArray for NumPy data.\n\nThis is mostly for internal compatibility, and is not especially\nuseful on its own.\n\nParameters\n----------\nvalues : ndarray\n    The NumPy ndarray to wrap. Must be 1-dimensional.\ncopy : bool, default False\n    Whether to copy `values`.\n\nAttributes\n----------\nNone\n\nMethods\n-------\nNone\n\nExamples\n--------\n>>> pd.arrays.NumpyExtensionArray(np.array([0, 1, 2, 3]))\n<NumpyExtensionArray>\n[0, 1, 2, 3]\nLength: 4, dtype: int64"
  },
  {
    "symbol": "pandas._testing.RangeIndex",
    "signature": "(start=None, stop=None, step=None, dtype: 'Dtype | None' = None, copy: 'bool' = False, name: 'Hashable | None' = None) -> 'Self'",
    "doc": "Immutable Index implementing a monotonic integer range.\n\nRangeIndex is a memory-saving special case of an Index limited to representing\nmonotonic ranges with a 64-bit dtype. Using RangeIndex may in some instances\nimprove computing speed.\n\nThis is the default index type used\nby DataFrame and Series when no explicit index is provided by the user.\n\nParameters\n----------\nstart : int (default: 0), range, or other RangeIndex instance\n    If int and \"stop\" is not given, interpreted as \"stop\" instead.\nstop : int (default: 0)\nstep : int (default: 1)\ndtype : np.int64\n    Unused, accepted for homogeneity with other index types.\ncopy : bool, default False\n    Unused, accepted for homogeneity with other index types.\nname : object, optional\n    Name to be stored in the index.\n\nAttributes\n----------\nstart\nstop\nstep\n\nMethods\n-------\nfrom_range\n\nSee Also\n--------\nIndex : The base pandas Index type.\n\nExamples\n--------\n>>> list(pd.RangeIndex(5))\n[0, 1, 2, 3, 4]\n\n>>> list(pd.RangeIndex(-2, 4))\n[-2, -1, 0, 1, 2, 3]\n\n>>> list(pd.RangeIndex(0, 10, 2))\n[0, 2, 4, 6, 8]\n\n>>> list(pd.RangeIndex(2, -10, -3))\n[2, -1, -4, -7]\n\n>>> list(pd.RangeIndex(0))\n[]\n\n>>> list(pd.RangeIndex(1, 0))\n[]"
  },
  {
    "symbol": "pandas._testing.Series",
    "signature": "(data=None, index=None, dtype: 'Dtype | None' = None, name=None, copy: 'bool | None' = None, fastpath: 'bool | lib.NoDefault' = <no_default>) -> 'None'",
    "doc": "One-dimensional ndarray with axis labels (including time series).\n\nLabels need not be unique but must be a hashable type. The object\nsupports both integer- and label-based indexing and provides a host of\nmethods for performing operations involving the index. Statistical\nmethods from ndarray have been overridden to automatically exclude\nmissing data (currently represented as NaN).\n\nOperations between Series (+, -, /, \\*, \\*\\*) align values based on their\nassociated index values-- they need not be the same length. The result\nindex will be the sorted union of the two indexes.\n\nParameters\n----------\ndata : array-like, Iterable, dict, or scalar value\n    Contains data stored in Series. If data is a dict, argument order is\n    maintained.\nindex : array-like or Index (1d)\n    Values must be hashable and have the same length as `data`.\n    Non-unique index values are allowed. Will default to\n    RangeIndex (0, 1, 2, ..., n) if not provided. If data is dict-like\n    and index is None, then the keys in the data are used as the index. If the\n    index is not None, the resulting Series is reindexed with the index values.\ndtype : str, numpy.dtype, or ExtensionDtype, optional\n    Data type for the output Series. If not specified, this will be\n    inferred from `data`.\n    See the :ref:`user guide <basics.dtypes>` for more usages.\nname : Hashable, default None\n    The name to give to the Series.\ncopy : bool, default False\n    Copy input data. Only affects Series or 1d ndarray input. See examples.\n\nNotes\n-----\nPlease reference the :ref:`User Guide <basics.series>` for more information.\n\nExamples\n--------\nConstructing Series from a dictionary with an Index specified\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['a', 'b', 'c'])\n>>> ser\na   1\nb   2\nc   3\ndtype: int64\n\nThe keys of the dictionary match with the Index values, hence the Index\nvalues have no effect.\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['x', 'y', 'z'])\n>>> ser\nx   NaN\ny   NaN\nz   NaN\ndtype: float64\n\nNote that the Index is first build with the keys from the dictionary.\nAfter this the Series is reindexed with the given Index values, hence we\nget all NaN as a result.\n\nConstructing Series from a list with `copy=False`.\n\n>>> r = [1, 2]\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\n[1, 2]\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `copy` of\nthe original data even though `copy=False`, so\nthe data is unchanged.\n\nConstructing Series from a 1d ndarray with `copy=False`.\n\n>>> r = np.array([1, 2])\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\narray([999,   2])\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `view` on\nthe original data, so\nthe data is changed as well."
  },
  {
    "symbol": "pandas._testing.SubclassedDataFrame",
    "signature": "(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, copy: 'bool | None' = None) -> 'None'",
    "doc": "Two-dimensional, size-mutable, potentially heterogeneous tabular data.\n\nData structure also contains labeled axes (rows and columns).\nArithmetic operations align on both row and column labels. Can be\nthought of as a dict-like container for Series objects. The primary\npandas data structure.\n\nParameters\n----------\ndata : ndarray (structured or homogeneous), Iterable, dict, or DataFrame\n    Dict can contain Series, arrays, constants, dataclass or list-like objects. If\n    data is a dict, column order follows insertion-order. If a dict contains Series\n    which have an index defined, it is aligned by its index. This alignment also\n    occurs if data is a Series or a DataFrame itself. Alignment is done on\n    Series/DataFrame inputs.\n\n    If data is a list of dicts, column order follows insertion-order.\n\nindex : Index or array-like\n    Index to use for resulting frame. Will default to RangeIndex if\n    no indexing information part of input data and no index provided.\ncolumns : Index or array-like\n    Column labels to use for resulting frame when data does not have them,\n    defaulting to RangeIndex(0, 1, 2, ..., n). If data contains column labels,\n    will perform column selection instead.\ndtype : dtype, default None\n    Data type to force. Only a single dtype is allowed. If None, infer.\ncopy : bool or None, default None\n    Copy data from inputs.\n    For dict data, the default of None behaves like ``copy=True``.  For DataFrame\n    or 2d ndarray input, the default of None behaves like ``copy=False``.\n    If data is a dict containing one or more Series (possibly of different dtypes),\n    ``copy=False`` will ensure that these inputs are not copied.\n\n    .. versionchanged:: 1.3.0\n\nSee Also\n--------\nDataFrame.from_records : Constructor from tuples, also record arrays.\nDataFrame.from_dict : From dicts of Series, arrays, or dicts.\nread_csv : Read a comma-separated values (csv) file into DataFrame.\nread_table : Read general delimited file into DataFrame.\nread_clipboard : Read text from clipboard into DataFrame.\n\nNotes\n-----\nPlease reference the :ref:`User Guide <basics.dataframe>` for more information.\n\nExamples\n--------\nConstructing DataFrame from a dictionary.\n\n>>> d = {'col1': [1, 2], 'col2': [3, 4]}\n>>> df = pd.DataFrame(data=d)\n>>> df\n   col1  col2\n0     1     3\n1     2     4\n\nNotice that the inferred dtype is int64.\n\n>>> df.dtypes\ncol1    int64\ncol2    int64\ndtype: object\n\nTo enforce a single dtype:\n\n>>> df = pd.DataFrame(data=d, dtype=np.int8)\n>>> df.dtypes\ncol1    int8\ncol2    int8\ndtype: object\n\nConstructing DataFrame from a dictionary including Series:\n\n>>> d = {'col1': [0, 1, 2, 3], 'col2': pd.Series([2, 3], index=[2, 3])}\n>>> pd.DataFrame(data=d, index=[0, 1, 2, 3])\n   col1  col2\n0     0   NaN\n1     1   NaN\n2     2   2.0\n3     3   3.0\n\nConstructing DataFrame from numpy ndarray:\n\n>>> df2 = pd.DataFrame(np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]),\n...                    columns=['a', 'b', 'c'])\n>>> df2\n   a  b  c\n0  1  2  3\n1  4  5  6\n2  7  8  9\n\nConstructing DataFrame from a numpy ndarray that has labeled columns:\n\n>>> data = np.array([(1, 2, 3), (4, 5, 6), (7, 8, 9)],\n...                 dtype=[(\"a\", \"i4\"), (\"b\", \"i4\"), (\"c\", \"i4\")])\n>>> df3 = pd.DataFrame(data, columns=['c', 'a'])\n...\n>>> df3\n   c  a\n0  3  1\n1  6  4\n2  9  7\n\nConstructing DataFrame from dataclass:\n\n>>> from dataclasses import make_dataclass\n>>> Point = make_dataclass(\"Point\", [(\"x\", int), (\"y\", int)])\n>>> pd.DataFrame([Point(0, 0), Point(0, 3), Point(2, 3)])\n   x  y\n0  0  0\n1  0  3\n2  2  3\n\nConstructing DataFrame from Series/DataFrame:\n\n>>> ser = pd.Series([1, 2, 3], index=[\"a\", \"b\", \"c\"])\n>>> df = pd.DataFrame(data=ser, index=[\"a\", \"c\"])\n>>> df\n   0\na  1\nc  3\n\n>>> df1 = pd.DataFrame([1, 2, 3], index=[\"a\", \"b\", \"c\"], columns=[\"x\"])\n>>> df2 = pd.DataFrame(data=df1, index=[\"a\", \"c\"])\n>>> df2\n   x\na  1\nc  3"
  },
  {
    "symbol": "pandas._testing.SubclassedSeries",
    "signature": "(data=None, index=None, dtype: 'Dtype | None' = None, name=None, copy: 'bool | None' = None, fastpath: 'bool | lib.NoDefault' = <no_default>) -> 'None'",
    "doc": "One-dimensional ndarray with axis labels (including time series).\n\nLabels need not be unique but must be a hashable type. The object\nsupports both integer- and label-based indexing and provides a host of\nmethods for performing operations involving the index. Statistical\nmethods from ndarray have been overridden to automatically exclude\nmissing data (currently represented as NaN).\n\nOperations between Series (+, -, /, \\*, \\*\\*) align values based on their\nassociated index values-- they need not be the same length. The result\nindex will be the sorted union of the two indexes.\n\nParameters\n----------\ndata : array-like, Iterable, dict, or scalar value\n    Contains data stored in Series. If data is a dict, argument order is\n    maintained.\nindex : array-like or Index (1d)\n    Values must be hashable and have the same length as `data`.\n    Non-unique index values are allowed. Will default to\n    RangeIndex (0, 1, 2, ..., n) if not provided. If data is dict-like\n    and index is None, then the keys in the data are used as the index. If the\n    index is not None, the resulting Series is reindexed with the index values.\ndtype : str, numpy.dtype, or ExtensionDtype, optional\n    Data type for the output Series. If not specified, this will be\n    inferred from `data`.\n    See the :ref:`user guide <basics.dtypes>` for more usages.\nname : Hashable, default None\n    The name to give to the Series.\ncopy : bool, default False\n    Copy input data. Only affects Series or 1d ndarray input. See examples.\n\nNotes\n-----\nPlease reference the :ref:`User Guide <basics.series>` for more information.\n\nExamples\n--------\nConstructing Series from a dictionary with an Index specified\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['a', 'b', 'c'])\n>>> ser\na   1\nb   2\nc   3\ndtype: int64\n\nThe keys of the dictionary match with the Index values, hence the Index\nvalues have no effect.\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['x', 'y', 'z'])\n>>> ser\nx   NaN\ny   NaN\nz   NaN\ndtype: float64\n\nNote that the Index is first build with the keys from the dictionary.\nAfter this the Series is reindexed with the given Index values, hence we\nget all NaN as a result.\n\nConstructing Series from a list with `copy=False`.\n\n>>> r = [1, 2]\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\n[1, 2]\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `copy` of\nthe original data even though `copy=False`, so\nthe data is unchanged.\n\nConstructing Series from a 1d ndarray with `copy=False`.\n\n>>> r = np.array([1, 2])\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\narray([999,   2])\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `view` on\nthe original data, so\nthe data is changed as well."
  },
  {
    "symbol": "pandas._testing.assert_almost_equal",
    "signature": "(left, right, check_dtype: \"bool | Literal['equiv']\" = 'equiv', rtol: 'float' = 1e-05, atol: 'float' = 1e-08, **kwargs) -> 'None'",
    "doc": "Check that the left and right objects are approximately equal.\n\nBy approximately equal, we refer to objects that are numbers or that\ncontain numbers which may be equivalent to specific levels of precision.\n\nParameters\n----------\nleft : object\nright : object\ncheck_dtype : bool or {'equiv'}, default 'equiv'\n    Check dtype if both a and b are the same type. If 'equiv' is passed in,\n    then `RangeIndex` and `Index` with int64 dtype are also considered\n    equivalent when doing type checking.\nrtol : float, default 1e-5\n    Relative tolerance.\natol : float, default 1e-8\n    Absolute tolerance."
  },
  {
    "symbol": "pandas._testing.assert_attr_equal",
    "signature": "(attr: 'str', left, right, obj: 'str' = 'Attributes') -> 'None'",
    "doc": "Check attributes are equal. Both objects must have attribute.\n\nParameters\n----------\nattr : str\n    Attribute name being compared.\nleft : object\nright : object\nobj : str, default 'Attributes'\n    Specify object name being compared, internally used to show appropriate\n    assertion message"
  },
  {
    "symbol": "pandas._testing.assert_categorical_equal",
    "signature": "(left, right, check_dtype: 'bool' = True, check_category_order: 'bool' = True, obj: 'str' = 'Categorical') -> 'None'",
    "doc": "Test that Categoricals are equivalent.\n\nParameters\n----------\nleft : Categorical\nright : Categorical\ncheck_dtype : bool, default True\n    Check that integer dtype of the codes are the same.\ncheck_category_order : bool, default True\n    Whether the order of the categories should be compared, which\n    implies identical integer codes.  If False, only the resulting\n    values are compared.  The ordered attribute is\n    checked regardless.\nobj : str, default 'Categorical'\n    Specify object name being compared, internally used to show appropriate\n    assertion message."
  },
  {
    "symbol": "pandas._testing.assert_class_equal",
    "signature": "(left, right, exact: 'bool | str' = True, obj: 'str' = 'Input') -> 'None'",
    "doc": "Checks classes are equal."
  },
  {
    "symbol": "pandas._testing.assert_contains_all",
    "signature": "(iterable, dic) -> 'None'",
    "doc": ""
  },
  {
    "symbol": "pandas._testing.assert_copy",
    "signature": "(iter1, iter2, **eql_kwargs) -> 'None'",
    "doc": "iter1, iter2: iterables that produce elements\ncomparable with assert_almost_equal\n\nChecks that the elements are equal, but not\nthe same object. (Does not check that items\nin sequences are also not the same object)"
  },
  {
    "symbol": "pandas._testing.assert_cow_warning",
    "signature": "(warn=True, match=None, **kwargs)",
    "doc": "Assert that a warning is raised in the CoW warning mode.\n\nParameters\n----------\nwarn : bool, default True\n    By default, check that a warning is raised. Can be turned off by passing False.\nmatch : str\n    The warning message to match against, if different from the default.\nkwargs\n    Passed through to assert_produces_warning"
  },
  {
    "symbol": "pandas._testing.assert_datetime_array_equal",
    "signature": "(left, right, obj: 'str' = 'DatetimeArray', check_freq: 'bool' = True) -> 'None'",
    "doc": ""
  },
  {
    "symbol": "pandas._testing.assert_dict_equal",
    "signature": "(left, right, compare_keys: 'bool' = True) -> 'None'",
    "doc": ""
  },
  {
    "symbol": "pandas._testing.assert_equal",
    "signature": "(left, right, **kwargs) -> 'None'",
    "doc": "Wrapper for tm.assert_*_equal to dispatch to the appropriate test function.\n\nParameters\n----------\nleft, right : Index, Series, DataFrame, ExtensionArray, or np.ndarray\n    The two items to be compared.\n**kwargs\n    All keyword arguments are passed through to the underlying assert method."
  },
  {
    "symbol": "pandas._testing.assert_extension_array_equal",
    "signature": "(left, right, check_dtype: \"bool | Literal['equiv']\" = True, index_values=None, check_exact: 'bool | lib.NoDefault' = <no_default>, rtol: 'float | lib.NoDefault' = <no_default>, atol: 'float | lib.NoDefault' = <no_default>, obj: 'str' = 'ExtensionArray') -> 'None'",
    "doc": "Check that left and right ExtensionArrays are equal.\n\nParameters\n----------\nleft, right : ExtensionArray\n    The two arrays to compare.\ncheck_dtype : bool, default True\n    Whether to check if the ExtensionArray dtypes are identical.\nindex_values : Index | numpy.ndarray, default None\n    Optional index (shared by both left and right), used in output.\ncheck_exact : bool, default False\n    Whether to compare number exactly.\n\n    .. versionchanged:: 2.2.0\n\n        Defaults to True for integer dtypes if none of\n        ``check_exact``, ``rtol`` and ``atol`` are specified.\nrtol : float, default 1e-5\n    Relative tolerance. Only used when check_exact is False.\natol : float, default 1e-8\n    Absolute tolerance. Only used when check_exact is False.\nobj : str, default 'ExtensionArray'\n    Specify object name being compared, internally used to show appropriate\n    assertion message.\n\n    .. versionadded:: 2.0.0\n\nNotes\n-----\nMissing values are checked separately from valid values.\nA mask of missing values is computed for each and checked to match.\nThe remaining all-valid values are cast to object dtype and checked.\n\nExamples\n--------\n>>> from pandas import testing as tm\n>>> a = pd.Series([1, 2, 3, 4])\n>>> b, c = a.array, a.array\n>>> tm.assert_extension_array_equal(b, c)"
  },
  {
    "symbol": "pandas._testing.assert_frame_equal",
    "signature": "(left, right, check_dtype: \"bool | Literal['equiv']\" = True, check_index_type: \"bool | Literal['equiv']\" = 'equiv', check_column_type: \"bool | Literal['equiv']\" = 'equiv', check_frame_type: 'bool' = True, check_names: 'bool' = True, by_blocks: 'bool' = False, check_exact: 'bool | lib.NoDefault' = <no_default>, check_datetimelike_compat: 'bool' = False, check_categorical: 'bool' = True, check_like: 'bool' = False, check_freq: 'bool' = True, check_flags: 'bool' = True, rtol: 'float | lib.NoDefault' = <no_default>, atol: 'float | lib.NoDefault' = <no_default>, obj: 'str' = 'DataFrame') -> 'None'",
    "doc": "Check that left and right DataFrame are equal.\n\nThis function is intended to compare two DataFrames and output any\ndifferences. It is mostly intended for use in unit tests.\nAdditional parameters allow varying the strictness of the\nequality checks performed.\n\nParameters\n----------\nleft : DataFrame\n    First DataFrame to compare.\nright : DataFrame\n    Second DataFrame to compare.\ncheck_dtype : bool, default True\n    Whether to check the DataFrame dtype is identical.\ncheck_index_type : bool or {'equiv'}, default 'equiv'\n    Whether to check the Index class, dtype and inferred_type\n    are identical.\ncheck_column_type : bool or {'equiv'}, default 'equiv'\n    Whether to check the columns class, dtype and inferred_type\n    are identical. Is passed as the ``exact`` argument of\n    :func:`assert_index_equal`.\ncheck_frame_type : bool, default True\n    Whether to check the DataFrame class is identical.\ncheck_names : bool, default True\n    Whether to check that the `names` attribute for both the `index`\n    and `column` attributes of the DataFrame is identical.\nby_blocks : bool, default False\n    Specify how to compare internal data. If False, compare by columns.\n    If True, compare by blocks.\ncheck_exact : bool, default False\n    Whether to compare number exactly.\n\n    .. versionchanged:: 2.2.0\n\n        Defaults to True for integer dtypes if none of\n        ``check_exact``, ``rtol`` and ``atol`` are specified.\ncheck_datetimelike_compat : bool, default False\n    Compare datetime-like which is comparable ignoring dtype.\ncheck_categorical : bool, default True\n    Whether to compare internal Categorical exactly.\ncheck_like : bool, default False\n    If True, ignore the order of index & columns.\n    Note: index labels must match their respective rows\n    (same as in columns) - same labels must be with the same data.\ncheck_freq : bool, default True\n    Whether to check the `freq` attribute on a DatetimeIndex or TimedeltaIndex.\ncheck_flags : bool, default True\n    Whether to check the `flags` attribute.\nrtol : float, default 1e-5\n    Relative tolerance. Only used when check_exact is False.\natol : float, default 1e-8\n    Absolute tolerance. Only used when check_exact is False.\nobj : str, default 'DataFrame'\n    Specify object name being compared, internally used to show appropriate\n    assertion message.\n\nSee Also\n--------\nassert_series_equal : Equivalent method for asserting Series equality.\nDataFrame.equals : Check DataFrame equality.\n\nExamples\n--------\nThis example shows comparing two DataFrames that are equal\nbut with columns of differing dtypes.\n\n>>> from pandas.testing import assert_frame_equal\n>>> df1 = pd.DataFrame({'a': [1, 2], 'b': [3, 4]})\n>>> df2 = pd.DataFrame({'a': [1, 2], 'b': [3.0, 4.0]})\n\ndf1 equals itself.\n\n>>> assert_frame_equal(df1, df1)\n\ndf1 differs from df2 as column 'b' is of a different type.\n\n>>> assert_frame_equal(df1, df2)\nTraceback (most recent call last):\n...\nAssertionError: Attributes of DataFrame.iloc[:, 1] (column name=\"b\") are different\n\nAttribute \"dtype\" are different\n[left]:  int64\n[right]: float64\n\nIgnore differing dtypes in columns with check_dtype.\n\n>>> assert_frame_equal(df1, df2, check_dtype=False)"
  },
  {
    "symbol": "pandas._testing.assert_index_equal",
    "signature": "(left: 'Index', right: 'Index', exact: 'bool | str' = 'equiv', check_names: 'bool' = True, check_exact: 'bool' = True, check_categorical: 'bool' = True, check_order: 'bool' = True, rtol: 'float' = 1e-05, atol: 'float' = 1e-08, obj: 'str' = 'Index') -> 'None'",
    "doc": "Check that left and right Index are equal.\n\nParameters\n----------\nleft : Index\nright : Index\nexact : bool or {'equiv'}, default 'equiv'\n    Whether to check the Index class, dtype and inferred_type\n    are identical. If 'equiv', then RangeIndex can be substituted for\n    Index with an int64 dtype as well.\ncheck_names : bool, default True\n    Whether to check the names attribute.\ncheck_exact : bool, default True\n    Whether to compare number exactly.\ncheck_categorical : bool, default True\n    Whether to compare internal Categorical exactly.\ncheck_order : bool, default True\n    Whether to compare the order of index entries as well as their values.\n    If True, both indexes must contain the same elements, in the same order.\n    If False, both indexes must contain the same elements, but in any order.\nrtol : float, default 1e-5\n    Relative tolerance. Only used when check_exact is False.\natol : float, default 1e-8\n    Absolute tolerance. Only used when check_exact is False.\nobj : str, default 'Index'\n    Specify object name being compared, internally used to show appropriate\n    assertion message.\n\nExamples\n--------\n>>> from pandas import testing as tm\n>>> a = pd.Index([1, 2, 3])\n>>> b = pd.Index([1, 2, 3])\n>>> tm.assert_index_equal(a, b)"
  },
  {
    "symbol": "pandas._testing.assert_indexing_slices_equivalent",
    "signature": "(ser: 'Series', l_slc: 'slice', i_slc: 'slice') -> 'None'",
    "doc": "Check that ser.iloc[i_slc] matches ser.loc[l_slc] and, if applicable,\nser[l_slc]."
  },
  {
    "symbol": "pandas._testing.assert_interval_array_equal",
    "signature": "(left, right, exact: \"bool | Literal['equiv']\" = 'equiv', obj: 'str' = 'IntervalArray') -> 'None'",
    "doc": "Test that two IntervalArrays are equivalent.\n\nParameters\n----------\nleft, right : IntervalArray\n    The IntervalArrays to compare.\nexact : bool or {'equiv'}, default 'equiv'\n    Whether to check the Index class, dtype and inferred_type\n    are identical. If 'equiv', then RangeIndex can be substituted for\n    Index with an int64 dtype as well.\nobj : str, default 'IntervalArray'\n    Specify object name being compared, internally used to show appropriate\n    assertion message"
  },
  {
    "symbol": "pandas._testing.assert_is_sorted",
    "signature": "(seq) -> 'None'",
    "doc": "Assert that the sequence is sorted."
  },
  {
    "symbol": "pandas._testing.assert_is_valid_plot_return_object",
    "signature": "(objs) -> 'None'",
    "doc": ""
  },
  {
    "symbol": "pandas._testing.assert_metadata_equivalent",
    "signature": "(left: 'DataFrame | Series', right: 'DataFrame | Series | None' = None) -> 'None'",
    "doc": "Check that ._metadata attributes are equivalent."
  },
  {
    "symbol": "pandas._testing.assert_numpy_array_equal",
    "signature": "(left, right, strict_nan: 'bool' = False, check_dtype: \"bool | Literal['equiv']\" = True, err_msg=None, check_same=None, obj: 'str' = 'numpy array', index_values=None) -> 'None'",
    "doc": "Check that 'np.ndarray' is equivalent.\n\nParameters\n----------\nleft, right : numpy.ndarray or iterable\n    The two arrays to be compared.\nstrict_nan : bool, default False\n    If True, consider NaN and None to be different.\ncheck_dtype : bool, default True\n    Check dtype if both a and b are np.ndarray.\nerr_msg : str, default None\n    If provided, used as assertion message.\ncheck_same : None|'copy'|'same', default None\n    Ensure left and right refer/do not refer to the same memory area.\nobj : str, default 'numpy array'\n    Specify object name being compared, internally used to show appropriate\n    assertion message.\nindex_values : Index | numpy.ndarray, default None\n    optional index (shared by both left and right), used in output."
  },
  {
    "symbol": "pandas._testing.assert_period_array_equal",
    "signature": "(left, right, obj: 'str' = 'PeriodArray') -> 'None'",
    "doc": ""
  },
  {
    "symbol": "pandas._testing.assert_produces_warning",
    "signature": "(expected_warning: 'type[Warning] | bool | tuple[type[Warning], ...] | None' = <class 'Warning'>, filter_level: \"Literal['error', 'ignore', 'always', 'default', 'module', 'once']\" = 'always', check_stacklevel: 'bool' = True, raise_on_extra_warnings: 'bool' = True, match: 'str | None' = None) -> 'Generator[list[warnings.WarningMessage], None, None]'",
    "doc": "Context manager for running code expected to either raise a specific warning,\nmultiple specific warnings, or not raise any warnings. Verifies that the code\nraises the expected warning(s), and that it does not raise any other unexpected\nwarnings. It is basically a wrapper around ``warnings.catch_warnings``.\n\nParameters\n----------\nexpected_warning : {Warning, False, tuple[Warning, ...], None}, default Warning\n    The type of Exception raised. ``exception.Warning`` is the base\n    class for all warnings. To raise multiple types of exceptions,\n    pass them as a tuple. To check that no warning is returned,\n    specify ``False`` or ``None``.\nfilter_level : str or None, default \"always\"\n    Specifies whether warnings are ignored, displayed, or turned\n    into errors.\n    Valid values are:\n\n    * \"error\" - turns matching warnings into exceptions\n    * \"ignore\" - discard the warning\n    * \"always\" - always emit a warning\n    * \"default\" - print the warning the first time it is generated\n      from each location\n    * \"module\" - print the warning the first time it is generated\n      from each module\n    * \"once\" - print the warning the first time it is generated\n\ncheck_stacklevel : bool, default True\n    If True, displays the line that called the function containing\n    the warning to show were the function is called. Otherwise, the\n    line that implements the function is displayed.\nraise_on_extra_warnings : bool, default True\n    Whether extra warnings not of the type `expected_warning` should\n    cause the test to fail.\nmatch : str, optional\n    Match warning message.\n\nExamples\n--------\n>>> import warnings\n>>> with assert_produces_warning():\n...     warnings.warn(UserWarning())\n...\n>>> with assert_produces_warning(False):\n...     warnings.warn(RuntimeWarning())\n...\nTraceback (most recent call last):\n    ...\nAssertionError: Caused unexpected warning(s): ['RuntimeWarning'].\n>>> with assert_produces_warning(UserWarning):\n...     warnings.warn(RuntimeWarning())\nTraceback (most recent call last):\n    ...\nAssertionError: Did not see expected warning of class 'UserWarning'.\n\n..warn:: This is *not* thread-safe."
  },
  {
    "symbol": "pandas._testing.assert_series_equal",
    "signature": "(left, right, check_dtype: \"bool | Literal['equiv']\" = True, check_index_type: \"bool | Literal['equiv']\" = 'equiv', check_series_type: 'bool' = True, check_names: 'bool' = True, check_exact: 'bool | lib.NoDefault' = <no_default>, check_datetimelike_compat: 'bool' = False, check_categorical: 'bool' = True, check_category_order: 'bool' = True, check_freq: 'bool' = True, check_flags: 'bool' = True, rtol: 'float | lib.NoDefault' = <no_default>, atol: 'float | lib.NoDefault' = <no_default>, obj: 'str' = 'Series', *, check_index: 'bool' = True, check_like: 'bool' = False) -> 'None'",
    "doc": "Check that left and right Series are equal.\n\nParameters\n----------\nleft : Series\nright : Series\ncheck_dtype : bool, default True\n    Whether to check the Series dtype is identical.\ncheck_index_type : bool or {'equiv'}, default 'equiv'\n    Whether to check the Index class, dtype and inferred_type\n    are identical.\ncheck_series_type : bool, default True\n     Whether to check the Series class is identical.\ncheck_names : bool, default True\n    Whether to check the Series and Index names attribute.\ncheck_exact : bool, default False\n    Whether to compare number exactly.\n\n    .. versionchanged:: 2.2.0\n\n        Defaults to True for integer dtypes if none of\n        ``check_exact``, ``rtol`` and ``atol`` are specified.\ncheck_datetimelike_compat : bool, default False\n    Compare datetime-like which is comparable ignoring dtype.\ncheck_categorical : bool, default True\n    Whether to compare internal Categorical exactly.\ncheck_category_order : bool, default True\n    Whether to compare category order of internal Categoricals.\ncheck_freq : bool, default True\n    Whether to check the `freq` attribute on a DatetimeIndex or TimedeltaIndex.\ncheck_flags : bool, default True\n    Whether to check the `flags` attribute.\nrtol : float, default 1e-5\n    Relative tolerance. Only used when check_exact is False.\natol : float, default 1e-8\n    Absolute tolerance. Only used when check_exact is False.\nobj : str, default 'Series'\n    Specify object name being compared, internally used to show appropriate\n    assertion message.\ncheck_index : bool, default True\n    Whether to check index equivalence. If False, then compare only values.\n\n    .. versionadded:: 1.3.0\ncheck_like : bool, default False\n    If True, ignore the order of the index. Must be False if check_index is False.\n    Note: same labels must be with the same data.\n\n    .. versionadded:: 1.5.0\n\nExamples\n--------\n>>> from pandas import testing as tm\n>>> a = pd.Series([1, 2, 3, 4])\n>>> b = pd.Series([1, 2, 3, 4])\n>>> tm.assert_series_equal(a, b)"
  },
  {
    "symbol": "pandas._testing.assert_sp_array_equal",
    "signature": "(left, right) -> 'None'",
    "doc": "Check that the left and right SparseArray are equal.\n\nParameters\n----------\nleft : SparseArray\nright : SparseArray"
  },
  {
    "symbol": "pandas._testing.assert_timedelta_array_equal",
    "signature": "(left, right, obj: 'str' = 'TimedeltaArray', check_freq: 'bool' = True) -> 'None'",
    "doc": ""
  },
  {
    "symbol": "pandas._testing.at",
    "signature": "(x)",
    "doc": ""
  },
  {
    "symbol": "pandas._testing.box_expected",
    "signature": "(expected, box_cls, transpose: 'bool' = True)",
    "doc": "Helper function to wrap the expected output of a test in a given box_class.\n\nParameters\n----------\nexpected : np.ndarray, Index, Series\nbox_cls : {Index, Series, DataFrame}\n\nReturns\n-------\nsubclass of box_cls"
  },
  {
    "symbol": "pandas._testing.can_set_locale",
    "signature": "(lc: 'str', lc_var: 'int' = 0) -> 'bool'",
    "doc": "Check to see if we can set a locale, and subsequently get the locale,\nwithout raising an Exception.\n\nParameters\n----------\nlc : str\n    The locale to attempt to set.\nlc_var : int, default `locale.LC_ALL`\n    The category of the locale being set.\n\nReturns\n-------\nbool\n    Whether the passed locale can be set"
  },
  {
    "symbol": "pandas._testing.convert_rows_list_to_csv_str",
    "signature": "(rows_list: 'list[str]') -> 'str'",
    "doc": "Convert list of CSV rows to single CSV-formatted string for current OS.\n\nThis method is used for creating expected value of to_csv() method.\n\nParameters\n----------\nrows_list : List[str]\n    Each element represents the row of csv.\n\nReturns\n-------\nstr\n    Expected output of to_csv() in current OS."
  },
  {
    "symbol": "pandas._testing.decompress_file",
    "signature": "(path: 'FilePath | BaseBuffer', compression: 'CompressionOptions') -> 'Generator[IO[bytes], None, None]'",
    "doc": "Open a compressed file and return a file object.\n\nParameters\n----------\npath : str\n    The path where the file is read from.\n\ncompression : {'gzip', 'bz2', 'zip', 'xz', 'zstd', None}\n    Name of the decompression to use\n\nReturns\n-------\nfile object"
  },
  {
    "symbol": "pandas._testing.ensure_clean",
    "signature": "(filename=None, return_filelike: 'bool' = False, **kwargs: 'Any') -> 'Generator[Any, None, None]'",
    "doc": "Gets a temporary path and agrees to remove on close.\n\nThis implementation does not use tempfile.mkstemp to avoid having a file handle.\nIf the code using the returned path wants to delete the file itself, windows\nrequires that no program has a file handle to it.\n\nParameters\n----------\nfilename : str (optional)\n    suffix of the created file.\nreturn_filelike : bool (default False)\n    if True, returns a file-like which is *always* cleaned. Necessary for\n    savefig and other functions which want to append extensions.\n**kwargs\n    Additional keywords are passed to open()."
  },
  {
    "symbol": "pandas._testing.external_error_raised",
    "signature": "(expected_exception: 'type[Exception]') -> 'ContextManager'",
    "doc": "Helper function to mark pytest.raises that have an external error message.\n\nParameters\n----------\nexpected_exception : Exception\n    Expected error to raise.\n\nReturns\n-------\nCallable\n    Regular `pytest.raises` function with `match` equal to `None`."
  },
  {
    "symbol": "pandas._testing.extract_array",
    "signature": "(obj: 'T', extract_numpy: 'bool' = False, extract_range: 'bool' = False) -> 'T | ArrayLike'",
    "doc": "Extract the ndarray or ExtensionArray from a Series or Index.\n\nFor all other types, `obj` is just returned as is.\n\nParameters\n----------\nobj : object\n    For Series / Index, the underlying ExtensionArray is unboxed.\n\nextract_numpy : bool, default False\n    Whether to extract the ndarray from a NumpyExtensionArray.\n\nextract_range : bool, default False\n    If we have a RangeIndex, return range._values if True\n    (which is a materialized integer ndarray), otherwise return unchanged.\n\nReturns\n-------\narr : object\n\nExamples\n--------\n>>> extract_array(pd.Series(['a', 'b', 'c'], dtype='category'))\n['a', 'b', 'c']\nCategories (3, object): ['a', 'b', 'c']\n\nOther objects like lists, arrays, and DataFrames are just passed through.\n\n>>> extract_array([1, 2, 3])\n[1, 2, 3]\n\nFor an ndarray-backed Series / Index the ndarray is returned.\n\n>>> extract_array(pd.Series([1, 2, 3]))\narray([1, 2, 3])\n\nTo extract all the way down to the ndarray, pass ``extract_numpy=True``.\n\n>>> extract_array(pd.Series([1, 2, 3]), extract_numpy=True)\narray([1, 2, 3])"
  },
  {
    "symbol": "pandas._testing.get_cython_table_params",
    "signature": "(ndframe, func_names_and_expected)",
    "doc": "Combine frame, functions from com._cython_table\nkeys and expected result.\n\nParameters\n----------\nndframe : DataFrame or Series\nfunc_names_and_expected : Sequence of two items\n    The first item is a name of a NDFrame method ('sum', 'prod') etc.\n    The second item is the expected return value.\n\nReturns\n-------\nlist\n    List of three items (DataFrame, function, expected result)"
  },
  {
    "symbol": "pandas._testing.get_dtype",
    "signature": "(obj) -> 'DtypeObj'",
    "doc": ""
  },
  {
    "symbol": "pandas._testing.get_finest_unit",
    "signature": "(left: 'str', right: 'str')",
    "doc": "Find the higher of two datetime64 units."
  },
  {
    "symbol": "pandas._testing.get_locales",
    "signature": "(prefix: 'str | None' = None, normalize: 'bool' = True) -> 'list[str]'",
    "doc": "Get all the locales that are available on the system.\n\nParameters\n----------\nprefix : str\n    If not ``None`` then return only those locales with the prefix\n    provided. For example to get all English language locales (those that\n    start with ``\"en\"``), pass ``prefix=\"en\"``.\nnormalize : bool\n    Call ``locale.normalize`` on the resulting list of available locales.\n    If ``True``, only locales that can be set without throwing an\n    ``Exception`` are returned.\n\nReturns\n-------\nlocales : list of strings\n    A list of locale strings that can be set with ``locale.setlocale()``.\n    For example::\n\n        locale.setlocale(locale.LC_ALL, locale_string)\n\nOn error will return an empty list (no locale available, e.g. Windows)"
  },
  {
    "symbol": "pandas._testing.get_obj",
    "signature": "(df: 'DataFrame', klass)",
    "doc": "For sharing tests using frame_or_series, either return the DataFrame\nunchanged or return it's first column as a Series."
  },
  {
    "symbol": "pandas._testing.get_op_from_name",
    "signature": "(op_name: 'str') -> 'Callable'",
    "doc": "The operator function for a given op name.\n\nParameters\n----------\nop_name : str\n    The op name, in form of \"add\" or \"__add__\".\n\nReturns\n-------\nfunction\n    A function performing the operation."
  },
  {
    "symbol": "pandas._testing.getitem",
    "signature": "(x)",
    "doc": ""
  },
  {
    "symbol": "pandas._testing.iat",
    "signature": "(x)",
    "doc": ""
  },
  {
    "symbol": "pandas._testing.iloc",
    "signature": "(x)",
    "doc": ""
  },
  {
    "symbol": "pandas._testing.loc",
    "signature": "(x)",
    "doc": ""
  },
  {
    "symbol": "pandas._testing.maybe_produces_warning",
    "signature": "(warning: 'type[Warning]', condition: 'bool', **kwargs)",
    "doc": "Return a context manager that possibly checks a warning based on the condition"
  },
  {
    "symbol": "pandas._testing.raise_assert_detail",
    "signature": "(obj, message, left, right, diff=None, first_diff=None, index_values=None) -> 'NoReturn'",
    "doc": ""
  },
  {
    "symbol": "pandas._testing.raises_chained_assignment_error",
    "signature": "(warn=True, extra_warnings=(), extra_match=())",
    "doc": ""
  },
  {
    "symbol": "pandas._testing.round_trip_localpath",
    "signature": "(writer, reader, path: 'str | None' = None)",
    "doc": "Write an object to file specified by a py.path LocalPath and read it back.\n\nParameters\n----------\nwriter : callable bound to pandas object\n    IO writing function (e.g. DataFrame.to_csv )\nreader : callable\n    IO reading function (e.g. pd.read_csv )\npath : str, default None\n    The path where the object is written and then read.\n\nReturns\n-------\npandas object\n    The original object that was serialized and then re-read."
  },
  {
    "symbol": "pandas._testing.round_trip_pathlib",
    "signature": "(writer, reader, path: 'str | None' = None)",
    "doc": "Write an object to file specified by a pathlib.Path and read it back\n\nParameters\n----------\nwriter : callable bound to pandas object\n    IO writing function (e.g. DataFrame.to_csv )\nreader : callable\n    IO reading function (e.g. pd.read_csv )\npath : str, default None\n    The path where the object is written and then read.\n\nReturns\n-------\npandas object\n    The original object that was serialized and then re-read."
  },
  {
    "symbol": "pandas._testing.round_trip_pickle",
    "signature": "(obj: 'Any', path: 'FilePath | ReadPickleBuffer | None' = None) -> 'DataFrame | Series'",
    "doc": "Pickle an object and then read it again.\n\nParameters\n----------\nobj : any object\n    The object to pickle and then re-read.\npath : str, path object or file-like object, default None\n    The path where the pickled object is written and then read.\n\nReturns\n-------\npandas object\n    The original object that was pickled and then re-read."
  },
  {
    "symbol": "pandas._testing.set_locale",
    "signature": "(new_locale: 'str | tuple[str, str]', lc_var: 'int' = 0) -> 'Generator[str | tuple[str, str], None, None]'",
    "doc": "Context manager for temporarily setting a locale.\n\nParameters\n----------\nnew_locale : str or tuple\n    A string of the form <language_country>.<encoding>. For example to set\n    the current locale to US English with a UTF8 encoding, you would pass\n    \"en_US.UTF-8\".\nlc_var : int, default `locale.LC_ALL`\n    The category of the locale being set.\n\nNotes\n-----\nThis is useful when you want to run a particular block of code under a\nparticular locale, without globally setting the locale. This probably isn't\nthread-safe."
  },
  {
    "symbol": "pandas._testing.set_timezone",
    "signature": "(tz: 'str') -> 'Generator[None, None, None]'",
    "doc": "Context manager for temporarily setting a timezone.\n\nParameters\n----------\ntz : str\n    A string representing a valid timezone.\n\nExamples\n--------\n>>> from datetime import datetime\n>>> from dateutil.tz import tzlocal\n>>> tzlocal().tzname(datetime(2021, 1, 1))  # doctest: +SKIP\n'IST'\n\n>>> with set_timezone('US/Eastern'):\n...     tzlocal().tzname(datetime(2021, 1, 1))\n...\n'EST'"
  },
  {
    "symbol": "pandas._testing.setitem",
    "signature": "(x)",
    "doc": ""
  },
  {
    "symbol": "pandas._testing.shares_memory",
    "signature": "(left, right) -> 'bool'",
    "doc": "Pandas-compat for np.shares_memory."
  },
  {
    "symbol": "pandas._testing.to_array",
    "signature": "(obj)",
    "doc": "Similar to pd.array, but does not cast numpy dtypes to nullable dtypes."
  },
  {
    "symbol": "pandas._testing.use_numexpr",
    "signature": "(use, min_elements=None) -> 'Generator[None, None, None]'",
    "doc": ""
  },
  {
    "symbol": "pandas._testing.using_string_dtype",
    "signature": "() -> bool",
    "doc": ""
  },
  {
    "symbol": "pandas._testing.with_csv_dialect",
    "signature": "(name: 'str', **kwargs) -> 'Generator[None, None, None]'",
    "doc": "Context manager to temporarily register a CSV dialect for parsing CSV.\n\nParameters\n----------\nname : str\n    The name of the dialect.\nkwargs : mapping\n    The parameters for the dialect.\n\nRaises\n------\nValueError : the name of the dialect conflicts with a builtin one.\n\nSee Also\n--------\ncsv : Python's CSV library."
  },
  {
    "symbol": "pandas._testing.write_to_compressed",
    "signature": "(compression, path, data, dest: 'str' = 'test') -> 'None'",
    "doc": "Write data to a compressed file.\n\nParameters\n----------\ncompression : {'gzip', 'bz2', 'zip', 'xz', 'zstd'}\n    The compression type to use.\npath : str\n    The file path to write the data.\ndata : str\n    The data to write.\ndest : str, default \"test\"\n    The destination file (for ZIP only)\n\nRaises\n------\nValueError : An invalid compression value was passed in."
  },
  {
    "symbol": "pandas._typing.Any",
    "signature": "(*args, **kwargs)",
    "doc": "Special type indicating an unconstrained type.\n\n- Any is compatible with every type.\n- Any assumed to have all methods.\n- All values assumed to be instances of Any.\n\nNote that all the above statements are true from the point of view of\nstatic type checkers. At runtime, Any should not be used with instance\nchecks."
  },
  {
    "symbol": "pandas._typing.AxisInt",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating-point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4"
  },
  {
    "symbol": "pandas._typing.BaseBuffer",
    "signature": "(*args, **kwargs)",
    "doc": "Base class for protocol classes.\n\nProtocol classes are defined as::\n\n    class Proto(Protocol):\n        def meth(self) -> int:\n            ...\n\nSuch classes are primarily used with static type checkers that recognize\nstructural subtyping (static duck-typing).\n\nFor example::\n\n    class C:\n        def meth(self) -> int:\n            return 0\n\n    def func(x: Proto) -> int:\n        return x.meth()\n\n    func(C())  # Passes static type check\n\nSee PEP 544 for details. Protocol classes decorated with\n@typing.runtime_checkable act as simple-minded runtime protocols that check\nonly the presence of given attributes, ignoring their type signatures.\nProtocol classes can be generic, they are defined as::\n\n    class GenProto[T](Protocol):\n        def meth(self) -> T:\n            ..."
  },
  {
    "symbol": "pandas._typing.Hashable",
    "signature": "()",
    "doc": ""
  },
  {
    "symbol": "pandas._typing.Iterator",
    "signature": "()",
    "doc": ""
  },
  {
    "symbol": "pandas._typing.Level",
    "signature": "()",
    "doc": ""
  },
  {
    "symbol": "pandas._typing.Mapping",
    "signature": "()",
    "doc": "A Mapping is a generic container for associating key/value\npairs.\n\nThis class provides concrete generic implementations of all\nmethods except for __getitem__, __iter__, and __len__."
  },
  {
    "symbol": "pandas._typing.MutableMapping",
    "signature": "()",
    "doc": "A MutableMapping is a generic container for associating\nkey/value pairs.\n\nThis class provides concrete generic implementations of all\nmethods except for __getitem__, __setitem__, __delitem__,\n__iter__, and __len__."
  },
  {
    "symbol": "pandas._typing.PathLike",
    "signature": "()",
    "doc": "Abstract base class for implementing the file system path protocol."
  },
  {
    "symbol": "pandas._typing.Protocol",
    "signature": "()",
    "doc": "Base class for protocol classes.\n\nProtocol classes are defined as::\n\n    class Proto(Protocol):\n        def meth(self) -> int:\n            ...\n\nSuch classes are primarily used with static type checkers that recognize\nstructural subtyping (static duck-typing).\n\nFor example::\n\n    class C:\n        def meth(self) -> int:\n            return 0\n\n    def func(x: Proto) -> int:\n        return x.meth()\n\n    func(C())  # Passes static type check\n\nSee PEP 544 for details. Protocol classes decorated with\n@typing.runtime_checkable act as simple-minded runtime protocols that check\nonly the presence of given attributes, ignoring their type signatures.\nProtocol classes can be generic, they are defined as::\n\n    class GenProto[T](Protocol):\n        def meth(self) -> T:\n            ..."
  },
  {
    "symbol": "pandas._typing.ReadBuffer",
    "signature": "(*args, **kwargs)",
    "doc": "Base class for protocol classes.\n\nProtocol classes are defined as::\n\n    class Proto(Protocol):\n        def meth(self) -> int:\n            ...\n\nSuch classes are primarily used with static type checkers that recognize\nstructural subtyping (static duck-typing).\n\nFor example::\n\n    class C:\n        def meth(self) -> int:\n            return 0\n\n    def func(x: Proto) -> int:\n        return x.meth()\n\n    func(C())  # Passes static type check\n\nSee PEP 544 for details. Protocol classes decorated with\n@typing.runtime_checkable act as simple-minded runtime protocols that check\nonly the presence of given attributes, ignoring their type signatures.\nProtocol classes can be generic, they are defined as::\n\n    class GenProto[T](Protocol):\n        def meth(self) -> T:\n            ..."
  },
  {
    "symbol": "pandas._typing.ReadCsvBuffer",
    "signature": "(*args, **kwargs)",
    "doc": "Base class for protocol classes.\n\nProtocol classes are defined as::\n\n    class Proto(Protocol):\n        def meth(self) -> int:\n            ...\n\nSuch classes are primarily used with static type checkers that recognize\nstructural subtyping (static duck-typing).\n\nFor example::\n\n    class C:\n        def meth(self) -> int:\n            return 0\n\n    def func(x: Proto) -> int:\n        return x.meth()\n\n    func(C())  # Passes static type check\n\nSee PEP 544 for details. Protocol classes decorated with\n@typing.runtime_checkable act as simple-minded runtime protocols that check\nonly the presence of given attributes, ignoring their type signatures.\nProtocol classes can be generic, they are defined as::\n\n    class GenProto[T](Protocol):\n        def meth(self) -> T:\n            ..."
  },
  {
    "symbol": "pandas._typing.ReadPickleBuffer",
    "signature": "(*args, **kwargs)",
    "doc": "Base class for protocol classes.\n\nProtocol classes are defined as::\n\n    class Proto(Protocol):\n        def meth(self) -> int:\n            ...\n\nSuch classes are primarily used with static type checkers that recognize\nstructural subtyping (static duck-typing).\n\nFor example::\n\n    class C:\n        def meth(self) -> int:\n            return 0\n\n    def func(x: Proto) -> int:\n        return x.meth()\n\n    func(C())  # Passes static type check\n\nSee PEP 544 for details. Protocol classes decorated with\n@typing.runtime_checkable act as simple-minded runtime protocols that check\nonly the presence of given attributes, ignoring their type signatures.\nProtocol classes can be generic, they are defined as::\n\n    class GenProto[T](Protocol):\n        def meth(self) -> T:\n            ..."
  },
  {
    "symbol": "pandas._typing.Sequence",
    "signature": "()",
    "doc": "All the operations on a read-only sequence.\n\nConcrete subclasses must override __new__ or __init__,\n__getitem__, and __len__."
  },
  {
    "symbol": "pandas._typing.SequenceNotStr",
    "signature": "(*args, **kwargs)",
    "doc": "Base class for protocol classes.\n\nProtocol classes are defined as::\n\n    class Proto(Protocol):\n        def meth(self) -> int:\n            ...\n\nSuch classes are primarily used with static type checkers that recognize\nstructural subtyping (static duck-typing).\n\nFor example::\n\n    class C:\n        def meth(self) -> int:\n            return 0\n\n    def func(x: Proto) -> int:\n        return x.meth()\n\n    func(C())  # Passes static type check\n\nSee PEP 544 for details. Protocol classes decorated with\n@typing.runtime_checkable act as simple-minded runtime protocols that check\nonly the presence of given attributes, ignoring their type signatures.\nProtocol classes can be generic, they are defined as::\n\n    class GenProto[T](Protocol):\n        def meth(self) -> T:\n            ..."
  },
  {
    "symbol": "pandas._typing.TakeIndexer",
    "signature": "(*args, **kwargs)",
    "doc": "Special type indicating an unconstrained type.\n\n- Any is compatible with every type.\n- Any assumed to have all methods.\n- All values assumed to be instances of Any.\n\nNote that all the above statements are true from the point of view of\nstatic type checkers. At runtime, Any should not be used with instance\nchecks."
  },
  {
    "symbol": "pandas._typing.TypeVar",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Type variable.\n\nThe preferred way to construct a type variable is via the dedicated\nsyntax for generic functions, classes, and type aliases::\n\n    class Sequence[T]:  # T is a TypeVar\n        ...\n\nThis syntax can also be used to create bound and constrained type\nvariables::\n\n    # S is a TypeVar bound to str\n    class StrSequence[S: str]:\n        ...\n\n    # A is a TypeVar constrained to str or bytes\n    class StrOrBytesSequence[A: (str, bytes)]:\n        ...\n\nType variables can also have defaults:\n\n    class IntDefault[T = int]:\n        ...\n\nHowever, if desired, reusable type variables can also be constructed\nmanually, like so::\n\n   T = TypeVar('T')  # Can be anything\n   S = TypeVar('S', bound=str)  # Can be any subtype of str\n   A = TypeVar('A', str, bytes)  # Must be exactly str or bytes\n   D = TypeVar('D', default=int)  # Defaults to int\n\nType variables exist primarily for the benefit of static type\ncheckers.  They serve as the parameters for generic types as well\nas for generic function and type alias definitions.\n\nThe variance of type variables is inferred by type checkers when they\nare created through the type parameter syntax and when\n``infer_variance=True`` is passed. Manually created type variables may\nbe explicitly marked covariant or contravariant by passing\n``covariant=True`` or ``contravariant=True``. By default, manually\ncreated type variables are invariant. See PEP 484 and PEP 695 for more\ndetails."
  },
  {
    "symbol": "pandas._typing.WriteBuffer",
    "signature": "(*args, **kwargs)",
    "doc": "Base class for protocol classes.\n\nProtocol classes are defined as::\n\n    class Proto(Protocol):\n        def meth(self) -> int:\n            ...\n\nSuch classes are primarily used with static type checkers that recognize\nstructural subtyping (static duck-typing).\n\nFor example::\n\n    class C:\n        def meth(self) -> int:\n            return 0\n\n    def func(x: Proto) -> int:\n        return x.meth()\n\n    func(C())  # Passes static type check\n\nSee PEP 544 for details. Protocol classes decorated with\n@typing.runtime_checkable act as simple-minded runtime protocols that check\nonly the presence of given attributes, ignoring their type signatures.\nProtocol classes can be generic, they are defined as::\n\n    class GenProto[T](Protocol):\n        def meth(self) -> T:\n            ..."
  },
  {
    "symbol": "pandas._typing.WriteExcelBuffer",
    "signature": "(*args, **kwargs)",
    "doc": "Base class for protocol classes.\n\nProtocol classes are defined as::\n\n    class Proto(Protocol):\n        def meth(self) -> int:\n            ...\n\nSuch classes are primarily used with static type checkers that recognize\nstructural subtyping (static duck-typing).\n\nFor example::\n\n    class C:\n        def meth(self) -> int:\n            return 0\n\n    def func(x: Proto) -> int:\n        return x.meth()\n\n    func(C())  # Passes static type check\n\nSee PEP 544 for details. Protocol classes decorated with\n@typing.runtime_checkable act as simple-minded runtime protocols that check\nonly the presence of given attributes, ignoring their type signatures.\nProtocol classes can be generic, they are defined as::\n\n    class GenProto[T](Protocol):\n        def meth(self) -> T:\n            ..."
  },
  {
    "symbol": "pandas._typing.date",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "date(year, month, day) --> date object"
  },
  {
    "symbol": "pandas._typing.datetime",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])\n\nThe year, month and day arguments are required. tzinfo may be None, or an\ninstance of a tzinfo subclass. The remaining arguments may be ints."
  },
  {
    "symbol": "pandas._typing.overload",
    "signature": "(func)",
    "doc": "Decorator for overloaded functions/methods.\n\nIn a stub file, place two or more stub definitions for the same\nfunction in a row, each decorated with @overload.\n\nFor example::\n\n    @overload\n    def utf8(value: None) -> None: ...\n    @overload\n    def utf8(value: bytes) -> bytes: ...\n    @overload\n    def utf8(value: str) -> bytes: ...\n\nIn a non-stub file (i.e. a regular .py file), do the same but\nfollow it with an implementation.  The implementation should *not*\nbe decorated with @overload::\n\n    @overload\n    def utf8(value: None) -> None: ...\n    @overload\n    def utf8(value: bytes) -> bytes: ...\n    @overload\n    def utf8(value: str) -> bytes: ...\n    def utf8(value):\n        ...  # implementation goes here\n\nThe overloads for a function can be retrieved at runtime using the\nget_overloads() function."
  },
  {
    "symbol": "pandas._typing.timedelta",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Difference between two datetime values.\n\ntimedelta(days=0, seconds=0, microseconds=0, milliseconds=0, minutes=0, hours=0, weeks=0)\n\nAll arguments are optional and default to 0.\nArguments may be integers or floats, and may be positive or negative."
  },
  {
    "symbol": "pandas._typing.tzinfo",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Abstract base class for time zone info objects."
  },
  {
    "symbol": "pandas.array",
    "signature": "(data: 'Sequence[object] | AnyArrayLike', dtype: 'Dtype | None' = None, copy: 'bool' = True) -> 'ExtensionArray'",
    "doc": "Create an array.\n\nParameters\n----------\ndata : Sequence of objects\n    The scalars inside `data` should be instances of the\n    scalar type for `dtype`. It's expected that `data`\n    represents a 1-dimensional array of data.\n\n    When `data` is an Index or Series, the underlying array\n    will be extracted from `data`.\n\ndtype : str, np.dtype, or ExtensionDtype, optional\n    The dtype to use for the array. This may be a NumPy\n    dtype or an extension type registered with pandas using\n    :meth:`pandas.api.extensions.register_extension_dtype`.\n\n    If not specified, there are two possibilities:\n\n    1. When `data` is a :class:`Series`, :class:`Index`, or\n       :class:`ExtensionArray`, the `dtype` will be taken\n       from the data.\n    2. Otherwise, pandas will attempt to infer the `dtype`\n       from the data.\n\n    Note that when `data` is a NumPy array, ``data.dtype`` is\n    *not* used for inferring the array type. This is because\n    NumPy cannot represent all the types of data that can be\n    held in extension arrays.\n\n    Currently, pandas will infer an extension dtype for sequences of\n\n    ============================== =======================================\n    Scalar Type                    Array Type\n    ============================== =======================================\n    :class:`pandas.Interval`       :class:`pandas.arrays.IntervalArray`\n    :class:`pandas.Period`         :class:`pandas.arrays.PeriodArray`\n    :class:`datetime.datetime`     :class:`pandas.arrays.DatetimeArray`\n    :class:`datetime.timedelta`    :class:`pandas.arrays.TimedeltaArray`\n    :class:`int`                   :class:`pandas.arrays.IntegerArray`\n    :class:`float`                 :class:`pandas.arrays.FloatingArray`\n    :class:`str`                   :class:`pandas.arrays.StringArray` or\n                                   :class:`pandas.arrays.ArrowStringArray`\n    :class:`bool`                  :class:`pandas.arrays.BooleanArray`\n    ============================== =======================================\n\n    The ExtensionArray created when the scalar type is :class:`str` is determined by\n    ``pd.options.mode.string_storage`` if the dtype is not explicitly given.\n\n    For all other cases, NumPy's usual inference rules will be used.\ncopy : bool, default True\n    Whether to copy the data, even if not necessary. Depending\n    on the type of `data`, creating the new array may require\n    copying data, even if ``copy=False``.\n\nReturns\n-------\nExtensionArray\n    The newly created array.\n\nRaises\n------\nValueError\n    When `data` is not 1-dimensional.\n\nSee Also\n--------\nnumpy.array : Construct a NumPy array.\nSeries : Construct a pandas Series.\nIndex : Construct a pandas Index.\narrays.NumpyExtensionArray : ExtensionArray wrapping a NumPy array.\nSeries.array : Extract the array stored within a Series.\n\nNotes\n-----\nOmitting the `dtype` argument means pandas will attempt to infer the\nbest array type from the values in the data. As new array types are\nadded by pandas and 3rd party libraries, the \"best\" array type may\nchange. We recommend specifying `dtype` to ensure that\n\n1. the correct array type for the data is returned\n2. the returned array type doesn't change as new extension types\n   are added by pandas and third-party libraries\n\nAdditionally, if the underlying memory representation of the returned\narray matters, we recommend specifying the `dtype` as a concrete object\nrather than a string alias or allowing it to be inferred. For example,\na future version of pandas or a 3rd-party library may include a\ndedicated ExtensionArray for string data. In this event, the following\nwould no longer return a :class:`arrays.NumpyExtensionArray` backed by a\nNumPy array.\n\n>>> pd.array(['a', 'b'], dtype=str)\n<NumpyExtensionArray>\n['a', 'b']\nLength: 2, dtype: str32\n\nThis would instead return the new ExtensionArray dedicated for string\ndata. If you really need the new array to be backed by a  NumPy array,\nspecify that in the dtype.\n\n>>> pd.array(['a', 'b'], dtype=np.dtype(\"<U1\"))\n<NumpyExtensionArray>\n['a', 'b']\nLength: 2, dtype: str32\n\nFinally, Pandas has arrays that mostly overlap with NumPy\n\n  * :class:`arrays.DatetimeArray`\n  * :class:`arrays.TimedeltaArray`\n\nWhen data with a ``datetime64[ns]`` or ``timedelta64[ns]`` dtype is\npassed, pandas will always return a ``DatetimeArray`` or ``TimedeltaArray``\nrather than a ``NumpyExtensionArray``. This is for symmetry with the case of\ntimezone-aware data, which NumPy does not natively support.\n\n>>> pd.array(['2015', '2016'], dtype='datetime64[ns]')\n<DatetimeArray>\n['2015-01-01 00:00:00', '2016-01-01 00:00:00']\nLength: 2, dtype: datetime64[ns]\n\n>>> pd.array([\"1h\", \"2h\"], dtype='timedelta64[ns]')\n<TimedeltaArray>\n['0 days 01:00:00', '0 days 02:00:00']\nLength: 2, dtype: timedelta64[ns]\n\nExamples\n--------\nIf a dtype is not specified, pandas will infer the best dtype from the values.\nSee the description of `dtype` for the types pandas infers for.\n\n>>> pd.array([1, 2])\n<IntegerArray>\n[1, 2]\nLength: 2, dtype: Int64\n\n>>> pd.array([1, 2, np.nan])\n<IntegerArray>\n[1, 2, <NA>]\nLength: 3, dtype: Int64\n\n>>> pd.array([1.1, 2.2])\n<FloatingArray>\n[1.1, 2.2]\nLength: 2, dtype: Float64\n\n>>> pd.array([\"a\", None, \"c\"])\n<StringArray>\n['a', <NA>, 'c']\nLength: 3, dtype: string\n\n>>> with pd.option_context(\"string_storage\", \"pyarrow\"):\n...     arr = pd.array([\"a\", None, \"c\"])\n...\n>>> arr\n<ArrowStringArray>\n['a', <NA>, 'c']\nLength: 3, dtype: string\n\n>>> pd.array([pd.Period('2000', freq=\"D\"), pd.Period(\"2000\", freq=\"D\")])\n<PeriodArray>\n['2000-01-01', '2000-01-01']\nLength: 2, dtype: period[D]\n\nYou can use the string alias for `dtype`\n\n>>> pd.array(['a', 'b', 'a'], dtype='category')\n['a', 'b', 'a']\nCategories (2, object): ['a', 'b']\n\nOr specify the actual dtype\n\n>>> pd.array(['a', 'b', 'a'],\n...          dtype=pd.CategoricalDtype(['a', 'b', 'c'], ordered=True))\n['a', 'b', 'a']\nCategories (3, object): ['a' < 'b' < 'c']\n\nIf pandas does not infer a dedicated extension type a\n:class:`arrays.NumpyExtensionArray` is returned.\n\n>>> pd.array([1 + 1j, 3 + 2j])\n<NumpyExtensionArray>\n[(1+1j), (3+2j)]\nLength: 2, dtype: complex128\n\nAs mentioned in the \"Notes\" section, new extension types may be added\nin the future (by pandas or 3rd party libraries), causing the return\nvalue to no longer be a :class:`arrays.NumpyExtensionArray`. Specify the\n`dtype` as a NumPy dtype if you need to ensure there's no future change in\nbehavior.\n\n>>> pd.array([1, 2], dtype=np.dtype(\"int32\"))\n<NumpyExtensionArray>\n[1, 2]\nLength: 2, dtype: int32\n\n`data` must be 1-dimensional. A ValueError is raised when the input\nhas the wrong dimensionality.\n\n>>> pd.array(1)\nTraceback (most recent call last):\n  ...\nValueError: Cannot pass scalar '1' to 'pandas.array'."
  },
  {
    "symbol": "pandas.arrays.ArrowExtensionArray",
    "signature": "(values: 'pa.Array | pa.ChunkedArray') -> 'None'",
    "doc": "Pandas ExtensionArray backed by a PyArrow ChunkedArray.\n\n.. warning::\n\n   ArrowExtensionArray is considered experimental. The implementation and\n   parts of the API may change without warning.\n\nParameters\n----------\nvalues : pyarrow.Array or pyarrow.ChunkedArray\n\nAttributes\n----------\nNone\n\nMethods\n-------\nNone\n\nReturns\n-------\nArrowExtensionArray\n\nNotes\n-----\nMost methods are implemented using `pyarrow compute functions. <https://arrow.apache.org/docs/python/api/compute.html>`__\nSome methods may either raise an exception or raise a ``PerformanceWarning`` if an\nassociated compute function is not available based on the installed version of PyArrow.\n\nPlease install the latest version of PyArrow to enable the best functionality and avoid\npotential bugs in prior versions of PyArrow.\n\nExamples\n--------\nCreate an ArrowExtensionArray with :func:`pandas.array`:\n\n>>> pd.array([1, 1, None], dtype=\"int64[pyarrow]\")\n<ArrowExtensionArray>\n[1, 1, <NA>]\nLength: 3, dtype: int64[pyarrow]"
  },
  {
    "symbol": "pandas.arrays.ArrowStringArray",
    "signature": "(values) -> 'None'",
    "doc": "Extension array for string data in a ``pyarrow.ChunkedArray``.\n\n.. warning::\n\n   ArrowStringArray is considered experimental. The implementation and\n   parts of the API may change without warning.\n\nParameters\n----------\nvalues : pyarrow.Array or pyarrow.ChunkedArray\n    The array of data.\n\nAttributes\n----------\nNone\n\nMethods\n-------\nNone\n\nSee Also\n--------\n:func:`pandas.array`\n    The recommended function for creating a ArrowStringArray.\nSeries.str\n    The string methods are available on Series backed by\n    a ArrowStringArray.\n\nNotes\n-----\nArrowStringArray returns a BooleanArray for comparison methods.\n\nExamples\n--------\n>>> pd.array(['This is', 'some text', None, 'data.'], dtype=\"string[pyarrow]\")\n<ArrowStringArray>\n['This is', 'some text', <NA>, 'data.']\nLength: 4, dtype: string"
  },
  {
    "symbol": "pandas.arrays.BooleanArray",
    "signature": "(values: 'np.ndarray', mask: 'np.ndarray', copy: 'bool' = False) -> 'None'",
    "doc": "Array of boolean (True/False) data with missing values.\n\nThis is a pandas Extension array for boolean data, under the hood\nrepresented by 2 numpy arrays: a boolean array with the data and\na boolean array with the mask (True indicating missing).\n\nBooleanArray implements Kleene logic (sometimes called three-value\nlogic) for logical operations. See :ref:`boolean.kleene` for more.\n\nTo construct an BooleanArray from generic array-like input, use\n:func:`pandas.array` specifying ``dtype=\"boolean\"`` (see examples\nbelow).\n\n.. warning::\n\n   BooleanArray is considered experimental. The implementation and\n   parts of the API may change without warning.\n\nParameters\n----------\nvalues : numpy.ndarray\n    A 1-d boolean-dtype array with the data.\nmask : numpy.ndarray\n    A 1-d boolean-dtype array indicating missing values (True\n    indicates missing).\ncopy : bool, default False\n    Whether to copy the `values` and `mask` arrays.\n\nAttributes\n----------\nNone\n\nMethods\n-------\nNone\n\nReturns\n-------\nBooleanArray\n\nExamples\n--------\nCreate an BooleanArray with :func:`pandas.array`:\n\n>>> pd.array([True, False, None], dtype=\"boolean\")\n<BooleanArray>\n[True, False, <NA>]\nLength: 3, dtype: boolean"
  },
  {
    "symbol": "pandas.arrays.Categorical",
    "signature": "(values, categories=None, ordered=None, dtype: 'Dtype | None' = None, fastpath: 'bool | lib.NoDefault' = <no_default>, copy: 'bool' = True) -> 'None'",
    "doc": "Represent a categorical variable in classic R / S-plus fashion.\n\n`Categoricals` can only take on a limited, and usually fixed, number\nof possible values (`categories`). In contrast to statistical categorical\nvariables, a `Categorical` might have an order, but numerical operations\n(additions, divisions, ...) are not possible.\n\nAll values of the `Categorical` are either in `categories` or `np.nan`.\nAssigning values outside of `categories` will raise a `ValueError`. Order\nis defined by the order of the `categories`, not lexical order of the\nvalues.\n\nParameters\n----------\nvalues : list-like\n    The values of the categorical. If categories are given, values not in\n    categories will be replaced with NaN.\ncategories : Index-like (unique), optional\n    The unique categories for this categorical. If not given, the\n    categories are assumed to be the unique values of `values` (sorted, if\n    possible, otherwise in the order in which they appear).\nordered : bool, default False\n    Whether or not this categorical is treated as a ordered categorical.\n    If True, the resulting categorical will be ordered.\n    An ordered categorical respects, when sorted, the order of its\n    `categories` attribute (which in turn is the `categories` argument, if\n    provided).\ndtype : CategoricalDtype\n    An instance of ``CategoricalDtype`` to use for this categorical.\n\nAttributes\n----------\ncategories : Index\n    The categories of this categorical.\ncodes : ndarray\n    The codes (integer positions, which point to the categories) of this\n    categorical, read only.\nordered : bool\n    Whether or not this Categorical is ordered.\ndtype : CategoricalDtype\n    The instance of ``CategoricalDtype`` storing the ``categories``\n    and ``ordered``.\n\nMethods\n-------\nfrom_codes\n__array__\n\nRaises\n------\nValueError\n    If the categories do not validate.\nTypeError\n    If an explicit ``ordered=True`` is given but no `categories` and the\n    `values` are not sortable.\n\nSee Also\n--------\nCategoricalDtype : Type for categorical data.\nCategoricalIndex : An Index with an underlying ``Categorical``.\n\nNotes\n-----\nSee the `user guide\n<https://pandas.pydata.org/pandas-docs/stable/user_guide/categorical.html>`__\nfor more.\n\nExamples\n--------\n>>> pd.Categorical([1, 2, 3, 1, 2, 3])\n[1, 2, 3, 1, 2, 3]\nCategories (3, int64): [1, 2, 3]\n\n>>> pd.Categorical(['a', 'b', 'c', 'a', 'b', 'c'])\n['a', 'b', 'c', 'a', 'b', 'c']\nCategories (3, object): ['a', 'b', 'c']\n\nMissing values are not included as a category.\n\n>>> c = pd.Categorical([1, 2, 3, 1, 2, 3, np.nan])\n>>> c\n[1, 2, 3, 1, 2, 3, NaN]\nCategories (3, int64): [1, 2, 3]\n\nHowever, their presence is indicated in the `codes` attribute\nby code `-1`.\n\n>>> c.codes\narray([ 0,  1,  2,  0,  1,  2, -1], dtype=int8)\n\nOrdered `Categoricals` can be sorted according to the custom order\nof the categories and can have a min and max value.\n\n>>> c = pd.Categorical(['a', 'b', 'c', 'a', 'b', 'c'], ordered=True,\n...                    categories=['c', 'b', 'a'])\n>>> c\n['a', 'b', 'c', 'a', 'b', 'c']\nCategories (3, object): ['c' < 'b' < 'a']\n>>> c.min()\n'c'"
  },
  {
    "symbol": "pandas.arrays.DatetimeArray",
    "signature": "(values, dtype=None, freq=<no_default>, copy: 'bool' = False) -> 'None'",
    "doc": "Pandas ExtensionArray for tz-naive or tz-aware datetime data.\n\n.. warning::\n\n   DatetimeArray is currently experimental, and its API may change\n   without warning. In particular, :attr:`DatetimeArray.dtype` is\n   expected to change to always be an instance of an ``ExtensionDtype``\n   subclass.\n\nParameters\n----------\nvalues : Series, Index, DatetimeArray, ndarray\n    The datetime data.\n\n    For DatetimeArray `values` (or a Series or Index boxing one),\n    `dtype` and `freq` will be extracted from `values`.\n\ndtype : numpy.dtype or DatetimeTZDtype\n    Note that the only NumPy dtype allowed is 'datetime64[ns]'.\nfreq : str or Offset, optional\n    The frequency.\ncopy : bool, default False\n    Whether to copy the underlying array of values.\n\nAttributes\n----------\nNone\n\nMethods\n-------\nNone\n\nExamples\n--------\n>>> pd.arrays.DatetimeArray._from_sequence(\n...    pd.DatetimeIndex(['2023-01-01', '2023-01-02'], freq='D'))\n<DatetimeArray>\n['2023-01-01 00:00:00', '2023-01-02 00:00:00']\nLength: 2, dtype: datetime64[ns]"
  },
  {
    "symbol": "pandas.arrays.FloatingArray",
    "signature": "(values: 'np.ndarray', mask: 'npt.NDArray[np.bool_]', copy: 'bool' = False) -> 'None'",
    "doc": "Array of floating (optional missing) values.\n\n.. warning::\n\n   FloatingArray is currently experimental, and its API or internal\n   implementation may change without warning. Especially the behaviour\n   regarding NaN (distinct from NA missing values) is subject to change.\n\nWe represent a FloatingArray with 2 numpy arrays:\n\n- data: contains a numpy float array of the appropriate dtype\n- mask: a boolean array holding a mask on the data, True is missing\n\nTo construct an FloatingArray from generic array-like input, use\n:func:`pandas.array` with one of the float dtypes (see examples).\n\nSee :ref:`integer_na` for more.\n\nParameters\n----------\nvalues : numpy.ndarray\n    A 1-d float-dtype array.\nmask : numpy.ndarray\n    A 1-d boolean-dtype array indicating missing values.\ncopy : bool, default False\n    Whether to copy the `values` and `mask`.\n\nAttributes\n----------\nNone\n\nMethods\n-------\nNone\n\nReturns\n-------\nFloatingArray\n\nExamples\n--------\nCreate an FloatingArray with :func:`pandas.array`:\n\n>>> pd.array([0.1, None, 0.3], dtype=pd.Float32Dtype())\n<FloatingArray>\n[0.1, <NA>, 0.3]\nLength: 3, dtype: Float32\n\nString aliases for the dtypes are also available. They are capitalized.\n\n>>> pd.array([0.1, None, 0.3], dtype=\"Float32\")\n<FloatingArray>\n[0.1, <NA>, 0.3]\nLength: 3, dtype: Float32"
  },
  {
    "symbol": "pandas.arrays.IntegerArray",
    "signature": "(values: 'np.ndarray', mask: 'npt.NDArray[np.bool_]', copy: 'bool' = False) -> 'None'",
    "doc": "Array of integer (optional missing) values.\n\nUses :attr:`pandas.NA` as the missing value.\n\n.. warning::\n\n   IntegerArray is currently experimental, and its API or internal\n   implementation may change without warning.\n\nWe represent an IntegerArray with 2 numpy arrays:\n\n- data: contains a numpy integer array of the appropriate dtype\n- mask: a boolean array holding a mask on the data, True is missing\n\nTo construct an IntegerArray from generic array-like input, use\n:func:`pandas.array` with one of the integer dtypes (see examples).\n\nSee :ref:`integer_na` for more.\n\nParameters\n----------\nvalues : numpy.ndarray\n    A 1-d integer-dtype array.\nmask : numpy.ndarray\n    A 1-d boolean-dtype array indicating missing values.\ncopy : bool, default False\n    Whether to copy the `values` and `mask`.\n\nAttributes\n----------\nNone\n\nMethods\n-------\nNone\n\nReturns\n-------\nIntegerArray\n\nExamples\n--------\nCreate an IntegerArray with :func:`pandas.array`.\n\n>>> int_array = pd.array([1, None, 3], dtype=pd.Int32Dtype())\n>>> int_array\n<IntegerArray>\n[1, <NA>, 3]\nLength: 3, dtype: Int32\n\nString aliases for the dtypes are also available. They are capitalized.\n\n>>> pd.array([1, None, 3], dtype='Int32')\n<IntegerArray>\n[1, <NA>, 3]\nLength: 3, dtype: Int32\n\n>>> pd.array([1, None, 3], dtype='UInt16')\n<IntegerArray>\n[1, <NA>, 3]\nLength: 3, dtype: UInt16"
  },
  {
    "symbol": "pandas.arrays.IntervalArray",
    "signature": "(data, closed: 'IntervalClosedType | None' = None, dtype: 'Dtype | None' = None, copy: 'bool' = False, verify_integrity: 'bool' = True)",
    "doc": "Pandas array for interval data that are closed on the same side.\n\nParameters\n----------\ndata : array-like (1-dimensional)\n    Array-like (ndarray, :class:`DateTimeArray`, :class:`TimeDeltaArray`) containing\n    Interval objects from which to build the IntervalArray.\nclosed : {'left', 'right', 'both', 'neither'}, default 'right'\n    Whether the intervals are closed on the left-side, right-side, both or\n    neither.\ndtype : dtype or None, default None\n    If None, dtype will be inferred.\ncopy : bool, default False\n    Copy the input data.\nverify_integrity : bool, default True\n    Verify that the IntervalArray is valid.\n\nAttributes\n----------\nleft\nright\nclosed\nmid\nlength\nis_empty\nis_non_overlapping_monotonic\n\nMethods\n-------\nfrom_arrays\nfrom_tuples\nfrom_breaks\ncontains\noverlaps\nset_closed\nto_tuples\n\nSee Also\n--------\nIndex : The base pandas Index type.\nInterval : A bounded slice-like interval; the elements of an IntervalArray.\ninterval_range : Function to create a fixed frequency IntervalIndex.\ncut : Bin values into discrete Intervals.\nqcut : Bin values into equal-sized Intervals based on rank or sample quantiles.\n\nNotes\n-----\nSee the `user guide\n<https://pandas.pydata.org/pandas-docs/stable/user_guide/advanced.html#intervalindex>`__\nfor more.\n\nExamples\n--------\nA new ``IntervalArray`` can be constructed directly from an array-like of\n``Interval`` objects:\n\n>>> pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)])\n<IntervalArray>\n[(0, 1], (1, 5]]\nLength: 2, dtype: interval[int64, right]\n\nIt may also be constructed using one of the constructor\nmethods: :meth:`IntervalArray.from_arrays`,\n:meth:`IntervalArray.from_breaks`, and :meth:`IntervalArray.from_tuples`."
  },
  {
    "symbol": "pandas.arrays.NumpyExtensionArray",
    "signature": "(values: 'np.ndarray | NumpyExtensionArray', copy: 'bool' = False) -> 'None'",
    "doc": "A pandas ExtensionArray for NumPy data.\n\nThis is mostly for internal compatibility, and is not especially\nuseful on its own.\n\nParameters\n----------\nvalues : ndarray\n    The NumPy ndarray to wrap. Must be 1-dimensional.\ncopy : bool, default False\n    Whether to copy `values`.\n\nAttributes\n----------\nNone\n\nMethods\n-------\nNone\n\nExamples\n--------\n>>> pd.arrays.NumpyExtensionArray(np.array([0, 1, 2, 3]))\n<NumpyExtensionArray>\n[0, 1, 2, 3]\nLength: 4, dtype: int64"
  },
  {
    "symbol": "pandas.arrays.PeriodArray",
    "signature": "(values, dtype: 'Dtype | None' = None, freq=None, copy: 'bool' = False) -> 'None'",
    "doc": "Pandas ExtensionArray for storing Period data.\n\nUsers should use :func:`~pandas.array` to create new instances.\n\nParameters\n----------\nvalues : Union[PeriodArray, Series[period], ndarray[int], PeriodIndex]\n    The data to store. These should be arrays that can be directly\n    converted to ordinals without inference or copy (PeriodArray,\n    ndarray[int64]), or a box around such an array (Series[period],\n    PeriodIndex).\ndtype : PeriodDtype, optional\n    A PeriodDtype instance from which to extract a `freq`. If both\n    `freq` and `dtype` are specified, then the frequencies must match.\nfreq : str or DateOffset\n    The `freq` to use for the array. Mostly applicable when `values`\n    is an ndarray of integers, when `freq` is required. When `values`\n    is a PeriodArray (or box around), it's checked that ``values.freq``\n    matches `freq`.\ncopy : bool, default False\n    Whether to copy the ordinals before storing.\n\nAttributes\n----------\nNone\n\nMethods\n-------\nNone\n\nSee Also\n--------\nPeriod: Represents a period of time.\nPeriodIndex : Immutable Index for period data.\nperiod_range: Create a fixed-frequency PeriodArray.\narray: Construct a pandas array.\n\nNotes\n-----\nThere are two components to a PeriodArray\n\n- ordinals : integer ndarray\n- freq : pd.tseries.offsets.Offset\n\nThe values are physically stored as a 1-D ndarray of integers. These are\ncalled \"ordinals\" and represent some kind of offset from a base.\n\nThe `freq` indicates the span covered by each element of the array.\nAll elements in the PeriodArray have the same `freq`.\n\nExamples\n--------\n>>> pd.arrays.PeriodArray(pd.PeriodIndex(['2023-01-01',\n...                                       '2023-01-02'], freq='D'))\n<PeriodArray>\n['2023-01-01', '2023-01-02']\nLength: 2, dtype: period[D]"
  },
  {
    "symbol": "pandas.arrays.SparseArray",
    "signature": "(data, sparse_index=None, fill_value=None, kind: 'SparseIndexKind' = 'integer', dtype: 'Dtype | None' = None, copy: 'bool' = False) -> 'None'",
    "doc": "An ExtensionArray for storing sparse data.\n\nParameters\n----------\ndata : array-like or scalar\n    A dense array of values to store in the SparseArray. This may contain\n    `fill_value`.\nsparse_index : SparseIndex, optional\nfill_value : scalar, optional\n    Elements in data that are ``fill_value`` are not stored in the\n    SparseArray. For memory savings, this should be the most common value\n    in `data`. By default, `fill_value` depends on the dtype of `data`:\n\n    =========== ==========\n    data.dtype  na_value\n    =========== ==========\n    float       ``np.nan``\n    int         ``0``\n    bool        False\n    datetime64  ``pd.NaT``\n    timedelta64 ``pd.NaT``\n    =========== ==========\n\n    The fill value is potentially specified in three ways. In order of\n    precedence, these are\n\n    1. The `fill_value` argument\n    2. ``dtype.fill_value`` if `fill_value` is None and `dtype` is\n       a ``SparseDtype``\n    3. ``data.dtype.fill_value`` if `fill_value` is None and `dtype`\n       is not a ``SparseDtype`` and `data` is a ``SparseArray``.\n\nkind : str\n    Can be 'integer' or 'block', default is 'integer'.\n    The type of storage for sparse locations.\n\n    * 'block': Stores a `block` and `block_length` for each\n      contiguous *span* of sparse values. This is best when\n      sparse data tends to be clumped together, with large\n      regions of ``fill-value`` values between sparse values.\n    * 'integer': uses an integer to store the location of\n      each sparse value.\n\ndtype : np.dtype or SparseDtype, optional\n    The dtype to use for the SparseArray. For numpy dtypes, this\n    determines the dtype of ``self.sp_values``. For SparseDtype,\n    this determines ``self.sp_values`` and ``self.fill_value``.\ncopy : bool, default False\n    Whether to explicitly copy the incoming `data` array.\n\nAttributes\n----------\nNone\n\nMethods\n-------\nNone\n\nExamples\n--------\n>>> from pandas.arrays import SparseArray\n>>> arr = SparseArray([0, 0, 1, 2])\n>>> arr\n[0, 0, 1, 2]\nFill: 0\nIntIndex\nIndices: array([2, 3], dtype=int32)"
  },
  {
    "symbol": "pandas.arrays.StringArray",
    "signature": "(values, copy: 'bool' = False) -> 'None'",
    "doc": "Extension array for string data.\n\n.. warning::\n\n   StringArray is considered experimental. The implementation and\n   parts of the API may change without warning.\n\nParameters\n----------\nvalues : array-like\n    The array of data.\n\n    .. warning::\n\n       Currently, this expects an object-dtype ndarray\n       where the elements are Python strings\n       or nan-likes (``None``, ``np.nan``, ``NA``).\n       This may change without warning in the future. Use\n       :meth:`pandas.array` with ``dtype=\"string\"`` for a stable way of\n       creating a `StringArray` from any sequence.\n\n    .. versionchanged:: 1.5.0\n\n       StringArray now accepts array-likes containing\n       nan-likes(``None``, ``np.nan``) for the ``values`` parameter\n       in addition to strings and :attr:`pandas.NA`\n\ncopy : bool, default False\n    Whether to copy the array of data.\n\nAttributes\n----------\nNone\n\nMethods\n-------\nNone\n\nSee Also\n--------\n:func:`pandas.array`\n    The recommended function for creating a StringArray.\nSeries.str\n    The string methods are available on Series backed by\n    a StringArray.\n\nNotes\n-----\nStringArray returns a BooleanArray for comparison methods.\n\nExamples\n--------\n>>> pd.array(['This is', 'some text', None, 'data.'], dtype=\"string\")\n<StringArray>\n['This is', 'some text', <NA>, 'data.']\nLength: 4, dtype: string\n\nUnlike arrays instantiated with ``dtype=\"object\"``, ``StringArray``\nwill convert the values to strings.\n\n>>> pd.array(['1', 1], dtype=\"object\")\n<NumpyExtensionArray>\n['1', 1]\nLength: 2, dtype: object\n>>> pd.array(['1', 1], dtype=\"string\")\n<StringArray>\n['1', '1']\nLength: 2, dtype: string\n\nHowever, instantiating StringArrays directly with non-strings will raise an error.\n\nFor comparison methods, `StringArray` returns a :class:`pandas.BooleanArray`:\n\n>>> pd.array([\"a\", None, \"c\"], dtype=\"string\") == \"a\"\n<BooleanArray>\n[True, <NA>, False]\nLength: 3, dtype: boolean"
  },
  {
    "symbol": "pandas.arrays.TimedeltaArray",
    "signature": "(values, dtype=None, freq=<no_default>, copy: 'bool' = False) -> 'None'",
    "doc": "Pandas ExtensionArray for timedelta data.\n\n.. warning::\n\n   TimedeltaArray is currently experimental, and its API may change\n   without warning. In particular, :attr:`TimedeltaArray.dtype` is\n   expected to change to be an instance of an ``ExtensionDtype``\n   subclass.\n\nParameters\n----------\nvalues : array-like\n    The timedelta data.\n\ndtype : numpy.dtype\n    Currently, only ``numpy.dtype(\"timedelta64[ns]\")`` is accepted.\nfreq : Offset, optional\ncopy : bool, default False\n    Whether to copy the underlying array of data.\n\nAttributes\n----------\nNone\n\nMethods\n-------\nNone\n\nExamples\n--------\n>>> pd.arrays.TimedeltaArray._from_sequence(pd.TimedeltaIndex(['1h', '2h']))\n<TimedeltaArray>\n['0 days 01:00:00', '0 days 02:00:00']\nLength: 2, dtype: timedelta64[ns]"
  },
  {
    "symbol": "pandas.arrays.__getattr__",
    "signature": "(name: str) -> type[pandas.core.arrays.numpy_.NumpyExtensionArray]",
    "doc": ""
  },
  {
    "symbol": "pandas.bdate_range",
    "signature": "(start=None, end=None, periods: 'int | None' = None, freq: 'Frequency | dt.timedelta' = 'B', tz=None, normalize: 'bool' = True, name: 'Hashable | None' = None, weekmask=None, holidays=None, inclusive: 'IntervalClosedType' = 'both', **kwargs) -> 'DatetimeIndex'",
    "doc": "Return a fixed frequency DatetimeIndex with business day as the default.\n\nParameters\n----------\nstart : str or datetime-like, default None\n    Left bound for generating dates.\nend : str or datetime-like, default None\n    Right bound for generating dates.\nperiods : int, default None\n    Number of periods to generate.\nfreq : str, Timedelta, datetime.timedelta, or DateOffset, default 'B'\n    Frequency strings can have multiples, e.g. '5h'. The default is\n    business daily ('B').\ntz : str or None\n    Time zone name for returning localized DatetimeIndex, for example\n    Asia/Beijing.\nnormalize : bool, default False\n    Normalize start/end dates to midnight before generating date range.\nname : str, default None\n    Name of the resulting DatetimeIndex.\nweekmask : str or None, default None\n    Weekmask of valid business days, passed to ``numpy.busdaycalendar``,\n    only used when custom frequency strings are passed.  The default\n    value None is equivalent to 'Mon Tue Wed Thu Fri'.\nholidays : list-like or None, default None\n    Dates to exclude from the set of valid business days, passed to\n    ``numpy.busdaycalendar``, only used when custom frequency strings\n    are passed.\ninclusive : {\"both\", \"neither\", \"left\", \"right\"}, default \"both\"\n    Include boundaries; Whether to set each bound as closed or open.\n\n    .. versionadded:: 1.4.0\n**kwargs\n    For compatibility. Has no effect on the result.\n\nReturns\n-------\nDatetimeIndex\n\nNotes\n-----\nOf the four parameters: ``start``, ``end``, ``periods``, and ``freq``,\nexactly three must be specified.  Specifying ``freq`` is a requirement\nfor ``bdate_range``.  Use ``date_range`` if specifying ``freq`` is not\ndesired.\n\nTo learn more about the frequency strings, please see `this link\n<https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\nExamples\n--------\nNote how the two weekend days are skipped in the result.\n\n>>> pd.bdate_range(start='1/1/2018', end='1/08/2018')\nDatetimeIndex(['2018-01-01', '2018-01-02', '2018-01-03', '2018-01-04',\n           '2018-01-05', '2018-01-08'],\n          dtype='datetime64[ns]', freq='B')"
  },
  {
    "symbol": "pandas.compat.get_bz2_file",
    "signature": "() -> 'type[pandas.compat.compressors.BZ2File]'",
    "doc": "Importing the `BZ2File` class from the `bz2` module.\n\nReturns\n-------\nclass\n    The `BZ2File` class from the `bz2` module.\n\nRaises\n------\nRuntimeError\n    If the `bz2` module was not imported correctly, or didn't exist."
  },
  {
    "symbol": "pandas.compat.get_lzma_file",
    "signature": "() -> 'type[pandas.compat.compressors.LZMAFile]'",
    "doc": "Importing the `LZMAFile` class from the `lzma` module.\n\nReturns\n-------\nclass\n    The `LZMAFile` class from the `lzma` module.\n\nRaises\n------\nRuntimeError\n    If the `lzma` module was not imported correctly, or didn't exist."
  },
  {
    "symbol": "pandas.compat.is_ci_environment",
    "signature": "() -> 'bool'",
    "doc": "Checking if running in a continuous integration environment by checking\nthe PANDAS_CI environment variable.\n\nReturns\n-------\nbool\n    True if the running in a continuous integration environment."
  },
  {
    "symbol": "pandas.compat.is_platform_arm",
    "signature": "() -> 'bool'",
    "doc": "Checking if the running platform use ARM architecture.\n\nReturns\n-------\nbool\n    True if the running platform uses ARM architecture."
  },
  {
    "symbol": "pandas.compat.is_platform_linux",
    "signature": "() -> 'bool'",
    "doc": "Checking if the running platform is linux.\n\nReturns\n-------\nbool\n    True if the running platform is linux."
  },
  {
    "symbol": "pandas.compat.is_platform_little_endian",
    "signature": "() -> 'bool'",
    "doc": "Checking if the running platform is little endian.\n\nReturns\n-------\nbool\n    True if the running platform is little endian."
  },
  {
    "symbol": "pandas.compat.is_platform_mac",
    "signature": "() -> 'bool'",
    "doc": "Checking if the running platform is mac.\n\nReturns\n-------\nbool\n    True if the running platform is mac."
  },
  {
    "symbol": "pandas.compat.is_platform_power",
    "signature": "() -> 'bool'",
    "doc": "Checking if the running platform use Power architecture.\n\nReturns\n-------\nbool\n    True if the running platform uses ARM architecture."
  },
  {
    "symbol": "pandas.compat.is_platform_windows",
    "signature": "() -> 'bool'",
    "doc": "Checking if the running platform is windows.\n\nReturns\n-------\nbool\n    True if the running platform is windows."
  },
  {
    "symbol": "pandas.compat.set_function_name",
    "signature": "(f: 'F', name: 'str', cls: 'type') -> 'F'",
    "doc": "Bind the name/qualname attributes of the function."
  },
  {
    "symbol": "pandas.concat",
    "signature": "(objs: 'Iterable[Series | DataFrame] | Mapping[HashableT, Series | DataFrame]', *, axis: 'Axis' = 0, join: 'str' = 'outer', ignore_index: 'bool' = False, keys: 'Iterable[Hashable] | None' = None, levels=None, names: 'list[HashableT] | None' = None, verify_integrity: 'bool' = False, sort: 'bool' = False, copy: 'bool | None' = None) -> 'DataFrame | Series'",
    "doc": "Concatenate pandas objects along a particular axis.\n\nAllows optional set logic along the other axes.\n\nCan also add a layer of hierarchical indexing on the concatenation axis,\nwhich may be useful if the labels are the same (or overlapping) on\nthe passed axis number.\n\nParameters\n----------\nobjs : a sequence or mapping of Series or DataFrame objects\n    If a mapping is passed, the sorted keys will be used as the `keys`\n    argument, unless it is passed, in which case the values will be\n    selected (see below). Any None objects will be dropped silently unless\n    they are all None in which case a ValueError will be raised.\naxis : {0/'index', 1/'columns'}, default 0\n    The axis to concatenate along.\njoin : {'inner', 'outer'}, default 'outer'\n    How to handle indexes on other axis (or axes).\nignore_index : bool, default False\n    If True, do not use the index values along the concatenation axis. The\n    resulting axis will be labeled 0, ..., n - 1. This is useful if you are\n    concatenating objects where the concatenation axis does not have\n    meaningful indexing information. Note the index values on the other\n    axes are still respected in the join.\nkeys : sequence, default None\n    If multiple levels passed, should contain tuples. Construct\n    hierarchical index using the passed keys as the outermost level.\nlevels : list of sequences, default None\n    Specific levels (unique values) to use for constructing a\n    MultiIndex. Otherwise they will be inferred from the keys.\nnames : list, default None\n    Names for the levels in the resulting hierarchical index.\nverify_integrity : bool, default False\n    Check whether the new concatenated axis contains duplicates. This can\n    be very expensive relative to the actual data concatenation.\nsort : bool, default False\n    Sort non-concatenation axis if it is not already aligned. One exception to\n    this is when the non-concatentation axis is a DatetimeIndex and join='outer'\n    and the axis is not already aligned. In that case, the non-concatenation\n    axis is always sorted lexicographically.\ncopy : bool, default True\n    If False, do not copy data unnecessarily.\n\nReturns\n-------\nobject, type of objs\n    When concatenating all ``Series`` along the index (axis=0), a\n    ``Series`` is returned. When ``objs`` contains at least one\n    ``DataFrame``, a ``DataFrame`` is returned. When concatenating along\n    the columns (axis=1), a ``DataFrame`` is returned.\n\nSee Also\n--------\nDataFrame.join : Join DataFrames using indexes.\nDataFrame.merge : Merge DataFrames by indexes or columns.\n\nNotes\n-----\nThe keys, levels, and names arguments are all optional.\n\nA walkthrough of how this method fits in with other tools for combining\npandas objects can be found `here\n<https://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html>`__.\n\nIt is not recommended to build DataFrames by adding single rows in a\nfor loop. Build a list of rows and make a DataFrame in a single concat.\n\nExamples\n--------\nCombine two ``Series``.\n\n>>> s1 = pd.Series(['a', 'b'])\n>>> s2 = pd.Series(['c', 'd'])\n>>> pd.concat([s1, s2])\n0    a\n1    b\n0    c\n1    d\ndtype: object\n\nClear the existing index and reset it in the result\nby setting the ``ignore_index`` option to ``True``.\n\n>>> pd.concat([s1, s2], ignore_index=True)\n0    a\n1    b\n2    c\n3    d\ndtype: object\n\nAdd a hierarchical index at the outermost level of\nthe data with the ``keys`` option.\n\n>>> pd.concat([s1, s2], keys=['s1', 's2'])\ns1  0    a\n    1    b\ns2  0    c\n    1    d\ndtype: object\n\nLabel the index keys you create with the ``names`` option.\n\n>>> pd.concat([s1, s2], keys=['s1', 's2'],\n...           names=['Series name', 'Row ID'])\nSeries name  Row ID\ns1           0         a\n             1         b\ns2           0         c\n             1         d\ndtype: object\n\nCombine two ``DataFrame`` objects with identical columns.\n\n>>> df1 = pd.DataFrame([['a', 1], ['b', 2]],\n...                    columns=['letter', 'number'])\n>>> df1\n  letter  number\n0      a       1\n1      b       2\n>>> df2 = pd.DataFrame([['c', 3], ['d', 4]],\n...                    columns=['letter', 'number'])\n>>> df2\n  letter  number\n0      c       3\n1      d       4\n>>> pd.concat([df1, df2])\n  letter  number\n0      a       1\n1      b       2\n0      c       3\n1      d       4\n\nCombine ``DataFrame`` objects with overlapping columns\nand return everything. Columns outside the intersection will\nbe filled with ``NaN`` values.\n\n>>> df3 = pd.DataFrame([['c', 3, 'cat'], ['d', 4, 'dog']],\n...                    columns=['letter', 'number', 'animal'])\n>>> df3\n  letter  number animal\n0      c       3    cat\n1      d       4    dog\n>>> pd.concat([df1, df3], sort=False)\n  letter  number animal\n0      a       1    NaN\n1      b       2    NaN\n0      c       3    cat\n1      d       4    dog\n\nCombine ``DataFrame`` objects with overlapping columns\nand return only those that are shared by passing ``inner`` to\nthe ``join`` keyword argument.\n\n>>> pd.concat([df1, df3], join=\"inner\")\n  letter  number\n0      a       1\n1      b       2\n0      c       3\n1      d       4\n\nCombine ``DataFrame`` objects horizontally along the x axis by\npassing in ``axis=1``.\n\n>>> df4 = pd.DataFrame([['bird', 'polly'], ['monkey', 'george']],\n...                    columns=['animal', 'name'])\n>>> pd.concat([df1, df4], axis=1)\n  letter  number  animal    name\n0      a       1    bird   polly\n1      b       2  monkey  george\n\nPrevent the result from including duplicate index values with the\n``verify_integrity`` option.\n\n>>> df5 = pd.DataFrame([1], index=['a'])\n>>> df5\n   0\na  1\n>>> df6 = pd.DataFrame([2], index=['a'])\n>>> df6\n   0\na  2\n>>> pd.concat([df5, df6], verify_integrity=True)\nTraceback (most recent call last):\n    ...\nValueError: Indexes have overlapping values: ['a']\n\nAppend a single row to the end of a ``DataFrame`` object.\n\n>>> df7 = pd.DataFrame({'a': 1, 'b': 2}, index=[0])\n>>> df7\n    a   b\n0   1   2\n>>> new_row = pd.Series({'a': 3, 'b': 4})\n>>> new_row\na    3\nb    4\ndtype: int64\n>>> pd.concat([df7, new_row.to_frame().T], ignore_index=True)\n    a   b\n0   1   2\n1   3   4"
  },
  {
    "symbol": "pandas.crosstab",
    "signature": "(index, columns, values=None, rownames=None, colnames=None, aggfunc=None, margins: 'bool' = False, margins_name: 'Hashable' = 'All', dropna: 'bool' = True, normalize: \"bool | Literal[0, 1, 'all', 'index', 'columns']\" = False) -> 'DataFrame'",
    "doc": "Compute a simple cross tabulation of two (or more) factors.\n\nBy default, computes a frequency table of the factors unless an\narray of values and an aggregation function are passed.\n\nParameters\n----------\nindex : array-like, Series, or list of arrays/Series\n    Values to group by in the rows.\ncolumns : array-like, Series, or list of arrays/Series\n    Values to group by in the columns.\nvalues : array-like, optional\n    Array of values to aggregate according to the factors.\n    Requires `aggfunc` be specified.\nrownames : sequence, default None\n    If passed, must match number of row arrays passed.\ncolnames : sequence, default None\n    If passed, must match number of column arrays passed.\naggfunc : function, optional\n    If specified, requires `values` be specified as well.\nmargins : bool, default False\n    Add row/column margins (subtotals).\nmargins_name : str, default 'All'\n    Name of the row/column that will contain the totals\n    when margins is True.\ndropna : bool, default True\n    Do not include columns whose entries are all NaN.\nnormalize : bool, {'all', 'index', 'columns'}, or {0,1}, default False\n    Normalize by dividing all values by the sum of values.\n\n    - If passed 'all' or `True`, will normalize over all values.\n    - If passed 'index' will normalize over each row.\n    - If passed 'columns' will normalize over each column.\n    - If margins is `True`, will also normalize margin values.\n\nReturns\n-------\nDataFrame\n    Cross tabulation of the data.\n\nSee Also\n--------\nDataFrame.pivot : Reshape data based on column values.\npivot_table : Create a pivot table as a DataFrame.\n\nNotes\n-----\nAny Series passed will have their name attributes used unless row or column\nnames for the cross-tabulation are specified.\n\nAny input passed containing Categorical data will have **all** of its\ncategories included in the cross-tabulation, even if the actual data does\nnot contain any instances of a particular category.\n\nIn the event that there aren't overlapping indexes an empty DataFrame will\nbe returned.\n\nReference :ref:`the user guide <reshaping.crosstabulations>` for more examples.\n\nExamples\n--------\n>>> a = np.array([\"foo\", \"foo\", \"foo\", \"foo\", \"bar\", \"bar\",\n...               \"bar\", \"bar\", \"foo\", \"foo\", \"foo\"], dtype=object)\n>>> b = np.array([\"one\", \"one\", \"one\", \"two\", \"one\", \"one\",\n...               \"one\", \"two\", \"two\", \"two\", \"one\"], dtype=object)\n>>> c = np.array([\"dull\", \"dull\", \"shiny\", \"dull\", \"dull\", \"shiny\",\n...               \"shiny\", \"dull\", \"shiny\", \"shiny\", \"shiny\"],\n...              dtype=object)\n>>> pd.crosstab(a, [b, c], rownames=['a'], colnames=['b', 'c'])\nb   one        two\nc   dull shiny dull shiny\na\nbar    1     2    1     0\nfoo    2     2    1     2\n\nHere 'c' and 'f' are not represented in the data and will not be\nshown in the output because dropna is True by default. Set\ndropna=False to preserve categories with no data.\n\n>>> foo = pd.Categorical(['a', 'b'], categories=['a', 'b', 'c'])\n>>> bar = pd.Categorical(['d', 'e'], categories=['d', 'e', 'f'])\n>>> pd.crosstab(foo, bar)\ncol_0  d  e\nrow_0\na      1  0\nb      0  1\n>>> pd.crosstab(foo, bar, dropna=False)\ncol_0  d  e  f\nrow_0\na      1  0  0\nb      0  1  0\nc      0  0  0"
  },
  {
    "symbol": "pandas.cut",
    "signature": "(x, bins, right: 'bool' = True, labels=None, retbins: 'bool' = False, precision: 'int' = 3, include_lowest: 'bool' = False, duplicates: 'str' = 'raise', ordered: 'bool' = True)",
    "doc": "Bin values into discrete intervals.\n\nUse `cut` when you need to segment and sort data values into bins. This\nfunction is also useful for going from a continuous variable to a\ncategorical variable. For example, `cut` could convert ages to groups of\nage ranges. Supports binning into an equal number of bins, or a\npre-specified array of bins.\n\nParameters\n----------\nx : array-like\n    The input array to be binned. Must be 1-dimensional.\nbins : int, sequence of scalars, or IntervalIndex\n    The criteria to bin by.\n\n    * int : Defines the number of equal-width bins in the range of `x`. The\n      range of `x` is extended by .1% on each side to include the minimum\n      and maximum values of `x`.\n    * sequence of scalars : Defines the bin edges allowing for non-uniform\n      width. No extension of the range of `x` is done.\n    * IntervalIndex : Defines the exact bins to be used. Note that\n      IntervalIndex for `bins` must be non-overlapping.\n\nright : bool, default True\n    Indicates whether `bins` includes the rightmost edge or not. If\n    ``right == True`` (the default), then the `bins` ``[1, 2, 3, 4]``\n    indicate (1,2], (2,3], (3,4]. This argument is ignored when\n    `bins` is an IntervalIndex.\nlabels : array or False, default None\n    Specifies the labels for the returned bins. Must be the same length as\n    the resulting bins. If False, returns only integer indicators of the\n    bins. This affects the type of the output container (see below).\n    This argument is ignored when `bins` is an IntervalIndex. If True,\n    raises an error. When `ordered=False`, labels must be provided.\nretbins : bool, default False\n    Whether to return the bins or not. Useful when bins is provided\n    as a scalar.\nprecision : int, default 3\n    The precision at which to store and display the bins labels.\ninclude_lowest : bool, default False\n    Whether the first interval should be left-inclusive or not.\nduplicates : {default 'raise', 'drop'}, optional\n    If bin edges are not unique, raise ValueError or drop non-uniques.\nordered : bool, default True\n    Whether the labels are ordered or not. Applies to returned types\n    Categorical and Series (with Categorical dtype). If True,\n    the resulting categorical will be ordered. If False, the resulting\n    categorical will be unordered (labels must be provided).\n\nReturns\n-------\nout : Categorical, Series, or ndarray\n    An array-like object representing the respective bin for each value\n    of `x`. The type depends on the value of `labels`.\n\n    * None (default) : returns a Series for Series `x` or a\n      Categorical for all other inputs. The values stored within\n      are Interval dtype.\n\n    * sequence of scalars : returns a Series for Series `x` or a\n      Categorical for all other inputs. The values stored within\n      are whatever the type in the sequence is.\n\n    * False : returns an ndarray of integers.\n\nbins : numpy.ndarray or IntervalIndex.\n    The computed or specified bins. Only returned when `retbins=True`.\n    For scalar or sequence `bins`, this is an ndarray with the computed\n    bins. If set `duplicates=drop`, `bins` will drop non-unique bin. For\n    an IntervalIndex `bins`, this is equal to `bins`.\n\nSee Also\n--------\nqcut : Discretize variable into equal-sized buckets based on rank\n    or based on sample quantiles.\nCategorical : Array type for storing data that come from a\n    fixed set of values.\nSeries : One-dimensional array with axis labels (including time series).\nIntervalIndex : Immutable Index implementing an ordered, sliceable set.\n\nNotes\n-----\nAny NA values will be NA in the result. Out of bounds values will be NA in\nthe resulting Series or Categorical object.\n\nReference :ref:`the user guide <reshaping.tile.cut>` for more examples.\n\nExamples\n--------\nDiscretize into three equal-sized bins.\n\n>>> pd.cut(np.array([1, 7, 5, 4, 6, 3]), 3)\n... # doctest: +ELLIPSIS\n[(0.994, 3.0], (5.0, 7.0], (3.0, 5.0], (3.0, 5.0], (5.0, 7.0], ...\nCategories (3, interval[float64, right]): [(0.994, 3.0] < (3.0, 5.0] ...\n\n>>> pd.cut(np.array([1, 7, 5, 4, 6, 3]), 3, retbins=True)\n... # doctest: +ELLIPSIS\n([(0.994, 3.0], (5.0, 7.0], (3.0, 5.0], (3.0, 5.0], (5.0, 7.0], ...\nCategories (3, interval[float64, right]): [(0.994, 3.0] < (3.0, 5.0] ...\narray([0.994, 3.   , 5.   , 7.   ]))\n\nDiscovers the same bins, but assign them specific labels. Notice that\nthe returned Categorical's categories are `labels` and is ordered.\n\n>>> pd.cut(np.array([1, 7, 5, 4, 6, 3]),\n...        3, labels=[\"bad\", \"medium\", \"good\"])\n['bad', 'good', 'medium', 'medium', 'good', 'bad']\nCategories (3, object): ['bad' < 'medium' < 'good']\n\n``ordered=False`` will result in unordered categories when labels are passed.\nThis parameter can be used to allow non-unique labels:\n\n>>> pd.cut(np.array([1, 7, 5, 4, 6, 3]), 3,\n...        labels=[\"B\", \"A\", \"B\"], ordered=False)\n['B', 'B', 'A', 'A', 'B', 'B']\nCategories (2, object): ['A', 'B']\n\n``labels=False`` implies you just want the bins back.\n\n>>> pd.cut([0, 1, 1, 2], bins=4, labels=False)\narray([0, 1, 1, 3])\n\nPassing a Series as an input returns a Series with categorical dtype:\n\n>>> s = pd.Series(np.array([2, 4, 6, 8, 10]),\n...               index=['a', 'b', 'c', 'd', 'e'])\n>>> pd.cut(s, 3)\n... # doctest: +ELLIPSIS\na    (1.992, 4.667]\nb    (1.992, 4.667]\nc    (4.667, 7.333]\nd     (7.333, 10.0]\ne     (7.333, 10.0]\ndtype: category\nCategories (3, interval[float64, right]): [(1.992, 4.667] < (4.667, ...\n\nPassing a Series as an input returns a Series with mapping value.\nIt is used to map numerically to intervals based on bins.\n\n>>> s = pd.Series(np.array([2, 4, 6, 8, 10]),\n...               index=['a', 'b', 'c', 'd', 'e'])\n>>> pd.cut(s, [0, 2, 4, 6, 8, 10], labels=False, retbins=True, right=False)\n... # doctest: +ELLIPSIS\n(a    1.0\n b    2.0\n c    3.0\n d    4.0\n e    NaN\n dtype: float64,\n array([ 0,  2,  4,  6,  8, 10]))\n\nUse `drop` optional when bins is not unique\n\n>>> pd.cut(s, [0, 2, 4, 6, 10, 10], labels=False, retbins=True,\n...        right=False, duplicates='drop')\n... # doctest: +ELLIPSIS\n(a    1.0\n b    2.0\n c    3.0\n d    3.0\n e    NaN\n dtype: float64,\n array([ 0,  2,  4,  6, 10]))\n\nPassing an IntervalIndex for `bins` results in those categories exactly.\nNotice that values not covered by the IntervalIndex are set to NaN. 0\nis to the left of the first bin (which is closed on the right), and 1.5\nfalls between two bins.\n\n>>> bins = pd.IntervalIndex.from_tuples([(0, 1), (2, 3), (4, 5)])\n>>> pd.cut([0, 0.5, 1.5, 2.5, 4.5], bins)\n[NaN, (0.0, 1.0], NaN, (2.0, 3.0], (4.0, 5.0]]\nCategories (3, interval[int64, right]): [(0, 1] < (2, 3] < (4, 5]]"
  },
  {
    "symbol": "pandas.date_range",
    "signature": "(start=None, end=None, periods=None, freq=None, tz=None, normalize: 'bool' = False, name: 'Hashable | None' = None, inclusive: 'IntervalClosedType' = 'both', *, unit: 'str | None' = None, **kwargs) -> 'DatetimeIndex'",
    "doc": "Return a fixed frequency DatetimeIndex.\n\nReturns the range of equally spaced time points (where the difference between any\ntwo adjacent points is specified by the given frequency) such that they all\nsatisfy `start <[=] x <[=] end`, where the first one and the last one are, resp.,\nthe first and last time points in that range that fall on the boundary of ``freq``\n(if given as a frequency string) or that are valid for ``freq`` (if given as a\n:class:`pandas.tseries.offsets.DateOffset`). (If exactly one of ``start``,\n``end``, or ``freq`` is *not* specified, this missing parameter can be computed\ngiven ``periods``, the number of timesteps in the range. See the note below.)\n\nParameters\n----------\nstart : str or datetime-like, optional\n    Left bound for generating dates.\nend : str or datetime-like, optional\n    Right bound for generating dates.\nperiods : int, optional\n    Number of periods to generate.\nfreq : str, Timedelta, datetime.timedelta, or DateOffset, default 'D'\n    Frequency strings can have multiples, e.g. '5h'. See\n    :ref:`here <timeseries.offset_aliases>` for a list of\n    frequency aliases.\ntz : str or tzinfo, optional\n    Time zone name for returning localized DatetimeIndex, for example\n    'Asia/Hong_Kong'. By default, the resulting DatetimeIndex is\n    timezone-naive unless timezone-aware datetime-likes are passed.\nnormalize : bool, default False\n    Normalize start/end dates to midnight before generating date range.\nname : str, default None\n    Name of the resulting DatetimeIndex.\ninclusive : {\"both\", \"neither\", \"left\", \"right\"}, default \"both\"\n    Include boundaries; Whether to set each bound as closed or open.\n\n    .. versionadded:: 1.4.0\nunit : str, default None\n    Specify the desired resolution of the result.\n\n    .. versionadded:: 2.0.0\n**kwargs\n    For compatibility. Has no effect on the result.\n\nReturns\n-------\nDatetimeIndex\n\nSee Also\n--------\nDatetimeIndex : An immutable container for datetimes.\ntimedelta_range : Return a fixed frequency TimedeltaIndex.\nperiod_range : Return a fixed frequency PeriodIndex.\ninterval_range : Return a fixed frequency IntervalIndex.\n\nNotes\n-----\nOf the four parameters ``start``, ``end``, ``periods``, and ``freq``,\nexactly three must be specified. If ``freq`` is omitted, the resulting\n``DatetimeIndex`` will have ``periods`` linearly spaced elements between\n``start`` and ``end`` (closed on both sides).\n\nTo learn more about the frequency strings, please see `this link\n<https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\nExamples\n--------\n**Specifying the values**\n\nThe next four examples generate the same `DatetimeIndex`, but vary\nthe combination of `start`, `end` and `periods`.\n\nSpecify `start` and `end`, with the default daily frequency.\n\n>>> pd.date_range(start='1/1/2018', end='1/08/2018')\nDatetimeIndex(['2018-01-01', '2018-01-02', '2018-01-03', '2018-01-04',\n               '2018-01-05', '2018-01-06', '2018-01-07', '2018-01-08'],\n              dtype='datetime64[ns]', freq='D')\n\nSpecify timezone-aware `start` and `end`, with the default daily frequency.\n\n>>> pd.date_range(\n...     start=pd.to_datetime(\"1/1/2018\").tz_localize(\"Europe/Berlin\"),\n...     end=pd.to_datetime(\"1/08/2018\").tz_localize(\"Europe/Berlin\"),\n... )\nDatetimeIndex(['2018-01-01 00:00:00+01:00', '2018-01-02 00:00:00+01:00',\n               '2018-01-03 00:00:00+01:00', '2018-01-04 00:00:00+01:00',\n               '2018-01-05 00:00:00+01:00', '2018-01-06 00:00:00+01:00',\n               '2018-01-07 00:00:00+01:00', '2018-01-08 00:00:00+01:00'],\n              dtype='datetime64[ns, Europe/Berlin]', freq='D')\n\nSpecify `start` and `periods`, the number of periods (days).\n\n>>> pd.date_range(start='1/1/2018', periods=8)\nDatetimeIndex(['2018-01-01', '2018-01-02', '2018-01-03', '2018-01-04',\n               '2018-01-05', '2018-01-06', '2018-01-07', '2018-01-08'],\n              dtype='datetime64[ns]', freq='D')\n\nSpecify `end` and `periods`, the number of periods (days).\n\n>>> pd.date_range(end='1/1/2018', periods=8)\nDatetimeIndex(['2017-12-25', '2017-12-26', '2017-12-27', '2017-12-28',\n               '2017-12-29', '2017-12-30', '2017-12-31', '2018-01-01'],\n              dtype='datetime64[ns]', freq='D')\n\nSpecify `start`, `end`, and `periods`; the frequency is generated\nautomatically (linearly spaced).\n\n>>> pd.date_range(start='2018-04-24', end='2018-04-27', periods=3)\nDatetimeIndex(['2018-04-24 00:00:00', '2018-04-25 12:00:00',\n               '2018-04-27 00:00:00'],\n              dtype='datetime64[ns]', freq=None)\n\n**Other Parameters**\n\nChanged the `freq` (frequency) to ``'ME'`` (month end frequency).\n\n>>> pd.date_range(start='1/1/2018', periods=5, freq='ME')\nDatetimeIndex(['2018-01-31', '2018-02-28', '2018-03-31', '2018-04-30',\n               '2018-05-31'],\n              dtype='datetime64[ns]', freq='ME')\n\nMultiples are allowed\n\n>>> pd.date_range(start='1/1/2018', periods=5, freq='3ME')\nDatetimeIndex(['2018-01-31', '2018-04-30', '2018-07-31', '2018-10-31',\n               '2019-01-31'],\n              dtype='datetime64[ns]', freq='3ME')\n\n`freq` can also be specified as an Offset object.\n\n>>> pd.date_range(start='1/1/2018', periods=5, freq=pd.offsets.MonthEnd(3))\nDatetimeIndex(['2018-01-31', '2018-04-30', '2018-07-31', '2018-10-31',\n               '2019-01-31'],\n              dtype='datetime64[ns]', freq='3ME')\n\nSpecify `tz` to set the timezone.\n\n>>> pd.date_range(start='1/1/2018', periods=5, tz='Asia/Tokyo')\nDatetimeIndex(['2018-01-01 00:00:00+09:00', '2018-01-02 00:00:00+09:00',\n               '2018-01-03 00:00:00+09:00', '2018-01-04 00:00:00+09:00',\n               '2018-01-05 00:00:00+09:00'],\n              dtype='datetime64[ns, Asia/Tokyo]', freq='D')\n\n`inclusive` controls whether to include `start` and `end` that are on the\nboundary. The default, \"both\", includes boundary points on either end.\n\n>>> pd.date_range(start='2017-01-01', end='2017-01-04', inclusive=\"both\")\nDatetimeIndex(['2017-01-01', '2017-01-02', '2017-01-03', '2017-01-04'],\n              dtype='datetime64[ns]', freq='D')\n\nUse ``inclusive='left'`` to exclude `end` if it falls on the boundary.\n\n>>> pd.date_range(start='2017-01-01', end='2017-01-04', inclusive='left')\nDatetimeIndex(['2017-01-01', '2017-01-02', '2017-01-03'],\n              dtype='datetime64[ns]', freq='D')\n\nUse ``inclusive='right'`` to exclude `start` if it falls on the boundary, and\nsimilarly ``inclusive='neither'`` will exclude both `start` and `end`.\n\n>>> pd.date_range(start='2017-01-01', end='2017-01-04', inclusive='right')\nDatetimeIndex(['2017-01-02', '2017-01-03', '2017-01-04'],\n              dtype='datetime64[ns]', freq='D')\n\n**Specify a unit**\n\n>>> pd.date_range(start=\"2017-01-01\", periods=10, freq=\"100YS\", unit=\"s\")\nDatetimeIndex(['2017-01-01', '2117-01-01', '2217-01-01', '2317-01-01',\n               '2417-01-01', '2517-01-01', '2617-01-01', '2717-01-01',\n               '2817-01-01', '2917-01-01'],\n              dtype='datetime64[s]', freq='100YS-JAN')"
  },
  {
    "symbol": "pandas.errors.AbstractMethodError",
    "signature": "(class_instance, methodtype: 'str' = 'method') -> 'None'",
    "doc": "Raise this error instead of NotImplementedError for abstract methods.\n\nExamples\n--------\n>>> class Foo:\n...     @classmethod\n...     def classmethod(cls):\n...         raise pd.errors.AbstractMethodError(cls, methodtype=\"classmethod\")\n...     def method(self):\n...         raise pd.errors.AbstractMethodError(self)\n>>> test = Foo.classmethod()\nTraceback (most recent call last):\nAbstractMethodError: This classmethod must be defined in the concrete class Foo\n\n>>> test2 = Foo().method()\nTraceback (most recent call last):\nAbstractMethodError: This classmethod must be defined in the concrete class Foo"
  },
  {
    "symbol": "pandas.errors.AttributeConflictWarning",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Warning raised when index attributes conflict when using HDFStore.\n\nOccurs when attempting to append an index with a different\nname than the existing index on an HDFStore or attempting to append an index with a\ndifferent frequency than the existing index on an HDFStore.\n\nExamples\n--------\n>>> idx1 = pd.Index(['a', 'b'], name='name1')\n>>> df1 = pd.DataFrame([[1, 2], [3, 4]], index=idx1)\n>>> df1.to_hdf('file', 'data', 'w', append=True)  # doctest: +SKIP\n>>> idx2 = pd.Index(['c', 'd'], name='name2')\n>>> df2 = pd.DataFrame([[5, 6], [7, 8]], index=idx2)\n>>> df2.to_hdf('file', 'data', 'a', append=True)  # doctest: +SKIP\nAttributeConflictWarning: the [index_name] attribute of the existing index is\n[name1] which conflicts with the new [name2]..."
  },
  {
    "symbol": "pandas.errors.CSSWarning",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Warning is raised when converting css styling fails.\n\nThis can be due to the styling not having an equivalent value or because the\nstyling isn't properly formatted.\n\nExamples\n--------\n>>> df = pd.DataFrame({'A': [1, 1, 1]})\n>>> df.style.applymap(\n...     lambda x: 'background-color: blueGreenRed;'\n... ).to_excel('styled.xlsx')  # doctest: +SKIP\nCSSWarning: Unhandled color format: 'blueGreenRed'\n>>> df.style.applymap(\n...     lambda x: 'border: 1px solid red red;'\n... ).to_excel('styled.xlsx')  # doctest: +SKIP\nCSSWarning: Unhandled color format: 'blueGreenRed'"
  },
  {
    "symbol": "pandas.errors.CategoricalConversionWarning",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Warning is raised when reading a partial labeled Stata file using a iterator.\n\nExamples\n--------\n>>> from pandas.io.stata import StataReader\n>>> with StataReader('dta_file', chunksize=2) as reader: # doctest: +SKIP\n...   for i, block in enumerate(reader):\n...      print(i, block)\n... # CategoricalConversionWarning: One or more series with value labels..."
  },
  {
    "symbol": "pandas.errors.ChainedAssignmentError",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Warning raised when trying to set using chained assignment.\n\nWhen the ``mode.copy_on_write`` option is enabled, chained assignment can\nnever work. In such a situation, we are always setting into a temporary\nobject that is the result of an indexing operation (getitem), which under\nCopy-on-Write always behaves as a copy. Thus, assigning through a chain\ncan never update the original Series or DataFrame.\n\nFor more information on view vs. copy,\nsee :ref:`the user guide<indexing.view_versus_copy>`.\n\nExamples\n--------\n>>> pd.options.mode.copy_on_write = True\n>>> df = pd.DataFrame({'A': [1, 1, 1, 2, 2]}, columns=['A'])\n>>> df[\"A\"][0:3] = 10 # doctest: +SKIP\n... # ChainedAssignmentError: ...\n>>> pd.options.mode.copy_on_write = False"
  },
  {
    "symbol": "pandas.errors.ClosedFileError",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Exception is raised when trying to perform an operation on a closed HDFStore file.\n\nExamples\n--------\n>>> store = pd.HDFStore('my-store', 'a') # doctest: +SKIP\n>>> store.close() # doctest: +SKIP\n>>> store.keys() # doctest: +SKIP\n... # ClosedFileError: my-store file is not open!"
  },
  {
    "symbol": "pandas.errors.DataError",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Exceptionn raised when performing an operation on non-numerical data.\n\nFor example, calling ``ohlc`` on a non-numerical column or a function\non a rolling window.\n\nExamples\n--------\n>>> ser = pd.Series(['a', 'b', 'c'])\n>>> ser.rolling(2).sum()\nTraceback (most recent call last):\nDataError: No numeric types to aggregate"
  },
  {
    "symbol": "pandas.errors.DatabaseError",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Error is raised when executing sql with bad syntax or sql that throws an error.\n\nExamples\n--------\n>>> from sqlite3 import connect\n>>> conn = connect(':memory:')\n>>> pd.read_sql('select * test', conn) # doctest: +SKIP\n... # DatabaseError: Execution failed on sql 'test': near \"test\": syntax error"
  },
  {
    "symbol": "pandas.errors.DtypeWarning",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Warning raised when reading different dtypes in a column from a file.\n\nRaised for a dtype incompatibility. This can happen whenever `read_csv`\nor `read_table` encounter non-uniform dtypes in a column(s) of a given\nCSV file.\n\nSee Also\n--------\nread_csv : Read CSV (comma-separated) file into a DataFrame.\nread_table : Read general delimited file into a DataFrame.\n\nNotes\n-----\nThis warning is issued when dealing with larger files because the dtype\nchecking happens per chunk read.\n\nDespite the warning, the CSV file is read with mixed types in a single\ncolumn which will be an object type. See the examples below to better\nunderstand this issue.\n\nExamples\n--------\nThis example creates and reads a large CSV file with a column that contains\n`int` and `str`.\n\n>>> df = pd.DataFrame({'a': (['1'] * 100000 + ['X'] * 100000 +\n...                          ['1'] * 100000),\n...                    'b': ['b'] * 300000})  # doctest: +SKIP\n>>> df.to_csv('test.csv', index=False)  # doctest: +SKIP\n>>> df2 = pd.read_csv('test.csv')  # doctest: +SKIP\n... # DtypeWarning: Columns (0) have mixed types\n\nImportant to notice that ``df2`` will contain both `str` and `int` for the\nsame input, '1'.\n\n>>> df2.iloc[262140, 0]  # doctest: +SKIP\n'1'\n>>> type(df2.iloc[262140, 0])  # doctest: +SKIP\n<class 'str'>\n>>> df2.iloc[262150, 0]  # doctest: +SKIP\n1\n>>> type(df2.iloc[262150, 0])  # doctest: +SKIP\n<class 'int'>\n\nOne way to solve this issue is using the `dtype` parameter in the\n`read_csv` and `read_table` functions to explicit the conversion:\n\n>>> df2 = pd.read_csv('test.csv', sep=',', dtype={'a': str})  # doctest: +SKIP\n\nNo warning was issued."
  },
  {
    "symbol": "pandas.errors.DuplicateLabelError",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Error raised when an operation would introduce duplicate labels.\n\nExamples\n--------\n>>> s = pd.Series([0, 1, 2], index=['a', 'b', 'c']).set_flags(\n...     allows_duplicate_labels=False\n... )\n>>> s.reindex(['a', 'a', 'b'])\nTraceback (most recent call last):\n   ...\nDuplicateLabelError: Index has duplicates.\n      positions\nlabel\na        [0, 1]"
  },
  {
    "symbol": "pandas.errors.EmptyDataError",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Exception raised in ``pd.read_csv`` when empty data or header is encountered.\n\nExamples\n--------\n>>> from io import StringIO\n>>> empty = StringIO()\n>>> pd.read_csv(empty)\nTraceback (most recent call last):\nEmptyDataError: No columns to parse from file"
  },
  {
    "symbol": "pandas.errors.IncompatibilityWarning",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Warning raised when trying to use where criteria on an incompatible HDF5 file."
  },
  {
    "symbol": "pandas.errors.IndexingError",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Exception is raised when trying to index and there is a mismatch in dimensions.\n\nExamples\n--------\n>>> df = pd.DataFrame({'A': [1, 1, 1]})\n>>> df.loc[..., ..., 'A'] # doctest: +SKIP\n... # IndexingError: indexer may only contain one '...' entry\n>>> df = pd.DataFrame({'A': [1, 1, 1]})\n>>> df.loc[1, ..., ...] # doctest: +SKIP\n... # IndexingError: Too many indexers\n>>> df[pd.Series([True], dtype=bool)] # doctest: +SKIP\n... # IndexingError: Unalignable boolean Series provided as indexer...\n>>> s = pd.Series(range(2),\n...               index = pd.MultiIndex.from_product([[\"a\", \"b\"], [\"c\"]]))\n>>> s.loc[\"a\", \"c\", \"d\"] # doctest: +SKIP\n... # IndexingError: Too many indexers"
  },
  {
    "symbol": "pandas.errors.IntCastingNaNError",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Exception raised when converting (``astype``) an array with NaN to an integer type.\n\nExamples\n--------\n>>> pd.DataFrame(np.array([[1, np.nan], [2, 3]]), dtype=\"i8\")\nTraceback (most recent call last):\nIntCastingNaNError: Cannot convert non-finite values (NA or inf) to integer"
  },
  {
    "symbol": "pandas.errors.InvalidColumnName",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Warning raised by to_stata the column contains a non-valid stata name.\n\nBecause the column name is an invalid Stata variable, the name needs to be\nconverted.\n\nExamples\n--------\n>>> df = pd.DataFrame({\"0categories\": pd.Series([2, 2])})\n>>> df.to_stata('test') # doctest: +SKIP\n... # InvalidColumnName: Not all pandas column names were valid Stata variable..."
  },
  {
    "symbol": "pandas.errors.InvalidComparison",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Exception is raised by _validate_comparison_value to indicate an invalid comparison.\n\nNotes\n-----\nThis is an internal error."
  },
  {
    "symbol": "pandas.errors.InvalidIndexError",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Exception raised when attempting to use an invalid index key.\n\nExamples\n--------\n>>> idx = pd.MultiIndex.from_product([[\"x\", \"y\"], [0, 1]])\n>>> df = pd.DataFrame([[1, 1, 2, 2],\n...                   [3, 3, 4, 4]], columns=idx)\n>>> df\n    x       y\n    0   1   0   1\n0   1   1   2   2\n1   3   3   4   4\n>>> df[:, 0]\nTraceback (most recent call last):\nInvalidIndexError: (slice(None, None, None), 0)"
  },
  {
    "symbol": "pandas.errors.InvalidVersion",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "An invalid version was found, users should refer to PEP 440.\n\nExamples\n--------\n>>> pd.util.version.Version('1.')\nTraceback (most recent call last):\nInvalidVersion: Invalid version: '1.'"
  },
  {
    "symbol": "pandas.errors.LossySetitemError",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Raised when trying to do a __setitem__ on an np.ndarray that is not lossless.\n\nNotes\n-----\nThis is an internal error."
  },
  {
    "symbol": "pandas.errors.MergeError",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Exception raised when merging data.\n\nSubclass of ``ValueError``.\n\nExamples\n--------\n>>> left = pd.DataFrame({\"a\": [\"a\", \"b\", \"b\", \"d\"],\n...                     \"b\": [\"cat\", \"dog\", \"weasel\", \"horse\"]},\n...                     index=range(4))\n>>> right = pd.DataFrame({\"a\": [\"a\", \"b\", \"c\", \"d\"],\n...                      \"c\": [\"meow\", \"bark\", \"chirp\", \"nay\"]},\n...                      index=range(4)).set_index(\"a\")\n>>> left.join(right, on=\"a\", validate=\"one_to_one\",)\nTraceback (most recent call last):\nMergeError: Merge keys are not unique in left dataset; not a one-to-one merge"
  },
  {
    "symbol": "pandas.errors.NoBufferPresent",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Exception is raised in _get_data_buffer to signal that there is no requested buffer."
  },
  {
    "symbol": "pandas.errors.NullFrequencyError",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Exception raised when a ``freq`` cannot be null.\n\nParticularly ``DatetimeIndex.shift``, ``TimedeltaIndex.shift``,\n``PeriodIndex.shift``.\n\nExamples\n--------\n>>> df = pd.DatetimeIndex([\"2011-01-01 10:00\", \"2011-01-01\"], freq=None)\n>>> df.shift(2)\nTraceback (most recent call last):\nNullFrequencyError: Cannot shift with no freq"
  },
  {
    "symbol": "pandas.errors.NumExprClobberingError",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Exception raised when trying to use a built-in numexpr name as a variable name.\n\n``eval`` or ``query`` will throw the error if the engine is set\nto 'numexpr'. 'numexpr' is the default engine value for these methods if the\nnumexpr package is installed.\n\nExamples\n--------\n>>> df = pd.DataFrame({'abs': [1, 1, 1]})\n>>> df.query(\"abs > 2\") # doctest: +SKIP\n... # NumExprClobberingError: Variables in expression \"(abs) > (2)\" overlap...\n>>> sin, a = 1, 2\n>>> pd.eval(\"sin + a\", engine='numexpr') # doctest: +SKIP\n... # NumExprClobberingError: Variables in expression \"(sin) + (a)\" overlap..."
  },
  {
    "symbol": "pandas.errors.NumbaUtilError",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Error raised for unsupported Numba engine routines.\n\nExamples\n--------\n>>> df = pd.DataFrame({\"key\": [\"a\", \"a\", \"b\", \"b\"], \"data\": [1, 2, 3, 4]},\n...                   columns=[\"key\", \"data\"])\n>>> def incorrect_function(x):\n...     return sum(x) * 2.7\n>>> df.groupby(\"key\").agg(incorrect_function, engine=\"numba\")\nTraceback (most recent call last):\nNumbaUtilError: The first 2 arguments to incorrect_function\nmust be ['values', 'index']"
  },
  {
    "symbol": "pandas.errors.OptionError",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Exception raised for pandas.options.\n\nBackwards compatible with KeyError checks.\n\nExamples\n--------\n>>> pd.options.context\nTraceback (most recent call last):\nOptionError: No such option"
  },
  {
    "symbol": "pandas.errors.OutOfBoundsDatetime",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Raised when the datetime is outside the range that can be represented.\n\nExamples\n--------\n>>> pd.to_datetime(\"08335394550\")\nTraceback (most recent call last):\nOutOfBoundsDatetime: Parsing \"08335394550\" to datetime overflows,\nat position 0"
  },
  {
    "symbol": "pandas.errors.OutOfBoundsTimedelta",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Raised when encountering a timedelta value that cannot be represented.\n\nRepresentation should be within a timedelta64[ns].\n\nExamples\n--------\n>>> pd.date_range(start=\"1/1/1700\", freq=\"B\", periods=100000)\nTraceback (most recent call last):\nOutOfBoundsTimedelta: Cannot cast 139999 days 00:00:00\nto unit='ns' without overflow."
  },
  {
    "symbol": "pandas.errors.ParserError",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Exception that is raised by an error encountered in parsing file contents.\n\nThis is a generic error raised for errors encountered when functions like\n`read_csv` or `read_html` are parsing contents of a file.\n\nSee Also\n--------\nread_csv : Read CSV (comma-separated) file into a DataFrame.\nread_html : Read HTML table into a DataFrame.\n\nExamples\n--------\n>>> data = '''a,b,c\n... cat,foo,bar\n... dog,foo,\"baz'''\n>>> from io import StringIO\n>>> pd.read_csv(StringIO(data), skipfooter=1, engine='python')\nTraceback (most recent call last):\nParserError: ',' expected after '\"'. Error could possibly be due\nto parsing errors in the skipped footer rows"
  },
  {
    "symbol": "pandas.errors.ParserWarning",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Warning raised when reading a file that doesn't use the default 'c' parser.\n\nRaised by `pd.read_csv` and `pd.read_table` when it is necessary to change\nparsers, generally from the default 'c' parser to 'python'.\n\nIt happens due to a lack of support or functionality for parsing a\nparticular attribute of a CSV file with the requested engine.\n\nCurrently, 'c' unsupported options include the following parameters:\n\n1. `sep` other than a single character (e.g. regex separators)\n2. `skipfooter` higher than 0\n3. `sep=None` with `delim_whitespace=False`\n\nThe warning can be avoided by adding `engine='python'` as a parameter in\n`pd.read_csv` and `pd.read_table` methods.\n\nSee Also\n--------\npd.read_csv : Read CSV (comma-separated) file into DataFrame.\npd.read_table : Read general delimited file into DataFrame.\n\nExamples\n--------\nUsing a `sep` in `pd.read_csv` other than a single character:\n\n>>> import io\n>>> csv = '''a;b;c\n...           1;1,8\n...           1;2,1'''\n>>> df = pd.read_csv(io.StringIO(csv), sep='[;,]')  # doctest: +SKIP\n... # ParserWarning: Falling back to the 'python' engine...\n\nAdding `engine='python'` to `pd.read_csv` removes the Warning:\n\n>>> df = pd.read_csv(io.StringIO(csv), sep='[;,]', engine='python')"
  },
  {
    "symbol": "pandas.errors.PerformanceWarning",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Warning raised when there is a possible performance impact.\n\nExamples\n--------\n>>> df = pd.DataFrame({\"jim\": [0, 0, 1, 1],\n...                    \"joe\": [\"x\", \"x\", \"z\", \"y\"],\n...                    \"jolie\": [1, 2, 3, 4]})\n>>> df = df.set_index([\"jim\", \"joe\"])\n>>> df\n          jolie\njim  joe\n0    x    1\n     x    2\n1    z    3\n     y    4\n>>> df.loc[(1, 'z')]  # doctest: +SKIP\n# PerformanceWarning: indexing past lexsort depth may impact performance.\ndf.loc[(1, 'z')]\n          jolie\njim  joe\n1    z        3"
  },
  {
    "symbol": "pandas.errors.PossibleDataLossError",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Exception raised when trying to open a HDFStore file when already opened.\n\nExamples\n--------\n>>> store = pd.HDFStore('my-store', 'a') # doctest: +SKIP\n>>> store.open(\"w\") # doctest: +SKIP\n... # PossibleDataLossError: Re-opening the file [my-store] with mode [a]..."
  },
  {
    "symbol": "pandas.errors.PossiblePrecisionLoss",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Warning raised by to_stata on a column with a value outside or equal to int64.\n\nWhen the column value is outside or equal to the int64 value the column is\nconverted to a float64 dtype.\n\nExamples\n--------\n>>> df = pd.DataFrame({\"s\": pd.Series([1, 2**53], dtype=np.int64)})\n>>> df.to_stata('test') # doctest: +SKIP\n... # PossiblePrecisionLoss: Column converted from int64 to float64..."
  },
  {
    "symbol": "pandas.errors.PyperclipException",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Exception raised when clipboard functionality is unsupported.\n\nRaised by ``to_clipboard()`` and ``read_clipboard()``."
  },
  {
    "symbol": "pandas.errors.PyperclipWindowsException",
    "signature": "(message: 'str') -> 'None'",
    "doc": "Exception raised when clipboard functionality is unsupported by Windows.\n\nAccess to the clipboard handle would be denied due to some other\nwindow process is accessing it."
  },
  {
    "symbol": "pandas.errors.SettingWithCopyError",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Exception raised when trying to set on a copied slice from a ``DataFrame``.\n\nThe ``mode.chained_assignment`` needs to be set to set to 'raise.' This can\nhappen unintentionally when chained indexing.\n\nFor more information on evaluation order,\nsee :ref:`the user guide<indexing.evaluation_order>`.\n\nFor more information on view vs. copy,\nsee :ref:`the user guide<indexing.view_versus_copy>`.\n\nExamples\n--------\n>>> pd.options.mode.chained_assignment = 'raise'\n>>> df = pd.DataFrame({'A': [1, 1, 1, 2, 2]}, columns=['A'])\n>>> df.loc[0:3]['A'] = 'a' # doctest: +SKIP\n... # SettingWithCopyError: A value is trying to be set on a copy of a..."
  },
  {
    "symbol": "pandas.errors.SettingWithCopyWarning",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Warning raised when trying to set on a copied slice from a ``DataFrame``.\n\nThe ``mode.chained_assignment`` needs to be set to set to 'warn.'\n'Warn' is the default option. This can happen unintentionally when\nchained indexing.\n\nFor more information on evaluation order,\nsee :ref:`the user guide<indexing.evaluation_order>`.\n\nFor more information on view vs. copy,\nsee :ref:`the user guide<indexing.view_versus_copy>`.\n\nExamples\n--------\n>>> df = pd.DataFrame({'A': [1, 1, 1, 2, 2]}, columns=['A'])\n>>> df.loc[0:3]['A'] = 'a' # doctest: +SKIP\n... # SettingWithCopyWarning: A value is trying to be set on a copy of a..."
  },
  {
    "symbol": "pandas.errors.SpecificationError",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Exception raised by ``agg`` when the functions are ill-specified.\n\nThe exception raised in two scenarios.\n\nThe first way is calling ``agg`` on a\nDataframe or Series using a nested renamer (dict-of-dict).\n\nThe second way is calling ``agg`` on a Dataframe with duplicated functions\nnames without assigning column name.\n\nExamples\n--------\n>>> df = pd.DataFrame({'A': [1, 1, 1, 2, 2],\n...                    'B': range(5),\n...                    'C': range(5)})\n>>> df.groupby('A').B.agg({'foo': 'count'}) # doctest: +SKIP\n... # SpecificationError: nested renamer is not supported\n\n>>> df.groupby('A').agg({'B': {'foo': ['sum', 'max']}}) # doctest: +SKIP\n... # SpecificationError: nested renamer is not supported\n\n>>> df.groupby('A').agg(['min', 'min']) # doctest: +SKIP\n... # SpecificationError: nested renamer is not supported"
  },
  {
    "symbol": "pandas.errors.UndefinedVariableError",
    "signature": "(name: 'str', is_local: 'bool | None' = None) -> 'None'",
    "doc": "Exception raised by ``query`` or ``eval`` when using an undefined variable name.\n\nIt will also specify whether the undefined variable is local or not.\n\nExamples\n--------\n>>> df = pd.DataFrame({'A': [1, 1, 1]})\n>>> df.query(\"A > x\") # doctest: +SKIP\n... # UndefinedVariableError: name 'x' is not defined\n>>> df.query(\"A > @y\") # doctest: +SKIP\n... # UndefinedVariableError: local variable 'y' is not defined\n>>> pd.eval('x + 1') # doctest: +SKIP\n... # UndefinedVariableError: name 'x' is not defined"
  },
  {
    "symbol": "pandas.errors.UnsortedIndexError",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Error raised when slicing a MultiIndex which has not been lexsorted.\n\nSubclass of `KeyError`.\n\nExamples\n--------\n>>> df = pd.DataFrame({\"cat\": [0, 0, 1, 1],\n...                    \"color\": [\"white\", \"white\", \"brown\", \"black\"],\n...                    \"lives\": [4, 4, 3, 7]},\n...                   )\n>>> df = df.set_index([\"cat\", \"color\"])\n>>> df\n            lives\ncat  color\n0    white    4\n     white    4\n1    brown    3\n     black    7\n>>> df.loc[(0, \"black\"):(1, \"white\")]\nTraceback (most recent call last):\nUnsortedIndexError: 'Key length (2) was greater\nthan MultiIndex lexsort depth (1)'"
  },
  {
    "symbol": "pandas.errors.UnsupportedFunctionCall",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Exception raised when attempting to call a unsupported numpy function.\n\nFor example, ``np.cumsum(groupby_object)``.\n\nExamples\n--------\n>>> df = pd.DataFrame({\"A\": [0, 0, 1, 1],\n...                    \"B\": [\"x\", \"x\", \"z\", \"y\"],\n...                    \"C\": [1, 2, 3, 4]}\n...                   )\n>>> np.cumsum(df.groupby([\"A\"]))\nTraceback (most recent call last):\nUnsupportedFunctionCall: numpy operations are not valid with groupby.\nUse .groupby(...).cumsum() instead"
  },
  {
    "symbol": "pandas.errors.ValueLabelTypeMismatch",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Warning raised by to_stata on a category column that contains non-string values.\n\nExamples\n--------\n>>> df = pd.DataFrame({\"categories\": pd.Series([\"a\", 2], dtype=\"category\")})\n>>> df.to_stata('test') # doctest: +SKIP\n... # ValueLabelTypeMismatch: Stata value labels (pandas categories) must be str..."
  },
  {
    "symbol": "pandas.errors._check_cacher",
    "signature": "(obj)",
    "doc": ""
  },
  {
    "symbol": "pandas.eval",
    "signature": "(expr: 'str | BinOp', parser: 'str' = 'pandas', engine: 'str | None' = None, local_dict=None, global_dict=None, resolvers=(), level: 'int' = 0, target=None, inplace: 'bool' = False)",
    "doc": "Evaluate a Python expression as a string using various backends.\n\nThe following arithmetic operations are supported: ``+``, ``-``, ``*``,\n``/``, ``**``, ``%``, ``//`` (python engine only) along with the following\nboolean operations: ``|`` (or), ``&`` (and), and ``~`` (not).\nAdditionally, the ``'pandas'`` parser allows the use of :keyword:`and`,\n:keyword:`or`, and :keyword:`not` with the same semantics as the\ncorresponding bitwise operators.  :class:`~pandas.Series` and\n:class:`~pandas.DataFrame` objects are supported and behave as they would\nwith plain ol' Python evaluation.\n\nParameters\n----------\nexpr : str\n    The expression to evaluate. This string cannot contain any Python\n    `statements\n    <https://docs.python.org/3/reference/simple_stmts.html#simple-statements>`__,\n    only Python `expressions\n    <https://docs.python.org/3/reference/simple_stmts.html#expression-statements>`__.\nparser : {'pandas', 'python'}, default 'pandas'\n    The parser to use to construct the syntax tree from the expression. The\n    default of ``'pandas'`` parses code slightly different than standard\n    Python. Alternatively, you can parse an expression using the\n    ``'python'`` parser to retain strict Python semantics.  See the\n    :ref:`enhancing performance <enhancingperf.eval>` documentation for\n    more details.\nengine : {'python', 'numexpr'}, default 'numexpr'\n\n    The engine used to evaluate the expression. Supported engines are\n\n    - None : tries to use ``numexpr``, falls back to ``python``\n    - ``'numexpr'`` : This default engine evaluates pandas objects using\n      numexpr for large speed ups in complex expressions with large frames.\n    - ``'python'`` : Performs operations as if you had ``eval``'d in top\n      level python. This engine is generally not that useful.\n\n    More backends may be available in the future.\nlocal_dict : dict or None, optional\n    A dictionary of local variables, taken from locals() by default.\nglobal_dict : dict or None, optional\n    A dictionary of global variables, taken from globals() by default.\nresolvers : list of dict-like or None, optional\n    A list of objects implementing the ``__getitem__`` special method that\n    you can use to inject an additional collection of namespaces to use for\n    variable lookup. For example, this is used in the\n    :meth:`~DataFrame.query` method to inject the\n    ``DataFrame.index`` and ``DataFrame.columns``\n    variables that refer to their respective :class:`~pandas.DataFrame`\n    instance attributes.\nlevel : int, optional\n    The number of prior stack frames to traverse and add to the current\n    scope. Most users will **not** need to change this parameter.\ntarget : object, optional, default None\n    This is the target object for assignment. It is used when there is\n    variable assignment in the expression. If so, then `target` must\n    support item assignment with string keys, and if a copy is being\n    returned, it must also support `.copy()`.\ninplace : bool, default False\n    If `target` is provided, and the expression mutates `target`, whether\n    to modify `target` inplace. Otherwise, return a copy of `target` with\n    the mutation.\n\nReturns\n-------\nndarray, numeric scalar, DataFrame, Series, or None\n    The completion value of evaluating the given code or None if ``inplace=True``.\n\nRaises\n------\nValueError\n    There are many instances where such an error can be raised:\n\n    - `target=None`, but the expression is multiline.\n    - The expression is multiline, but not all them have item assignment.\n      An example of such an arrangement is this:\n\n      a = b + 1\n      a + 2\n\n      Here, there are expressions on different lines, making it multiline,\n      but the last line has no variable assigned to the output of `a + 2`.\n    - `inplace=True`, but the expression is missing item assignment.\n    - Item assignment is provided, but the `target` does not support\n      string item assignment.\n    - Item assignment is provided and `inplace=False`, but the `target`\n      does not support the `.copy()` method\n\nSee Also\n--------\nDataFrame.query : Evaluates a boolean expression to query the columns\n        of a frame.\nDataFrame.eval : Evaluate a string describing operations on\n        DataFrame columns.\n\nNotes\n-----\nThe ``dtype`` of any objects involved in an arithmetic ``%`` operation are\nrecursively cast to ``float64``.\n\nSee the :ref:`enhancing performance <enhancingperf.eval>` documentation for\nmore details.\n\nExamples\n--------\n>>> df = pd.DataFrame({\"animal\": [\"dog\", \"pig\"], \"age\": [10, 20]})\n>>> df\n  animal  age\n0    dog   10\n1    pig   20\n\nWe can add a new column using ``pd.eval``:\n\n>>> pd.eval(\"double_age = df.age * 2\", target=df)\n  animal  age  double_age\n0    dog   10          20\n1    pig   20          40"
  },
  {
    "symbol": "pandas.factorize",
    "signature": "(values, sort: 'bool' = False, use_na_sentinel: 'bool' = True, size_hint: 'int | None' = None) -> 'tuple[np.ndarray, np.ndarray | Index]'",
    "doc": "Encode the object as an enumerated type or categorical variable.\n\nThis method is useful for obtaining a numeric representation of an\narray when all that matters is identifying distinct values. `factorize`\nis available as both a top-level function :func:`pandas.factorize`,\nand as a method :meth:`Series.factorize` and :meth:`Index.factorize`.\n\nParameters\n----------\nvalues : sequence\n    A 1-D sequence. Sequences that aren't pandas objects are\n    coerced to ndarrays before factorization.\nsort : bool, default False\n    Sort `uniques` and shuffle `codes` to maintain the\n    relationship.\n\nuse_na_sentinel : bool, default True\n    If True, the sentinel -1 will be used for NaN values. If False,\n    NaN values will be encoded as non-negative integers and will not drop the\n    NaN from the uniques of the values.\n\n    .. versionadded:: 1.5.0\nsize_hint : int, optional\n    Hint to the hashtable sizer.\n\nReturns\n-------\ncodes : ndarray\n    An integer ndarray that's an indexer into `uniques`.\n    ``uniques.take(codes)`` will have the same values as `values`.\nuniques : ndarray, Index, or Categorical\n    The unique valid values. When `values` is Categorical, `uniques`\n    is a Categorical. When `values` is some other pandas object, an\n    `Index` is returned. Otherwise, a 1-D ndarray is returned.\n\n    .. note::\n\n       Even if there's a missing value in `values`, `uniques` will\n       *not* contain an entry for it.\n\nSee Also\n--------\ncut : Discretize continuous-valued array.\nunique : Find the unique value in an array.\n\nNotes\n-----\nReference :ref:`the user guide <reshaping.factorize>` for more examples.\n\nExamples\n--------\nThese examples all show factorize as a top-level method like\n``pd.factorize(values)``. The results are identical for methods like\n:meth:`Series.factorize`.\n\n>>> codes, uniques = pd.factorize(np.array(['b', 'b', 'a', 'c', 'b'], dtype=\"O\"))\n>>> codes\narray([0, 0, 1, 2, 0])\n>>> uniques\narray(['b', 'a', 'c'], dtype=object)\n\nWith ``sort=True``, the `uniques` will be sorted, and `codes` will be\nshuffled so that the relationship is the maintained.\n\n>>> codes, uniques = pd.factorize(np.array(['b', 'b', 'a', 'c', 'b'], dtype=\"O\"),\n...                               sort=True)\n>>> codes\narray([1, 1, 0, 2, 1])\n>>> uniques\narray(['a', 'b', 'c'], dtype=object)\n\nWhen ``use_na_sentinel=True`` (the default), missing values are indicated in\nthe `codes` with the sentinel value ``-1`` and missing values are not\nincluded in `uniques`.\n\n>>> codes, uniques = pd.factorize(np.array(['b', None, 'a', 'c', 'b'], dtype=\"O\"))\n>>> codes\narray([ 0, -1,  1,  2,  0])\n>>> uniques\narray(['b', 'a', 'c'], dtype=object)\n\nThus far, we've only factorized lists (which are internally coerced to\nNumPy arrays). When factorizing pandas objects, the type of `uniques`\nwill differ. For Categoricals, a `Categorical` is returned.\n\n>>> cat = pd.Categorical(['a', 'a', 'c'], categories=['a', 'b', 'c'])\n>>> codes, uniques = pd.factorize(cat)\n>>> codes\narray([0, 0, 1])\n>>> uniques\n['a', 'c']\nCategories (3, object): ['a', 'b', 'c']\n\nNotice that ``'b'`` is in ``uniques.categories``, despite not being\npresent in ``cat.values``.\n\nFor all other pandas objects, an Index of the appropriate type is\nreturned.\n\n>>> cat = pd.Series(['a', 'a', 'c'])\n>>> codes, uniques = pd.factorize(cat)\n>>> codes\narray([0, 0, 1])\n>>> uniques\nIndex(['a', 'c'], dtype='object')\n\nIf NaN is in the values, and we want to include NaN in the uniques of the\nvalues, it can be achieved by setting ``use_na_sentinel=False``.\n\n>>> values = np.array([1, 2, 1, np.nan])\n>>> codes, uniques = pd.factorize(values)  # default: use_na_sentinel=True\n>>> codes\narray([ 0,  1,  0, -1])\n>>> uniques\narray([1., 2.])\n\n>>> codes, uniques = pd.factorize(values, use_na_sentinel=False)\n>>> codes\narray([0, 1, 0, 2])\n>>> uniques\narray([ 1.,  2., nan])"
  },
  {
    "symbol": "pandas.from_dummies",
    "signature": "(data: 'DataFrame', sep: 'None | str' = None, default_category: 'None | Hashable | dict[str, Hashable]' = None) -> 'DataFrame'",
    "doc": "Create a categorical ``DataFrame`` from a ``DataFrame`` of dummy variables.\n\nInverts the operation performed by :func:`~pandas.get_dummies`.\n\n.. versionadded:: 1.5.0\n\nParameters\n----------\ndata : DataFrame\n    Data which contains dummy-coded variables in form of integer columns of\n    1's and 0's.\nsep : str, default None\n    Separator used in the column names of the dummy categories they are\n    character indicating the separation of the categorical names from the prefixes.\n    For example, if your column names are 'prefix_A' and 'prefix_B',\n    you can strip the underscore by specifying sep='_'.\ndefault_category : None, Hashable or dict of Hashables, default None\n    The default category is the implied category when a value has none of the\n    listed categories specified with a one, i.e. if all dummies in a row are\n    zero. Can be a single value for all variables or a dict directly mapping\n    the default categories to a prefix of a variable.\n\nReturns\n-------\nDataFrame\n    Categorical data decoded from the dummy input-data.\n\nRaises\n------\nValueError\n    * When the input ``DataFrame`` ``data`` contains NA values.\n    * When the input ``DataFrame`` ``data`` contains column names with separators\n      that do not match the separator specified with ``sep``.\n    * When a ``dict`` passed to ``default_category`` does not include an implied\n      category for each prefix.\n    * When a value in ``data`` has more than one category assigned to it.\n    * When ``default_category=None`` and a value in ``data`` has no category\n      assigned to it.\nTypeError\n    * When the input ``data`` is not of type ``DataFrame``.\n    * When the input ``DataFrame`` ``data`` contains non-dummy data.\n    * When the passed ``sep`` is of a wrong data type.\n    * When the passed ``default_category`` is of a wrong data type.\n\nSee Also\n--------\n:func:`~pandas.get_dummies` : Convert ``Series`` or ``DataFrame`` to dummy codes.\n:class:`~pandas.Categorical` : Represent a categorical variable in classic.\n\nNotes\n-----\nThe columns of the passed dummy data should only include 1's and 0's,\nor boolean values.\n\nExamples\n--------\n>>> df = pd.DataFrame({\"a\": [1, 0, 0, 1], \"b\": [0, 1, 0, 0],\n...                    \"c\": [0, 0, 1, 0]})\n\n>>> df\n   a  b  c\n0  1  0  0\n1  0  1  0\n2  0  0  1\n3  1  0  0\n\n>>> pd.from_dummies(df)\n0     a\n1     b\n2     c\n3     a\n\n>>> df = pd.DataFrame({\"col1_a\": [1, 0, 1], \"col1_b\": [0, 1, 0],\n...                    \"col2_a\": [0, 1, 0], \"col2_b\": [1, 0, 0],\n...                    \"col2_c\": [0, 0, 1]})\n\n>>> df\n      col1_a  col1_b  col2_a  col2_b  col2_c\n0       1       0       0       1       0\n1       0       1       1       0       0\n2       1       0       0       0       1\n\n>>> pd.from_dummies(df, sep=\"_\")\n    col1    col2\n0    a       b\n1    b       a\n2    a       c\n\n>>> df = pd.DataFrame({\"col1_a\": [1, 0, 0], \"col1_b\": [0, 1, 0],\n...                    \"col2_a\": [0, 1, 0], \"col2_b\": [1, 0, 0],\n...                    \"col2_c\": [0, 0, 0]})\n\n>>> df\n      col1_a  col1_b  col2_a  col2_b  col2_c\n0       1       0       0       1       0\n1       0       1       1       0       0\n2       0       0       0       0       0\n\n>>> pd.from_dummies(df, sep=\"_\", default_category={\"col1\": \"d\", \"col2\": \"e\"})\n    col1    col2\n0    a       b\n1    b       a\n2    d       e"
  },
  {
    "symbol": "pandas.get_dummies",
    "signature": "(data, prefix=None, prefix_sep: 'str | Iterable[str] | dict[str, str]' = '_', dummy_na: 'bool' = False, columns=None, sparse: 'bool' = False, drop_first: 'bool' = False, dtype: 'NpDtype | None' = None) -> 'DataFrame'",
    "doc": "Convert categorical variable into dummy/indicator variables.\n\nEach variable is converted in as many 0/1 variables as there are different\nvalues. Columns in the output are each named after a value; if the input is\na DataFrame, the name of the original variable is prepended to the value.\n\nParameters\n----------\ndata : array-like, Series, or DataFrame\n    Data of which to get dummy indicators.\nprefix : str, list of str, or dict of str, default None\n    String to append DataFrame column names.\n    Pass a list with length equal to the number of columns\n    when calling get_dummies on a DataFrame. Alternatively, `prefix`\n    can be a dictionary mapping column names to prefixes.\nprefix_sep : str, default '_'\n    If appending prefix, separator/delimiter to use. Or pass a\n    list or dictionary as with `prefix`.\ndummy_na : bool, default False\n    Add a column to indicate NaNs, if False NaNs are ignored.\ncolumns : list-like, default None\n    Column names in the DataFrame to be encoded.\n    If `columns` is None then all the columns with\n    `object`, `string`, or `category` dtype will be converted.\nsparse : bool, default False\n    Whether the dummy-encoded columns should be backed by\n    a :class:`SparseArray` (True) or a regular NumPy array (False).\ndrop_first : bool, default False\n    Whether to get k-1 dummies out of k categorical levels by removing the\n    first level.\ndtype : dtype, default bool\n    Data type for new columns. Only a single dtype is allowed.\n\nReturns\n-------\nDataFrame\n    Dummy-coded data. If `data` contains other columns than the\n    dummy-coded one(s), these will be prepended, unaltered, to the result.\n\nSee Also\n--------\nSeries.str.get_dummies : Convert Series of strings to dummy codes.\n:func:`~pandas.from_dummies` : Convert dummy codes to categorical ``DataFrame``.\n\nNotes\n-----\nReference :ref:`the user guide <reshaping.dummies>` for more examples.\n\nExamples\n--------\n>>> s = pd.Series(list('abca'))\n\n>>> pd.get_dummies(s)\n       a      b      c\n0   True  False  False\n1  False   True  False\n2  False  False   True\n3   True  False  False\n\n>>> s1 = ['a', 'b', np.nan]\n\n>>> pd.get_dummies(s1)\n       a      b\n0   True  False\n1  False   True\n2  False  False\n\n>>> pd.get_dummies(s1, dummy_na=True)\n       a      b    NaN\n0   True  False  False\n1  False   True  False\n2  False  False   True\n\n>>> df = pd.DataFrame({'A': ['a', 'b', 'a'], 'B': ['b', 'a', 'c'],\n...                    'C': [1, 2, 3]})\n\n>>> pd.get_dummies(df, prefix=['col1', 'col2'])\n   C  col1_a  col1_b  col2_a  col2_b  col2_c\n0  1    True   False   False    True   False\n1  2   False    True    True   False   False\n2  3    True   False   False   False    True\n\n>>> pd.get_dummies(pd.Series(list('abcaa')))\n       a      b      c\n0   True  False  False\n1  False   True  False\n2  False  False   True\n3   True  False  False\n4   True  False  False\n\n>>> pd.get_dummies(pd.Series(list('abcaa')), drop_first=True)\n       b      c\n0  False  False\n1   True  False\n2  False   True\n3  False  False\n4  False  False\n\n>>> pd.get_dummies(pd.Series(list('abc')), dtype=float)\n     a    b    c\n0  1.0  0.0  0.0\n1  0.0  1.0  0.0\n2  0.0  0.0  1.0"
  },
  {
    "symbol": "pandas.infer_freq",
    "signature": "(index: 'DatetimeIndex | TimedeltaIndex | Series | DatetimeLikeArrayMixin') -> 'str | None'",
    "doc": "Infer the most likely frequency given the input index.\n\nParameters\n----------\nindex : DatetimeIndex, TimedeltaIndex, Series or array-like\n  If passed a Series will use the values of the series (NOT THE INDEX).\n\nReturns\n-------\nstr or None\n    None if no discernible frequency.\n\nRaises\n------\nTypeError\n    If the index is not datetime-like.\nValueError\n    If there are fewer than three values.\n\nExamples\n--------\n>>> idx = pd.date_range(start='2020/12/01', end='2020/12/30', periods=30)\n>>> pd.infer_freq(idx)\n'D'"
  },
  {
    "symbol": "pandas.interval_range",
    "signature": "(start=None, end=None, periods=None, freq=None, name: 'Hashable | None' = None, closed: 'IntervalClosedType' = 'right') -> 'IntervalIndex'",
    "doc": "Return a fixed frequency IntervalIndex.\n\nParameters\n----------\nstart : numeric or datetime-like, default None\n    Left bound for generating intervals.\nend : numeric or datetime-like, default None\n    Right bound for generating intervals.\nperiods : int, default None\n    Number of periods to generate.\nfreq : numeric, str, Timedelta, datetime.timedelta, or DateOffset, default None\n    The length of each interval. Must be consistent with the type of start\n    and end, e.g. 2 for numeric, or '5H' for datetime-like.  Default is 1\n    for numeric and 'D' for datetime-like.\nname : str, default None\n    Name of the resulting IntervalIndex.\nclosed : {'left', 'right', 'both', 'neither'}, default 'right'\n    Whether the intervals are closed on the left-side, right-side, both\n    or neither.\n\nReturns\n-------\nIntervalIndex\n\nSee Also\n--------\nIntervalIndex : An Index of intervals that are all closed on the same side.\n\nNotes\n-----\nOf the four parameters ``start``, ``end``, ``periods``, and ``freq``,\nexactly three must be specified. If ``freq`` is omitted, the resulting\n``IntervalIndex`` will have ``periods`` linearly spaced elements between\n``start`` and ``end``, inclusively.\n\nTo learn more about datetime-like frequency strings, please see `this link\n<https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\nExamples\n--------\nNumeric ``start`` and  ``end`` is supported.\n\n>>> pd.interval_range(start=0, end=5)\nIntervalIndex([(0, 1], (1, 2], (2, 3], (3, 4], (4, 5]],\n              dtype='interval[int64, right]')\n\nAdditionally, datetime-like input is also supported.\n\n>>> pd.interval_range(start=pd.Timestamp('2017-01-01'),\n...                   end=pd.Timestamp('2017-01-04'))\nIntervalIndex([(2017-01-01 00:00:00, 2017-01-02 00:00:00],\n               (2017-01-02 00:00:00, 2017-01-03 00:00:00],\n               (2017-01-03 00:00:00, 2017-01-04 00:00:00]],\n              dtype='interval[datetime64[ns], right]')\n\nThe ``freq`` parameter specifies the frequency between the left and right.\nendpoints of the individual intervals within the ``IntervalIndex``.  For\nnumeric ``start`` and ``end``, the frequency must also be numeric.\n\n>>> pd.interval_range(start=0, periods=4, freq=1.5)\nIntervalIndex([(0.0, 1.5], (1.5, 3.0], (3.0, 4.5], (4.5, 6.0]],\n              dtype='interval[float64, right]')\n\nSimilarly, for datetime-like ``start`` and ``end``, the frequency must be\nconvertible to a DateOffset.\n\n>>> pd.interval_range(start=pd.Timestamp('2017-01-01'),\n...                   periods=3, freq='MS')\nIntervalIndex([(2017-01-01 00:00:00, 2017-02-01 00:00:00],\n               (2017-02-01 00:00:00, 2017-03-01 00:00:00],\n               (2017-03-01 00:00:00, 2017-04-01 00:00:00]],\n              dtype='interval[datetime64[ns], right]')\n\nSpecify ``start``, ``end``, and ``periods``; the frequency is generated\nautomatically (linearly spaced).\n\n>>> pd.interval_range(start=0, end=6, periods=4)\nIntervalIndex([(0.0, 1.5], (1.5, 3.0], (3.0, 4.5], (4.5, 6.0]],\n          dtype='interval[float64, right]')\n\nThe ``closed`` parameter specifies which endpoints of the individual\nintervals within the ``IntervalIndex`` are closed.\n\n>>> pd.interval_range(end=5, periods=4, closed='both')\nIntervalIndex([[1, 2], [2, 3], [3, 4], [4, 5]],\n              dtype='interval[int64, both]')"
  },
  {
    "symbol": "pandas.isna",
    "signature": "(obj: 'object') -> 'bool | npt.NDArray[np.bool_] | NDFrame'",
    "doc": "Detect missing values for an array-like object.\n\nThis function takes a scalar or array-like object and indicates\nwhether values are missing (``NaN`` in numeric arrays, ``None`` or ``NaN``\nin object arrays, ``NaT`` in datetimelike).\n\nParameters\n----------\nobj : scalar or array-like\n    Object to check for null or missing values.\n\nReturns\n-------\nbool or array-like of bool\n    For scalar input, returns a scalar boolean.\n    For array input, returns an array of boolean indicating whether each\n    corresponding element is missing.\n\nSee Also\n--------\nnotna : Boolean inverse of pandas.isna.\nSeries.isna : Detect missing values in a Series.\nDataFrame.isna : Detect missing values in a DataFrame.\nIndex.isna : Detect missing values in an Index.\n\nExamples\n--------\nScalar arguments (including strings) result in a scalar boolean.\n\n>>> pd.isna('dog')\nFalse\n\n>>> pd.isna(pd.NA)\nTrue\n\n>>> pd.isna(np.nan)\nTrue\n\nndarrays result in an ndarray of booleans.\n\n>>> array = np.array([[1, np.nan, 3], [4, 5, np.nan]])\n>>> array\narray([[ 1., nan,  3.],\n       [ 4.,  5., nan]])\n>>> pd.isna(array)\narray([[False,  True, False],\n       [False, False,  True]])\n\nFor indexes, an ndarray of booleans is returned.\n\n>>> index = pd.DatetimeIndex([\"2017-07-05\", \"2017-07-06\", None,\n...                           \"2017-07-08\"])\n>>> index\nDatetimeIndex(['2017-07-05', '2017-07-06', 'NaT', '2017-07-08'],\n              dtype='datetime64[ns]', freq=None)\n>>> pd.isna(index)\narray([False, False,  True, False])\n\nFor Series and DataFrame, the same type is returned, containing booleans.\n\n>>> df = pd.DataFrame([['ant', 'bee', 'cat'], ['dog', None, 'fly']])\n>>> df\n     0     1    2\n0  ant   bee  cat\n1  dog  None  fly\n>>> pd.isna(df)\n       0      1      2\n0  False  False  False\n1  False   True  False\n\n>>> pd.isna(df[1])\n0    False\n1     True\nName: 1, dtype: bool"
  },
  {
    "symbol": "pandas.isnull",
    "signature": "(obj: 'object') -> 'bool | npt.NDArray[np.bool_] | NDFrame'",
    "doc": "Detect missing values for an array-like object.\n\nThis function takes a scalar or array-like object and indicates\nwhether values are missing (``NaN`` in numeric arrays, ``None`` or ``NaN``\nin object arrays, ``NaT`` in datetimelike).\n\nParameters\n----------\nobj : scalar or array-like\n    Object to check for null or missing values.\n\nReturns\n-------\nbool or array-like of bool\n    For scalar input, returns a scalar boolean.\n    For array input, returns an array of boolean indicating whether each\n    corresponding element is missing.\n\nSee Also\n--------\nnotna : Boolean inverse of pandas.isna.\nSeries.isna : Detect missing values in a Series.\nDataFrame.isna : Detect missing values in a DataFrame.\nIndex.isna : Detect missing values in an Index.\n\nExamples\n--------\nScalar arguments (including strings) result in a scalar boolean.\n\n>>> pd.isna('dog')\nFalse\n\n>>> pd.isna(pd.NA)\nTrue\n\n>>> pd.isna(np.nan)\nTrue\n\nndarrays result in an ndarray of booleans.\n\n>>> array = np.array([[1, np.nan, 3], [4, 5, np.nan]])\n>>> array\narray([[ 1., nan,  3.],\n       [ 4.,  5., nan]])\n>>> pd.isna(array)\narray([[False,  True, False],\n       [False, False,  True]])\n\nFor indexes, an ndarray of booleans is returned.\n\n>>> index = pd.DatetimeIndex([\"2017-07-05\", \"2017-07-06\", None,\n...                           \"2017-07-08\"])\n>>> index\nDatetimeIndex(['2017-07-05', '2017-07-06', 'NaT', '2017-07-08'],\n              dtype='datetime64[ns]', freq=None)\n>>> pd.isna(index)\narray([False, False,  True, False])\n\nFor Series and DataFrame, the same type is returned, containing booleans.\n\n>>> df = pd.DataFrame([['ant', 'bee', 'cat'], ['dog', None, 'fly']])\n>>> df\n     0     1    2\n0  ant   bee  cat\n1  dog  None  fly\n>>> pd.isna(df)\n       0      1      2\n0  False  False  False\n1  False   True  False\n\n>>> pd.isna(df[1])\n0    False\n1     True\nName: 1, dtype: bool"
  },
  {
    "symbol": "pandas.json_normalize",
    "signature": "(data: 'dict | list[dict]', record_path: 'str | list | None' = None, meta: 'str | list[str | list[str]] | None' = None, meta_prefix: 'str | None' = None, record_prefix: 'str | None' = None, errors: 'IgnoreRaise' = 'raise', sep: 'str' = '.', max_level: 'int | None' = None) -> 'DataFrame'",
    "doc": "Normalize semi-structured JSON data into a flat table.\n\nParameters\n----------\ndata : dict or list of dicts\n    Unserialized JSON objects.\nrecord_path : str or list of str, default None\n    Path in each object to list of records. If not passed, data will be\n    assumed to be an array of records.\nmeta : list of paths (str or list of str), default None\n    Fields to use as metadata for each record in resulting table.\nmeta_prefix : str, default None\n    If True, prefix records with dotted (?) path, e.g. foo.bar.field if\n    meta is ['foo', 'bar'].\nrecord_prefix : str, default None\n    If True, prefix records with dotted (?) path, e.g. foo.bar.field if\n    path to records is ['foo', 'bar'].\nerrors : {'raise', 'ignore'}, default 'raise'\n    Configures error handling.\n\n    * 'ignore' : will ignore KeyError if keys listed in meta are not\n      always present.\n    * 'raise' : will raise KeyError if keys listed in meta are not\n      always present.\nsep : str, default '.'\n    Nested records will generate names separated by sep.\n    e.g., for sep='.', {'foo': {'bar': 0}} -> foo.bar.\nmax_level : int, default None\n    Max number of levels(depth of dict) to normalize.\n    if None, normalizes all levels.\n\nReturns\n-------\nframe : DataFrame\nNormalize semi-structured JSON data into a flat table.\n\nExamples\n--------\n>>> data = [\n...     {\"id\": 1, \"name\": {\"first\": \"Coleen\", \"last\": \"Volk\"}},\n...     {\"name\": {\"given\": \"Mark\", \"family\": \"Regner\"}},\n...     {\"id\": 2, \"name\": \"Faye Raker\"},\n... ]\n>>> pd.json_normalize(data)\n    id name.first name.last name.given name.family        name\n0  1.0     Coleen      Volk        NaN         NaN         NaN\n1  NaN        NaN       NaN       Mark      Regner         NaN\n2  2.0        NaN       NaN        NaN         NaN  Faye Raker\n\n>>> data = [\n...     {\n...         \"id\": 1,\n...         \"name\": \"Cole Volk\",\n...         \"fitness\": {\"height\": 130, \"weight\": 60},\n...     },\n...     {\"name\": \"Mark Reg\", \"fitness\": {\"height\": 130, \"weight\": 60}},\n...     {\n...         \"id\": 2,\n...         \"name\": \"Faye Raker\",\n...         \"fitness\": {\"height\": 130, \"weight\": 60},\n...     },\n... ]\n>>> pd.json_normalize(data, max_level=0)\n    id        name                        fitness\n0  1.0   Cole Volk  {'height': 130, 'weight': 60}\n1  NaN    Mark Reg  {'height': 130, 'weight': 60}\n2  2.0  Faye Raker  {'height': 130, 'weight': 60}\n\nNormalizes nested data up to level 1.\n\n>>> data = [\n...     {\n...         \"id\": 1,\n...         \"name\": \"Cole Volk\",\n...         \"fitness\": {\"height\": 130, \"weight\": 60},\n...     },\n...     {\"name\": \"Mark Reg\", \"fitness\": {\"height\": 130, \"weight\": 60}},\n...     {\n...         \"id\": 2,\n...         \"name\": \"Faye Raker\",\n...         \"fitness\": {\"height\": 130, \"weight\": 60},\n...     },\n... ]\n>>> pd.json_normalize(data, max_level=1)\n    id        name  fitness.height  fitness.weight\n0  1.0   Cole Volk             130              60\n1  NaN    Mark Reg             130              60\n2  2.0  Faye Raker             130              60\n\n>>> data = [\n...     {\n...         \"state\": \"Florida\",\n...         \"shortname\": \"FL\",\n...         \"info\": {\"governor\": \"Rick Scott\"},\n...         \"counties\": [\n...             {\"name\": \"Dade\", \"population\": 12345},\n...             {\"name\": \"Broward\", \"population\": 40000},\n...             {\"name\": \"Palm Beach\", \"population\": 60000},\n...         ],\n...     },\n...     {\n...         \"state\": \"Ohio\",\n...         \"shortname\": \"OH\",\n...         \"info\": {\"governor\": \"John Kasich\"},\n...         \"counties\": [\n...             {\"name\": \"Summit\", \"population\": 1234},\n...             {\"name\": \"Cuyahoga\", \"population\": 1337},\n...         ],\n...     },\n... ]\n>>> result = pd.json_normalize(\n...     data, \"counties\", [\"state\", \"shortname\", [\"info\", \"governor\"]]\n... )\n>>> result\n         name  population    state shortname info.governor\n0        Dade       12345   Florida    FL    Rick Scott\n1     Broward       40000   Florida    FL    Rick Scott\n2  Palm Beach       60000   Florida    FL    Rick Scott\n3      Summit        1234   Ohio       OH    John Kasich\n4    Cuyahoga        1337   Ohio       OH    John Kasich\n\n>>> data = {\"A\": [1, 2]}\n>>> pd.json_normalize(data, \"A\", record_prefix=\"Prefix.\")\n    Prefix.0\n0          1\n1          2\n\nReturns normalized data with columns prefixed with the given string."
  },
  {
    "symbol": "pandas.lreshape",
    "signature": "(data: 'DataFrame', groups: 'dict', dropna: 'bool' = True) -> 'DataFrame'",
    "doc": "Reshape wide-format data to long. Generalized inverse of DataFrame.pivot.\n\nAccepts a dictionary, ``groups``, in which each key is a new column name\nand each value is a list of old column names that will be \"melted\" under\nthe new column name as part of the reshape.\n\nParameters\n----------\ndata : DataFrame\n    The wide-format DataFrame.\ngroups : dict\n    {new_name : list_of_columns}.\ndropna : bool, default True\n    Do not include columns whose entries are all NaN.\n\nReturns\n-------\nDataFrame\n    Reshaped DataFrame.\n\nSee Also\n--------\nmelt : Unpivot a DataFrame from wide to long format, optionally leaving\n    identifiers set.\npivot : Create a spreadsheet-style pivot table as a DataFrame.\nDataFrame.pivot : Pivot without aggregation that can handle\n    non-numeric data.\nDataFrame.pivot_table : Generalization of pivot that can handle\n    duplicate values for one index/column pair.\nDataFrame.unstack : Pivot based on the index values instead of a\n    column.\nwide_to_long : Wide panel to long format. Less flexible but more\n    user-friendly than melt.\n\nExamples\n--------\n>>> data = pd.DataFrame({'hr1': [514, 573], 'hr2': [545, 526],\n...                      'team': ['Red Sox', 'Yankees'],\n...                      'year1': [2007, 2007], 'year2': [2008, 2008]})\n>>> data\n   hr1  hr2     team  year1  year2\n0  514  545  Red Sox   2007   2008\n1  573  526  Yankees   2007   2008\n\n>>> pd.lreshape(data, {'year': ['year1', 'year2'], 'hr': ['hr1', 'hr2']})\n      team  year   hr\n0  Red Sox  2007  514\n1  Yankees  2007  573\n2  Red Sox  2008  545\n3  Yankees  2008  526"
  },
  {
    "symbol": "pandas.melt",
    "signature": "(frame: 'DataFrame', id_vars=None, value_vars=None, var_name=None, value_name: 'Hashable' = 'value', col_level=None, ignore_index: 'bool' = True) -> 'DataFrame'",
    "doc": "Unpivot a DataFrame from wide to long format, optionally leaving identifiers set.\n\nThis function is useful to massage a DataFrame into a format where one\nor more columns are identifier variables (`id_vars`), while all other\ncolumns, considered measured variables (`value_vars`), are \"unpivoted\" to\nthe row axis, leaving just two non-identifier columns, 'variable' and\n'value'.\n\nParameters\n----------\nid_vars : scalar, tuple, list, or ndarray, optional\n    Column(s) to use as identifier variables.\nvalue_vars : scalar, tuple, list, or ndarray, optional\n    Column(s) to unpivot. If not specified, uses all columns that\n    are not set as `id_vars`.\nvar_name : scalar, default None\n    Name to use for the 'variable' column. If None it uses\n    ``frame.columns.name`` or 'variable'.\nvalue_name : scalar, default 'value'\n    Name to use for the 'value' column, can't be an existing column label.\ncol_level : scalar, optional\n    If columns are a MultiIndex then use this level to melt.\nignore_index : bool, default True\n    If True, original index is ignored. If False, the original index is retained.\n    Index labels will be repeated as necessary.\n\nReturns\n-------\nDataFrame\n    Unpivoted DataFrame.\n\nSee Also\n--------\nDataFrame.melt : Identical method.\npivot_table : Create a spreadsheet-style pivot table as a DataFrame.\nDataFrame.pivot : Return reshaped DataFrame organized\n    by given index / column values.\nDataFrame.explode : Explode a DataFrame from list-like\n        columns to long format.\n\nNotes\n-----\nReference :ref:`the user guide <reshaping.melt>` for more examples.\n\nExamples\n--------\n>>> df = pd.DataFrame({'A': {0: 'a', 1: 'b', 2: 'c'},\n...                    'B': {0: 1, 1: 3, 2: 5},\n...                    'C': {0: 2, 1: 4, 2: 6}})\n>>> df\n   A  B  C\n0  a  1  2\n1  b  3  4\n2  c  5  6\n\n>>> pd.melt(df, id_vars=['A'], value_vars=['B'])\n   A variable  value\n0  a        B      1\n1  b        B      3\n2  c        B      5\n\n>>> pd.melt(df, id_vars=['A'], value_vars=['B', 'C'])\n   A variable  value\n0  a        B      1\n1  b        B      3\n2  c        B      5\n3  a        C      2\n4  b        C      4\n5  c        C      6\n\nThe names of 'variable' and 'value' columns can be customized:\n\n>>> pd.melt(df, id_vars=['A'], value_vars=['B'],\n...         var_name='myVarname', value_name='myValname')\n   A myVarname  myValname\n0  a         B          1\n1  b         B          3\n2  c         B          5\n\nOriginal index values can be kept around:\n\n>>> pd.melt(df, id_vars=['A'], value_vars=['B', 'C'], ignore_index=False)\n   A variable  value\n0  a        B      1\n1  b        B      3\n2  c        B      5\n0  a        C      2\n1  b        C      4\n2  c        C      6\n\nIf you have multi-index columns:\n\n>>> df.columns = [list('ABC'), list('DEF')]\n>>> df\n   A  B  C\n   D  E  F\n0  a  1  2\n1  b  3  4\n2  c  5  6\n\n>>> pd.melt(df, col_level=0, id_vars=['A'], value_vars=['B'])\n   A variable  value\n0  a        B      1\n1  b        B      3\n2  c        B      5\n\n>>> pd.melt(df, id_vars=[('A', 'D')], value_vars=[('B', 'E')])\n  (A, D) variable_0 variable_1  value\n0      a          B          E      1\n1      b          B          E      3\n2      c          B          E      5"
  },
  {
    "symbol": "pandas.merge",
    "signature": "(left: 'DataFrame | Series', right: 'DataFrame | Series', how: 'MergeHow' = 'inner', on: 'IndexLabel | AnyArrayLike | None' = None, left_on: 'IndexLabel | AnyArrayLike | None' = None, right_on: 'IndexLabel | AnyArrayLike | None' = None, left_index: 'bool' = False, right_index: 'bool' = False, sort: 'bool' = False, suffixes: 'Suffixes' = ('_x', '_y'), copy: 'bool | None' = None, indicator: 'str | bool' = False, validate: 'str | None' = None) -> 'DataFrame'",
    "doc": "Merge DataFrame or named Series objects with a database-style join.\n\nA named Series object is treated as a DataFrame with a single named column.\n\nThe join is done on columns or indexes. If joining columns on\ncolumns, the DataFrame indexes *will be ignored*. Otherwise if joining indexes\non indexes or indexes on a column or columns, the index will be passed on.\nWhen performing a cross merge, no column specifications to merge on are\nallowed.\n\n.. warning::\n\n    If both key columns contain rows where the key is a null value, those\n    rows will be matched against each other. This is different from usual SQL\n    join behaviour and can lead to unexpected results.\n\nParameters\n----------\nleft : DataFrame or named Series\nright : DataFrame or named Series\n    Object to merge with.\nhow : {'left', 'right', 'outer', 'inner', 'cross'}, default 'inner'\n    Type of merge to be performed.\n\n    * left: use only keys from left frame, similar to a SQL left outer join;\n      preserve key order.\n    * right: use only keys from right frame, similar to a SQL right outer join;\n      preserve key order.\n    * outer: use union of keys from both frames, similar to a SQL full outer\n      join; sort keys lexicographically.\n    * inner: use intersection of keys from both frames, similar to a SQL inner\n      join; preserve the order of the left keys.\n    * cross: creates the cartesian product from both frames, preserves the order\n      of the left keys.\non : label or list\n    Column or index level names to join on. These must be found in both\n    DataFrames. If `on` is None and not merging on indexes then this defaults\n    to the intersection of the columns in both DataFrames.\nleft_on : label or list, or array-like\n    Column or index level names to join on in the left DataFrame. Can also\n    be an array or list of arrays of the length of the left DataFrame.\n    These arrays are treated as if they are columns.\nright_on : label or list, or array-like\n    Column or index level names to join on in the right DataFrame. Can also\n    be an array or list of arrays of the length of the right DataFrame.\n    These arrays are treated as if they are columns.\nleft_index : bool, default False\n    Use the index from the left DataFrame as the join key(s). If it is a\n    MultiIndex, the number of keys in the other DataFrame (either the index\n    or a number of columns) must match the number of levels.\nright_index : bool, default False\n    Use the index from the right DataFrame as the join key. Same caveats as\n    left_index.\nsort : bool, default False\n    Sort the join keys lexicographically in the result DataFrame. If False,\n    the order of the join keys depends on the join type (how keyword).\nsuffixes : list-like, default is (\"_x\", \"_y\")\n    A length-2 sequence where each element is optionally a string\n    indicating the suffix to add to overlapping column names in\n    `left` and `right` respectively. Pass a value of `None` instead\n    of a string to indicate that the column name from `left` or\n    `right` should be left as-is, with no suffix. At least one of the\n    values must not be None.\ncopy : bool, default True\n    If False, avoid copy if possible.\n\n    .. note::\n        The `copy` keyword will change behavior in pandas 3.0.\n        `Copy-on-Write\n        <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n        will be enabled by default, which means that all methods with a\n        `copy` keyword will use a lazy copy mechanism to defer the copy and\n        ignore the `copy` keyword. The `copy` keyword will be removed in a\n        future version of pandas.\n\n        You can already get the future behavior and improvements through\n        enabling copy on write ``pd.options.mode.copy_on_write = True``\nindicator : bool or str, default False\n    If True, adds a column to the output DataFrame called \"_merge\" with\n    information on the source of each row. The column can be given a different\n    name by providing a string argument. The column will have a Categorical\n    type with the value of \"left_only\" for observations whose merge key only\n    appears in the left DataFrame, \"right_only\" for observations\n    whose merge key only appears in the right DataFrame, and \"both\"\n    if the observation's merge key is found in both DataFrames.\n\nvalidate : str, optional\n    If specified, checks if merge is of specified type.\n\n    * \"one_to_one\" or \"1:1\": check if merge keys are unique in both\n      left and right datasets.\n    * \"one_to_many\" or \"1:m\": check if merge keys are unique in left\n      dataset.\n    * \"many_to_one\" or \"m:1\": check if merge keys are unique in right\n      dataset.\n    * \"many_to_many\" or \"m:m\": allowed, but does not result in checks.\n\nReturns\n-------\nDataFrame\n    A DataFrame of the two merged objects.\n\nSee Also\n--------\nmerge_ordered : Merge with optional filling/interpolation.\nmerge_asof : Merge on nearest keys.\nDataFrame.join : Similar method using indices.\n\nExamples\n--------\n>>> df1 = pd.DataFrame({'lkey': ['foo', 'bar', 'baz', 'foo'],\n...                     'value': [1, 2, 3, 5]})\n>>> df2 = pd.DataFrame({'rkey': ['foo', 'bar', 'baz', 'foo'],\n...                     'value': [5, 6, 7, 8]})\n>>> df1\n    lkey value\n0   foo      1\n1   bar      2\n2   baz      3\n3   foo      5\n>>> df2\n    rkey value\n0   foo      5\n1   bar      6\n2   baz      7\n3   foo      8\n\nMerge df1 and df2 on the lkey and rkey columns. The value columns have\nthe default suffixes, _x and _y, appended.\n\n>>> df1.merge(df2, left_on='lkey', right_on='rkey')\n  lkey  value_x rkey  value_y\n0  foo        1  foo        5\n1  foo        1  foo        8\n2  bar        2  bar        6\n3  baz        3  baz        7\n4  foo        5  foo        5\n5  foo        5  foo        8\n\nMerge DataFrames df1 and df2 with specified left and right suffixes\nappended to any overlapping columns.\n\n>>> df1.merge(df2, left_on='lkey', right_on='rkey',\n...           suffixes=('_left', '_right'))\n  lkey  value_left rkey  value_right\n0  foo           1  foo            5\n1  foo           1  foo            8\n2  bar           2  bar            6\n3  baz           3  baz            7\n4  foo           5  foo            5\n5  foo           5  foo            8\n\nMerge DataFrames df1 and df2, but raise an exception if the DataFrames have\nany overlapping columns.\n\n>>> df1.merge(df2, left_on='lkey', right_on='rkey', suffixes=(False, False))\nTraceback (most recent call last):\n...\nValueError: columns overlap but no suffix specified:\n    Index(['value'], dtype='object')\n\n>>> df1 = pd.DataFrame({'a': ['foo', 'bar'], 'b': [1, 2]})\n>>> df2 = pd.DataFrame({'a': ['foo', 'baz'], 'c': [3, 4]})\n>>> df1\n      a  b\n0   foo  1\n1   bar  2\n>>> df2\n      a  c\n0   foo  3\n1   baz  4\n\n>>> df1.merge(df2, how='inner', on='a')\n      a  b  c\n0   foo  1  3\n\n>>> df1.merge(df2, how='left', on='a')\n      a  b  c\n0   foo  1  3.0\n1   bar  2  NaN\n\n>>> df1 = pd.DataFrame({'left': ['foo', 'bar']})\n>>> df2 = pd.DataFrame({'right': [7, 8]})\n>>> df1\n    left\n0   foo\n1   bar\n>>> df2\n    right\n0   7\n1   8\n\n>>> df1.merge(df2, how='cross')\n   left  right\n0   foo      7\n1   foo      8\n2   bar      7\n3   bar      8"
  },
  {
    "symbol": "pandas.merge_asof",
    "signature": "(left: 'DataFrame | Series', right: 'DataFrame | Series', on: 'IndexLabel | None' = None, left_on: 'IndexLabel | None' = None, right_on: 'IndexLabel | None' = None, left_index: 'bool' = False, right_index: 'bool' = False, by=None, left_by=None, right_by=None, suffixes: 'Suffixes' = ('_x', '_y'), tolerance: 'int | Timedelta | None' = None, allow_exact_matches: 'bool' = True, direction: 'str' = 'backward') -> 'DataFrame'",
    "doc": "Perform a merge by key distance.\n\nThis is similar to a left-join except that we match on nearest\nkey rather than equal keys. Both DataFrames must be sorted by the key.\n\nFor each row in the left DataFrame:\n\n  - A \"backward\" search selects the last row in the right DataFrame whose\n    'on' key is less than or equal to the left's key.\n\n  - A \"forward\" search selects the first row in the right DataFrame whose\n    'on' key is greater than or equal to the left's key.\n\n  - A \"nearest\" search selects the row in the right DataFrame whose 'on'\n    key is closest in absolute distance to the left's key.\n\nOptionally match on equivalent keys with 'by' before searching with 'on'.\n\nParameters\n----------\nleft : DataFrame or named Series\nright : DataFrame or named Series\non : label\n    Field name to join on. Must be found in both DataFrames.\n    The data MUST be ordered. Furthermore this must be a numeric column,\n    such as datetimelike, integer, or float. On or left_on/right_on\n    must be given.\nleft_on : label\n    Field name to join on in left DataFrame.\nright_on : label\n    Field name to join on in right DataFrame.\nleft_index : bool\n    Use the index of the left DataFrame as the join key.\nright_index : bool\n    Use the index of the right DataFrame as the join key.\nby : column name or list of column names\n    Match on these columns before performing merge operation.\nleft_by : column name\n    Field names to match on in the left DataFrame.\nright_by : column name\n    Field names to match on in the right DataFrame.\nsuffixes : 2-length sequence (tuple, list, ...)\n    Suffix to apply to overlapping column names in the left and right\n    side, respectively.\ntolerance : int or Timedelta, optional, default None\n    Select asof tolerance within this range; must be compatible\n    with the merge index.\nallow_exact_matches : bool, default True\n\n    - If True, allow matching with the same 'on' value\n      (i.e. less-than-or-equal-to / greater-than-or-equal-to)\n    - If False, don't match the same 'on' value\n      (i.e., strictly less-than / strictly greater-than).\n\ndirection : 'backward' (default), 'forward', or 'nearest'\n    Whether to search for prior, subsequent, or closest matches.\n\nReturns\n-------\nDataFrame\n\nSee Also\n--------\nmerge : Merge with a database-style join.\nmerge_ordered : Merge with optional filling/interpolation.\n\nExamples\n--------\n>>> left = pd.DataFrame({\"a\": [1, 5, 10], \"left_val\": [\"a\", \"b\", \"c\"]})\n>>> left\n    a left_val\n0   1        a\n1   5        b\n2  10        c\n\n>>> right = pd.DataFrame({\"a\": [1, 2, 3, 6, 7], \"right_val\": [1, 2, 3, 6, 7]})\n>>> right\n   a  right_val\n0  1          1\n1  2          2\n2  3          3\n3  6          6\n4  7          7\n\n>>> pd.merge_asof(left, right, on=\"a\")\n    a left_val  right_val\n0   1        a          1\n1   5        b          3\n2  10        c          7\n\n>>> pd.merge_asof(left, right, on=\"a\", allow_exact_matches=False)\n    a left_val  right_val\n0   1        a        NaN\n1   5        b        3.0\n2  10        c        7.0\n\n>>> pd.merge_asof(left, right, on=\"a\", direction=\"forward\")\n    a left_val  right_val\n0   1        a        1.0\n1   5        b        6.0\n2  10        c        NaN\n\n>>> pd.merge_asof(left, right, on=\"a\", direction=\"nearest\")\n    a left_val  right_val\n0   1        a          1\n1   5        b          6\n2  10        c          7\n\nWe can use indexed DataFrames as well.\n\n>>> left = pd.DataFrame({\"left_val\": [\"a\", \"b\", \"c\"]}, index=[1, 5, 10])\n>>> left\n   left_val\n1         a\n5         b\n10        c\n\n>>> right = pd.DataFrame({\"right_val\": [1, 2, 3, 6, 7]}, index=[1, 2, 3, 6, 7])\n>>> right\n   right_val\n1          1\n2          2\n3          3\n6          6\n7          7\n\n>>> pd.merge_asof(left, right, left_index=True, right_index=True)\n   left_val  right_val\n1         a          1\n5         b          3\n10        c          7\n\nHere is a real-world times-series example\n\n>>> quotes = pd.DataFrame(\n...     {\n...         \"time\": [\n...             pd.Timestamp(\"2016-05-25 13:30:00.023\"),\n...             pd.Timestamp(\"2016-05-25 13:30:00.023\"),\n...             pd.Timestamp(\"2016-05-25 13:30:00.030\"),\n...             pd.Timestamp(\"2016-05-25 13:30:00.041\"),\n...             pd.Timestamp(\"2016-05-25 13:30:00.048\"),\n...             pd.Timestamp(\"2016-05-25 13:30:00.049\"),\n...             pd.Timestamp(\"2016-05-25 13:30:00.072\"),\n...             pd.Timestamp(\"2016-05-25 13:30:00.075\")\n...         ],\n...         \"ticker\": [\n...                \"GOOG\",\n...                \"MSFT\",\n...                \"MSFT\",\n...                \"MSFT\",\n...                \"GOOG\",\n...                \"AAPL\",\n...                \"GOOG\",\n...                \"MSFT\"\n...            ],\n...            \"bid\": [720.50, 51.95, 51.97, 51.99, 720.50, 97.99, 720.50, 52.01],\n...            \"ask\": [720.93, 51.96, 51.98, 52.00, 720.93, 98.01, 720.88, 52.03]\n...     }\n... )\n>>> quotes\n                     time ticker     bid     ask\n0 2016-05-25 13:30:00.023   GOOG  720.50  720.93\n1 2016-05-25 13:30:00.023   MSFT   51.95   51.96\n2 2016-05-25 13:30:00.030   MSFT   51.97   51.98\n3 2016-05-25 13:30:00.041   MSFT   51.99   52.00\n4 2016-05-25 13:30:00.048   GOOG  720.50  720.93\n5 2016-05-25 13:30:00.049   AAPL   97.99   98.01\n6 2016-05-25 13:30:00.072   GOOG  720.50  720.88\n7 2016-05-25 13:30:00.075   MSFT   52.01   52.03\n\n>>> trades = pd.DataFrame(\n...        {\n...            \"time\": [\n...                pd.Timestamp(\"2016-05-25 13:30:00.023\"),\n...                pd.Timestamp(\"2016-05-25 13:30:00.038\"),\n...                pd.Timestamp(\"2016-05-25 13:30:00.048\"),\n...                pd.Timestamp(\"2016-05-25 13:30:00.048\"),\n...                pd.Timestamp(\"2016-05-25 13:30:00.048\")\n...            ],\n...            \"ticker\": [\"MSFT\", \"MSFT\", \"GOOG\", \"GOOG\", \"AAPL\"],\n...            \"price\": [51.95, 51.95, 720.77, 720.92, 98.0],\n...            \"quantity\": [75, 155, 100, 100, 100]\n...        }\n...    )\n>>> trades\n                     time ticker   price  quantity\n0 2016-05-25 13:30:00.023   MSFT   51.95        75\n1 2016-05-25 13:30:00.038   MSFT   51.95       155\n2 2016-05-25 13:30:00.048   GOOG  720.77       100\n3 2016-05-25 13:30:00.048   GOOG  720.92       100\n4 2016-05-25 13:30:00.048   AAPL   98.00       100\n\nBy default we are taking the asof of the quotes\n\n>>> pd.merge_asof(trades, quotes, on=\"time\", by=\"ticker\")\n                     time ticker   price  quantity     bid     ask\n0 2016-05-25 13:30:00.023   MSFT   51.95        75   51.95   51.96\n1 2016-05-25 13:30:00.038   MSFT   51.95       155   51.97   51.98\n2 2016-05-25 13:30:00.048   GOOG  720.77       100  720.50  720.93\n3 2016-05-25 13:30:00.048   GOOG  720.92       100  720.50  720.93\n4 2016-05-25 13:30:00.048   AAPL   98.00       100     NaN     NaN\n\nWe only asof within 2ms between the quote time and the trade time\n\n>>> pd.merge_asof(\n...     trades, quotes, on=\"time\", by=\"ticker\", tolerance=pd.Timedelta(\"2ms\")\n... )\n                     time ticker   price  quantity     bid     ask\n0 2016-05-25 13:30:00.023   MSFT   51.95        75   51.95   51.96\n1 2016-05-25 13:30:00.038   MSFT   51.95       155     NaN     NaN\n2 2016-05-25 13:30:00.048   GOOG  720.77       100  720.50  720.93\n3 2016-05-25 13:30:00.048   GOOG  720.92       100  720.50  720.93\n4 2016-05-25 13:30:00.048   AAPL   98.00       100     NaN     NaN\n\nWe only asof within 10ms between the quote time and the trade time\nand we exclude exact matches on time. However *prior* data will\npropagate forward\n\n>>> pd.merge_asof(\n...     trades,\n...     quotes,\n...     on=\"time\",\n...     by=\"ticker\",\n...     tolerance=pd.Timedelta(\"10ms\"),\n...     allow_exact_matches=False\n... )\n                     time ticker   price  quantity     bid     ask\n0 2016-05-25 13:30:00.023   MSFT   51.95        75     NaN     NaN\n1 2016-05-25 13:30:00.038   MSFT   51.95       155   51.97   51.98\n2 2016-05-25 13:30:00.048   GOOG  720.77       100     NaN     NaN\n3 2016-05-25 13:30:00.048   GOOG  720.92       100     NaN     NaN\n4 2016-05-25 13:30:00.048   AAPL   98.00       100     NaN     NaN"
  },
  {
    "symbol": "pandas.merge_ordered",
    "signature": "(left: 'DataFrame | Series', right: 'DataFrame | Series', on: 'IndexLabel | None' = None, left_on: 'IndexLabel | None' = None, right_on: 'IndexLabel | None' = None, left_by=None, right_by=None, fill_method: 'str | None' = None, suffixes: 'Suffixes' = ('_x', '_y'), how: 'JoinHow' = 'outer') -> 'DataFrame'",
    "doc": "Perform a merge for ordered data with optional filling/interpolation.\n\nDesigned for ordered data like time series data. Optionally\nperform group-wise merge (see examples).\n\nParameters\n----------\nleft : DataFrame or named Series\nright : DataFrame or named Series\non : label or list\n    Field names to join on. Must be found in both DataFrames.\nleft_on : label or list, or array-like\n    Field names to join on in left DataFrame. Can be a vector or list of\n    vectors of the length of the DataFrame to use a particular vector as\n    the join key instead of columns.\nright_on : label or list, or array-like\n    Field names to join on in right DataFrame or vector/list of vectors per\n    left_on docs.\nleft_by : column name or list of column names\n    Group left DataFrame by group columns and merge piece by piece with\n    right DataFrame. Must be None if either left or right are a Series.\nright_by : column name or list of column names\n    Group right DataFrame by group columns and merge piece by piece with\n    left DataFrame. Must be None if either left or right are a Series.\nfill_method : {'ffill', None}, default None\n    Interpolation method for data.\nsuffixes : list-like, default is (\"_x\", \"_y\")\n    A length-2 sequence where each element is optionally a string\n    indicating the suffix to add to overlapping column names in\n    `left` and `right` respectively. Pass a value of `None` instead\n    of a string to indicate that the column name from `left` or\n    `right` should be left as-is, with no suffix. At least one of the\n    values must not be None.\n\nhow : {'left', 'right', 'outer', 'inner'}, default 'outer'\n    * left: use only keys from left frame (SQL: left outer join)\n    * right: use only keys from right frame (SQL: right outer join)\n    * outer: use union of keys from both frames (SQL: full outer join)\n    * inner: use intersection of keys from both frames (SQL: inner join).\n\nReturns\n-------\nDataFrame\n    The merged DataFrame output type will be the same as\n    'left', if it is a subclass of DataFrame.\n\nSee Also\n--------\nmerge : Merge with a database-style join.\nmerge_asof : Merge on nearest keys.\n\nExamples\n--------\n>>> from pandas import merge_ordered\n>>> df1 = pd.DataFrame(\n...     {\n...         \"key\": [\"a\", \"c\", \"e\", \"a\", \"c\", \"e\"],\n...         \"lvalue\": [1, 2, 3, 1, 2, 3],\n...         \"group\": [\"a\", \"a\", \"a\", \"b\", \"b\", \"b\"]\n...     }\n... )\n>>> df1\n  key  lvalue group\n0   a       1     a\n1   c       2     a\n2   e       3     a\n3   a       1     b\n4   c       2     b\n5   e       3     b\n\n>>> df2 = pd.DataFrame({\"key\": [\"b\", \"c\", \"d\"], \"rvalue\": [1, 2, 3]})\n>>> df2\n  key  rvalue\n0   b       1\n1   c       2\n2   d       3\n\n>>> merge_ordered(df1, df2, fill_method=\"ffill\", left_by=\"group\")\n  key  lvalue group  rvalue\n0   a       1     a     NaN\n1   b       1     a     1.0\n2   c       2     a     2.0\n3   d       2     a     3.0\n4   e       3     a     3.0\n5   a       1     b     NaN\n6   b       1     b     1.0\n7   c       2     b     2.0\n8   d       2     b     3.0\n9   e       3     b     3.0"
  },
  {
    "symbol": "pandas.notna",
    "signature": "(obj: 'object') -> 'bool | npt.NDArray[np.bool_] | NDFrame'",
    "doc": "Detect non-missing values for an array-like object.\n\nThis function takes a scalar or array-like object and indicates\nwhether values are valid (not missing, which is ``NaN`` in numeric\narrays, ``None`` or ``NaN`` in object arrays, ``NaT`` in datetimelike).\n\nParameters\n----------\nobj : array-like or object value\n    Object to check for *not* null or *non*-missing values.\n\nReturns\n-------\nbool or array-like of bool\n    For scalar input, returns a scalar boolean.\n    For array input, returns an array of boolean indicating whether each\n    corresponding element is valid.\n\nSee Also\n--------\nisna : Boolean inverse of pandas.notna.\nSeries.notna : Detect valid values in a Series.\nDataFrame.notna : Detect valid values in a DataFrame.\nIndex.notna : Detect valid values in an Index.\n\nExamples\n--------\nScalar arguments (including strings) result in a scalar boolean.\n\n>>> pd.notna('dog')\nTrue\n\n>>> pd.notna(pd.NA)\nFalse\n\n>>> pd.notna(np.nan)\nFalse\n\nndarrays result in an ndarray of booleans.\n\n>>> array = np.array([[1, np.nan, 3], [4, 5, np.nan]])\n>>> array\narray([[ 1., nan,  3.],\n       [ 4.,  5., nan]])\n>>> pd.notna(array)\narray([[ True, False,  True],\n       [ True,  True, False]])\n\nFor indexes, an ndarray of booleans is returned.\n\n>>> index = pd.DatetimeIndex([\"2017-07-05\", \"2017-07-06\", None,\n...                          \"2017-07-08\"])\n>>> index\nDatetimeIndex(['2017-07-05', '2017-07-06', 'NaT', '2017-07-08'],\n              dtype='datetime64[ns]', freq=None)\n>>> pd.notna(index)\narray([ True,  True, False,  True])\n\nFor Series and DataFrame, the same type is returned, containing booleans.\n\n>>> df = pd.DataFrame([['ant', 'bee', 'cat'], ['dog', None, 'fly']])\n>>> df\n     0     1    2\n0  ant   bee  cat\n1  dog  None  fly\n>>> pd.notna(df)\n      0      1     2\n0  True   True  True\n1  True  False  True\n\n>>> pd.notna(df[1])\n0     True\n1    False\nName: 1, dtype: bool"
  },
  {
    "symbol": "pandas.notnull",
    "signature": "(obj: 'object') -> 'bool | npt.NDArray[np.bool_] | NDFrame'",
    "doc": "Detect non-missing values for an array-like object.\n\nThis function takes a scalar or array-like object and indicates\nwhether values are valid (not missing, which is ``NaN`` in numeric\narrays, ``None`` or ``NaN`` in object arrays, ``NaT`` in datetimelike).\n\nParameters\n----------\nobj : array-like or object value\n    Object to check for *not* null or *non*-missing values.\n\nReturns\n-------\nbool or array-like of bool\n    For scalar input, returns a scalar boolean.\n    For array input, returns an array of boolean indicating whether each\n    corresponding element is valid.\n\nSee Also\n--------\nisna : Boolean inverse of pandas.notna.\nSeries.notna : Detect valid values in a Series.\nDataFrame.notna : Detect valid values in a DataFrame.\nIndex.notna : Detect valid values in an Index.\n\nExamples\n--------\nScalar arguments (including strings) result in a scalar boolean.\n\n>>> pd.notna('dog')\nTrue\n\n>>> pd.notna(pd.NA)\nFalse\n\n>>> pd.notna(np.nan)\nFalse\n\nndarrays result in an ndarray of booleans.\n\n>>> array = np.array([[1, np.nan, 3], [4, 5, np.nan]])\n>>> array\narray([[ 1., nan,  3.],\n       [ 4.,  5., nan]])\n>>> pd.notna(array)\narray([[ True, False,  True],\n       [ True,  True, False]])\n\nFor indexes, an ndarray of booleans is returned.\n\n>>> index = pd.DatetimeIndex([\"2017-07-05\", \"2017-07-06\", None,\n...                          \"2017-07-08\"])\n>>> index\nDatetimeIndex(['2017-07-05', '2017-07-06', 'NaT', '2017-07-08'],\n              dtype='datetime64[ns]', freq=None)\n>>> pd.notna(index)\narray([ True,  True, False,  True])\n\nFor Series and DataFrame, the same type is returned, containing booleans.\n\n>>> df = pd.DataFrame([['ant', 'bee', 'cat'], ['dog', None, 'fly']])\n>>> df\n     0     1    2\n0  ant   bee  cat\n1  dog  None  fly\n>>> pd.notna(df)\n      0      1     2\n0  True   True  True\n1  True  False  True\n\n>>> pd.notna(df[1])\n0     True\n1    False\nName: 1, dtype: bool"
  },
  {
    "symbol": "pandas.option_context",
    "signature": "(*args) -> 'None'",
    "doc": "Context manager to temporarily set options in the `with` statement context.\n\nYou need to invoke as ``option_context(pat, val, [(pat, val), ...])``.\n\nExamples\n--------\n>>> from pandas import option_context\n>>> with option_context('display.max_rows', 10, 'display.max_columns', 5):\n...     pass"
  },
  {
    "symbol": "pandas.period_range",
    "signature": "(start=None, end=None, periods: 'int | None' = None, freq=None, name: 'Hashable | None' = None) -> 'PeriodIndex'",
    "doc": "Return a fixed frequency PeriodIndex.\n\nThe day (calendar) is the default frequency.\n\nParameters\n----------\nstart : str, datetime, date, pandas.Timestamp, or period-like, default None\n    Left bound for generating periods.\nend : str, datetime, date, pandas.Timestamp, or period-like, default None\n    Right bound for generating periods.\nperiods : int, default None\n    Number of periods to generate.\nfreq : str or DateOffset, optional\n    Frequency alias. By default the freq is taken from `start` or `end`\n    if those are Period objects. Otherwise, the default is ``\"D\"`` for\n    daily frequency.\nname : str, default None\n    Name of the resulting PeriodIndex.\n\nReturns\n-------\nPeriodIndex\n\nNotes\n-----\nOf the three parameters: ``start``, ``end``, and ``periods``, exactly two\nmust be specified.\n\nTo learn more about the frequency strings, please see `this link\n<https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\nExamples\n--------\n>>> pd.period_range(start='2017-01-01', end='2018-01-01', freq='M')\nPeriodIndex(['2017-01', '2017-02', '2017-03', '2017-04', '2017-05', '2017-06',\n         '2017-07', '2017-08', '2017-09', '2017-10', '2017-11', '2017-12',\n         '2018-01'],\n        dtype='period[M]')\n\nIf ``start`` or ``end`` are ``Period`` objects, they will be used as anchor\nendpoints for a ``PeriodIndex`` with frequency matching that of the\n``period_range`` constructor.\n\n>>> pd.period_range(start=pd.Period('2017Q1', freq='Q'),\n...                 end=pd.Period('2017Q2', freq='Q'), freq='M')\nPeriodIndex(['2017-03', '2017-04', '2017-05', '2017-06'],\n            dtype='period[M]')"
  },
  {
    "symbol": "pandas.pivot",
    "signature": "(data: 'DataFrame', *, columns: 'IndexLabel', index: 'IndexLabel | lib.NoDefault' = <no_default>, values: 'IndexLabel | lib.NoDefault' = <no_default>) -> 'DataFrame'",
    "doc": "Return reshaped DataFrame organized by given index / column values.\n\nReshape data (produce a \"pivot\" table) based on column values. Uses\nunique values from specified `index` / `columns` to form axes of the\nresulting DataFrame. This function does not support data\naggregation, multiple values will result in a MultiIndex in the\ncolumns. See the :ref:`User Guide <reshaping>` for more on reshaping.\n\nParameters\n----------\ndata : DataFrame\ncolumns : str or object or a list of str\n    Column to use to make new frame's columns.\nindex : str or object or a list of str, optional\n    Column to use to make new frame's index. If not given, uses existing index.\nvalues : str, object or a list of the previous, optional\n    Column(s) to use for populating new frame's values. If not\n    specified, all remaining columns will be used and the result will\n    have hierarchically indexed columns.\n\nReturns\n-------\nDataFrame\n    Returns reshaped DataFrame.\n\nRaises\n------\nValueError:\n    When there are any `index`, `columns` combinations with multiple\n    values. `DataFrame.pivot_table` when you need to aggregate.\n\nSee Also\n--------\nDataFrame.pivot_table : Generalization of pivot that can handle\n    duplicate values for one index/column pair.\nDataFrame.unstack : Pivot based on the index values instead of a\n    column.\nwide_to_long : Wide panel to long format. Less flexible but more\n    user-friendly than melt.\n\nNotes\n-----\nFor finer-tuned control, see hierarchical indexing documentation along\nwith the related stack/unstack methods.\n\nReference :ref:`the user guide <reshaping.pivot>` for more examples.\n\nExamples\n--------\n>>> df = pd.DataFrame({'foo': ['one', 'one', 'one', 'two', 'two',\n...                            'two'],\n...                    'bar': ['A', 'B', 'C', 'A', 'B', 'C'],\n...                    'baz': [1, 2, 3, 4, 5, 6],\n...                    'zoo': ['x', 'y', 'z', 'q', 'w', 't']})\n>>> df\n    foo   bar  baz  zoo\n0   one   A    1    x\n1   one   B    2    y\n2   one   C    3    z\n3   two   A    4    q\n4   two   B    5    w\n5   two   C    6    t\n\n>>> df.pivot(index='foo', columns='bar', values='baz')\nbar  A   B   C\nfoo\none  1   2   3\ntwo  4   5   6\n\n>>> df.pivot(index='foo', columns='bar')['baz']\nbar  A   B   C\nfoo\none  1   2   3\ntwo  4   5   6\n\n>>> df.pivot(index='foo', columns='bar', values=['baz', 'zoo'])\n      baz       zoo\nbar   A  B  C   A  B  C\nfoo\none   1  2  3   x  y  z\ntwo   4  5  6   q  w  t\n\nYou could also assign a list of column names or a list of index names.\n\n>>> df = pd.DataFrame({\n...        \"lev1\": [1, 1, 1, 2, 2, 2],\n...        \"lev2\": [1, 1, 2, 1, 1, 2],\n...        \"lev3\": [1, 2, 1, 2, 1, 2],\n...        \"lev4\": [1, 2, 3, 4, 5, 6],\n...        \"values\": [0, 1, 2, 3, 4, 5]})\n>>> df\n    lev1 lev2 lev3 lev4 values\n0   1    1    1    1    0\n1   1    1    2    2    1\n2   1    2    1    3    2\n3   2    1    2    4    3\n4   2    1    1    5    4\n5   2    2    2    6    5\n\n>>> df.pivot(index=\"lev1\", columns=[\"lev2\", \"lev3\"], values=\"values\")\nlev2    1         2\nlev3    1    2    1    2\nlev1\n1     0.0  1.0  2.0  NaN\n2     4.0  3.0  NaN  5.0\n\n>>> df.pivot(index=[\"lev1\", \"lev2\"], columns=[\"lev3\"], values=\"values\")\n      lev3    1    2\nlev1  lev2\n   1     1  0.0  1.0\n         2  2.0  NaN\n   2     1  4.0  3.0\n         2  NaN  5.0\n\nA ValueError is raised if there are any duplicates.\n\n>>> df = pd.DataFrame({\"foo\": ['one', 'one', 'two', 'two'],\n...                    \"bar\": ['A', 'A', 'B', 'C'],\n...                    \"baz\": [1, 2, 3, 4]})\n>>> df\n   foo bar  baz\n0  one   A    1\n1  one   A    2\n2  two   B    3\n3  two   C    4\n\nNotice that the first two rows are the same for our `index`\nand `columns` arguments.\n\n>>> df.pivot(index='foo', columns='bar', values='baz')\nTraceback (most recent call last):\n   ...\nValueError: Index contains duplicate entries, cannot reshape"
  },
  {
    "symbol": "pandas.pivot_table",
    "signature": "(data: 'DataFrame', values=None, index=None, columns=None, aggfunc: 'AggFuncType' = 'mean', fill_value=None, margins: 'bool' = False, dropna: 'bool' = True, margins_name: 'Hashable' = 'All', observed: 'bool | lib.NoDefault' = <no_default>, sort: 'bool' = True) -> 'DataFrame'",
    "doc": "Create a spreadsheet-style pivot table as a DataFrame.\n\nThe levels in the pivot table will be stored in MultiIndex objects\n(hierarchical indexes) on the index and columns of the result DataFrame.\n\nParameters\n----------\ndata : DataFrame\nvalues : list-like or scalar, optional\n    Column or columns to aggregate.\nindex : column, Grouper, array, or list of the previous\n    Keys to group by on the pivot table index. If a list is passed,\n    it can contain any of the other types (except list). If an array is\n    passed, it must be the same length as the data and will be used in\n    the same manner as column values.\ncolumns : column, Grouper, array, or list of the previous\n    Keys to group by on the pivot table column. If a list is passed,\n    it can contain any of the other types (except list). If an array is\n    passed, it must be the same length as the data and will be used in\n    the same manner as column values.\naggfunc : function, list of functions, dict, default \"mean\"\n    If a list of functions is passed, the resulting pivot table will have\n    hierarchical columns whose top level are the function names\n    (inferred from the function objects themselves).\n    If a dict is passed, the key is column to aggregate and the value is\n    function or list of functions. If ``margin=True``, aggfunc will be\n    used to calculate the partial aggregates.\nfill_value : scalar, default None\n    Value to replace missing values with (in the resulting pivot table,\n    after aggregation).\nmargins : bool, default False\n    If ``margins=True``, special ``All`` columns and rows\n    will be added with partial group aggregates across the categories\n    on the rows and columns.\ndropna : bool, default True\n    Do not include columns whose entries are all NaN. If True,\n    rows with a NaN value in any column will be omitted before\n    computing margins.\nmargins_name : str, default 'All'\n    Name of the row / column that will contain the totals\n    when margins is True.\nobserved : bool, default False\n    This only applies if any of the groupers are Categoricals.\n    If True: only show observed values for categorical groupers.\n    If False: show all values for categorical groupers.\n\n    .. deprecated:: 2.2.0\n\n        The default value of ``False`` is deprecated and will change to\n        ``True`` in a future version of pandas.\n\nsort : bool, default True\n    Specifies if the result should be sorted.\n\n    .. versionadded:: 1.3.0\n\nReturns\n-------\nDataFrame\n    An Excel style pivot table.\n\nSee Also\n--------\nDataFrame.pivot : Pivot without aggregation that can handle\n    non-numeric data.\nDataFrame.melt: Unpivot a DataFrame from wide to long format,\n    optionally leaving identifiers set.\nwide_to_long : Wide panel to long format. Less flexible but more\n    user-friendly than melt.\n\nNotes\n-----\nReference :ref:`the user guide <reshaping.pivot>` for more examples.\n\nExamples\n--------\n>>> df = pd.DataFrame({\"A\": [\"foo\", \"foo\", \"foo\", \"foo\", \"foo\",\n...                          \"bar\", \"bar\", \"bar\", \"bar\"],\n...                    \"B\": [\"one\", \"one\", \"one\", \"two\", \"two\",\n...                          \"one\", \"one\", \"two\", \"two\"],\n...                    \"C\": [\"small\", \"large\", \"large\", \"small\",\n...                          \"small\", \"large\", \"small\", \"small\",\n...                          \"large\"],\n...                    \"D\": [1, 2, 2, 3, 3, 4, 5, 6, 7],\n...                    \"E\": [2, 4, 5, 5, 6, 6, 8, 9, 9]})\n>>> df\n     A    B      C  D  E\n0  foo  one  small  1  2\n1  foo  one  large  2  4\n2  foo  one  large  2  5\n3  foo  two  small  3  5\n4  foo  two  small  3  6\n5  bar  one  large  4  6\n6  bar  one  small  5  8\n7  bar  two  small  6  9\n8  bar  two  large  7  9\n\nThis first example aggregates values by taking the sum.\n\n>>> table = pd.pivot_table(df, values='D', index=['A', 'B'],\n...                        columns=['C'], aggfunc=\"sum\")\n>>> table\nC        large  small\nA   B\nbar one    4.0    5.0\n    two    7.0    6.0\nfoo one    4.0    1.0\n    two    NaN    6.0\n\nWe can also fill missing values using the `fill_value` parameter.\n\n>>> table = pd.pivot_table(df, values='D', index=['A', 'B'],\n...                        columns=['C'], aggfunc=\"sum\", fill_value=0)\n>>> table\nC        large  small\nA   B\nbar one      4      5\n    two      7      6\nfoo one      4      1\n    two      0      6\n\nThe next example aggregates by taking the mean across multiple columns.\n\n>>> table = pd.pivot_table(df, values=['D', 'E'], index=['A', 'C'],\n...                        aggfunc={'D': \"mean\", 'E': \"mean\"})\n>>> table\n                D         E\nA   C\nbar large  5.500000  7.500000\n    small  5.500000  8.500000\nfoo large  2.000000  4.500000\n    small  2.333333  4.333333\n\nWe can also calculate multiple types of aggregations for any given\nvalue column.\n\n>>> table = pd.pivot_table(df, values=['D', 'E'], index=['A', 'C'],\n...                        aggfunc={'D': \"mean\",\n...                                 'E': [\"min\", \"max\", \"mean\"]})\n>>> table\n                  D   E\n               mean max      mean  min\nA   C\nbar large  5.500000   9  7.500000    6\n    small  5.500000   9  8.500000    8\nfoo large  2.000000   5  4.500000    4\n    small  2.333333   6  4.333333    2"
  },
  {
    "symbol": "pandas.qcut",
    "signature": "(x, q, labels=None, retbins: 'bool' = False, precision: 'int' = 3, duplicates: 'str' = 'raise')",
    "doc": "Quantile-based discretization function.\n\nDiscretize variable into equal-sized buckets based on rank or based\non sample quantiles. For example 1000 values for 10 quantiles would\nproduce a Categorical object indicating quantile membership for each data point.\n\nParameters\n----------\nx : 1d ndarray or Series\nq : int or list-like of float\n    Number of quantiles. 10 for deciles, 4 for quartiles, etc. Alternately\n    array of quantiles, e.g. [0, .25, .5, .75, 1.] for quartiles.\nlabels : array or False, default None\n    Used as labels for the resulting bins. Must be of the same length as\n    the resulting bins. If False, return only integer indicators of the\n    bins. If True, raises an error.\nretbins : bool, optional\n    Whether to return the (bins, labels) or not. Can be useful if bins\n    is given as a scalar.\nprecision : int, optional\n    The precision at which to store and display the bins labels.\nduplicates : {default 'raise', 'drop'}, optional\n    If bin edges are not unique, raise ValueError or drop non-uniques.\n\nReturns\n-------\nout : Categorical or Series or array of integers if labels is False\n    The return type (Categorical or Series) depends on the input: a Series\n    of type category if input is a Series else Categorical. Bins are\n    represented as categories when categorical data is returned.\nbins : ndarray of floats\n    Returned only if `retbins` is True.\n\nNotes\n-----\nOut of bounds values will be NA in the resulting Categorical object\n\nExamples\n--------\n>>> pd.qcut(range(5), 4)\n... # doctest: +ELLIPSIS\n[(-0.001, 1.0], (-0.001, 1.0], (1.0, 2.0], (2.0, 3.0], (3.0, 4.0]]\nCategories (4, interval[float64, right]): [(-0.001, 1.0] < (1.0, 2.0] ...\n\n>>> pd.qcut(range(5), 3, labels=[\"good\", \"medium\", \"bad\"])\n... # doctest: +SKIP\n[good, good, medium, bad, bad]\nCategories (3, object): [good < medium < bad]\n\n>>> pd.qcut(range(5), 4, labels=False)\narray([0, 0, 1, 2, 3])"
  },
  {
    "symbol": "pandas.read_clipboard",
    "signature": "(sep: 'str' = '\\\\s+', dtype_backend: 'DtypeBackend | lib.NoDefault' = <no_default>, **kwargs)",
    "doc": "Read text from clipboard and pass to :func:`~pandas.read_csv`.\n\nParses clipboard contents similar to how CSV files are parsed\nusing :func:`~pandas.read_csv`.\n\nParameters\n----------\nsep : str, default '\\\\s+'\n    A string or regex delimiter. The default of ``'\\\\s+'`` denotes\n    one or more whitespace characters.\n\ndtype_backend : {'numpy_nullable', 'pyarrow'}, default 'numpy_nullable'\n    Back-end data type applied to the resultant :class:`DataFrame`\n    (still experimental). Behaviour is as follows:\n\n    * ``\"numpy_nullable\"``: returns nullable-dtype-backed :class:`DataFrame`\n      (default).\n    * ``\"pyarrow\"``: returns pyarrow-backed nullable :class:`ArrowDtype`\n      DataFrame.\n\n    .. versionadded:: 2.0\n\n**kwargs\n    See :func:`~pandas.read_csv` for the full argument list.\n\nReturns\n-------\nDataFrame\n    A parsed :class:`~pandas.DataFrame` object.\n\nSee Also\n--------\nDataFrame.to_clipboard : Copy object to the system clipboard.\nread_csv : Read a comma-separated values (csv) file into DataFrame.\nread_fwf : Read a table of fixed-width formatted lines into DataFrame.\n\nExamples\n--------\n>>> df = pd.DataFrame([[1, 2, 3], [4, 5, 6]], columns=['A', 'B', 'C'])\n>>> df.to_clipboard()  # doctest: +SKIP\n>>> pd.read_clipboard()  # doctest: +SKIP\n     A  B  C\n0    1  2  3\n1    4  5  6"
  },
  {
    "symbol": "pandas.read_csv",
    "signature": "(filepath_or_buffer: 'FilePath | ReadCsvBuffer[bytes] | ReadCsvBuffer[str]', *, sep: 'str | None | lib.NoDefault' = <no_default>, delimiter: 'str | None | lib.NoDefault' = None, header: \"int | Sequence[int] | None | Literal['infer']\" = 'infer', names: 'Sequence[Hashable] | None | lib.NoDefault' = <no_default>, index_col: 'IndexLabel | Literal[False] | None' = None, usecols: 'UsecolsArgType' = None, dtype: 'DtypeArg | None' = None, engine: 'CSVEngine | None' = None, converters: 'Mapping[Hashable, Callable] | None' = None, true_values: 'list | None' = None, false_values: 'list | None' = None, skipinitialspace: 'bool' = False, skiprows: 'list[int] | int | Callable[[Hashable], bool] | None' = None, skipfooter: 'int' = 0, nrows: 'int | None' = None, na_values: 'Hashable | Iterable[Hashable] | Mapping[Hashable, Iterable[Hashable]] | None' = None, keep_default_na: 'bool' = True, na_filter: 'bool' = True, verbose: 'bool | lib.NoDefault' = <no_default>, skip_blank_lines: 'bool' = True, parse_dates: 'bool | Sequence[Hashable] | None' = None, infer_datetime_format: 'bool | lib.NoDefault' = <no_default>, keep_date_col: 'bool | lib.NoDefault' = <no_default>, date_parser: 'Callable | lib.NoDefault' = <no_default>, date_format: 'str | dict[Hashable, str] | None' = None, dayfirst: 'bool' = False, cache_dates: 'bool' = True, iterator: 'bool' = False, chunksize: 'int | None' = None, compression: 'CompressionOptions' = 'infer', thousands: 'str | None' = None, decimal: 'str' = '.', lineterminator: 'str | None' = None, quotechar: 'str' = '\"', quoting: 'int' = 0, doublequote: 'bool' = True, escapechar: 'str | None' = None, comment: 'str | None' = None, encoding: 'str | None' = None, encoding_errors: 'str | None' = 'strict', dialect: 'str | csv.Dialect | None' = None, on_bad_lines: 'str' = 'error', delim_whitespace: 'bool | lib.NoDefault' = <no_default>, low_memory: 'bool' = True, memory_map: 'bool' = False, float_precision: \"Literal['high', 'legacy'] | None\" = None, storage_options: 'StorageOptions | None' = None, dtype_backend: 'DtypeBackend | lib.NoDefault' = <no_default>) -> 'DataFrame | TextFileReader'",
    "doc": "Read a comma-separated values (csv) file into DataFrame.\n\nAlso supports optionally iterating or breaking of the file\ninto chunks.\n\nAdditional help can be found in the online docs for\n`IO Tools <https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html>`_.\n\nParameters\n----------\nfilepath_or_buffer : str, path object or file-like object\n    Any valid string path is acceptable. The string could be a URL. Valid\n    URL schemes include http, ftp, s3, gs, and file. For file URLs, a host is\n    expected. A local file could be: file://localhost/path/to/table.csv.\n\n    If you want to pass in a path object, pandas accepts any ``os.PathLike``.\n\n    By file-like object, we refer to objects with a ``read()`` method, such as\n    a file handle (e.g. via builtin ``open`` function) or ``StringIO``.\nsep : str, default ','\n    Character or regex pattern to treat as the delimiter. If ``sep=None``, the\n    C engine cannot automatically detect\n    the separator, but the Python parsing engine can, meaning the latter will\n    be used and automatically detect the separator from only the first valid\n    row of the file by Python's builtin sniffer tool, ``csv.Sniffer``.\n    In addition, separators longer than 1 character and different from\n    ``'\\s+'`` will be interpreted as regular expressions and will also force\n    the use of the Python parsing engine. Note that regex delimiters are prone\n    to ignoring quoted data. Regex example: ``'\\r\\t'``.\ndelimiter : str, optional\n    Alias for ``sep``.\nheader : int, Sequence of int, 'infer' or None, default 'infer'\n    Row number(s) containing column labels and marking the start of the\n    data (zero-indexed). Default behavior is to infer the column names: if no ``names``\n    are passed the behavior is identical to ``header=0`` and column\n    names are inferred from the first line of the file, if column\n    names are passed explicitly to ``names`` then the behavior is identical to\n    ``header=None``. Explicitly pass ``header=0`` to be able to\n    replace existing names. The header can be a list of integers that\n    specify row locations for a :class:`~pandas.MultiIndex` on the columns\n    e.g. ``[0, 1, 3]``. Intervening rows that are not specified will be\n    skipped (e.g. 2 in this example is skipped). Note that this\n    parameter ignores commented lines and empty lines if\n    ``skip_blank_lines=True``, so ``header=0`` denotes the first line of\n    data rather than the first line of the file.\nnames : Sequence of Hashable, optional\n    Sequence of column labels to apply. If the file contains a header row,\n    then you should explicitly pass ``header=0`` to override the column names.\n    Duplicates in this list are not allowed.\nindex_col : Hashable, Sequence of Hashable or False, optional\n  Column(s) to use as row label(s), denoted either by column labels or column\n  indices.  If a sequence of labels or indices is given, :class:`~pandas.MultiIndex`\n  will be formed for the row labels.\n\n  Note: ``index_col=False`` can be used to force pandas to *not* use the first\n  column as the index, e.g., when you have a malformed file with delimiters at\n  the end of each line.\nusecols : Sequence of Hashable or Callable, optional\n    Subset of columns to select, denoted either by column labels or column indices.\n    If list-like, all elements must either\n    be positional (i.e. integer indices into the document columns) or strings\n    that correspond to column names provided either by the user in ``names`` or\n    inferred from the document header row(s). If ``names`` are given, the document\n    header row(s) are not taken into account. For example, a valid list-like\n    ``usecols`` parameter would be ``[0, 1, 2]`` or ``['foo', 'bar', 'baz']``.\n    Element order is ignored, so ``usecols=[0, 1]`` is the same as ``[1, 0]``.\n    To instantiate a :class:`~pandas.DataFrame` from ``data`` with element order\n    preserved use ``pd.read_csv(data, usecols=['foo', 'bar'])[['foo', 'bar']]``\n    for columns in ``['foo', 'bar']`` order or\n    ``pd.read_csv(data, usecols=['foo', 'bar'])[['bar', 'foo']]``\n    for ``['bar', 'foo']`` order.\n\n    If callable, the callable function will be evaluated against the column\n    names, returning names where the callable function evaluates to ``True``. An\n    example of a valid callable argument would be ``lambda x: x.upper() in\n    ['AAA', 'BBB', 'DDD']``. Using this parameter results in much faster\n    parsing time and lower memory usage.\ndtype : dtype or dict of {Hashable : dtype}, optional\n    Data type(s) to apply to either the whole dataset or individual columns.\n    E.g., ``{'a': np.float64, 'b': np.int32, 'c': 'Int64'}``\n    Use ``str`` or ``object`` together with suitable ``na_values`` settings\n    to preserve and not interpret ``dtype``.\n    If ``converters`` are specified, they will be applied INSTEAD\n    of ``dtype`` conversion.\n\n    .. versionadded:: 1.5.0\n\n        Support for ``defaultdict`` was added. Specify a ``defaultdict`` as input where\n        the default determines the ``dtype`` of the columns which are not explicitly\n        listed.\nengine : {'c', 'python', 'pyarrow'}, optional\n    Parser engine to use. The C and pyarrow engines are faster, while the python engine\n    is currently more feature-complete. Multithreading is currently only supported by\n    the pyarrow engine.\n\n    .. versionadded:: 1.4.0\n\n        The 'pyarrow' engine was added as an *experimental* engine, and some features\n        are unsupported, or may not work correctly, with this engine.\nconverters : dict of {Hashable : Callable}, optional\n    Functions for converting values in specified columns. Keys can either\n    be column labels or column indices.\ntrue_values : list, optional\n    Values to consider as ``True`` in addition to case-insensitive variants of 'True'.\nfalse_values : list, optional\n    Values to consider as ``False`` in addition to case-insensitive variants of 'False'.\nskipinitialspace : bool, default False\n    Skip spaces after delimiter.\nskiprows : int, list of int or Callable, optional\n    Line numbers to skip (0-indexed) or number of lines to skip (``int``)\n    at the start of the file.\n\n    If callable, the callable function will be evaluated against the row\n    indices, returning ``True`` if the row should be skipped and ``False`` otherwise.\n    An example of a valid callable argument would be ``lambda x: x in [0, 2]``.\nskipfooter : int, default 0\n    Number of lines at bottom of file to skip (Unsupported with ``engine='c'``).\nnrows : int, optional\n    Number of rows of file to read. Useful for reading pieces of large files.\nna_values : Hashable, Iterable of Hashable or dict of {Hashable : Iterable}, optional\n    Additional strings to recognize as ``NA``/``NaN``. If ``dict`` passed, specific\n    per-column ``NA`` values.  By default the following values are interpreted as\n    ``NaN``: \" \", \"#N/A\", \"#N/A N/A\", \"#NA\", \"-1.#IND\", \"-1.#QNAN\", \"-NaN\", \"-nan\",\n    \"1.#IND\", \"1.#QNAN\", \"<NA>\", \"N/A\", \"NA\", \"NULL\", \"NaN\", \"None\",\n    \"n/a\", \"nan\", \"null \".\n\nkeep_default_na : bool, default True\n    Whether or not to include the default ``NaN`` values when parsing the data.\n    Depending on whether ``na_values`` is passed in, the behavior is as follows:\n\n    * If ``keep_default_na`` is ``True``, and ``na_values`` are specified, ``na_values``\n      is appended to the default ``NaN`` values used for parsing.\n    * If ``keep_default_na`` is ``True``, and ``na_values`` are not specified, only\n      the default ``NaN`` values are used for parsing.\n    * If ``keep_default_na`` is ``False``, and ``na_values`` are specified, only\n      the ``NaN`` values specified ``na_values`` are used for parsing.\n    * If ``keep_default_na`` is ``False``, and ``na_values`` are not specified, no\n      strings will be parsed as ``NaN``.\n\n    Note that if ``na_filter`` is passed in as ``False``, the ``keep_default_na`` and\n    ``na_values`` parameters will be ignored.\nna_filter : bool, default True\n    Detect missing value markers (empty strings and the value of ``na_values``). In\n    data without any ``NA`` values, passing ``na_filter=False`` can improve the\n    performance of reading a large file.\nverbose : bool, default False\n    Indicate number of ``NA`` values placed in non-numeric columns.\n\n    .. deprecated:: 2.2.0\nskip_blank_lines : bool, default True\n    If ``True``, skip over blank lines rather than interpreting as ``NaN`` values.\nparse_dates : bool, list of Hashable, list of lists or dict of {Hashable : list}, default False\n    The behavior is as follows:\n\n    * ``bool``. If ``True`` -> try parsing the index. Note: Automatically set to\n      ``True`` if ``date_format`` or ``date_parser`` arguments have been passed.\n    * ``list`` of ``int`` or names. e.g. If ``[1, 2, 3]`` -> try parsing columns 1, 2, 3\n      each as a separate date column.\n    * ``list`` of ``list``. e.g.  If ``[[1, 3]]`` -> combine columns 1 and 3 and parse\n      as a single date column. Values are joined with a space before parsing.\n    * ``dict``, e.g. ``{'foo' : [1, 3]}`` -> parse columns 1, 3 as date and call\n      result 'foo'. Values are joined with a space before parsing.\n\n    If a column or index cannot be represented as an array of ``datetime``,\n    say because of an unparsable value or a mixture of timezones, the column\n    or index will be returned unaltered as an ``object`` data type. For\n    non-standard ``datetime`` parsing, use :func:`~pandas.to_datetime` after\n    :func:`~pandas.read_csv`.\n\n    Note: A fast-path exists for iso8601-formatted dates.\ninfer_datetime_format : bool, default False\n    If ``True`` and ``parse_dates`` is enabled, pandas will attempt to infer the\n    format of the ``datetime`` strings in the columns, and if it can be inferred,\n    switch to a faster method of parsing them. In some cases this can increase\n    the parsing speed by 5-10x.\n\n    .. deprecated:: 2.0.0\n        A strict version of this argument is now the default, passing it has no effect.\n\nkeep_date_col : bool, default False\n    If ``True`` and ``parse_dates`` specifies combining multiple columns then\n    keep the original columns.\ndate_parser : Callable, optional\n    Function to use for converting a sequence of string columns to an array of\n    ``datetime`` instances. The default uses ``dateutil.parser.parser`` to do the\n    conversion. pandas will try to call ``date_parser`` in three different ways,\n    advancing to the next if an exception occurs: 1) Pass one or more arrays\n    (as defined by ``parse_dates``) as arguments; 2) concatenate (row-wise) the\n    string values from the columns defined by ``parse_dates`` into a single array\n    and pass that; and 3) call ``date_parser`` once for each row using one or\n    more strings (corresponding to the columns defined by ``parse_dates``) as\n    arguments.\n\n    .. deprecated:: 2.0.0\n       Use ``date_format`` instead, or read in as ``object`` and then apply\n       :func:`~pandas.to_datetime` as-needed.\ndate_format : str or dict of column -> format, optional\n    Format to use for parsing dates when used in conjunction with ``parse_dates``.\n    The strftime to parse time, e.g. :const:`\"%d/%m/%Y\"`. See\n    `strftime documentation\n    <https://docs.python.org/3/library/datetime.html\n    #strftime-and-strptime-behavior>`_ for more information on choices, though\n    note that :const:`\"%f\"` will parse all the way up to nanoseconds.\n    You can also pass:\n\n    - \"ISO8601\", to parse any `ISO8601 <https://en.wikipedia.org/wiki/ISO_8601>`_\n        time string (not necessarily in exactly the same format);\n    - \"mixed\", to infer the format for each element individually. This is risky,\n        and you should probably use it along with `dayfirst`.\n\n    .. versionadded:: 2.0.0\ndayfirst : bool, default False\n    DD/MM format dates, international and European format.\ncache_dates : bool, default True\n    If ``True``, use a cache of unique, converted dates to apply the ``datetime``\n    conversion. May produce significant speed-up when parsing duplicate\n    date strings, especially ones with timezone offsets.\n\niterator : bool, default False\n    Return ``TextFileReader`` object for iteration or getting chunks with\n    ``get_chunk()``.\nchunksize : int, optional\n    Number of lines to read from the file per chunk. Passing a value will cause the\n    function to return a ``TextFileReader`` object for iteration.\n    See the `IO Tools docs\n    <https://pandas.pydata.org/pandas-docs/stable/io.html#io-chunking>`_\n    for more information on ``iterator`` and ``chunksize``.\n\ncompression : str or dict, default 'infer'\n    For on-the-fly decompression of on-disk data. If 'infer' and 'filepath_or_buffer' is\n    path-like, then detect compression from the following extensions: '.gz',\n    '.bz2', '.zip', '.xz', '.zst', '.tar', '.tar.gz', '.tar.xz' or '.tar.bz2'\n    (otherwise no compression).\n    If using 'zip' or 'tar', the ZIP file must contain only one data file to be read in.\n    Set to ``None`` for no decompression.\n    Can also be a dict with key ``'method'`` set\n    to one of {``'zip'``, ``'gzip'``, ``'bz2'``, ``'zstd'``, ``'xz'``, ``'tar'``} and\n    other key-value pairs are forwarded to\n    ``zipfile.ZipFile``, ``gzip.GzipFile``,\n    ``bz2.BZ2File``, ``zstandard.ZstdDecompressor``, ``lzma.LZMAFile`` or\n    ``tarfile.TarFile``, respectively.\n    As an example, the following could be passed for Zstandard decompression using a\n    custom compression dictionary:\n    ``compression={'method': 'zstd', 'dict_data': my_compression_dict}``.\n\n    .. versionadded:: 1.5.0\n        Added support for `.tar` files.\n\n    .. versionchanged:: 1.4.0 Zstandard support.\n\nthousands : str (length 1), optional\n    Character acting as the thousands separator in numerical values.\ndecimal : str (length 1), default '.'\n    Character to recognize as decimal point (e.g., use ',' for European data).\nlineterminator : str (length 1), optional\n    Character used to denote a line break. Only valid with C parser.\nquotechar : str (length 1), optional\n    Character used to denote the start and end of a quoted item. Quoted\n    items can include the ``delimiter`` and it will be ignored.\nquoting : {0 or csv.QUOTE_MINIMAL, 1 or csv.QUOTE_ALL, 2 or csv.QUOTE_NONNUMERIC, 3 or csv.QUOTE_NONE}, default csv.QUOTE_MINIMAL\n    Control field quoting behavior per ``csv.QUOTE_*`` constants. Default is\n    ``csv.QUOTE_MINIMAL`` (i.e., 0) which implies that only fields containing special\n    characters are quoted (e.g., characters defined in ``quotechar``, ``delimiter``,\n    or ``lineterminator``.\ndoublequote : bool, default True\n   When ``quotechar`` is specified and ``quoting`` is not ``QUOTE_NONE``, indicate\n   whether or not to interpret two consecutive ``quotechar`` elements INSIDE a\n   field as a single ``quotechar`` element.\nescapechar : str (length 1), optional\n    Character used to escape other characters.\ncomment : str (length 1), optional\n    Character indicating that the remainder of line should not be parsed.\n    If found at the beginning\n    of a line, the line will be ignored altogether. This parameter must be a\n    single character. Like empty lines (as long as ``skip_blank_lines=True``),\n    fully commented lines are ignored by the parameter ``header`` but not by\n    ``skiprows``. For example, if ``comment='#'``, parsing\n    ``#empty\\na,b,c\\n1,2,3`` with ``header=0`` will result in ``'a,b,c'`` being\n    treated as the header.\nencoding : str, optional, default 'utf-8'\n    Encoding to use for UTF when reading/writing (ex. ``'utf-8'``). `List of Python\n    standard encodings\n    <https://docs.python.org/3/library/codecs.html#standard-encodings>`_ .\n\nencoding_errors : str, optional, default 'strict'\n    How encoding errors are treated. `List of possible values\n    <https://docs.python.org/3/library/codecs.html#error-handlers>`_ .\n\n    .. versionadded:: 1.3.0\n\ndialect : str or csv.Dialect, optional\n    If provided, this parameter will override values (default or not) for the\n    following parameters: ``delimiter``, ``doublequote``, ``escapechar``,\n    ``skipinitialspace``, ``quotechar``, and ``quoting``. If it is necessary to\n    override values, a ``ParserWarning`` will be issued. See ``csv.Dialect``\n    documentation for more details.\non_bad_lines : {'error', 'warn', 'skip'} or Callable, default 'error'\n    Specifies what to do upon encountering a bad line (a line with too many fields).\n    Allowed values are :\n\n    - ``'error'``, raise an Exception when a bad line is encountered.\n    - ``'warn'``, raise a warning when a bad line is encountered and skip that line.\n    - ``'skip'``, skip bad lines without raising or warning when they are encountered.\n\n    .. versionadded:: 1.3.0\n\n    .. versionadded:: 1.4.0\n\n        - Callable, function with signature\n          ``(bad_line: list[str]) -> list[str] | None`` that will process a single\n          bad line. ``bad_line`` is a list of strings split by the ``sep``.\n          If the function returns ``None``, the bad line will be ignored.\n          If the function returns a new ``list`` of strings with more elements than\n          expected, a ``ParserWarning`` will be emitted while dropping extra elements.\n          Only supported when ``engine='python'``\n\n    .. versionchanged:: 2.2.0\n\n        - Callable, function with signature\n          as described in `pyarrow documentation\n          <https://arrow.apache.org/docs/python/generated/pyarrow.csv.ParseOptions.html\n          #pyarrow.csv.ParseOptions.invalid_row_handler>`_ when ``engine='pyarrow'``\n\ndelim_whitespace : bool, default False\n    Specifies whether or not whitespace (e.g. ``' '`` or ``'\\t'``) will be\n    used as the ``sep`` delimiter. Equivalent to setting ``sep='\\s+'``. If this option\n    is set to ``True``, nothing should be passed in for the ``delimiter``\n    parameter.\n\n    .. deprecated:: 2.2.0\n        Use ``sep=\"\\s+\"`` instead.\nlow_memory : bool, default True\n    Internally process the file in chunks, resulting in lower memory use\n    while parsing, but possibly mixed type inference.  To ensure no mixed\n    types either set ``False``, or specify the type with the ``dtype`` parameter.\n    Note that the entire file is read into a single :class:`~pandas.DataFrame`\n    regardless, use the ``chunksize`` or ``iterator`` parameter to return the data in\n    chunks. (Only valid with C parser).\nmemory_map : bool, default False\n    If a filepath is provided for ``filepath_or_buffer``, map the file object\n    directly onto memory and access the data directly from there. Using this\n    option can improve performance because there is no longer any I/O overhead.\nfloat_precision : {'high', 'legacy', 'round_trip'}, optional\n    Specifies which converter the C engine should use for floating-point\n    values. The options are ``None`` or ``'high'`` for the ordinary converter,\n    ``'legacy'`` for the original lower precision pandas converter, and\n    ``'round_trip'`` for the round-trip converter.\n\nstorage_options : dict, optional\n    Extra options that make sense for a particular storage connection, e.g.\n    host, port, username, password, etc. For HTTP(S) URLs the key-value pairs\n    are forwarded to ``urllib.request.Request`` as header options. For other\n    URLs (e.g. starting with \"s3://\", and \"gcs://\") the key-value pairs are\n    forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more\n    details, and for more examples on storage options refer `here\n    <https://pandas.pydata.org/docs/user_guide/io.html?\n    highlight=storage_options#reading-writing-remote-files>`_.\n\ndtype_backend : {'numpy_nullable', 'pyarrow'}, default 'numpy_nullable'\n    Back-end data type applied to the resultant :class:`DataFrame`\n    (still experimental). Behaviour is as follows:\n\n    * ``\"numpy_nullable\"``: returns nullable-dtype-backed :class:`DataFrame`\n      (default).\n    * ``\"pyarrow\"``: returns pyarrow-backed nullable :class:`ArrowDtype`\n      DataFrame.\n\n    .. versionadded:: 2.0\n\nReturns\n-------\nDataFrame or TextFileReader\n    A comma-separated values (csv) file is returned as two-dimensional\n    data structure with labeled axes.\n\nSee Also\n--------\nDataFrame.to_csv : Write DataFrame to a comma-separated values (csv) file.\nread_table : Read general delimited file into DataFrame.\nread_fwf : Read a table of fixed-width formatted lines into DataFrame.\n\nExamples\n--------\n>>> pd.read_csv('data.csv')  # doctest: +SKIP"
  },
  {
    "symbol": "pandas.read_excel",
    "signature": "(io, sheet_name: 'str | int | list[IntStrT] | None' = 0, *, header: 'int | Sequence[int] | None' = 0, names: 'SequenceNotStr[Hashable] | range | None' = None, index_col: 'int | str | Sequence[int] | None' = None, usecols: 'int | str | Sequence[int] | Sequence[str] | Callable[[str], bool] | None' = None, dtype: 'DtypeArg | None' = None, engine: \"Literal['xlrd', 'openpyxl', 'odf', 'pyxlsb', 'calamine'] | None\" = None, converters: 'dict[str, Callable] | dict[int, Callable] | None' = None, true_values: 'Iterable[Hashable] | None' = None, false_values: 'Iterable[Hashable] | None' = None, skiprows: 'Sequence[int] | int | Callable[[int], object] | None' = None, nrows: 'int | None' = None, na_values=None, keep_default_na: 'bool' = True, na_filter: 'bool' = True, verbose: 'bool' = False, parse_dates: 'list | dict | bool' = False, date_parser: 'Callable | lib.NoDefault' = <no_default>, date_format: 'dict[Hashable, str] | str | None' = None, thousands: 'str | None' = None, decimal: 'str' = '.', comment: 'str | None' = None, skipfooter: 'int' = 0, storage_options: 'StorageOptions | None' = None, dtype_backend: 'DtypeBackend | lib.NoDefault' = <no_default>, engine_kwargs: 'dict | None' = None) -> 'DataFrame | dict[IntStrT, DataFrame]'",
    "doc": "Read an Excel file into a ``pandas`` ``DataFrame``.\n\nSupports `xls`, `xlsx`, `xlsm`, `xlsb`, `odf`, `ods` and `odt` file extensions\nread from a local filesystem or URL. Supports an option to read\na single sheet or a list of sheets.\n\nParameters\n----------\nio : str, bytes, ExcelFile, xlrd.Book, path object, or file-like object\n    Any valid string path is acceptable. The string could be a URL. Valid\n    URL schemes include http, ftp, s3, and file. For file URLs, a host is\n    expected. A local file could be: ``file://localhost/path/to/table.xlsx``.\n\n    If you want to pass in a path object, pandas accepts any ``os.PathLike``.\n\n    By file-like object, we refer to objects with a ``read()`` method,\n    such as a file handle (e.g. via builtin ``open`` function)\n    or ``StringIO``.\n\n    .. deprecated:: 2.1.0\n        Passing byte strings is deprecated. To read from a\n        byte string, wrap it in a ``BytesIO`` object.\nsheet_name : str, int, list, or None, default 0\n    Strings are used for sheet names. Integers are used in zero-indexed\n    sheet positions (chart sheets do not count as a sheet position).\n    Lists of strings/integers are used to request multiple sheets.\n    Specify ``None`` to get all worksheets.\n\n    Available cases:\n\n    * Defaults to ``0``: 1st sheet as a `DataFrame`\n    * ``1``: 2nd sheet as a `DataFrame`\n    * ``\"Sheet1\"``: Load sheet with name \"Sheet1\"\n    * ``[0, 1, \"Sheet5\"]``: Load first, second and sheet named \"Sheet5\"\n      as a dict of `DataFrame`\n    * ``None``: All worksheets.\n\nheader : int, list of int, default 0\n    Row (0-indexed) to use for the column labels of the parsed\n    DataFrame. If a list of integers is passed those row positions will\n    be combined into a ``MultiIndex``. Use None if there is no header.\nnames : array-like, default None\n    List of column names to use. If file contains no header row,\n    then you should explicitly pass header=None.\nindex_col : int, str, list of int, default None\n    Column (0-indexed) to use as the row labels of the DataFrame.\n    Pass None if there is no such column.  If a list is passed,\n    those columns will be combined into a ``MultiIndex``.  If a\n    subset of data is selected with ``usecols``, index_col\n    is based on the subset.\n\n    Missing values will be forward filled to allow roundtripping with\n    ``to_excel`` for ``merged_cells=True``. To avoid forward filling the\n    missing values use ``set_index`` after reading the data instead of\n    ``index_col``.\nusecols : str, list-like, or callable, default None\n    * If None, then parse all columns.\n    * If str, then indicates comma separated list of Excel column letters\n      and column ranges (e.g. \"A:E\" or \"A,C,E:F\"). Ranges are inclusive of\n      both sides.\n    * If list of int, then indicates list of column numbers to be parsed\n      (0-indexed).\n    * If list of string, then indicates list of column names to be parsed.\n    * If callable, then evaluate each column name against it and parse the\n      column if the callable returns ``True``.\n\n    Returns a subset of the columns according to behavior above.\ndtype : Type name or dict of column -> type, default None\n    Data type for data or columns. E.g. {'a': np.float64, 'b': np.int32}\n    Use ``object`` to preserve data as stored in Excel and not interpret dtype,\n    which will necessarily result in ``object`` dtype.\n    If converters are specified, they will be applied INSTEAD\n    of dtype conversion.\n    If you use ``None``, it will infer the dtype of each column based on the data.\nengine : {'openpyxl', 'calamine', 'odf', 'pyxlsb', 'xlrd'}, default None\n    If io is not a buffer or path, this must be set to identify io.\n    Engine compatibility :\n\n    - ``openpyxl`` supports newer Excel file formats.\n    - ``calamine`` supports Excel (.xls, .xlsx, .xlsm, .xlsb)\n      and OpenDocument (.ods) file formats.\n    - ``odf`` supports OpenDocument file formats (.odf, .ods, .odt).\n    - ``pyxlsb`` supports Binary Excel files.\n    - ``xlrd`` supports old-style Excel files (.xls).\n\n    When ``engine=None``, the following logic will be used to determine the engine:\n\n    - If ``path_or_buffer`` is an OpenDocument format (.odf, .ods, .odt),\n      then `odf <https://pypi.org/project/odfpy/>`_ will be used.\n    - Otherwise if ``path_or_buffer`` is an xls format, ``xlrd`` will be used.\n    - Otherwise if ``path_or_buffer`` is in xlsb format, ``pyxlsb`` will be used.\n    - Otherwise ``openpyxl`` will be used.\nconverters : dict, default None\n    Dict of functions for converting values in certain columns. Keys can\n    either be integers or column labels, values are functions that take one\n    input argument, the Excel cell content, and return the transformed\n    content.\ntrue_values : list, default None\n    Values to consider as True.\nfalse_values : list, default None\n    Values to consider as False.\nskiprows : list-like, int, or callable, optional\n    Line numbers to skip (0-indexed) or number of lines to skip (int) at the\n    start of the file. If callable, the callable function will be evaluated\n    against the row indices, returning True if the row should be skipped and\n    False otherwise. An example of a valid callable argument would be ``lambda\n    x: x in [0, 2]``.\nnrows : int, default None\n    Number of rows to parse.\nna_values : scalar, str, list-like, or dict, default None\n    Additional strings to recognize as NA/NaN. If dict passed, specific\n    per-column NA values. By default the following values are interpreted\n    as NaN: '', '#N/A', '#N/A N/A', '#NA', '-1.#IND', '-1.#QNAN', '-NaN', '-nan',\n    '1.#IND', '1.#QNAN', '<NA>', 'N/A', 'NA', 'NULL', 'NaN', 'None',\n    'n/a', 'nan', 'null'.\nkeep_default_na : bool, default True\n    Whether or not to include the default NaN values when parsing the data.\n    Depending on whether ``na_values`` is passed in, the behavior is as follows:\n\n    * If ``keep_default_na`` is True, and ``na_values`` are specified,\n      ``na_values`` is appended to the default NaN values used for parsing.\n    * If ``keep_default_na`` is True, and ``na_values`` are not specified, only\n      the default NaN values are used for parsing.\n    * If ``keep_default_na`` is False, and ``na_values`` are specified, only\n      the NaN values specified ``na_values`` are used for parsing.\n    * If ``keep_default_na`` is False, and ``na_values`` are not specified, no\n      strings will be parsed as NaN.\n\n    Note that if `na_filter` is passed in as False, the ``keep_default_na`` and\n    ``na_values`` parameters will be ignored.\nna_filter : bool, default True\n    Detect missing value markers (empty strings and the value of na_values). In\n    data without any NAs, passing ``na_filter=False`` can improve the\n    performance of reading a large file.\nverbose : bool, default False\n    Indicate number of NA values placed in non-numeric columns.\nparse_dates : bool, list-like, or dict, default False\n    The behavior is as follows:\n\n    * ``bool``. If True -> try parsing the index.\n    * ``list`` of int or names. e.g. If [1, 2, 3] -> try parsing columns 1, 2, 3\n      each as a separate date column.\n    * ``list`` of lists. e.g.  If [[1, 3]] -> combine columns 1 and 3 and parse as\n      a single date column.\n    * ``dict``, e.g. {'foo' : [1, 3]} -> parse columns 1, 3 as date and call\n      result 'foo'\n\n    If a column or index contains an unparsable date, the entire column or\n    index will be returned unaltered as an object data type. If you don`t want to\n    parse some cells as date just change their type in Excel to \"Text\".\n    For non-standard datetime parsing, use ``pd.to_datetime`` after ``pd.read_excel``.\n\n    Note: A fast-path exists for iso8601-formatted dates.\ndate_parser : function, optional\n    Function to use for converting a sequence of string columns to an array of\n    datetime instances. The default uses ``dateutil.parser.parser`` to do the\n    conversion. Pandas will try to call `date_parser` in three different ways,\n    advancing to the next if an exception occurs: 1) Pass one or more arrays\n    (as defined by `parse_dates`) as arguments; 2) concatenate (row-wise) the\n    string values from the columns defined by `parse_dates` into a single array\n    and pass that; and 3) call `date_parser` once for each row using one or\n    more strings (corresponding to the columns defined by `parse_dates`) as\n    arguments.\n\n    .. deprecated:: 2.0.0\n       Use ``date_format`` instead, or read in as ``object`` and then apply\n       :func:`to_datetime` as-needed.\ndate_format : str or dict of column -> format, default ``None``\n   If used in conjunction with ``parse_dates``, will parse dates according to this\n   format. For anything more complex,\n   please read in as ``object`` and then apply :func:`to_datetime` as-needed.\n\n   .. versionadded:: 2.0.0\nthousands : str, default None\n    Thousands separator for parsing string columns to numeric.  Note that\n    this parameter is only necessary for columns stored as TEXT in Excel,\n    any numeric columns will automatically be parsed, regardless of display\n    format.\ndecimal : str, default '.'\n    Character to recognize as decimal point for parsing string columns to numeric.\n    Note that this parameter is only necessary for columns stored as TEXT in Excel,\n    any numeric columns will automatically be parsed, regardless of display\n    format.(e.g. use ',' for European data).\n\n    .. versionadded:: 1.4.0\n\ncomment : str, default None\n    Comments out remainder of line. Pass a character or characters to this\n    argument to indicate comments in the input file. Any data between the\n    comment string and the end of the current line is ignored.\nskipfooter : int, default 0\n    Rows at the end to skip (0-indexed).\nstorage_options : dict, optional\n    Extra options that make sense for a particular storage connection, e.g.\n    host, port, username, password, etc. For HTTP(S) URLs the key-value pairs\n    are forwarded to ``urllib.request.Request`` as header options. For other\n    URLs (e.g. starting with \"s3://\", and \"gcs://\") the key-value pairs are\n    forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more\n    details, and for more examples on storage options refer `here\n    <https://pandas.pydata.org/docs/user_guide/io.html?\n    highlight=storage_options#reading-writing-remote-files>`_.\n\ndtype_backend : {'numpy_nullable', 'pyarrow'}, default 'numpy_nullable'\n    Back-end data type applied to the resultant :class:`DataFrame`\n    (still experimental). Behaviour is as follows:\n\n    * ``\"numpy_nullable\"``: returns nullable-dtype-backed :class:`DataFrame`\n      (default).\n    * ``\"pyarrow\"``: returns pyarrow-backed nullable :class:`ArrowDtype`\n      DataFrame.\n\n    .. versionadded:: 2.0\n\nengine_kwargs : dict, optional\n    Arbitrary keyword arguments passed to excel engine.\n\nReturns\n-------\nDataFrame or dict of DataFrames\n    DataFrame from the passed in Excel file. See notes in sheet_name\n    argument for more information on when a dict of DataFrames is returned.\n\nSee Also\n--------\nDataFrame.to_excel : Write DataFrame to an Excel file.\nDataFrame.to_csv : Write DataFrame to a comma-separated values (csv) file.\nread_csv : Read a comma-separated values (csv) file into DataFrame.\nread_fwf : Read a table of fixed-width formatted lines into DataFrame.\n\nNotes\n-----\nFor specific information on the methods used for each Excel engine, refer to the pandas\n:ref:`user guide <io.excel_reader>`\n\nExamples\n--------\nThe file can be read using the file name as string or an open file object:\n\n>>> pd.read_excel('tmp.xlsx', index_col=0)  # doctest: +SKIP\n       Name  Value\n0   string1      1\n1   string2      2\n2  #Comment      3\n\n>>> pd.read_excel(open('tmp.xlsx', 'rb'),\n...               sheet_name='Sheet3')  # doctest: +SKIP\n   Unnamed: 0      Name  Value\n0           0   string1      1\n1           1   string2      2\n2           2  #Comment      3\n\nIndex and header can be specified via the `index_col` and `header` arguments\n\n>>> pd.read_excel('tmp.xlsx', index_col=None, header=None)  # doctest: +SKIP\n     0         1      2\n0  NaN      Name  Value\n1  0.0   string1      1\n2  1.0   string2      2\n3  2.0  #Comment      3\n\nColumn types are inferred but can be explicitly specified\n\n>>> pd.read_excel('tmp.xlsx', index_col=0,\n...               dtype={'Name': str, 'Value': float})  # doctest: +SKIP\n       Name  Value\n0   string1    1.0\n1   string2    2.0\n2  #Comment    3.0\n\nTrue, False, and NA values, and thousands separators have defaults,\nbut can be explicitly specified, too. Supply the values you would like\nas strings or lists of strings!\n\n>>> pd.read_excel('tmp.xlsx', index_col=0,\n...               na_values=['string1', 'string2'])  # doctest: +SKIP\n       Name  Value\n0       NaN      1\n1       NaN      2\n2  #Comment      3\n\nComment lines in the excel input file can be skipped using the\n``comment`` kwarg.\n\n>>> pd.read_excel('tmp.xlsx', index_col=0, comment='#')  # doctest: +SKIP\n      Name  Value\n0  string1    1.0\n1  string2    2.0\n2     None    NaN"
  },
  {
    "symbol": "pandas.read_feather",
    "signature": "(path: 'FilePath | ReadBuffer[bytes]', columns: 'Sequence[Hashable] | None' = None, use_threads: 'bool' = True, storage_options: 'StorageOptions | None' = None, dtype_backend: 'DtypeBackend | lib.NoDefault' = <no_default>) -> 'DataFrame'",
    "doc": "Load a feather-format object from the file path.\n\nParameters\n----------\npath : str, path object, or file-like object\n    String, path object (implementing ``os.PathLike[str]``), or file-like\n    object implementing a binary ``read()`` function. The string could be a URL.\n    Valid URL schemes include http, ftp, s3, and file. For file URLs, a host is\n    expected. A local file could be: ``file://localhost/path/to/table.feather``.\ncolumns : sequence, default None\n    If not provided, all columns are read.\nuse_threads : bool, default True\n    Whether to parallelize reading using multiple threads.\nstorage_options : dict, optional\n    Extra options that make sense for a particular storage connection, e.g.\n    host, port, username, password, etc. For HTTP(S) URLs the key-value pairs\n    are forwarded to ``urllib.request.Request`` as header options. For other\n    URLs (e.g. starting with \"s3://\", and \"gcs://\") the key-value pairs are\n    forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more\n    details, and for more examples on storage options refer `here\n    <https://pandas.pydata.org/docs/user_guide/io.html?\n    highlight=storage_options#reading-writing-remote-files>`_.\n\ndtype_backend : {'numpy_nullable', 'pyarrow'}, default 'numpy_nullable'\n    Back-end data type applied to the resultant :class:`DataFrame`\n    (still experimental). Behaviour is as follows:\n\n    * ``\"numpy_nullable\"``: returns nullable-dtype-backed :class:`DataFrame`\n      (default).\n    * ``\"pyarrow\"``: returns pyarrow-backed nullable :class:`ArrowDtype`\n      DataFrame.\n\n    .. versionadded:: 2.0\n\nReturns\n-------\ntype of object stored in file\n\nExamples\n--------\n>>> df = pd.read_feather(\"path/to/file.feather\")  # doctest: +SKIP"
  },
  {
    "symbol": "pandas.read_fwf",
    "signature": "(filepath_or_buffer: 'FilePath | ReadCsvBuffer[bytes] | ReadCsvBuffer[str]', *, colspecs: 'Sequence[tuple[int, int]] | str | None' = 'infer', widths: 'Sequence[int] | None' = None, infer_nrows: 'int' = 100, dtype_backend: 'DtypeBackend | lib.NoDefault' = <no_default>, iterator: 'bool' = False, chunksize: 'int | None' = None, **kwds) -> 'DataFrame | TextFileReader'",
    "doc": "Read a table of fixed-width formatted lines into DataFrame.\n\nAlso supports optionally iterating or breaking of the file\ninto chunks.\n\nAdditional help can be found in the `online docs for IO Tools\n<https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html>`_.\n\nParameters\n----------\nfilepath_or_buffer : str, path object, or file-like object\n    String, path object (implementing ``os.PathLike[str]``), or file-like\n    object implementing a text ``read()`` function.The string could be a URL.\n    Valid URL schemes include http, ftp, s3, and file. For file URLs, a host is\n    expected. A local file could be:\n    ``file://localhost/path/to/table.csv``.\ncolspecs : list of tuple (int, int) or 'infer'. optional\n    A list of tuples giving the extents of the fixed-width\n    fields of each line as half-open intervals (i.e.,  [from, to[ ).\n    String value 'infer' can be used to instruct the parser to try\n    detecting the column specifications from the first 100 rows of\n    the data which are not being skipped via skiprows (default='infer').\nwidths : list of int, optional\n    A list of field widths which can be used instead of 'colspecs' if\n    the intervals are contiguous.\ninfer_nrows : int, default 100\n    The number of rows to consider when letting the parser determine the\n    `colspecs`.\ndtype_backend : {'numpy_nullable', 'pyarrow'}, default 'numpy_nullable'\n    Back-end data type applied to the resultant :class:`DataFrame`\n    (still experimental). Behaviour is as follows:\n\n    * ``\"numpy_nullable\"``: returns nullable-dtype-backed :class:`DataFrame`\n      (default).\n    * ``\"pyarrow\"``: returns pyarrow-backed nullable :class:`ArrowDtype`\n      DataFrame.\n\n    .. versionadded:: 2.0\n\n**kwds : optional\n    Optional keyword arguments can be passed to ``TextFileReader``.\n\nReturns\n-------\nDataFrame or TextFileReader\n    A comma-separated values (csv) file is returned as two-dimensional\n    data structure with labeled axes.\n\nSee Also\n--------\nDataFrame.to_csv : Write DataFrame to a comma-separated values (csv) file.\nread_csv : Read a comma-separated values (csv) file into DataFrame.\n\nExamples\n--------\n>>> pd.read_fwf('data.csv')  # doctest: +SKIP"
  },
  {
    "symbol": "pandas.read_gbq",
    "signature": "(query: 'str', project_id: 'str | None' = None, index_col: 'str | None' = None, col_order: 'list[str] | None' = None, reauth: 'bool' = False, auth_local_webserver: 'bool' = True, dialect: 'str | None' = None, location: 'str | None' = None, configuration: 'dict[str, Any] | None' = None, credentials: 'Credentials | None' = None, use_bqstorage_api: 'bool | None' = None, max_results: 'int | None' = None, progress_bar_type: 'str | None' = None) -> 'DataFrame'",
    "doc": "Load data from Google BigQuery.\n\n.. deprecated:: 2.2.0\n\n   Please use ``pandas_gbq.read_gbq`` instead.\n\nThis function requires the `pandas-gbq package\n<https://pandas-gbq.readthedocs.io>`__.\n\nSee the `How to authenticate with Google BigQuery\n<https://pandas-gbq.readthedocs.io/en/latest/howto/authentication.html>`__\nguide for authentication instructions.\n\nParameters\n----------\nquery : str\n    SQL-Like Query to return data values.\nproject_id : str, optional\n    Google BigQuery Account project ID. Optional when available from\n    the environment.\nindex_col : str, optional\n    Name of result column to use for index in results DataFrame.\ncol_order : list(str), optional\n    List of BigQuery column names in the desired order for results\n    DataFrame.\nreauth : bool, default False\n    Force Google BigQuery to re-authenticate the user. This is useful\n    if multiple accounts are used.\nauth_local_webserver : bool, default True\n    Use the `local webserver flow`_ instead of the `console flow`_\n    when getting user credentials.\n\n    .. _local webserver flow:\n        https://google-auth-oauthlib.readthedocs.io/en/latest/reference/google_auth_oauthlib.flow.html#google_auth_oauthlib.flow.InstalledAppFlow.run_local_server\n    .. _console flow:\n        https://google-auth-oauthlib.readthedocs.io/en/latest/reference/google_auth_oauthlib.flow.html#google_auth_oauthlib.flow.InstalledAppFlow.run_console\n\n    *New in version 0.2.0 of pandas-gbq*.\n\n    .. versionchanged:: 1.5.0\n       Default value is changed to ``True``. Google has deprecated the\n       ``auth_local_webserver = False`` `\"out of band\" (copy-paste)\n       flow\n       <https://developers.googleblog.com/2022/02/making-oauth-flows-safer.html?m=1#disallowed-oob>`_.\ndialect : str, default 'legacy'\n    Note: The default value is changing to 'standard' in a future version.\n\n    SQL syntax dialect to use. Value can be one of:\n\n    ``'legacy'``\n        Use BigQuery's legacy SQL dialect. For more information see\n        `BigQuery Legacy SQL Reference\n        <https://cloud.google.com/bigquery/docs/reference/legacy-sql>`__.\n    ``'standard'``\n        Use BigQuery's standard SQL, which is\n        compliant with the SQL 2011 standard. For more information\n        see `BigQuery Standard SQL Reference\n        <https://cloud.google.com/bigquery/docs/reference/standard-sql/>`__.\nlocation : str, optional\n    Location where the query job should run. See the `BigQuery locations\n    documentation\n    <https://cloud.google.com/bigquery/docs/dataset-locations>`__ for a\n    list of available locations. The location must match that of any\n    datasets used in the query.\n\n    *New in version 0.5.0 of pandas-gbq*.\nconfiguration : dict, optional\n    Query config parameters for job processing.\n    For example:\n\n        configuration = {'query': {'useQueryCache': False}}\n\n    For more information see `BigQuery REST API Reference\n    <https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs#configuration.query>`__.\ncredentials : google.auth.credentials.Credentials, optional\n    Credentials for accessing Google APIs. Use this parameter to override\n    default credentials, such as to use Compute Engine\n    :class:`google.auth.compute_engine.Credentials` or Service Account\n    :class:`google.oauth2.service_account.Credentials` directly.\n\n    *New in version 0.8.0 of pandas-gbq*.\nuse_bqstorage_api : bool, default False\n    Use the `BigQuery Storage API\n    <https://cloud.google.com/bigquery/docs/reference/storage/>`__ to\n    download query results quickly, but at an increased cost. To use this\n    API, first `enable it in the Cloud Console\n    <https://console.cloud.google.com/apis/library/bigquerystorage.googleapis.com>`__.\n    You must also have the `bigquery.readsessions.create\n    <https://cloud.google.com/bigquery/docs/access-control#roles>`__\n    permission on the project you are billing queries to.\n\n    This feature requires version 0.10.0 or later of the ``pandas-gbq``\n    package. It also requires the ``google-cloud-bigquery-storage`` and\n    ``fastavro`` packages.\n\nmax_results : int, optional\n    If set, limit the maximum number of rows to fetch from the query\n    results.\n\nprogress_bar_type : Optional, str\n    If set, use the `tqdm <https://tqdm.github.io/>`__ library to\n    display a progress bar while the data downloads. Install the\n    ``tqdm`` package to use this feature.\n\n    Possible values of ``progress_bar_type`` include:\n\n    ``None``\n        No progress bar.\n    ``'tqdm'``\n        Use the :func:`tqdm.tqdm` function to print a progress bar\n        to :data:`sys.stderr`.\n    ``'tqdm_notebook'``\n        Use the :func:`tqdm.tqdm_notebook` function to display a\n        progress bar as a Jupyter notebook widget.\n    ``'tqdm_gui'``\n        Use the :func:`tqdm.tqdm_gui` function to display a\n        progress bar as a graphical dialog box.\n\nReturns\n-------\ndf: DataFrame\n    DataFrame representing results of query.\n\nSee Also\n--------\npandas_gbq.read_gbq : This function in the pandas-gbq library.\nDataFrame.to_gbq : Write a DataFrame to Google BigQuery.\n\nExamples\n--------\nExample taken from `Google BigQuery documentation\n<https://cloud.google.com/bigquery/docs/pandas-gbq-migration>`_\n\n>>> sql = \"SELECT name FROM table_name WHERE state = 'TX' LIMIT 100;\"\n>>> df = pd.read_gbq(sql, dialect=\"standard\")  # doctest: +SKIP\n>>> project_id = \"your-project-id\"  # doctest: +SKIP\n>>> df = pd.read_gbq(sql,\n...                  project_id=project_id,\n...                  dialect=\"standard\"\n...                  )  # doctest: +SKIP"
  },
  {
    "symbol": "pandas.read_hdf",
    "signature": "(path_or_buf: 'FilePath | HDFStore', key=None, mode: 'str' = 'r', errors: 'str' = 'strict', where: 'str | list | None' = None, start: 'int | None' = None, stop: 'int | None' = None, columns: 'list[str] | None' = None, iterator: 'bool' = False, chunksize: 'int | None' = None, **kwargs)",
    "doc": "Read from the store, close it if we opened it.\n\nRetrieve pandas object stored in file, optionally based on where\ncriteria.\n\n.. warning::\n\n   Pandas uses PyTables for reading and writing HDF5 files, which allows\n   serializing object-dtype data with pickle when using the \"fixed\" format.\n   Loading pickled data received from untrusted sources can be unsafe.\n\n   See: https://docs.python.org/3/library/pickle.html for more.\n\nParameters\n----------\npath_or_buf : str, path object, pandas.HDFStore\n    Any valid string path is acceptable. Only supports the local file system,\n    remote URLs and file-like objects are not supported.\n\n    If you want to pass in a path object, pandas accepts any\n    ``os.PathLike``.\n\n    Alternatively, pandas accepts an open :class:`pandas.HDFStore` object.\n\nkey : object, optional\n    The group identifier in the store. Can be omitted if the HDF file\n    contains a single pandas object.\nmode : {'r', 'r+', 'a'}, default 'r'\n    Mode to use when opening the file. Ignored if path_or_buf is a\n    :class:`pandas.HDFStore`. Default is 'r'.\nerrors : str, default 'strict'\n    Specifies how encoding and decoding errors are to be handled.\n    See the errors argument for :func:`open` for a full list\n    of options.\nwhere : list, optional\n    A list of Term (or convertible) objects.\nstart : int, optional\n    Row number to start selection.\nstop  : int, optional\n    Row number to stop selection.\ncolumns : list, optional\n    A list of columns names to return.\niterator : bool, optional\n    Return an iterator object.\nchunksize : int, optional\n    Number of rows to include in an iteration when using an iterator.\n**kwargs\n    Additional keyword arguments passed to HDFStore.\n\nReturns\n-------\nobject\n    The selected object. Return type depends on the object stored.\n\nSee Also\n--------\nDataFrame.to_hdf : Write a HDF file from a DataFrame.\nHDFStore : Low-level access to HDF files.\n\nNotes\n-----\nWhen ``errors=\"surrogatepass\"``, ``pd.options.future.infer_string`` is true,\nand PyArrow is installed, if a UTF-16 surrogate is encountered when decoding\nto UTF-8, the resulting dtype will be\n``pd.StringDtype(storage=\"python\", na_value=np.nan)``.\n\nExamples\n--------\n>>> df = pd.DataFrame([[1, 1.0, 'a']], columns=['x', 'y', 'z'])  # doctest: +SKIP\n>>> df.to_hdf('./store.h5', 'data')  # doctest: +SKIP\n>>> reread = pd.read_hdf('./store.h5')  # doctest: +SKIP"
  },
  {
    "symbol": "pandas.read_html",
    "signature": "(io: 'FilePath | ReadBuffer[str]', *, match: 'str | Pattern' = '.+', flavor: 'HTMLFlavors | Sequence[HTMLFlavors] | None' = None, header: 'int | Sequence[int] | None' = None, index_col: 'int | Sequence[int] | None' = None, skiprows: 'int | Sequence[int] | slice | None' = None, attrs: 'dict[str, str] | None' = None, parse_dates: 'bool' = False, thousands: 'str | None' = ',', encoding: 'str | None' = None, decimal: 'str' = '.', converters: 'dict | None' = None, na_values: 'Iterable[object] | None' = None, keep_default_na: 'bool' = True, displayed_only: 'bool' = True, extract_links: \"Literal[None, 'header', 'footer', 'body', 'all']\" = None, dtype_backend: 'DtypeBackend | lib.NoDefault' = <no_default>, storage_options: 'StorageOptions' = None) -> 'list[DataFrame]'",
    "doc": "Read HTML tables into a ``list`` of ``DataFrame`` objects.\n\nParameters\n----------\nio : str, path object, or file-like object\n    String, path object (implementing ``os.PathLike[str]``), or file-like\n    object implementing a string ``read()`` function.\n    The string can represent a URL or the HTML itself. Note that\n    lxml only accepts the http, ftp and file url protocols. If you have a\n    URL that starts with ``'https'`` you might try removing the ``'s'``.\n\n    .. deprecated:: 2.1.0\n        Passing html literal strings is deprecated.\n        Wrap literal string/bytes input in ``io.StringIO``/``io.BytesIO`` instead.\n\nmatch : str or compiled regular expression, optional\n    The set of tables containing text matching this regex or string will be\n    returned. Unless the HTML is extremely simple you will probably need to\n    pass a non-empty string here. Defaults to '.+' (match any non-empty\n    string). The default value will return all tables contained on a page.\n    This value is converted to a regular expression so that there is\n    consistent behavior between Beautiful Soup and lxml.\n\nflavor : {\"lxml\", \"html5lib\", \"bs4\"} or list-like, optional\n    The parsing engine (or list of parsing engines) to use. 'bs4' and\n    'html5lib' are synonymous with each other, they are both there for\n    backwards compatibility. The default of ``None`` tries to use ``lxml``\n    to parse and if that fails it falls back on ``bs4`` + ``html5lib``.\n\nheader : int or list-like, optional\n    The row (or list of rows for a :class:`~pandas.MultiIndex`) to use to\n    make the columns headers.\n\nindex_col : int or list-like, optional\n    The column (or list of columns) to use to create the index.\n\nskiprows : int, list-like or slice, optional\n    Number of rows to skip after parsing the column integer. 0-based. If a\n    sequence of integers or a slice is given, will skip the rows indexed by\n    that sequence.  Note that a single element sequence means 'skip the nth\n    row' whereas an integer means 'skip n rows'.\n\nattrs : dict, optional\n    This is a dictionary of attributes that you can pass to use to identify\n    the table in the HTML. These are not checked for validity before being\n    passed to lxml or Beautiful Soup. However, these attributes must be\n    valid HTML table attributes to work correctly. For example, ::\n\n        attrs = {'id': 'table'}\n\n    is a valid attribute dictionary because the 'id' HTML tag attribute is\n    a valid HTML attribute for *any* HTML tag as per `this document\n    <https://html.spec.whatwg.org/multipage/dom.html#global-attributes>`__. ::\n\n        attrs = {'asdf': 'table'}\n\n    is *not* a valid attribute dictionary because 'asdf' is not a valid\n    HTML attribute even if it is a valid XML attribute.  Valid HTML 4.01\n    table attributes can be found `here\n    <http://www.w3.org/TR/REC-html40/struct/tables.html#h-11.2>`__. A\n    working draft of the HTML 5 spec can be found `here\n    <https://html.spec.whatwg.org/multipage/tables.html>`__. It contains the\n    latest information on table attributes for the modern web.\n\nparse_dates : bool, optional\n    See :func:`~read_csv` for more details.\n\nthousands : str, optional\n    Separator to use to parse thousands. Defaults to ``','``.\n\nencoding : str, optional\n    The encoding used to decode the web page. Defaults to ``None``.``None``\n    preserves the previous encoding behavior, which depends on the\n    underlying parser library (e.g., the parser library will try to use\n    the encoding provided by the document).\n\ndecimal : str, default '.'\n    Character to recognize as decimal point (e.g. use ',' for European\n    data).\n\nconverters : dict, default None\n    Dict of functions for converting values in certain columns. Keys can\n    either be integers or column labels, values are functions that take one\n    input argument, the cell (not column) content, and return the\n    transformed content.\n\nna_values : iterable, default None\n    Custom NA values.\n\nkeep_default_na : bool, default True\n    If na_values are specified and keep_default_na is False the default NaN\n    values are overridden, otherwise they're appended to.\n\ndisplayed_only : bool, default True\n    Whether elements with \"display: none\" should be parsed.\n\nextract_links : {None, \"all\", \"header\", \"body\", \"footer\"}\n    Table elements in the specified section(s) with <a> tags will have their\n    href extracted.\n\n    .. versionadded:: 1.5.0\n\ndtype_backend : {'numpy_nullable', 'pyarrow'}, default 'numpy_nullable'\n    Back-end data type applied to the resultant :class:`DataFrame`\n    (still experimental). Behaviour is as follows:\n\n    * ``\"numpy_nullable\"``: returns nullable-dtype-backed :class:`DataFrame`\n      (default).\n    * ``\"pyarrow\"``: returns pyarrow-backed nullable :class:`ArrowDtype`\n      DataFrame.\n\n    .. versionadded:: 2.0\n\nstorage_options : dict, optional\n    Extra options that make sense for a particular storage connection, e.g.\n    host, port, username, password, etc. For HTTP(S) URLs the key-value pairs\n    are forwarded to ``urllib.request.Request`` as header options. For other\n    URLs (e.g. starting with \"s3://\", and \"gcs://\") the key-value pairs are\n    forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more\n    details, and for more examples on storage options refer `here\n    <https://pandas.pydata.org/docs/user_guide/io.html?\n    highlight=storage_options#reading-writing-remote-files>`_.\n\n    .. versionadded:: 2.1.0\n\nReturns\n-------\ndfs\n    A list of DataFrames.\n\nSee Also\n--------\nread_csv : Read a comma-separated values (csv) file into DataFrame.\n\nNotes\n-----\nBefore using this function you should read the :ref:`gotchas about the\nHTML parsing libraries <io.html.gotchas>`.\n\nExpect to do some cleanup after you call this function. For example, you\nmight need to manually assign column names if the column names are\nconverted to NaN when you pass the `header=0` argument. We try to assume as\nlittle as possible about the structure of the table and push the\nidiosyncrasies of the HTML contained in the table to the user.\n\nThis function searches for ``<table>`` elements and only for ``<tr>``\nand ``<th>`` rows and ``<td>`` elements within each ``<tr>`` or ``<th>``\nelement in the table. ``<td>`` stands for \"table data\". This function\nattempts to properly handle ``colspan`` and ``rowspan`` attributes.\nIf the function has a ``<thead>`` argument, it is used to construct\nthe header, otherwise the function attempts to find the header within\nthe body (by putting rows with only ``<th>`` elements into the header).\n\nSimilar to :func:`~read_csv` the `header` argument is applied\n**after** `skiprows` is applied.\n\nThis function will *always* return a list of :class:`DataFrame` *or*\nit will fail, e.g., it will *not* return an empty list.\n\nExamples\n--------\nSee the :ref:`read_html documentation in the IO section of the docs\n<io.read_html>` for some examples of reading in HTML tables."
  },
  {
    "symbol": "pandas.read_json",
    "signature": "(path_or_buf: 'FilePath | ReadBuffer[str] | ReadBuffer[bytes]', *, orient: 'str | None' = None, typ: \"Literal['frame', 'series']\" = 'frame', dtype: 'DtypeArg | None' = None, convert_axes: 'bool | None' = None, convert_dates: 'bool | list[str]' = True, keep_default_dates: 'bool' = True, precise_float: 'bool' = False, date_unit: 'str | None' = None, encoding: 'str | None' = None, encoding_errors: 'str | None' = 'strict', lines: 'bool' = False, chunksize: 'int | None' = None, compression: 'CompressionOptions' = 'infer', nrows: 'int | None' = None, storage_options: 'StorageOptions | None' = None, dtype_backend: 'DtypeBackend | lib.NoDefault' = <no_default>, engine: 'JSONEngine' = 'ujson') -> 'DataFrame | Series | JsonReader'",
    "doc": "Convert a JSON string to pandas object.\n\nParameters\n----------\npath_or_buf : a valid JSON str, path object or file-like object\n    Any valid string path is acceptable. The string could be a URL. Valid\n    URL schemes include http, ftp, s3, and file. For file URLs, a host is\n    expected. A local file could be:\n    ``file://localhost/path/to/table.json``.\n\n    If you want to pass in a path object, pandas accepts any\n    ``os.PathLike``.\n\n    By file-like object, we refer to objects with a ``read()`` method,\n    such as a file handle (e.g. via builtin ``open`` function)\n    or ``StringIO``.\n\n    .. deprecated:: 2.1.0\n        Passing json literal strings is deprecated.\n\norient : str, optional\n    Indication of expected JSON string format.\n    Compatible JSON strings can be produced by ``to_json()`` with a\n    corresponding orient value.\n    The set of possible orients is:\n\n    - ``'split'`` : dict like\n      ``{index -> [index], columns -> [columns], data -> [values]}``\n    - ``'records'`` : list like\n      ``[{column -> value}, ... , {column -> value}]``\n    - ``'index'`` : dict like ``{index -> {column -> value}}``\n    - ``'columns'`` : dict like ``{column -> {index -> value}}``\n    - ``'values'`` : just the values array\n    - ``'table'`` : dict like ``{'schema': {schema}, 'data': {data}}``\n\n    The allowed and default values depend on the value\n    of the `typ` parameter.\n\n    * when ``typ == 'series'``,\n\n      - allowed orients are ``{'split','records','index'}``\n      - default is ``'index'``\n      - The Series index must be unique for orient ``'index'``.\n\n    * when ``typ == 'frame'``,\n\n      - allowed orients are ``{'split','records','index',\n        'columns','values', 'table'}``\n      - default is ``'columns'``\n      - The DataFrame index must be unique for orients ``'index'`` and\n        ``'columns'``.\n      - The DataFrame columns must be unique for orients ``'index'``,\n        ``'columns'``, and ``'records'``.\n\ntyp : {'frame', 'series'}, default 'frame'\n    The type of object to recover.\n\ndtype : bool or dict, default None\n    If True, infer dtypes; if a dict of column to dtype, then use those;\n    if False, then don't infer dtypes at all, applies only to the data.\n\n    For all ``orient`` values except ``'table'``, default is True.\n\nconvert_axes : bool, default None\n    Try to convert the axes to the proper dtypes.\n\n    For all ``orient`` values except ``'table'``, default is True.\n\nconvert_dates : bool or list of str, default True\n    If True then default datelike columns may be converted (depending on\n    keep_default_dates).\n    If False, no dates will be converted.\n    If a list of column names, then those columns will be converted and\n    default datelike columns may also be converted (depending on\n    keep_default_dates).\n\nkeep_default_dates : bool, default True\n    If parsing dates (convert_dates is not False), then try to parse the\n    default datelike columns.\n    A column label is datelike if\n\n    * it ends with ``'_at'``,\n\n    * it ends with ``'_time'``,\n\n    * it begins with ``'timestamp'``,\n\n    * it is ``'modified'``, or\n\n    * it is ``'date'``.\n\nprecise_float : bool, default False\n    Set to enable usage of higher precision (strtod) function when\n    decoding string to double values. Default (False) is to use fast but\n    less precise builtin functionality.\n\ndate_unit : str, default None\n    The timestamp unit to detect if converting dates. The default behaviour\n    is to try and detect the correct precision, but if this is not desired\n    then pass one of 's', 'ms', 'us' or 'ns' to force parsing only seconds,\n    milliseconds, microseconds or nanoseconds respectively.\n\nencoding : str, default is 'utf-8'\n    The encoding to use to decode py3 bytes.\n\nencoding_errors : str, optional, default \"strict\"\n    How encoding errors are treated. `List of possible values\n    <https://docs.python.org/3/library/codecs.html#error-handlers>`_ .\n\n    .. versionadded:: 1.3.0\n\nlines : bool, default False\n    Read the file as a json object per line.\n\nchunksize : int, optional\n    Return JsonReader object for iteration.\n    See the `line-delimited json docs\n    <https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#line-delimited-json>`_\n    for more information on ``chunksize``.\n    This can only be passed if `lines=True`.\n    If this is None, the file will be read into memory all at once.\ncompression : str or dict, default 'infer'\n    For on-the-fly decompression of on-disk data. If 'infer' and 'path_or_buf' is\n    path-like, then detect compression from the following extensions: '.gz',\n    '.bz2', '.zip', '.xz', '.zst', '.tar', '.tar.gz', '.tar.xz' or '.tar.bz2'\n    (otherwise no compression).\n    If using 'zip' or 'tar', the ZIP file must contain only one data file to be read in.\n    Set to ``None`` for no decompression.\n    Can also be a dict with key ``'method'`` set\n    to one of {``'zip'``, ``'gzip'``, ``'bz2'``, ``'zstd'``, ``'xz'``, ``'tar'``} and\n    other key-value pairs are forwarded to\n    ``zipfile.ZipFile``, ``gzip.GzipFile``,\n    ``bz2.BZ2File``, ``zstandard.ZstdDecompressor``, ``lzma.LZMAFile`` or\n    ``tarfile.TarFile``, respectively.\n    As an example, the following could be passed for Zstandard decompression using a\n    custom compression dictionary:\n    ``compression={'method': 'zstd', 'dict_data': my_compression_dict}``.\n\n    .. versionadded:: 1.5.0\n        Added support for `.tar` files.\n\n    .. versionchanged:: 1.4.0 Zstandard support.\n\nnrows : int, optional\n    The number of lines from the line-delimited jsonfile that has to be read.\n    This can only be passed if `lines=True`.\n    If this is None, all the rows will be returned.\n\nstorage_options : dict, optional\n    Extra options that make sense for a particular storage connection, e.g.\n    host, port, username, password, etc. For HTTP(S) URLs the key-value pairs\n    are forwarded to ``urllib.request.Request`` as header options. For other\n    URLs (e.g. starting with \"s3://\", and \"gcs://\") the key-value pairs are\n    forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more\n    details, and for more examples on storage options refer `here\n    <https://pandas.pydata.org/docs/user_guide/io.html?\n    highlight=storage_options#reading-writing-remote-files>`_.\n\ndtype_backend : {'numpy_nullable', 'pyarrow'}, default 'numpy_nullable'\n    Back-end data type applied to the resultant :class:`DataFrame`\n    (still experimental). Behaviour is as follows:\n\n    * ``\"numpy_nullable\"``: returns nullable-dtype-backed :class:`DataFrame`\n      (default).\n    * ``\"pyarrow\"``: returns pyarrow-backed nullable :class:`ArrowDtype`\n      DataFrame.\n\n    .. versionadded:: 2.0\n\nengine : {\"ujson\", \"pyarrow\"}, default \"ujson\"\n    Parser engine to use. The ``\"pyarrow\"`` engine is only available when\n    ``lines=True``.\n\n    .. versionadded:: 2.0\n\nReturns\n-------\nSeries, DataFrame, or pandas.api.typing.JsonReader\n    A JsonReader is returned when ``chunksize`` is not ``0`` or ``None``.\n    Otherwise, the type returned depends on the value of ``typ``.\n\nSee Also\n--------\nDataFrame.to_json : Convert a DataFrame to a JSON string.\nSeries.to_json : Convert a Series to a JSON string.\njson_normalize : Normalize semi-structured JSON data into a flat table.\n\nNotes\n-----\nSpecific to ``orient='table'``, if a :class:`DataFrame` with a literal\n:class:`Index` name of `index` gets written with :func:`to_json`, the\nsubsequent read operation will incorrectly set the :class:`Index` name to\n``None``. This is because `index` is also used by :func:`DataFrame.to_json`\nto denote a missing :class:`Index` name, and the subsequent\n:func:`read_json` operation cannot distinguish between the two. The same\nlimitation is encountered with a :class:`MultiIndex` and any names\nbeginning with ``'level_'``.\n\nExamples\n--------\n>>> from io import StringIO\n>>> df = pd.DataFrame([['a', 'b'], ['c', 'd']],\n...                   index=['row 1', 'row 2'],\n...                   columns=['col 1', 'col 2'])\n\nEncoding/decoding a Dataframe using ``'split'`` formatted JSON:\n\n>>> df.to_json(orient='split')\n    '{\"columns\":[\"col 1\",\"col 2\"],\"index\":[\"row 1\",\"row 2\"],\"data\":[[\"a\",\"b\"],[\"c\",\"d\"]]}'\n>>> pd.read_json(StringIO(_), orient='split')\n      col 1 col 2\nrow 1     a     b\nrow 2     c     d\n\nEncoding/decoding a Dataframe using ``'index'`` formatted JSON:\n\n>>> df.to_json(orient='index')\n'{\"row 1\":{\"col 1\":\"a\",\"col 2\":\"b\"},\"row 2\":{\"col 1\":\"c\",\"col 2\":\"d\"}}'\n\n>>> pd.read_json(StringIO(_), orient='index')\n      col 1 col 2\nrow 1     a     b\nrow 2     c     d\n\nEncoding/decoding a Dataframe using ``'records'`` formatted JSON.\nNote that index labels are not preserved with this encoding.\n\n>>> df.to_json(orient='records')\n'[{\"col 1\":\"a\",\"col 2\":\"b\"},{\"col 1\":\"c\",\"col 2\":\"d\"}]'\n>>> pd.read_json(StringIO(_), orient='records')\n  col 1 col 2\n0     a     b\n1     c     d\n\nEncoding with Table Schema\n\n>>> df.to_json(orient='table')\n    '{\"schema\":{\"fields\":[{\"name\":\"index\",\"type\":\"string\"},{\"name\":\"col 1\",\"type\":\"string\"},{\"name\":\"col 2\",\"type\":\"string\"}],\"primaryKey\":[\"index\"],\"pandas_version\":\"1.4.0\"},\"data\":[{\"index\":\"row 1\",\"col 1\":\"a\",\"col 2\":\"b\"},{\"index\":\"row 2\",\"col 1\":\"c\",\"col 2\":\"d\"}]}'\n\nThe following example uses ``dtype_backend=\"numpy_nullable\"``\n\n>>> data = '''{\"index\": {\"0\": 0, \"1\": 1},\n...        \"a\": {\"0\": 1, \"1\": null},\n...        \"b\": {\"0\": 2.5, \"1\": 4.5},\n...        \"c\": {\"0\": true, \"1\": false},\n...        \"d\": {\"0\": \"a\", \"1\": \"b\"},\n...        \"e\": {\"0\": 1577.2, \"1\": 1577.1}}'''\n>>> pd.read_json(StringIO(data), dtype_backend=\"numpy_nullable\")\n   index     a    b      c  d       e\n0      0     1  2.5   True  a  1577.2\n1      1  <NA>  4.5  False  b  1577.1"
  },
  {
    "symbol": "pandas.read_orc",
    "signature": "(path: 'FilePath | ReadBuffer[bytes]', columns: 'list[str] | None' = None, dtype_backend: 'DtypeBackend | lib.NoDefault' = <no_default>, filesystem: 'pyarrow.fs.FileSystem | fsspec.spec.AbstractFileSystem | None' = None, **kwargs: 'Any') -> 'DataFrame'",
    "doc": "Load an ORC object from the file path, returning a DataFrame.\n\nParameters\n----------\npath : str, path object, or file-like object\n    String, path object (implementing ``os.PathLike[str]``), or file-like\n    object implementing a binary ``read()`` function. The string could be a URL.\n    Valid URL schemes include http, ftp, s3, and file. For file URLs, a host is\n    expected. A local file could be:\n    ``file://localhost/path/to/table.orc``.\ncolumns : list, default None\n    If not None, only these columns will be read from the file.\n    Output always follows the ordering of the file and not the columns list.\n    This mirrors the original behaviour of\n    :external+pyarrow:py:meth:`pyarrow.orc.ORCFile.read`.\ndtype_backend : {'numpy_nullable', 'pyarrow'}, default 'numpy_nullable'\n    Back-end data type applied to the resultant :class:`DataFrame`\n    (still experimental). Behaviour is as follows:\n\n    * ``\"numpy_nullable\"``: returns nullable-dtype-backed :class:`DataFrame`\n      (default).\n    * ``\"pyarrow\"``: returns pyarrow-backed nullable :class:`ArrowDtype`\n      DataFrame.\n\n    .. versionadded:: 2.0\n\nfilesystem : fsspec or pyarrow filesystem, default None\n    Filesystem object to use when reading the parquet file.\n\n    .. versionadded:: 2.1.0\n\n**kwargs\n    Any additional kwargs are passed to pyarrow.\n\nReturns\n-------\nDataFrame\n\nNotes\n-----\nBefore using this function you should read the :ref:`user guide about ORC <io.orc>`\nand :ref:`install optional dependencies <install.warn_orc>`.\n\nIf ``path`` is a URI scheme pointing to a local or remote file (e.g. \"s3://\"),\na ``pyarrow.fs`` filesystem will be attempted to read the file. You can also pass a\npyarrow or fsspec filesystem object into the filesystem keyword to override this\nbehavior.\n\nExamples\n--------\n>>> result = pd.read_orc(\"example_pa.orc\")  # doctest: +SKIP"
  },
  {
    "symbol": "pandas.read_parquet",
    "signature": "(path: 'FilePath | ReadBuffer[bytes]', engine: 'str' = 'auto', columns: 'list[str] | None' = None, storage_options: 'StorageOptions | None' = None, use_nullable_dtypes: 'bool | lib.NoDefault' = <no_default>, dtype_backend: 'DtypeBackend | lib.NoDefault' = <no_default>, filesystem: 'Any' = None, filters: 'list[tuple] | list[list[tuple]] | None' = None, **kwargs) -> 'DataFrame'",
    "doc": "Load a parquet object from the file path, returning a DataFrame.\n\nParameters\n----------\npath : str, path object or file-like object\n    String, path object (implementing ``os.PathLike[str]``), or file-like\n    object implementing a binary ``read()`` function.\n    The string could be a URL. Valid URL schemes include http, ftp, s3,\n    gs, and file. For file URLs, a host is expected. A local file could be:\n    ``file://localhost/path/to/table.parquet``.\n    A file URL can also be a path to a directory that contains multiple\n    partitioned parquet files. Both pyarrow and fastparquet support\n    paths to directories as well as file URLs. A directory path could be:\n    ``file://localhost/path/to/tables`` or ``s3://bucket/partition_dir``.\nengine : {'auto', 'pyarrow', 'fastparquet'}, default 'auto'\n    Parquet library to use. If 'auto', then the option\n    ``io.parquet.engine`` is used. The default ``io.parquet.engine``\n    behavior is to try 'pyarrow', falling back to 'fastparquet' if\n    'pyarrow' is unavailable.\n\n    When using the ``'pyarrow'`` engine and no storage options are provided\n    and a filesystem is implemented by both ``pyarrow.fs`` and ``fsspec``\n    (e.g. \"s3://\"), then the ``pyarrow.fs`` filesystem is attempted first.\n    Use the filesystem keyword with an instantiated fsspec filesystem\n    if you wish to use its implementation.\ncolumns : list, default=None\n    If not None, only these columns will be read from the file.\nstorage_options : dict, optional\n    Extra options that make sense for a particular storage connection, e.g.\n    host, port, username, password, etc. For HTTP(S) URLs the key-value pairs\n    are forwarded to ``urllib.request.Request`` as header options. For other\n    URLs (e.g. starting with \"s3://\", and \"gcs://\") the key-value pairs are\n    forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more\n    details, and for more examples on storage options refer `here\n    <https://pandas.pydata.org/docs/user_guide/io.html?\n    highlight=storage_options#reading-writing-remote-files>`_.\n\n    .. versionadded:: 1.3.0\n\nuse_nullable_dtypes : bool, default False\n    If True, use dtypes that use ``pd.NA`` as missing value indicator\n    for the resulting DataFrame. (only applicable for the ``pyarrow``\n    engine)\n    As new dtypes are added that support ``pd.NA`` in the future, the\n    output with this option will change to use those dtypes.\n    Note: this is an experimental option, and behaviour (e.g. additional\n    support dtypes) may change without notice.\n\n    .. deprecated:: 2.0\n\ndtype_backend : {'numpy_nullable', 'pyarrow'}, default 'numpy_nullable'\n    Back-end data type applied to the resultant :class:`DataFrame`\n    (still experimental). Behaviour is as follows:\n\n    * ``\"numpy_nullable\"``: returns nullable-dtype-backed :class:`DataFrame`\n      (default).\n    * ``\"pyarrow\"``: returns pyarrow-backed nullable :class:`ArrowDtype`\n      DataFrame.\n\n    .. versionadded:: 2.0\n\nfilesystem : fsspec or pyarrow filesystem, default None\n    Filesystem object to use when reading the parquet file. Only implemented\n    for ``engine=\"pyarrow\"``.\n\n    .. versionadded:: 2.1.0\n\nfilters : List[Tuple] or List[List[Tuple]], default None\n    To filter out data.\n    Filter syntax: [[(column, op, val), ...],...]\n    where op is [==, =, >, >=, <, <=, !=, in, not in]\n    The innermost tuples are transposed into a set of filters applied\n    through an `AND` operation.\n    The outer list combines these sets of filters through an `OR`\n    operation.\n    A single list of tuples can also be used, meaning that no `OR`\n    operation between set of filters is to be conducted.\n\n    Using this argument will NOT result in row-wise filtering of the final\n    partitions unless ``engine=\"pyarrow\"`` is also specified.  For\n    other engines, filtering is only performed at the partition level, that is,\n    to prevent the loading of some row-groups and/or files.\n\n    .. versionadded:: 2.1.0\n\n**kwargs\n    Any additional kwargs are passed to the engine.\n\nReturns\n-------\nDataFrame\n\nSee Also\n--------\nDataFrame.to_parquet : Create a parquet object that serializes a DataFrame.\n\nExamples\n--------\n>>> original_df = pd.DataFrame(\n...     {\"foo\": range(5), \"bar\": range(5, 10)}\n...    )\n>>> original_df\n   foo  bar\n0    0    5\n1    1    6\n2    2    7\n3    3    8\n4    4    9\n>>> df_parquet_bytes = original_df.to_parquet()\n>>> from io import BytesIO\n>>> restored_df = pd.read_parquet(BytesIO(df_parquet_bytes))\n>>> restored_df\n   foo  bar\n0    0    5\n1    1    6\n2    2    7\n3    3    8\n4    4    9\n>>> restored_df.equals(original_df)\nTrue\n>>> restored_bar = pd.read_parquet(BytesIO(df_parquet_bytes), columns=[\"bar\"])\n>>> restored_bar\n    bar\n0    5\n1    6\n2    7\n3    8\n4    9\n>>> restored_bar.equals(original_df[['bar']])\nTrue\n\nThe function uses `kwargs` that are passed directly to the engine.\nIn the following example, we use the `filters` argument of the pyarrow\nengine to filter the rows of the DataFrame.\n\nSince `pyarrow` is the default engine, we can omit the `engine` argument.\nNote that the `filters` argument is implemented by the `pyarrow` engine,\nwhich can benefit from multithreading and also potentially be more\neconomical in terms of memory.\n\n>>> sel = [(\"foo\", \">\", 2)]\n>>> restored_part = pd.read_parquet(BytesIO(df_parquet_bytes), filters=sel)\n>>> restored_part\n    foo  bar\n0    3    8\n1    4    9"
  },
  {
    "symbol": "pandas.read_pickle",
    "signature": "(filepath_or_buffer: 'FilePath | ReadPickleBuffer', compression: 'CompressionOptions' = 'infer', storage_options: 'StorageOptions | None' = None) -> 'DataFrame | Series'",
    "doc": "Load pickled pandas object (or any object) from file.\n\n.. warning::\n\n   Loading pickled data received from untrusted sources can be\n   unsafe. See `here <https://docs.python.org/3/library/pickle.html>`__.\n\nParameters\n----------\nfilepath_or_buffer : str, path object, or file-like object\n    String, path object (implementing ``os.PathLike[str]``), or file-like\n    object implementing a binary ``readlines()`` function.\n    Also accepts URL. URL is not limited to S3 and GCS.\n\ncompression : str or dict, default 'infer'\n    For on-the-fly decompression of on-disk data. If 'infer' and 'filepath_or_buffer' is\n    path-like, then detect compression from the following extensions: '.gz',\n    '.bz2', '.zip', '.xz', '.zst', '.tar', '.tar.gz', '.tar.xz' or '.tar.bz2'\n    (otherwise no compression).\n    If using 'zip' or 'tar', the ZIP file must contain only one data file to be read in.\n    Set to ``None`` for no decompression.\n    Can also be a dict with key ``'method'`` set\n    to one of {``'zip'``, ``'gzip'``, ``'bz2'``, ``'zstd'``, ``'xz'``, ``'tar'``} and\n    other key-value pairs are forwarded to\n    ``zipfile.ZipFile``, ``gzip.GzipFile``,\n    ``bz2.BZ2File``, ``zstandard.ZstdDecompressor``, ``lzma.LZMAFile`` or\n    ``tarfile.TarFile``, respectively.\n    As an example, the following could be passed for Zstandard decompression using a\n    custom compression dictionary:\n    ``compression={'method': 'zstd', 'dict_data': my_compression_dict}``.\n\n    .. versionadded:: 1.5.0\n        Added support for `.tar` files.\n\n    .. versionchanged:: 1.4.0 Zstandard support.\n\nstorage_options : dict, optional\n    Extra options that make sense for a particular storage connection, e.g.\n    host, port, username, password, etc. For HTTP(S) URLs the key-value pairs\n    are forwarded to ``urllib.request.Request`` as header options. For other\n    URLs (e.g. starting with \"s3://\", and \"gcs://\") the key-value pairs are\n    forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more\n    details, and for more examples on storage options refer `here\n    <https://pandas.pydata.org/docs/user_guide/io.html?\n    highlight=storage_options#reading-writing-remote-files>`_.\n\nReturns\n-------\nsame type as object stored in file\n\nSee Also\n--------\nDataFrame.to_pickle : Pickle (serialize) DataFrame object to file.\nSeries.to_pickle : Pickle (serialize) Series object to file.\nread_hdf : Read HDF5 file into a DataFrame.\nread_sql : Read SQL query or database table into a DataFrame.\nread_parquet : Load a parquet object, returning a DataFrame.\n\nNotes\n-----\nread_pickle is only guaranteed to be backwards compatible to pandas 0.20.3\nprovided the object was serialized with to_pickle.\n\nExamples\n--------\n>>> original_df = pd.DataFrame(\n...     {\"foo\": range(5), \"bar\": range(5, 10)}\n...    )  # doctest: +SKIP\n>>> original_df  # doctest: +SKIP\n   foo  bar\n0    0    5\n1    1    6\n2    2    7\n3    3    8\n4    4    9\n>>> pd.to_pickle(original_df, \"./dummy.pkl\")  # doctest: +SKIP\n\n>>> unpickled_df = pd.read_pickle(\"./dummy.pkl\")  # doctest: +SKIP\n>>> unpickled_df  # doctest: +SKIP\n   foo  bar\n0    0    5\n1    1    6\n2    2    7\n3    3    8\n4    4    9"
  },
  {
    "symbol": "pandas.read_sas",
    "signature": "(filepath_or_buffer: 'FilePath | ReadBuffer[bytes]', *, format: 'str | None' = None, index: 'Hashable | None' = None, encoding: 'str | None' = None, chunksize: 'int | None' = None, iterator: 'bool' = False, compression: 'CompressionOptions' = 'infer') -> 'DataFrame | ReaderBase'",
    "doc": "Read SAS files stored as either XPORT or SAS7BDAT format files.\n\nParameters\n----------\nfilepath_or_buffer : str, path object, or file-like object\n    String, path object (implementing ``os.PathLike[str]``), or file-like\n    object implementing a binary ``read()`` function. The string could be a URL.\n    Valid URL schemes include http, ftp, s3, and file. For file URLs, a host is\n    expected. A local file could be:\n    ``file://localhost/path/to/table.sas7bdat``.\nformat : str {'xport', 'sas7bdat'} or None\n    If None, file format is inferred from file extension. If 'xport' or\n    'sas7bdat', uses the corresponding format.\nindex : identifier of index column, defaults to None\n    Identifier of column that should be used as index of the DataFrame.\nencoding : str, default is None\n    Encoding for text data.  If None, text data are stored as raw bytes.\nchunksize : int\n    Read file `chunksize` lines at a time, returns iterator.\niterator : bool, defaults to False\n    If True, returns an iterator for reading the file incrementally.\ncompression : str or dict, default 'infer'\n    For on-the-fly decompression of on-disk data. If 'infer' and 'filepath_or_buffer' is\n    path-like, then detect compression from the following extensions: '.gz',\n    '.bz2', '.zip', '.xz', '.zst', '.tar', '.tar.gz', '.tar.xz' or '.tar.bz2'\n    (otherwise no compression).\n    If using 'zip' or 'tar', the ZIP file must contain only one data file to be read in.\n    Set to ``None`` for no decompression.\n    Can also be a dict with key ``'method'`` set\n    to one of {``'zip'``, ``'gzip'``, ``'bz2'``, ``'zstd'``, ``'xz'``, ``'tar'``} and\n    other key-value pairs are forwarded to\n    ``zipfile.ZipFile``, ``gzip.GzipFile``,\n    ``bz2.BZ2File``, ``zstandard.ZstdDecompressor``, ``lzma.LZMAFile`` or\n    ``tarfile.TarFile``, respectively.\n    As an example, the following could be passed for Zstandard decompression using a\n    custom compression dictionary:\n    ``compression={'method': 'zstd', 'dict_data': my_compression_dict}``.\n\n    .. versionadded:: 1.5.0\n        Added support for `.tar` files.\n\nReturns\n-------\nDataFrame if iterator=False and chunksize=None, else SAS7BDATReader\nor XportReader\n\nExamples\n--------\n>>> df = pd.read_sas(\"sas_data.sas7bdat\")  # doctest: +SKIP"
  },
  {
    "symbol": "pandas.read_spss",
    "signature": "(path: 'str | Path', usecols: 'Sequence[str] | None' = None, convert_categoricals: 'bool' = True, dtype_backend: 'DtypeBackend | lib.NoDefault' = <no_default>) -> 'DataFrame'",
    "doc": "Load an SPSS file from the file path, returning a DataFrame.\n\nParameters\n----------\npath : str or Path\n    File path.\nusecols : list-like, optional\n    Return a subset of the columns. If None, return all columns.\nconvert_categoricals : bool, default is True\n    Convert categorical columns into pd.Categorical.\ndtype_backend : {'numpy_nullable', 'pyarrow'}, default 'numpy_nullable'\n    Back-end data type applied to the resultant :class:`DataFrame`\n    (still experimental). Behaviour is as follows:\n\n    * ``\"numpy_nullable\"``: returns nullable-dtype-backed :class:`DataFrame`\n      (default).\n    * ``\"pyarrow\"``: returns pyarrow-backed nullable :class:`ArrowDtype`\n      DataFrame.\n\n    .. versionadded:: 2.0\n\nReturns\n-------\nDataFrame\n\nExamples\n--------\n>>> df = pd.read_spss(\"spss_data.sav\")  # doctest: +SKIP"
  },
  {
    "symbol": "pandas.read_sql",
    "signature": "(sql, con, index_col: 'str | list[str] | None' = None, coerce_float: 'bool' = True, params=None, parse_dates=None, columns: 'list[str] | None' = None, chunksize: 'int | None' = None, dtype_backend: 'DtypeBackend | lib.NoDefault' = <no_default>, dtype: 'DtypeArg | None' = None) -> 'DataFrame | Iterator[DataFrame]'",
    "doc": "Read SQL query or database table into a DataFrame.\n\nThis function is a convenience wrapper around ``read_sql_table`` and\n``read_sql_query`` (for backward compatibility). It will delegate\nto the specific function depending on the provided input. A SQL query\nwill be routed to ``read_sql_query``, while a database table name will\nbe routed to ``read_sql_table``. Note that the delegated function might\nhave more specific notes about their functionality not listed here.\n\nParameters\n----------\nsql : str or SQLAlchemy Selectable (select or text object)\n    SQL query to be executed or a table name.\ncon : ADBC Connection, SQLAlchemy connectable, str, or sqlite3 connection\n    ADBC provides high performance I/O with native type support, where available.\n    Using SQLAlchemy makes it possible to use any DB supported by that\n    library. If a DBAPI2 object, only sqlite3 is supported. The user is responsible\n    for engine disposal and connection closure for the ADBC connection and\n    SQLAlchemy connectable; str connections are closed automatically. See\n    `here <https://docs.sqlalchemy.org/en/20/core/connections.html>`_.\nindex_col : str or list of str, optional, default: None\n    Column(s) to set as index(MultiIndex).\ncoerce_float : bool, default True\n    Attempts to convert values of non-string, non-numeric objects (like\n    decimal.Decimal) to floating point, useful for SQL result sets.\nparams : list, tuple or dict, optional, default: None\n    List of parameters to pass to execute method.  The syntax used\n    to pass parameters is database driver dependent. Check your\n    database driver documentation for which of the five syntax styles,\n    described in PEP 249's paramstyle, is supported.\n    Eg. for psycopg2, uses %(name)s so use params={'name' : 'value'}.\nparse_dates : list or dict, default: None\n    - List of column names to parse as dates.\n    - Dict of ``{column_name: format string}`` where format string is\n      strftime compatible in case of parsing string times, or is one of\n      (D, s, ns, ms, us) in case of parsing integer timestamps.\n    - Dict of ``{column_name: arg dict}``, where the arg dict corresponds\n      to the keyword arguments of :func:`pandas.to_datetime`\n      Especially useful with databases without native Datetime support,\n      such as SQLite.\ncolumns : list, default: None\n    List of column names to select from SQL table (only used when reading\n    a table).\nchunksize : int, default None\n    If specified, return an iterator where `chunksize` is the\n    number of rows to include in each chunk.\ndtype_backend : {'numpy_nullable', 'pyarrow'}, default 'numpy_nullable'\n    Back-end data type applied to the resultant :class:`DataFrame`\n    (still experimental). Behaviour is as follows:\n\n    * ``\"numpy_nullable\"``: returns nullable-dtype-backed :class:`DataFrame`\n      (default).\n    * ``\"pyarrow\"``: returns pyarrow-backed nullable :class:`ArrowDtype`\n      DataFrame.\n\n    .. versionadded:: 2.0\ndtype : Type name or dict of columns\n    Data type for data or columns. E.g. np.float64 or\n    {'a': np.float64, 'b': np.int32, 'c': 'Int64'}.\n    The argument is ignored if a table is passed instead of a query.\n\n    .. versionadded:: 2.0.0\n\nReturns\n-------\nDataFrame or Iterator[DataFrame]\n\nSee Also\n--------\nread_sql_table : Read SQL database table into a DataFrame.\nread_sql_query : Read SQL query into a DataFrame.\n\nExamples\n--------\nRead data from SQL via either a SQL query or a SQL tablename.\nWhen using a SQLite database only SQL queries are accepted,\nproviding only the SQL tablename will result in an error.\n\n>>> from sqlite3 import connect\n>>> conn = connect(':memory:')\n>>> df = pd.DataFrame(data=[[0, '10/11/12'], [1, '12/11/10']],\n...                   columns=['int_column', 'date_column'])\n>>> df.to_sql(name='test_data', con=conn)\n2\n\n>>> pd.read_sql('SELECT int_column, date_column FROM test_data', conn)\n   int_column date_column\n0           0    10/11/12\n1           1    12/11/10\n\n>>> pd.read_sql('test_data', 'postgres:///db_name')  # doctest:+SKIP\n\nApply date parsing to columns through the ``parse_dates`` argument\nThe ``parse_dates`` argument calls ``pd.to_datetime`` on the provided columns.\nCustom argument values for applying ``pd.to_datetime`` on a column are specified\nvia a dictionary format:\n\n>>> pd.read_sql('SELECT int_column, date_column FROM test_data',\n...             conn,\n...             parse_dates={\"date_column\": {\"format\": \"%d/%m/%y\"}})\n   int_column date_column\n0           0  2012-11-10\n1           1  2010-11-12\n\n.. versionadded:: 2.2.0\n\n   pandas now supports reading via ADBC drivers\n\n>>> from adbc_driver_postgresql import dbapi  # doctest:+SKIP\n>>> with dbapi.connect('postgres:///db_name') as conn:  # doctest:+SKIP\n...     pd.read_sql('SELECT int_column FROM test_data', conn)\n   int_column\n0           0\n1           1"
  },
  {
    "symbol": "pandas.read_sql_query",
    "signature": "(sql, con, index_col: 'str | list[str] | None' = None, coerce_float: 'bool' = True, params: 'list[Any] | Mapping[str, Any] | None' = None, parse_dates: 'list[str] | dict[str, str] | None' = None, chunksize: 'int | None' = None, dtype: 'DtypeArg | None' = None, dtype_backend: 'DtypeBackend | lib.NoDefault' = <no_default>) -> 'DataFrame | Iterator[DataFrame]'",
    "doc": "Read SQL query into a DataFrame.\n\nReturns a DataFrame corresponding to the result set of the query\nstring. Optionally provide an `index_col` parameter to use one of the\ncolumns as the index, otherwise default integer index will be used.\n\nParameters\n----------\nsql : str SQL query or SQLAlchemy Selectable (select or text object)\n    SQL query to be executed.\ncon : SQLAlchemy connectable, str, or sqlite3 connection\n    Using SQLAlchemy makes it possible to use any DB supported by that\n    library. If a DBAPI2 object, only sqlite3 is supported.\nindex_col : str or list of str, optional, default: None\n    Column(s) to set as index(MultiIndex).\ncoerce_float : bool, default True\n    Attempts to convert values of non-string, non-numeric objects (like\n    decimal.Decimal) to floating point. Useful for SQL result sets.\nparams : list, tuple or mapping, optional, default: None\n    List of parameters to pass to execute method.  The syntax used\n    to pass parameters is database driver dependent. Check your\n    database driver documentation for which of the five syntax styles,\n    described in PEP 249's paramstyle, is supported.\n    Eg. for psycopg2, uses %(name)s so use params={'name' : 'value'}.\nparse_dates : list or dict, default: None\n    - List of column names to parse as dates.\n    - Dict of ``{column_name: format string}`` where format string is\n      strftime compatible in case of parsing string times, or is one of\n      (D, s, ns, ms, us) in case of parsing integer timestamps.\n    - Dict of ``{column_name: arg dict}``, where the arg dict corresponds\n      to the keyword arguments of :func:`pandas.to_datetime`\n      Especially useful with databases without native Datetime support,\n      such as SQLite.\nchunksize : int, default None\n    If specified, return an iterator where `chunksize` is the number of\n    rows to include in each chunk.\ndtype : Type name or dict of columns\n    Data type for data or columns. E.g. np.float64 or\n    {'a': np.float64, 'b': np.int32, 'c': 'Int64'}.\n\n    .. versionadded:: 1.3.0\ndtype_backend : {'numpy_nullable', 'pyarrow'}, default 'numpy_nullable'\n    Back-end data type applied to the resultant :class:`DataFrame`\n    (still experimental). Behaviour is as follows:\n\n    * ``\"numpy_nullable\"``: returns nullable-dtype-backed :class:`DataFrame`\n      (default).\n    * ``\"pyarrow\"``: returns pyarrow-backed nullable :class:`ArrowDtype`\n      DataFrame.\n\n    .. versionadded:: 2.0\n\nReturns\n-------\nDataFrame or Iterator[DataFrame]\n\nSee Also\n--------\nread_sql_table : Read SQL database table into a DataFrame.\nread_sql : Read SQL query or database table into a DataFrame.\n\nNotes\n-----\nAny datetime values with time zone information parsed via the `parse_dates`\nparameter will be converted to UTC.\n\nExamples\n--------\n>>> from sqlalchemy import create_engine  # doctest: +SKIP\n>>> engine = create_engine(\"sqlite:///database.db\")  # doctest: +SKIP\n>>> with engine.connect() as conn, conn.begin():  # doctest: +SKIP\n...     data = pd.read_sql_table(\"data\", conn)  # doctest: +SKIP"
  },
  {
    "symbol": "pandas.read_sql_table",
    "signature": "(table_name: 'str', con, schema: 'str | None' = None, index_col: 'str | list[str] | None' = None, coerce_float: 'bool' = True, parse_dates: 'list[str] | dict[str, str] | None' = None, columns: 'list[str] | None' = None, chunksize: 'int | None' = None, dtype_backend: 'DtypeBackend | lib.NoDefault' = <no_default>) -> 'DataFrame | Iterator[DataFrame]'",
    "doc": "Read SQL database table into a DataFrame.\n\nGiven a table name and a SQLAlchemy connectable, returns a DataFrame.\nThis function does not support DBAPI connections.\n\nParameters\n----------\ntable_name : str\n    Name of SQL table in database.\ncon : SQLAlchemy connectable or str\n    A database URI could be provided as str.\n    SQLite DBAPI connection mode not supported.\nschema : str, default None\n    Name of SQL schema in database to query (if database flavor\n    supports this). Uses default schema if None (default).\nindex_col : str or list of str, optional, default: None\n    Column(s) to set as index(MultiIndex).\ncoerce_float : bool, default True\n    Attempts to convert values of non-string, non-numeric objects (like\n    decimal.Decimal) to floating point. Can result in loss of Precision.\nparse_dates : list or dict, default None\n    - List of column names to parse as dates.\n    - Dict of ``{column_name: format string}`` where format string is\n      strftime compatible in case of parsing string times or is one of\n      (D, s, ns, ms, us) in case of parsing integer timestamps.\n    - Dict of ``{column_name: arg dict}``, where the arg dict corresponds\n      to the keyword arguments of :func:`pandas.to_datetime`\n      Especially useful with databases without native Datetime support,\n      such as SQLite.\ncolumns : list, default None\n    List of column names to select from SQL table.\nchunksize : int, default None\n    If specified, returns an iterator where `chunksize` is the number of\n    rows to include in each chunk.\ndtype_backend : {'numpy_nullable', 'pyarrow'}, default 'numpy_nullable'\n    Back-end data type applied to the resultant :class:`DataFrame`\n    (still experimental). Behaviour is as follows:\n\n    * ``\"numpy_nullable\"``: returns nullable-dtype-backed :class:`DataFrame`\n      (default).\n    * ``\"pyarrow\"``: returns pyarrow-backed nullable :class:`ArrowDtype`\n      DataFrame.\n\n    .. versionadded:: 2.0\n\nReturns\n-------\nDataFrame or Iterator[DataFrame]\n    A SQL table is returned as two-dimensional data structure with labeled\n    axes.\n\nSee Also\n--------\nread_sql_query : Read SQL query into a DataFrame.\nread_sql : Read SQL query or database table into a DataFrame.\n\nNotes\n-----\nAny datetime values with time zone information will be converted to UTC.\n\nExamples\n--------\n>>> pd.read_sql_table('table_name', 'postgres:///db_name')  # doctest:+SKIP"
  },
  {
    "symbol": "pandas.read_stata",
    "signature": "(filepath_or_buffer: 'FilePath | ReadBuffer[bytes]', *, convert_dates: 'bool' = True, convert_categoricals: 'bool' = True, index_col: 'str | None' = None, convert_missing: 'bool' = False, preserve_dtypes: 'bool' = True, columns: 'Sequence[str] | None' = None, order_categoricals: 'bool' = True, chunksize: 'int | None' = None, iterator: 'bool' = False, compression: 'CompressionOptions' = 'infer', storage_options: 'StorageOptions | None' = None) -> 'DataFrame | StataReader'",
    "doc": "Read Stata file into DataFrame.\n\nParameters\n----------\nfilepath_or_buffer : str, path object or file-like object\n    Any valid string path is acceptable. The string could be a URL. Valid\n    URL schemes include http, ftp, s3, and file. For file URLs, a host is\n    expected. A local file could be: ``file://localhost/path/to/table.dta``.\n\n    If you want to pass in a path object, pandas accepts any ``os.PathLike``.\n\n    By file-like object, we refer to objects with a ``read()`` method,\n    such as a file handle (e.g. via builtin ``open`` function)\n    or ``StringIO``.\nconvert_dates : bool, default True\n    Convert date variables to DataFrame time values.\nconvert_categoricals : bool, default True\n    Read value labels and convert columns to Categorical/Factor variables.\nindex_col : str, optional\n    Column to set as index.\nconvert_missing : bool, default False\n    Flag indicating whether to convert missing values to their Stata\n    representations.  If False, missing values are replaced with nan.\n    If True, columns containing missing values are returned with\n    object data types and missing values are represented by\n    StataMissingValue objects.\npreserve_dtypes : bool, default True\n    Preserve Stata datatypes. If False, numeric data are upcast to pandas\n    default types for foreign data (float64 or int64).\ncolumns : list or None\n    Columns to retain.  Columns will be returned in the given order.  None\n    returns all columns.\norder_categoricals : bool, default True\n    Flag indicating whether converted categorical data are ordered.\nchunksize : int, default None\n    Return StataReader object for iterations, returns chunks with\n    given number of lines.\niterator : bool, default False\n    Return StataReader object.\ncompression : str or dict, default 'infer'\n    For on-the-fly decompression of on-disk data. If 'infer' and 'filepath_or_buffer' is\n    path-like, then detect compression from the following extensions: '.gz',\n    '.bz2', '.zip', '.xz', '.zst', '.tar', '.tar.gz', '.tar.xz' or '.tar.bz2'\n    (otherwise no compression).\n    If using 'zip' or 'tar', the ZIP file must contain only one data file to be read in.\n    Set to ``None`` for no decompression.\n    Can also be a dict with key ``'method'`` set\n    to one of {``'zip'``, ``'gzip'``, ``'bz2'``, ``'zstd'``, ``'xz'``, ``'tar'``} and\n    other key-value pairs are forwarded to\n    ``zipfile.ZipFile``, ``gzip.GzipFile``,\n    ``bz2.BZ2File``, ``zstandard.ZstdDecompressor``, ``lzma.LZMAFile`` or\n    ``tarfile.TarFile``, respectively.\n    As an example, the following could be passed for Zstandard decompression using a\n    custom compression dictionary:\n    ``compression={'method': 'zstd', 'dict_data': my_compression_dict}``.\n\n    .. versionadded:: 1.5.0\n        Added support for `.tar` files.\nstorage_options : dict, optional\n    Extra options that make sense for a particular storage connection, e.g.\n    host, port, username, password, etc. For HTTP(S) URLs the key-value pairs\n    are forwarded to ``urllib.request.Request`` as header options. For other\n    URLs (e.g. starting with \"s3://\", and \"gcs://\") the key-value pairs are\n    forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more\n    details, and for more examples on storage options refer `here\n    <https://pandas.pydata.org/docs/user_guide/io.html?\n    highlight=storage_options#reading-writing-remote-files>`_.\n\nReturns\n-------\nDataFrame or pandas.api.typing.StataReader\n\nSee Also\n--------\nio.stata.StataReader : Low-level reader for Stata data files.\nDataFrame.to_stata: Export Stata data files.\n\nNotes\n-----\nCategorical variables read through an iterator may not have the same\ncategories and dtype. This occurs when  a variable stored in a DTA\nfile is associated to an incomplete set of value labels that only\nlabel a strict subset of the values.\n\nExamples\n--------\n\nCreating a dummy stata for this example\n\n>>> df = pd.DataFrame({'animal': ['falcon', 'parrot', 'falcon', 'parrot'],\n...                     'speed': [350, 18, 361, 15]})  # doctest: +SKIP\n>>> df.to_stata('animals.dta')  # doctest: +SKIP\n\nRead a Stata dta file:\n\n>>> df = pd.read_stata('animals.dta')  # doctest: +SKIP\n\nRead a Stata dta file in 10,000 line chunks:\n\n>>> values = np.random.randint(0, 10, size=(20_000, 1), dtype=\"uint8\")  # doctest: +SKIP\n>>> df = pd.DataFrame(values, columns=[\"i\"])  # doctest: +SKIP\n>>> df.to_stata('filename.dta')  # doctest: +SKIP\n\n>>> with pd.read_stata('filename.dta', chunksize=10000) as itr: # doctest: +SKIP\n>>>     for chunk in itr:\n...         # Operate on a single chunk, e.g., chunk.mean()\n...         pass  # doctest: +SKIP"
  },
  {
    "symbol": "pandas.read_table",
    "signature": "(filepath_or_buffer: 'FilePath | ReadCsvBuffer[bytes] | ReadCsvBuffer[str]', *, sep: 'str | None | lib.NoDefault' = <no_default>, delimiter: 'str | None | lib.NoDefault' = None, header: \"int | Sequence[int] | None | Literal['infer']\" = 'infer', names: 'Sequence[Hashable] | None | lib.NoDefault' = <no_default>, index_col: 'IndexLabel | Literal[False] | None' = None, usecols: 'UsecolsArgType' = None, dtype: 'DtypeArg | None' = None, engine: 'CSVEngine | None' = None, converters: 'Mapping[Hashable, Callable] | None' = None, true_values: 'list | None' = None, false_values: 'list | None' = None, skipinitialspace: 'bool' = False, skiprows: 'list[int] | int | Callable[[Hashable], bool] | None' = None, skipfooter: 'int' = 0, nrows: 'int | None' = None, na_values: 'Sequence[str] | Mapping[str, Sequence[str]] | None' = None, keep_default_na: 'bool' = True, na_filter: 'bool' = True, verbose: 'bool | lib.NoDefault' = <no_default>, skip_blank_lines: 'bool' = True, parse_dates: 'bool | Sequence[Hashable]' = False, infer_datetime_format: 'bool | lib.NoDefault' = <no_default>, keep_date_col: 'bool | lib.NoDefault' = <no_default>, date_parser: 'Callable | lib.NoDefault' = <no_default>, date_format: 'str | dict[Hashable, str] | None' = None, dayfirst: 'bool' = False, cache_dates: 'bool' = True, iterator: 'bool' = False, chunksize: 'int | None' = None, compression: 'CompressionOptions' = 'infer', thousands: 'str | None' = None, decimal: 'str' = '.', lineterminator: 'str | None' = None, quotechar: 'str' = '\"', quoting: 'int' = 0, doublequote: 'bool' = True, escapechar: 'str | None' = None, comment: 'str | None' = None, encoding: 'str | None' = None, encoding_errors: 'str | None' = 'strict', dialect: 'str | csv.Dialect | None' = None, on_bad_lines: 'str' = 'error', delim_whitespace: 'bool | lib.NoDefault' = <no_default>, low_memory: 'bool' = True, memory_map: 'bool' = False, float_precision: 'str | None' = None, storage_options: 'StorageOptions | None' = None, dtype_backend: 'DtypeBackend | lib.NoDefault' = <no_default>) -> 'DataFrame | TextFileReader'",
    "doc": "Read general delimited file into DataFrame.\n\nAlso supports optionally iterating or breaking of the file\ninto chunks.\n\nAdditional help can be found in the online docs for\n`IO Tools <https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html>`_.\n\nParameters\n----------\nfilepath_or_buffer : str, path object or file-like object\n    Any valid string path is acceptable. The string could be a URL. Valid\n    URL schemes include http, ftp, s3, gs, and file. For file URLs, a host is\n    expected. A local file could be: file://localhost/path/to/table.csv.\n\n    If you want to pass in a path object, pandas accepts any ``os.PathLike``.\n\n    By file-like object, we refer to objects with a ``read()`` method, such as\n    a file handle (e.g. via builtin ``open`` function) or ``StringIO``.\nsep : str, default '\\\\t' (tab-stop)\n    Character or regex pattern to treat as the delimiter. If ``sep=None``, the\n    C engine cannot automatically detect\n    the separator, but the Python parsing engine can, meaning the latter will\n    be used and automatically detect the separator from only the first valid\n    row of the file by Python's builtin sniffer tool, ``csv.Sniffer``.\n    In addition, separators longer than 1 character and different from\n    ``'\\s+'`` will be interpreted as regular expressions and will also force\n    the use of the Python parsing engine. Note that regex delimiters are prone\n    to ignoring quoted data. Regex example: ``'\\r\\t'``.\ndelimiter : str, optional\n    Alias for ``sep``.\nheader : int, Sequence of int, 'infer' or None, default 'infer'\n    Row number(s) containing column labels and marking the start of the\n    data (zero-indexed). Default behavior is to infer the column names: if no ``names``\n    are passed the behavior is identical to ``header=0`` and column\n    names are inferred from the first line of the file, if column\n    names are passed explicitly to ``names`` then the behavior is identical to\n    ``header=None``. Explicitly pass ``header=0`` to be able to\n    replace existing names. The header can be a list of integers that\n    specify row locations for a :class:`~pandas.MultiIndex` on the columns\n    e.g. ``[0, 1, 3]``. Intervening rows that are not specified will be\n    skipped (e.g. 2 in this example is skipped). Note that this\n    parameter ignores commented lines and empty lines if\n    ``skip_blank_lines=True``, so ``header=0`` denotes the first line of\n    data rather than the first line of the file.\nnames : Sequence of Hashable, optional\n    Sequence of column labels to apply. If the file contains a header row,\n    then you should explicitly pass ``header=0`` to override the column names.\n    Duplicates in this list are not allowed.\nindex_col : Hashable, Sequence of Hashable or False, optional\n  Column(s) to use as row label(s), denoted either by column labels or column\n  indices.  If a sequence of labels or indices is given, :class:`~pandas.MultiIndex`\n  will be formed for the row labels.\n\n  Note: ``index_col=False`` can be used to force pandas to *not* use the first\n  column as the index, e.g., when you have a malformed file with delimiters at\n  the end of each line.\nusecols : Sequence of Hashable or Callable, optional\n    Subset of columns to select, denoted either by column labels or column indices.\n    If list-like, all elements must either\n    be positional (i.e. integer indices into the document columns) or strings\n    that correspond to column names provided either by the user in ``names`` or\n    inferred from the document header row(s). If ``names`` are given, the document\n    header row(s) are not taken into account. For example, a valid list-like\n    ``usecols`` parameter would be ``[0, 1, 2]`` or ``['foo', 'bar', 'baz']``.\n    Element order is ignored, so ``usecols=[0, 1]`` is the same as ``[1, 0]``.\n    To instantiate a :class:`~pandas.DataFrame` from ``data`` with element order\n    preserved use ``pd.read_csv(data, usecols=['foo', 'bar'])[['foo', 'bar']]``\n    for columns in ``['foo', 'bar']`` order or\n    ``pd.read_csv(data, usecols=['foo', 'bar'])[['bar', 'foo']]``\n    for ``['bar', 'foo']`` order.\n\n    If callable, the callable function will be evaluated against the column\n    names, returning names where the callable function evaluates to ``True``. An\n    example of a valid callable argument would be ``lambda x: x.upper() in\n    ['AAA', 'BBB', 'DDD']``. Using this parameter results in much faster\n    parsing time and lower memory usage.\ndtype : dtype or dict of {Hashable : dtype}, optional\n    Data type(s) to apply to either the whole dataset or individual columns.\n    E.g., ``{'a': np.float64, 'b': np.int32, 'c': 'Int64'}``\n    Use ``str`` or ``object`` together with suitable ``na_values`` settings\n    to preserve and not interpret ``dtype``.\n    If ``converters`` are specified, they will be applied INSTEAD\n    of ``dtype`` conversion.\n\n    .. versionadded:: 1.5.0\n\n        Support for ``defaultdict`` was added. Specify a ``defaultdict`` as input where\n        the default determines the ``dtype`` of the columns which are not explicitly\n        listed.\nengine : {'c', 'python', 'pyarrow'}, optional\n    Parser engine to use. The C and pyarrow engines are faster, while the python engine\n    is currently more feature-complete. Multithreading is currently only supported by\n    the pyarrow engine.\n\n    .. versionadded:: 1.4.0\n\n        The 'pyarrow' engine was added as an *experimental* engine, and some features\n        are unsupported, or may not work correctly, with this engine.\nconverters : dict of {Hashable : Callable}, optional\n    Functions for converting values in specified columns. Keys can either\n    be column labels or column indices.\ntrue_values : list, optional\n    Values to consider as ``True`` in addition to case-insensitive variants of 'True'.\nfalse_values : list, optional\n    Values to consider as ``False`` in addition to case-insensitive variants of 'False'.\nskipinitialspace : bool, default False\n    Skip spaces after delimiter.\nskiprows : int, list of int or Callable, optional\n    Line numbers to skip (0-indexed) or number of lines to skip (``int``)\n    at the start of the file.\n\n    If callable, the callable function will be evaluated against the row\n    indices, returning ``True`` if the row should be skipped and ``False`` otherwise.\n    An example of a valid callable argument would be ``lambda x: x in [0, 2]``.\nskipfooter : int, default 0\n    Number of lines at bottom of file to skip (Unsupported with ``engine='c'``).\nnrows : int, optional\n    Number of rows of file to read. Useful for reading pieces of large files.\nna_values : Hashable, Iterable of Hashable or dict of {Hashable : Iterable}, optional\n    Additional strings to recognize as ``NA``/``NaN``. If ``dict`` passed, specific\n    per-column ``NA`` values.  By default the following values are interpreted as\n    ``NaN``: \" \", \"#N/A\", \"#N/A N/A\", \"#NA\", \"-1.#IND\", \"-1.#QNAN\", \"-NaN\", \"-nan\",\n    \"1.#IND\", \"1.#QNAN\", \"<NA>\", \"N/A\", \"NA\", \"NULL\", \"NaN\", \"None\",\n    \"n/a\", \"nan\", \"null \".\n\nkeep_default_na : bool, default True\n    Whether or not to include the default ``NaN`` values when parsing the data.\n    Depending on whether ``na_values`` is passed in, the behavior is as follows:\n\n    * If ``keep_default_na`` is ``True``, and ``na_values`` are specified, ``na_values``\n      is appended to the default ``NaN`` values used for parsing.\n    * If ``keep_default_na`` is ``True``, and ``na_values`` are not specified, only\n      the default ``NaN`` values are used for parsing.\n    * If ``keep_default_na`` is ``False``, and ``na_values`` are specified, only\n      the ``NaN`` values specified ``na_values`` are used for parsing.\n    * If ``keep_default_na`` is ``False``, and ``na_values`` are not specified, no\n      strings will be parsed as ``NaN``.\n\n    Note that if ``na_filter`` is passed in as ``False``, the ``keep_default_na`` and\n    ``na_values`` parameters will be ignored.\nna_filter : bool, default True\n    Detect missing value markers (empty strings and the value of ``na_values``). In\n    data without any ``NA`` values, passing ``na_filter=False`` can improve the\n    performance of reading a large file.\nverbose : bool, default False\n    Indicate number of ``NA`` values placed in non-numeric columns.\n\n    .. deprecated:: 2.2.0\nskip_blank_lines : bool, default True\n    If ``True``, skip over blank lines rather than interpreting as ``NaN`` values.\nparse_dates : bool, list of Hashable, list of lists or dict of {Hashable : list}, default False\n    The behavior is as follows:\n\n    * ``bool``. If ``True`` -> try parsing the index. Note: Automatically set to\n      ``True`` if ``date_format`` or ``date_parser`` arguments have been passed.\n    * ``list`` of ``int`` or names. e.g. If ``[1, 2, 3]`` -> try parsing columns 1, 2, 3\n      each as a separate date column.\n    * ``list`` of ``list``. e.g.  If ``[[1, 3]]`` -> combine columns 1 and 3 and parse\n      as a single date column. Values are joined with a space before parsing.\n    * ``dict``, e.g. ``{'foo' : [1, 3]}`` -> parse columns 1, 3 as date and call\n      result 'foo'. Values are joined with a space before parsing.\n\n    If a column or index cannot be represented as an array of ``datetime``,\n    say because of an unparsable value or a mixture of timezones, the column\n    or index will be returned unaltered as an ``object`` data type. For\n    non-standard ``datetime`` parsing, use :func:`~pandas.to_datetime` after\n    :func:`~pandas.read_csv`.\n\n    Note: A fast-path exists for iso8601-formatted dates.\ninfer_datetime_format : bool, default False\n    If ``True`` and ``parse_dates`` is enabled, pandas will attempt to infer the\n    format of the ``datetime`` strings in the columns, and if it can be inferred,\n    switch to a faster method of parsing them. In some cases this can increase\n    the parsing speed by 5-10x.\n\n    .. deprecated:: 2.0.0\n        A strict version of this argument is now the default, passing it has no effect.\n\nkeep_date_col : bool, default False\n    If ``True`` and ``parse_dates`` specifies combining multiple columns then\n    keep the original columns.\ndate_parser : Callable, optional\n    Function to use for converting a sequence of string columns to an array of\n    ``datetime`` instances. The default uses ``dateutil.parser.parser`` to do the\n    conversion. pandas will try to call ``date_parser`` in three different ways,\n    advancing to the next if an exception occurs: 1) Pass one or more arrays\n    (as defined by ``parse_dates``) as arguments; 2) concatenate (row-wise) the\n    string values from the columns defined by ``parse_dates`` into a single array\n    and pass that; and 3) call ``date_parser`` once for each row using one or\n    more strings (corresponding to the columns defined by ``parse_dates``) as\n    arguments.\n\n    .. deprecated:: 2.0.0\n       Use ``date_format`` instead, or read in as ``object`` and then apply\n       :func:`~pandas.to_datetime` as-needed.\ndate_format : str or dict of column -> format, optional\n    Format to use for parsing dates when used in conjunction with ``parse_dates``.\n    The strftime to parse time, e.g. :const:`\"%d/%m/%Y\"`. See\n    `strftime documentation\n    <https://docs.python.org/3/library/datetime.html\n    #strftime-and-strptime-behavior>`_ for more information on choices, though\n    note that :const:`\"%f\"` will parse all the way up to nanoseconds.\n    You can also pass:\n\n    - \"ISO8601\", to parse any `ISO8601 <https://en.wikipedia.org/wiki/ISO_8601>`_\n        time string (not necessarily in exactly the same format);\n    - \"mixed\", to infer the format for each element individually. This is risky,\n        and you should probably use it along with `dayfirst`.\n\n    .. versionadded:: 2.0.0\ndayfirst : bool, default False\n    DD/MM format dates, international and European format.\ncache_dates : bool, default True\n    If ``True``, use a cache of unique, converted dates to apply the ``datetime``\n    conversion. May produce significant speed-up when parsing duplicate\n    date strings, especially ones with timezone offsets.\n\niterator : bool, default False\n    Return ``TextFileReader`` object for iteration or getting chunks with\n    ``get_chunk()``.\nchunksize : int, optional\n    Number of lines to read from the file per chunk. Passing a value will cause the\n    function to return a ``TextFileReader`` object for iteration.\n    See the `IO Tools docs\n    <https://pandas.pydata.org/pandas-docs/stable/io.html#io-chunking>`_\n    for more information on ``iterator`` and ``chunksize``.\n\ncompression : str or dict, default 'infer'\n    For on-the-fly decompression of on-disk data. If 'infer' and 'filepath_or_buffer' is\n    path-like, then detect compression from the following extensions: '.gz',\n    '.bz2', '.zip', '.xz', '.zst', '.tar', '.tar.gz', '.tar.xz' or '.tar.bz2'\n    (otherwise no compression).\n    If using 'zip' or 'tar', the ZIP file must contain only one data file to be read in.\n    Set to ``None`` for no decompression.\n    Can also be a dict with key ``'method'`` set\n    to one of {``'zip'``, ``'gzip'``, ``'bz2'``, ``'zstd'``, ``'xz'``, ``'tar'``} and\n    other key-value pairs are forwarded to\n    ``zipfile.ZipFile``, ``gzip.GzipFile``,\n    ``bz2.BZ2File``, ``zstandard.ZstdDecompressor``, ``lzma.LZMAFile`` or\n    ``tarfile.TarFile``, respectively.\n    As an example, the following could be passed for Zstandard decompression using a\n    custom compression dictionary:\n    ``compression={'method': 'zstd', 'dict_data': my_compression_dict}``.\n\n    .. versionadded:: 1.5.0\n        Added support for `.tar` files.\n\n    .. versionchanged:: 1.4.0 Zstandard support.\n\nthousands : str (length 1), optional\n    Character acting as the thousands separator in numerical values.\ndecimal : str (length 1), default '.'\n    Character to recognize as decimal point (e.g., use ',' for European data).\nlineterminator : str (length 1), optional\n    Character used to denote a line break. Only valid with C parser.\nquotechar : str (length 1), optional\n    Character used to denote the start and end of a quoted item. Quoted\n    items can include the ``delimiter`` and it will be ignored.\nquoting : {0 or csv.QUOTE_MINIMAL, 1 or csv.QUOTE_ALL, 2 or csv.QUOTE_NONNUMERIC, 3 or csv.QUOTE_NONE}, default csv.QUOTE_MINIMAL\n    Control field quoting behavior per ``csv.QUOTE_*`` constants. Default is\n    ``csv.QUOTE_MINIMAL`` (i.e., 0) which implies that only fields containing special\n    characters are quoted (e.g., characters defined in ``quotechar``, ``delimiter``,\n    or ``lineterminator``.\ndoublequote : bool, default True\n   When ``quotechar`` is specified and ``quoting`` is not ``QUOTE_NONE``, indicate\n   whether or not to interpret two consecutive ``quotechar`` elements INSIDE a\n   field as a single ``quotechar`` element.\nescapechar : str (length 1), optional\n    Character used to escape other characters.\ncomment : str (length 1), optional\n    Character indicating that the remainder of line should not be parsed.\n    If found at the beginning\n    of a line, the line will be ignored altogether. This parameter must be a\n    single character. Like empty lines (as long as ``skip_blank_lines=True``),\n    fully commented lines are ignored by the parameter ``header`` but not by\n    ``skiprows``. For example, if ``comment='#'``, parsing\n    ``#empty\\na,b,c\\n1,2,3`` with ``header=0`` will result in ``'a,b,c'`` being\n    treated as the header.\nencoding : str, optional, default 'utf-8'\n    Encoding to use for UTF when reading/writing (ex. ``'utf-8'``). `List of Python\n    standard encodings\n    <https://docs.python.org/3/library/codecs.html#standard-encodings>`_ .\n\nencoding_errors : str, optional, default 'strict'\n    How encoding errors are treated. `List of possible values\n    <https://docs.python.org/3/library/codecs.html#error-handlers>`_ .\n\n    .. versionadded:: 1.3.0\n\ndialect : str or csv.Dialect, optional\n    If provided, this parameter will override values (default or not) for the\n    following parameters: ``delimiter``, ``doublequote``, ``escapechar``,\n    ``skipinitialspace``, ``quotechar``, and ``quoting``. If it is necessary to\n    override values, a ``ParserWarning`` will be issued. See ``csv.Dialect``\n    documentation for more details.\non_bad_lines : {'error', 'warn', 'skip'} or Callable, default 'error'\n    Specifies what to do upon encountering a bad line (a line with too many fields).\n    Allowed values are :\n\n    - ``'error'``, raise an Exception when a bad line is encountered.\n    - ``'warn'``, raise a warning when a bad line is encountered and skip that line.\n    - ``'skip'``, skip bad lines without raising or warning when they are encountered.\n\n    .. versionadded:: 1.3.0\n\n    .. versionadded:: 1.4.0\n\n        - Callable, function with signature\n          ``(bad_line: list[str]) -> list[str] | None`` that will process a single\n          bad line. ``bad_line`` is a list of strings split by the ``sep``.\n          If the function returns ``None``, the bad line will be ignored.\n          If the function returns a new ``list`` of strings with more elements than\n          expected, a ``ParserWarning`` will be emitted while dropping extra elements.\n          Only supported when ``engine='python'``\n\n    .. versionchanged:: 2.2.0\n\n        - Callable, function with signature\n          as described in `pyarrow documentation\n          <https://arrow.apache.org/docs/python/generated/pyarrow.csv.ParseOptions.html\n          #pyarrow.csv.ParseOptions.invalid_row_handler>`_ when ``engine='pyarrow'``\n\ndelim_whitespace : bool, default False\n    Specifies whether or not whitespace (e.g. ``' '`` or ``'\\t'``) will be\n    used as the ``sep`` delimiter. Equivalent to setting ``sep='\\s+'``. If this option\n    is set to ``True``, nothing should be passed in for the ``delimiter``\n    parameter.\n\n    .. deprecated:: 2.2.0\n        Use ``sep=\"\\s+\"`` instead.\nlow_memory : bool, default True\n    Internally process the file in chunks, resulting in lower memory use\n    while parsing, but possibly mixed type inference.  To ensure no mixed\n    types either set ``False``, or specify the type with the ``dtype`` parameter.\n    Note that the entire file is read into a single :class:`~pandas.DataFrame`\n    regardless, use the ``chunksize`` or ``iterator`` parameter to return the data in\n    chunks. (Only valid with C parser).\nmemory_map : bool, default False\n    If a filepath is provided for ``filepath_or_buffer``, map the file object\n    directly onto memory and access the data directly from there. Using this\n    option can improve performance because there is no longer any I/O overhead.\nfloat_precision : {'high', 'legacy', 'round_trip'}, optional\n    Specifies which converter the C engine should use for floating-point\n    values. The options are ``None`` or ``'high'`` for the ordinary converter,\n    ``'legacy'`` for the original lower precision pandas converter, and\n    ``'round_trip'`` for the round-trip converter.\n\nstorage_options : dict, optional\n    Extra options that make sense for a particular storage connection, e.g.\n    host, port, username, password, etc. For HTTP(S) URLs the key-value pairs\n    are forwarded to ``urllib.request.Request`` as header options. For other\n    URLs (e.g. starting with \"s3://\", and \"gcs://\") the key-value pairs are\n    forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more\n    details, and for more examples on storage options refer `here\n    <https://pandas.pydata.org/docs/user_guide/io.html?\n    highlight=storage_options#reading-writing-remote-files>`_.\n\ndtype_backend : {'numpy_nullable', 'pyarrow'}, default 'numpy_nullable'\n    Back-end data type applied to the resultant :class:`DataFrame`\n    (still experimental). Behaviour is as follows:\n\n    * ``\"numpy_nullable\"``: returns nullable-dtype-backed :class:`DataFrame`\n      (default).\n    * ``\"pyarrow\"``: returns pyarrow-backed nullable :class:`ArrowDtype`\n      DataFrame.\n\n    .. versionadded:: 2.0\n\nReturns\n-------\nDataFrame or TextFileReader\n    A comma-separated values (csv) file is returned as two-dimensional\n    data structure with labeled axes.\n\nSee Also\n--------\nDataFrame.to_csv : Write DataFrame to a comma-separated values (csv) file.\nread_csv : Read a comma-separated values (csv) file into DataFrame.\nread_fwf : Read a table of fixed-width formatted lines into DataFrame.\n\nExamples\n--------\n>>> pd.read_table('data.csv')  # doctest: +SKIP"
  },
  {
    "symbol": "pandas.read_xml",
    "signature": "(path_or_buffer: 'FilePath | ReadBuffer[bytes] | ReadBuffer[str]', *, xpath: 'str' = './*', namespaces: 'dict[str, str] | None' = None, elems_only: 'bool' = False, attrs_only: 'bool' = False, names: 'Sequence[str] | None' = None, dtype: 'DtypeArg | None' = None, converters: 'ConvertersArg | None' = None, parse_dates: 'ParseDatesArg | None' = None, encoding: 'str | None' = 'utf-8', parser: 'XMLParsers' = 'lxml', stylesheet: 'FilePath | ReadBuffer[bytes] | ReadBuffer[str] | None' = None, iterparse: 'dict[str, list[str]] | None' = None, compression: 'CompressionOptions' = 'infer', storage_options: 'StorageOptions | None' = None, dtype_backend: 'DtypeBackend | lib.NoDefault' = <no_default>) -> 'DataFrame'",
    "doc": "Read XML document into a :class:`~pandas.DataFrame` object.\n\n.. versionadded:: 1.3.0\n\nParameters\n----------\npath_or_buffer : str, path object, or file-like object\n    String, path object (implementing ``os.PathLike[str]``), or file-like\n    object implementing a ``read()`` function. The string can be any valid XML\n    string or a path. The string can further be a URL. Valid URL schemes\n    include http, ftp, s3, and file.\n\n    .. deprecated:: 2.1.0\n        Passing xml literal strings is deprecated.\n        Wrap literal xml input in ``io.StringIO`` or ``io.BytesIO`` instead.\n\nxpath : str, optional, default './\\*'\n    The ``XPath`` to parse required set of nodes for migration to\n    :class:`~pandas.DataFrame`.``XPath`` should return a collection of elements\n    and not a single element. Note: The ``etree`` parser supports limited ``XPath``\n    expressions. For more complex ``XPath``, use ``lxml`` which requires\n    installation.\n\nnamespaces : dict, optional\n    The namespaces defined in XML document as dicts with key being\n    namespace prefix and value the URI. There is no need to include all\n    namespaces in XML, only the ones used in ``xpath`` expression.\n    Note: if XML document uses default namespace denoted as\n    `xmlns='<URI>'` without a prefix, you must assign any temporary\n    namespace prefix such as 'doc' to the URI in order to parse\n    underlying nodes and/or attributes. For example, ::\n\n        namespaces = {\"doc\": \"https://example.com\"}\n\nelems_only : bool, optional, default False\n    Parse only the child elements at the specified ``xpath``. By default,\n    all child elements and non-empty text nodes are returned.\n\nattrs_only :  bool, optional, default False\n    Parse only the attributes at the specified ``xpath``.\n    By default, all attributes are returned.\n\nnames :  list-like, optional\n    Column names for DataFrame of parsed XML data. Use this parameter to\n    rename original element names and distinguish same named elements and\n    attributes.\n\ndtype : Type name or dict of column -> type, optional\n    Data type for data or columns. E.g. {'a': np.float64, 'b': np.int32,\n    'c': 'Int64'}\n    Use `str` or `object` together with suitable `na_values` settings\n    to preserve and not interpret dtype.\n    If converters are specified, they will be applied INSTEAD\n    of dtype conversion.\n\n    .. versionadded:: 1.5.0\n\nconverters : dict, optional\n    Dict of functions for converting values in certain columns. Keys can either\n    be integers or column labels.\n\n    .. versionadded:: 1.5.0\n\nparse_dates : bool or list of int or names or list of lists or dict, default False\n    Identifiers to parse index or columns to datetime. The behavior is as follows:\n\n    * boolean. If True -> try parsing the index.\n    * list of int or names. e.g. If [1, 2, 3] -> try parsing columns 1, 2, 3\n      each as a separate date column.\n    * list of lists. e.g.  If [[1, 3]] -> combine columns 1 and 3 and parse as\n      a single date column.\n    * dict, e.g. {'foo' : [1, 3]} -> parse columns 1, 3 as date and call\n      result 'foo'\n\n    .. versionadded:: 1.5.0\n\nencoding : str, optional, default 'utf-8'\n    Encoding of XML document.\n\nparser : {'lxml','etree'}, default 'lxml'\n    Parser module to use for retrieval of data. Only 'lxml' and\n    'etree' are supported. With 'lxml' more complex ``XPath`` searches\n    and ability to use XSLT stylesheet are supported.\n\nstylesheet : str, path object or file-like object\n    A URL, file-like object, or a raw string containing an XSLT script.\n    This stylesheet should flatten complex, deeply nested XML documents\n    for easier parsing. To use this feature you must have ``lxml`` module\n    installed and specify 'lxml' as ``parser``. The ``xpath`` must\n    reference nodes of transformed XML document generated after XSLT\n    transformation and not the original XML document. Only XSLT 1.0\n    scripts and not later versions is currently supported.\n\niterparse : dict, optional\n    The nodes or attributes to retrieve in iterparsing of XML document\n    as a dict with key being the name of repeating element and value being\n    list of elements or attribute names that are descendants of the repeated\n    element. Note: If this option is used, it will replace ``xpath`` parsing\n    and unlike ``xpath``, descendants do not need to relate to each other but can\n    exist any where in document under the repeating element. This memory-\n    efficient method should be used for very large XML files (500MB, 1GB, or 5GB+).\n    For example, ::\n\n        iterparse = {\"row_element\": [\"child_elem\", \"attr\", \"grandchild_elem\"]}\n\n    .. versionadded:: 1.5.0\n\ncompression : str or dict, default 'infer'\n    For on-the-fly decompression of on-disk data. If 'infer' and 'path_or_buffer' is\n    path-like, then detect compression from the following extensions: '.gz',\n    '.bz2', '.zip', '.xz', '.zst', '.tar', '.tar.gz', '.tar.xz' or '.tar.bz2'\n    (otherwise no compression).\n    If using 'zip' or 'tar', the ZIP file must contain only one data file to be read in.\n    Set to ``None`` for no decompression.\n    Can also be a dict with key ``'method'`` set\n    to one of {``'zip'``, ``'gzip'``, ``'bz2'``, ``'zstd'``, ``'xz'``, ``'tar'``} and\n    other key-value pairs are forwarded to\n    ``zipfile.ZipFile``, ``gzip.GzipFile``,\n    ``bz2.BZ2File``, ``zstandard.ZstdDecompressor``, ``lzma.LZMAFile`` or\n    ``tarfile.TarFile``, respectively.\n    As an example, the following could be passed for Zstandard decompression using a\n    custom compression dictionary:\n    ``compression={'method': 'zstd', 'dict_data': my_compression_dict}``.\n\n    .. versionadded:: 1.5.0\n        Added support for `.tar` files.\n\n    .. versionchanged:: 1.4.0 Zstandard support.\n\nstorage_options : dict, optional\n    Extra options that make sense for a particular storage connection, e.g.\n    host, port, username, password, etc. For HTTP(S) URLs the key-value pairs\n    are forwarded to ``urllib.request.Request`` as header options. For other\n    URLs (e.g. starting with \"s3://\", and \"gcs://\") the key-value pairs are\n    forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more\n    details, and for more examples on storage options refer `here\n    <https://pandas.pydata.org/docs/user_guide/io.html?\n    highlight=storage_options#reading-writing-remote-files>`_.\n\ndtype_backend : {'numpy_nullable', 'pyarrow'}, default 'numpy_nullable'\n    Back-end data type applied to the resultant :class:`DataFrame`\n    (still experimental). Behaviour is as follows:\n\n    * ``\"numpy_nullable\"``: returns nullable-dtype-backed :class:`DataFrame`\n      (default).\n    * ``\"pyarrow\"``: returns pyarrow-backed nullable :class:`ArrowDtype`\n      DataFrame.\n\n    .. versionadded:: 2.0\n\nReturns\n-------\ndf\n    A DataFrame.\n\nSee Also\n--------\nread_json : Convert a JSON string to pandas object.\nread_html : Read HTML tables into a list of DataFrame objects.\n\nNotes\n-----\nThis method is best designed to import shallow XML documents in\nfollowing format which is the ideal fit for the two-dimensions of a\n``DataFrame`` (row by column). ::\n\n        <root>\n            <row>\n              <column1>data</column1>\n              <column2>data</column2>\n              <column3>data</column3>\n              ...\n           </row>\n           <row>\n              ...\n           </row>\n           ...\n        </root>\n\nAs a file format, XML documents can be designed any way including\nlayout of elements and attributes as long as it conforms to W3C\nspecifications. Therefore, this method is a convenience handler for\na specific flatter design and not all possible XML structures.\n\nHowever, for more complex XML documents, ``stylesheet`` allows you to\ntemporarily redesign original document with XSLT (a special purpose\nlanguage) for a flatter version for migration to a DataFrame.\n\nThis function will *always* return a single :class:`DataFrame` or raise\nexceptions due to issues with XML document, ``xpath``, or other\nparameters.\n\nSee the :ref:`read_xml documentation in the IO section of the docs\n<io.read_xml>` for more information in using this method to parse XML\nfiles to DataFrames.\n\nExamples\n--------\n>>> from io import StringIO\n>>> xml = '''<?xml version='1.0' encoding='utf-8'?>\n... <data xmlns=\"http://example.com\">\n...  <row>\n...    <shape>square</shape>\n...    <degrees>360</degrees>\n...    <sides>4.0</sides>\n...  </row>\n...  <row>\n...    <shape>circle</shape>\n...    <degrees>360</degrees>\n...    <sides/>\n...  </row>\n...  <row>\n...    <shape>triangle</shape>\n...    <degrees>180</degrees>\n...    <sides>3.0</sides>\n...  </row>\n... </data>'''\n\n>>> df = pd.read_xml(StringIO(xml))\n>>> df\n      shape  degrees  sides\n0    square      360    4.0\n1    circle      360    NaN\n2  triangle      180    3.0\n\n>>> xml = '''<?xml version='1.0' encoding='utf-8'?>\n... <data>\n...   <row shape=\"square\" degrees=\"360\" sides=\"4.0\"/>\n...   <row shape=\"circle\" degrees=\"360\"/>\n...   <row shape=\"triangle\" degrees=\"180\" sides=\"3.0\"/>\n... </data>'''\n\n>>> df = pd.read_xml(StringIO(xml), xpath=\".//row\")\n>>> df\n      shape  degrees  sides\n0    square      360    4.0\n1    circle      360    NaN\n2  triangle      180    3.0\n\n>>> xml = '''<?xml version='1.0' encoding='utf-8'?>\n... <doc:data xmlns:doc=\"https://example.com\">\n...   <doc:row>\n...     <doc:shape>square</doc:shape>\n...     <doc:degrees>360</doc:degrees>\n...     <doc:sides>4.0</doc:sides>\n...   </doc:row>\n...   <doc:row>\n...     <doc:shape>circle</doc:shape>\n...     <doc:degrees>360</doc:degrees>\n...     <doc:sides/>\n...   </doc:row>\n...   <doc:row>\n...     <doc:shape>triangle</doc:shape>\n...     <doc:degrees>180</doc:degrees>\n...     <doc:sides>3.0</doc:sides>\n...   </doc:row>\n... </doc:data>'''\n\n>>> df = pd.read_xml(StringIO(xml),\n...                  xpath=\"//doc:row\",\n...                  namespaces={\"doc\": \"https://example.com\"})\n>>> df\n      shape  degrees  sides\n0    square      360    4.0\n1    circle      360    NaN\n2  triangle      180    3.0\n\n>>> xml_data = '''\n...         <data>\n...            <row>\n...               <index>0</index>\n...               <a>1</a>\n...               <b>2.5</b>\n...               <c>True</c>\n...               <d>a</d>\n...               <e>2019-12-31 00:00:00</e>\n...            </row>\n...            <row>\n...               <index>1</index>\n...               <b>4.5</b>\n...               <c>False</c>\n...               <d>b</d>\n...               <e>2019-12-31 00:00:00</e>\n...            </row>\n...         </data>\n...         '''\n\n>>> df = pd.read_xml(StringIO(xml_data),\n...                  dtype_backend=\"numpy_nullable\",\n...                  parse_dates=[\"e\"])\n>>> df\n   index     a    b      c  d          e\n0      0     1  2.5   True  a 2019-12-31\n1      1  <NA>  4.5  False  b 2019-12-31"
  },
  {
    "symbol": "pandas.set_eng_float_format",
    "signature": "(accuracy: 'int' = 3, use_eng_prefix: 'bool' = False) -> 'None'",
    "doc": "Format float representation in DataFrame with SI notation.\n\nParameters\n----------\naccuracy : int, default 3\n    Number of decimal digits after the floating point.\nuse_eng_prefix : bool, default False\n    Whether to represent a value with SI prefixes.\n\nReturns\n-------\nNone\n\nExamples\n--------\n>>> df = pd.DataFrame([1e-9, 1e-3, 1, 1e3, 1e6])\n>>> df\n              0\n0  1.000000e-09\n1  1.000000e-03\n2  1.000000e+00\n3  1.000000e+03\n4  1.000000e+06\n\n>>> pd.set_eng_float_format(accuracy=1)\n>>> df\n         0\n0  1.0E-09\n1  1.0E-03\n2  1.0E+00\n3  1.0E+03\n4  1.0E+06\n\n>>> pd.set_eng_float_format(use_eng_prefix=True)\n>>> df\n        0\n0  1.000n\n1  1.000m\n2   1.000\n3  1.000k\n4  1.000M\n\n>>> pd.set_eng_float_format(accuracy=1, use_eng_prefix=True)\n>>> df\n      0\n0  1.0n\n1  1.0m\n2   1.0\n3  1.0k\n4  1.0M\n\n>>> pd.set_option(\"display.float_format\", None)  # unset option"
  },
  {
    "symbol": "pandas.show_versions",
    "signature": "(as_json: 'str | bool' = False) -> 'None'",
    "doc": "Provide useful information, important for bug reports.\n\nIt comprises info about hosting operation system, pandas version,\nand versions of other installed relative packages.\n\nParameters\n----------\nas_json : str or bool, default False\n    * If False, outputs info in a human readable form to the console.\n    * If str, it will be considered as a path to a file.\n      Info will be written to that file in JSON format.\n    * If True, outputs info in JSON format to the console.\n\nExamples\n--------\n>>> pd.show_versions()  # doctest: +SKIP\nYour output may look something like this:\nINSTALLED VERSIONS\n------------------\ncommit           : 37ea63d540fd27274cad6585082c91b1283f963d\npython           : 3.10.6.final.0\npython-bits      : 64\nOS               : Linux\nOS-release       : 5.10.102.1-microsoft-standard-WSL2\nVersion          : #1 SMP Wed Mar 2 00:30:59 UTC 2022\nmachine          : x86_64\nprocessor        : x86_64\nbyteorder        : little\nLC_ALL           : None\nLANG             : en_GB.UTF-8\nLOCALE           : en_GB.UTF-8\npandas           : 2.0.1\nnumpy            : 1.24.3\n..."
  },
  {
    "symbol": "pandas.test",
    "signature": "(extra_args: 'list[str] | None' = None, run_doctests: 'bool' = False) -> 'None'",
    "doc": "Run the pandas test suite using pytest.\n\nBy default, runs with the marks -m \"not slow and not network and not db\"\n\nParameters\n----------\nextra_args : list[str], default None\n    Extra marks to run the tests.\nrun_doctests : bool, default False\n    Whether to only run the Python and Cython doctests. If you would like to run\n    both doctests/regular tests, just append \"--doctest-modules\"/\"--doctest-cython\"\n    to extra_args.\n\nExamples\n--------\n>>> pd.test()  # doctest: +SKIP\nrunning: pytest..."
  },
  {
    "symbol": "pandas.timedelta_range",
    "signature": "(start=None, end=None, periods: 'int | None' = None, freq=None, name=None, closed=None, *, unit: 'str | None' = None) -> 'TimedeltaIndex'",
    "doc": "Return a fixed frequency TimedeltaIndex with day as the default.\n\nParameters\n----------\nstart : str or timedelta-like, default None\n    Left bound for generating timedeltas.\nend : str or timedelta-like, default None\n    Right bound for generating timedeltas.\nperiods : int, default None\n    Number of periods to generate.\nfreq : str, Timedelta, datetime.timedelta, or DateOffset, default 'D'\n    Frequency strings can have multiples, e.g. '5h'.\nname : str, default None\n    Name of the resulting TimedeltaIndex.\nclosed : str, default None\n    Make the interval closed with respect to the given frequency to\n    the 'left', 'right', or both sides (None).\nunit : str, default None\n    Specify the desired resolution of the result.\n\n    .. versionadded:: 2.0.0\n\nReturns\n-------\nTimedeltaIndex\n\nNotes\n-----\nOf the four parameters ``start``, ``end``, ``periods``, and ``freq``,\nexactly three must be specified. If ``freq`` is omitted, the resulting\n``TimedeltaIndex`` will have ``periods`` linearly spaced elements between\n``start`` and ``end`` (closed on both sides).\n\nTo learn more about the frequency strings, please see `this link\n<https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\nExamples\n--------\n>>> pd.timedelta_range(start='1 day', periods=4)\nTimedeltaIndex(['1 days', '2 days', '3 days', '4 days'],\n               dtype='timedelta64[ns]', freq='D')\n\nThe ``closed`` parameter specifies which endpoint is included.  The default\nbehavior is to include both endpoints.\n\n>>> pd.timedelta_range(start='1 day', periods=4, closed='right')\nTimedeltaIndex(['2 days', '3 days', '4 days'],\n               dtype='timedelta64[ns]', freq='D')\n\nThe ``freq`` parameter specifies the frequency of the TimedeltaIndex.\nOnly fixed frequencies can be passed, non-fixed frequencies such as\n'M' (month end) will raise.\n\n>>> pd.timedelta_range(start='1 day', end='2 days', freq='6h')\nTimedeltaIndex(['1 days 00:00:00', '1 days 06:00:00', '1 days 12:00:00',\n                '1 days 18:00:00', '2 days 00:00:00'],\n               dtype='timedelta64[ns]', freq='6h')\n\nSpecify ``start``, ``end``, and ``periods``; the frequency is generated\nautomatically (linearly spaced).\n\n>>> pd.timedelta_range(start='1 day', end='5 days', periods=4)\nTimedeltaIndex(['1 days 00:00:00', '2 days 08:00:00', '3 days 16:00:00',\n                '5 days 00:00:00'],\n               dtype='timedelta64[ns]', freq=None)\n\n**Specify a unit**\n\n>>> pd.timedelta_range(\"1 Day\", periods=3, freq=\"100000D\", unit=\"s\")\nTimedeltaIndex(['1 days', '100001 days', '200001 days'],\n               dtype='timedelta64[s]', freq='100000D')"
  },
  {
    "symbol": "pandas.to_datetime",
    "signature": "(arg: 'DatetimeScalarOrArrayConvertible | DictConvertible', errors: 'DateTimeErrorChoices' = 'raise', dayfirst: 'bool' = False, yearfirst: 'bool' = False, utc: 'bool' = False, format: 'str | None' = None, exact: 'bool | lib.NoDefault' = <no_default>, unit: 'str | None' = None, infer_datetime_format: 'lib.NoDefault | bool' = <no_default>, origin: 'str' = 'unix', cache: 'bool' = True) -> 'DatetimeIndex | Series | DatetimeScalar | NaTType | None'",
    "doc": "Convert argument to datetime.\n\nThis function converts a scalar, array-like, :class:`Series` or\n:class:`DataFrame`/dict-like to a pandas datetime object.\n\nParameters\n----------\narg : int, float, str, datetime, list, tuple, 1-d array, Series, DataFrame/dict-like\n    The object to convert to a datetime. If a :class:`DataFrame` is provided, the\n    method expects minimally the following columns: :const:`\"year\"`,\n    :const:`\"month\"`, :const:`\"day\"`. The column \"year\"\n    must be specified in 4-digit format.\nerrors : {'ignore', 'raise', 'coerce'}, default 'raise'\n    - If :const:`'raise'`, then invalid parsing will raise an exception.\n    - If :const:`'coerce'`, then invalid parsing will be set as :const:`NaT`.\n    - If :const:`'ignore'`, then invalid parsing will return the input.\ndayfirst : bool, default False\n    Specify a date parse order if `arg` is str or is list-like.\n    If :const:`True`, parses dates with the day first, e.g. :const:`\"10/11/12\"`\n    is parsed as :const:`2012-11-10`.\n\n    .. warning::\n\n        ``dayfirst=True`` is not strict, but will prefer to parse\n        with day first.\n\nyearfirst : bool, default False\n    Specify a date parse order if `arg` is str or is list-like.\n\n    - If :const:`True` parses dates with the year first, e.g.\n      :const:`\"10/11/12\"` is parsed as :const:`2010-11-12`.\n    - If both `dayfirst` and `yearfirst` are :const:`True`, `yearfirst` is\n      preceded (same as :mod:`dateutil`).\n\n    .. warning::\n\n        ``yearfirst=True`` is not strict, but will prefer to parse\n        with year first.\n\nutc : bool, default False\n    Control timezone-related parsing, localization and conversion.\n\n    - If :const:`True`, the function *always* returns a timezone-aware\n      UTC-localized :class:`Timestamp`, :class:`Series` or\n      :class:`DatetimeIndex`. To do this, timezone-naive inputs are\n      *localized* as UTC, while timezone-aware inputs are *converted* to UTC.\n\n    - If :const:`False` (default), inputs will not be coerced to UTC.\n      Timezone-naive inputs will remain naive, while timezone-aware ones\n      will keep their time offsets. Limitations exist for mixed\n      offsets (typically, daylight savings), see :ref:`Examples\n      <to_datetime_tz_examples>` section for details.\n\n    .. warning::\n\n        In a future version of pandas, parsing datetimes with mixed time\n        zones will raise an error unless `utc=True`.\n        Please specify `utc=True` to opt in to the new behaviour\n        and silence this warning. To create a `Series` with mixed offsets and\n        `object` dtype, please use `apply` and `datetime.datetime.strptime`.\n\n    See also: pandas general documentation about `timezone conversion and\n    localization\n    <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html\n    #time-zone-handling>`_.\n\nformat : str, default None\n    The strftime to parse time, e.g. :const:`\"%d/%m/%Y\"`. See\n    `strftime documentation\n    <https://docs.python.org/3/library/datetime.html\n    #strftime-and-strptime-behavior>`_ for more information on choices, though\n    note that :const:`\"%f\"` will parse all the way up to nanoseconds.\n    You can also pass:\n\n    - \"ISO8601\", to parse any `ISO8601 <https://en.wikipedia.org/wiki/ISO_8601>`_\n      time string (not necessarily in exactly the same format);\n    - \"mixed\", to infer the format for each element individually. This is risky,\n      and you should probably use it along with `dayfirst`.\n\n    .. note::\n\n        If a :class:`DataFrame` is passed, then `format` has no effect.\n\nexact : bool, default True\n    Control how `format` is used:\n\n    - If :const:`True`, require an exact `format` match.\n    - If :const:`False`, allow the `format` to match anywhere in the target\n      string.\n\n    Cannot be used alongside ``format='ISO8601'`` or ``format='mixed'``.\nunit : str, default 'ns'\n    The unit of the arg (D,s,ms,us,ns) denote the unit, which is an\n    integer or float number. This will be based off the origin.\n    Example, with ``unit='ms'`` and ``origin='unix'``, this would calculate\n    the number of milliseconds to the unix epoch start.\ninfer_datetime_format : bool, default False\n    If :const:`True` and no `format` is given, attempt to infer the format\n    of the datetime strings based on the first non-NaN element,\n    and if it can be inferred, switch to a faster method of parsing them.\n    In some cases this can increase the parsing speed by ~5-10x.\n\n    .. deprecated:: 2.0.0\n        A strict version of this argument is now the default, passing it has\n        no effect.\n\norigin : scalar, default 'unix'\n    Define the reference date. The numeric values would be parsed as number\n    of units (defined by `unit`) since this reference date.\n\n    - If :const:`'unix'` (or POSIX) time; origin is set to 1970-01-01.\n    - If :const:`'julian'`, unit must be :const:`'D'`, and origin is set to\n      beginning of Julian Calendar. Julian day number :const:`0` is assigned\n      to the day starting at noon on January 1, 4713 BC.\n    - If Timestamp convertible (Timestamp, dt.datetime, np.datetimt64 or date\n      string), origin is set to Timestamp identified by origin.\n    - If a float or integer, origin is the difference\n      (in units determined by the ``unit`` argument) relative to 1970-01-01.\ncache : bool, default True\n    If :const:`True`, use a cache of unique, converted dates to apply the\n    datetime conversion. May produce significant speed-up when parsing\n    duplicate date strings, especially ones with timezone offsets. The cache\n    is only used when there are at least 50 values. The presence of\n    out-of-bounds values will render the cache unusable and may slow down\n    parsing.\n\nReturns\n-------\ndatetime\n    If parsing succeeded.\n    Return type depends on input (types in parenthesis correspond to\n    fallback in case of unsuccessful timezone or out-of-range timestamp\n    parsing):\n\n    - scalar: :class:`Timestamp` (or :class:`datetime.datetime`)\n    - array-like: :class:`DatetimeIndex` (or :class:`Series` with\n      :class:`object` dtype containing :class:`datetime.datetime`)\n    - Series: :class:`Series` of :class:`datetime64` dtype (or\n      :class:`Series` of :class:`object` dtype containing\n      :class:`datetime.datetime`)\n    - DataFrame: :class:`Series` of :class:`datetime64` dtype (or\n      :class:`Series` of :class:`object` dtype containing\n      :class:`datetime.datetime`)\n\nRaises\n------\nParserError\n    When parsing a date from string fails.\nValueError\n    When another datetime conversion error happens. For example when one\n    of 'year', 'month', day' columns is missing in a :class:`DataFrame`, or\n    when a Timezone-aware :class:`datetime.datetime` is found in an array-like\n    of mixed time offsets, and ``utc=False``.\n\nSee Also\n--------\nDataFrame.astype : Cast argument to a specified dtype.\nto_timedelta : Convert argument to timedelta.\nconvert_dtypes : Convert dtypes.\n\nNotes\n-----\n\nMany input types are supported, and lead to different output types:\n\n- **scalars** can be int, float, str, datetime object (from stdlib :mod:`datetime`\n  module or :mod:`numpy`). They are converted to :class:`Timestamp` when\n  possible, otherwise they are converted to :class:`datetime.datetime`.\n  None/NaN/null scalars are converted to :const:`NaT`.\n\n- **array-like** can contain int, float, str, datetime objects. They are\n  converted to :class:`DatetimeIndex` when possible, otherwise they are\n  converted to :class:`Index` with :class:`object` dtype, containing\n  :class:`datetime.datetime`. None/NaN/null entries are converted to\n  :const:`NaT` in both cases.\n\n- **Series** are converted to :class:`Series` with :class:`datetime64`\n  dtype when possible, otherwise they are converted to :class:`Series` with\n  :class:`object` dtype, containing :class:`datetime.datetime`. None/NaN/null\n  entries are converted to :const:`NaT` in both cases.\n\n- **DataFrame/dict-like** are converted to :class:`Series` with\n  :class:`datetime64` dtype. For each row a datetime is created from assembling\n  the various dataframe columns. Column keys can be common abbreviations\n  like ['year', 'month', 'day', 'minute', 'second', 'ms', 'us', 'ns']) or\n  plurals of the same.\n\nThe following causes are responsible for :class:`datetime.datetime` objects\nbeing returned (possibly inside an :class:`Index` or a :class:`Series` with\n:class:`object` dtype) instead of a proper pandas designated type\n(:class:`Timestamp`, :class:`DatetimeIndex` or :class:`Series`\nwith :class:`datetime64` dtype):\n\n- when any input element is before :const:`Timestamp.min` or after\n  :const:`Timestamp.max`, see `timestamp limitations\n  <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html\n  #timeseries-timestamp-limits>`_.\n\n- when ``utc=False`` (default) and the input is an array-like or\n  :class:`Series` containing mixed naive/aware datetime, or aware with mixed\n  time offsets. Note that this happens in the (quite frequent) situation when\n  the timezone has a daylight savings policy. In that case you may wish to\n  use ``utc=True``.\n\nExamples\n--------\n\n**Handling various input formats**\n\nAssembling a datetime from multiple columns of a :class:`DataFrame`. The keys\ncan be common abbreviations like ['year', 'month', 'day', 'minute', 'second',\n'ms', 'us', 'ns']) or plurals of the same\n\n>>> df = pd.DataFrame({'year': [2015, 2016],\n...                    'month': [2, 3],\n...                    'day': [4, 5]})\n>>> pd.to_datetime(df)\n0   2015-02-04\n1   2016-03-05\ndtype: datetime64[ns]\n\nUsing a unix epoch time\n\n>>> pd.to_datetime(1490195805, unit='s')\nTimestamp('2017-03-22 15:16:45')\n>>> pd.to_datetime(1490195805433502912, unit='ns')\nTimestamp('2017-03-22 15:16:45.433502912')\n\n.. warning:: For float arg, precision rounding might happen. To prevent\n    unexpected behavior use a fixed-width exact type.\n\nUsing a non-unix epoch origin\n\n>>> pd.to_datetime([1, 2, 3], unit='D',\n...                origin=pd.Timestamp('1960-01-01'))\nDatetimeIndex(['1960-01-02', '1960-01-03', '1960-01-04'],\n              dtype='datetime64[ns]', freq=None)\n\n**Differences with strptime behavior**\n\n:const:`\"%f\"` will parse all the way up to nanoseconds.\n\n>>> pd.to_datetime('2018-10-26 12:00:00.0000000011',\n...                format='%Y-%m-%d %H:%M:%S.%f')\nTimestamp('2018-10-26 12:00:00.000000001')\n\n**Non-convertible date/times**\n\nPassing ``errors='coerce'`` will force an out-of-bounds date to :const:`NaT`,\nin addition to forcing non-dates (or non-parseable dates) to :const:`NaT`.\n\n>>> pd.to_datetime('13000101', format='%Y%m%d', errors='coerce')\nNaT\n\n.. _to_datetime_tz_examples:\n\n**Timezones and time offsets**\n\nThe default behaviour (``utc=False``) is as follows:\n\n- Timezone-naive inputs are converted to timezone-naive :class:`DatetimeIndex`:\n\n>>> pd.to_datetime(['2018-10-26 12:00:00', '2018-10-26 13:00:15'])\nDatetimeIndex(['2018-10-26 12:00:00', '2018-10-26 13:00:15'],\n              dtype='datetime64[ns]', freq=None)\n\n- Timezone-aware inputs *with constant time offset* are converted to\n  timezone-aware :class:`DatetimeIndex`:\n\n>>> pd.to_datetime(['2018-10-26 12:00 -0500', '2018-10-26 13:00 -0500'])\nDatetimeIndex(['2018-10-26 12:00:00-05:00', '2018-10-26 13:00:00-05:00'],\n              dtype='datetime64[ns, UTC-05:00]', freq=None)\n\n- However, timezone-aware inputs *with mixed time offsets* (for example\n  issued from a timezone with daylight savings, such as Europe/Paris)\n  are **not successfully converted** to a :class:`DatetimeIndex`.\n  Parsing datetimes with mixed time zones will show a warning unless\n  `utc=True`. If you specify `utc=False` the warning below will be shown\n  and a simple :class:`Index` containing :class:`datetime.datetime`\n  objects will be returned:\n\n>>> pd.to_datetime(['2020-10-25 02:00 +0200',\n...                 '2020-10-25 04:00 +0100'])  # doctest: +SKIP\nFutureWarning: In a future version of pandas, parsing datetimes with mixed\ntime zones will raise an error unless `utc=True`. Please specify `utc=True`\nto opt in to the new behaviour and silence this warning. To create a `Series`\nwith mixed offsets and `object` dtype, please use `apply` and\n`datetime.datetime.strptime`.\nIndex([2020-10-25 02:00:00+02:00, 2020-10-25 04:00:00+01:00],\n      dtype='object')\n\n- A mix of timezone-aware and timezone-naive inputs is also converted to\n  a simple :class:`Index` containing :class:`datetime.datetime` objects:\n\n>>> from datetime import datetime\n>>> pd.to_datetime([\"2020-01-01 01:00:00-01:00\",\n...                 datetime(2020, 1, 1, 3, 0)])  # doctest: +SKIP\nFutureWarning: In a future version of pandas, parsing datetimes with mixed\ntime zones will raise an error unless `utc=True`. Please specify `utc=True`\nto opt in to the new behaviour and silence this warning. To create a `Series`\nwith mixed offsets and `object` dtype, please use `apply` and\n`datetime.datetime.strptime`.\nIndex([2020-01-01 01:00:00-01:00, 2020-01-01 03:00:00], dtype='object')\n\n|\n\nSetting ``utc=True`` solves most of the above issues:\n\n- Timezone-naive inputs are *localized* as UTC\n\n>>> pd.to_datetime(['2018-10-26 12:00', '2018-10-26 13:00'], utc=True)\nDatetimeIndex(['2018-10-26 12:00:00+00:00', '2018-10-26 13:00:00+00:00'],\n              dtype='datetime64[ns, UTC]', freq=None)\n\n- Timezone-aware inputs are *converted* to UTC (the output represents the\n  exact same datetime, but viewed from the UTC time offset `+00:00`).\n\n>>> pd.to_datetime(['2018-10-26 12:00 -0530', '2018-10-26 12:00 -0500'],\n...                utc=True)\nDatetimeIndex(['2018-10-26 17:30:00+00:00', '2018-10-26 17:00:00+00:00'],\n              dtype='datetime64[ns, UTC]', freq=None)\n\n- Inputs can contain both string or datetime, the above\n  rules still apply\n\n>>> pd.to_datetime(['2018-10-26 12:00', datetime(2020, 1, 1, 18)], utc=True)\nDatetimeIndex(['2018-10-26 12:00:00+00:00', '2020-01-01 18:00:00+00:00'],\n              dtype='datetime64[ns, UTC]', freq=None)"
  },
  {
    "symbol": "pandas.to_numeric",
    "signature": "(arg, errors: 'DateTimeErrorChoices' = 'raise', downcast: \"Literal['integer', 'signed', 'unsigned', 'float'] | None\" = None, dtype_backend: 'DtypeBackend | lib.NoDefault' = <no_default>)",
    "doc": "Convert argument to a numeric type.\n\nThe default return dtype is `float64` or `int64`\ndepending on the data supplied. Use the `downcast` parameter\nto obtain other dtypes.\n\nPlease note that precision loss may occur if really large numbers\nare passed in. Due to the internal limitations of `ndarray`, if\nnumbers smaller than `-9223372036854775808` (np.iinfo(np.int64).min)\nor larger than `18446744073709551615` (np.iinfo(np.uint64).max) are\npassed in, it is very likely they will be converted to float so that\nthey can be stored in an `ndarray`. These warnings apply similarly to\n`Series` since it internally leverages `ndarray`.\n\nParameters\n----------\narg : scalar, list, tuple, 1-d array, or Series\n    Argument to be converted.\nerrors : {'ignore', 'raise', 'coerce'}, default 'raise'\n    - If 'raise', then invalid parsing will raise an exception.\n    - If 'coerce', then invalid parsing will be set as NaN.\n    - If 'ignore', then invalid parsing will return the input.\n\n    .. versionchanged:: 2.2\n\n    \"ignore\" is deprecated. Catch exceptions explicitly instead.\n\ndowncast : str, default None\n    Can be 'integer', 'signed', 'unsigned', or 'float'.\n    If not None, and if the data has been successfully cast to a\n    numerical dtype (or if the data was numeric to begin with),\n    downcast that resulting data to the smallest numerical dtype\n    possible according to the following rules:\n\n    - 'integer' or 'signed': smallest signed int dtype (min.: np.int8)\n    - 'unsigned': smallest unsigned int dtype (min.: np.uint8)\n    - 'float': smallest float dtype (min.: np.float32)\n\n    As this behaviour is separate from the core conversion to\n    numeric values, any errors raised during the downcasting\n    will be surfaced regardless of the value of the 'errors' input.\n\n    In addition, downcasting will only occur if the size\n    of the resulting data's dtype is strictly larger than\n    the dtype it is to be cast to, so if none of the dtypes\n    checked satisfy that specification, no downcasting will be\n    performed on the data.\ndtype_backend : {'numpy_nullable', 'pyarrow'}, default 'numpy_nullable'\n    Back-end data type applied to the resultant :class:`DataFrame`\n    (still experimental). Behaviour is as follows:\n\n    * ``\"numpy_nullable\"``: returns nullable-dtype-backed :class:`DataFrame`\n      (default).\n    * ``\"pyarrow\"``: returns pyarrow-backed nullable :class:`ArrowDtype`\n      DataFrame.\n\n    .. versionadded:: 2.0\n\nReturns\n-------\nret\n    Numeric if parsing succeeded.\n    Return type depends on input.  Series if Series, otherwise ndarray.\n\nSee Also\n--------\nDataFrame.astype : Cast argument to a specified dtype.\nto_datetime : Convert argument to datetime.\nto_timedelta : Convert argument to timedelta.\nnumpy.ndarray.astype : Cast a numpy array to a specified type.\nDataFrame.convert_dtypes : Convert dtypes.\n\nExamples\n--------\nTake separate series and convert to numeric, coercing when told to\n\n>>> s = pd.Series(['1.0', '2', -3])\n>>> pd.to_numeric(s)\n0    1.0\n1    2.0\n2   -3.0\ndtype: float64\n>>> pd.to_numeric(s, downcast='float')\n0    1.0\n1    2.0\n2   -3.0\ndtype: float32\n>>> pd.to_numeric(s, downcast='signed')\n0    1\n1    2\n2   -3\ndtype: int8\n>>> s = pd.Series(['apple', '1.0', '2', -3])\n>>> pd.to_numeric(s, errors='coerce')\n0    NaN\n1    1.0\n2    2.0\n3   -3.0\ndtype: float64\n\nDowncasting of nullable integer and floating dtypes is supported:\n\n>>> s = pd.Series([1, 2, 3], dtype=\"Int64\")\n>>> pd.to_numeric(s, downcast=\"integer\")\n0    1\n1    2\n2    3\ndtype: Int8\n>>> s = pd.Series([1.0, 2.1, 3.0], dtype=\"Float64\")\n>>> pd.to_numeric(s, downcast=\"float\")\n0    1.0\n1    2.1\n2    3.0\ndtype: Float32"
  },
  {
    "symbol": "pandas.to_pickle",
    "signature": "(obj: 'Any', filepath_or_buffer: 'FilePath | WriteBuffer[bytes]', compression: 'CompressionOptions' = 'infer', protocol: 'int' = 5, storage_options: 'StorageOptions | None' = None) -> 'None'",
    "doc": "Pickle (serialize) object to file.\n\nParameters\n----------\nobj : any object\n    Any python object.\nfilepath_or_buffer : str, path object, or file-like object\n    String, path object (implementing ``os.PathLike[str]``), or file-like\n    object implementing a binary ``write()`` function.\n    Also accepts URL. URL has to be of S3 or GCS.\ncompression : str or dict, default 'infer'\n    For on-the-fly compression of the output data. If 'infer' and 'filepath_or_buffer' is\n    path-like, then detect compression from the following extensions: '.gz',\n    '.bz2', '.zip', '.xz', '.zst', '.tar', '.tar.gz', '.tar.xz' or '.tar.bz2'\n    (otherwise no compression).\n    Set to ``None`` for no compression.\n    Can also be a dict with key ``'method'`` set\n    to one of {``'zip'``, ``'gzip'``, ``'bz2'``, ``'zstd'``, ``'xz'``, ``'tar'``} and\n    other key-value pairs are forwarded to\n    ``zipfile.ZipFile``, ``gzip.GzipFile``,\n    ``bz2.BZ2File``, ``zstandard.ZstdCompressor``, ``lzma.LZMAFile`` or\n    ``tarfile.TarFile``, respectively.\n    As an example, the following could be passed for faster compression and to create\n    a reproducible gzip archive:\n    ``compression={'method': 'gzip', 'compresslevel': 1, 'mtime': 1}``.\n\n    .. versionadded:: 1.5.0\n        Added support for `.tar` files.\n\n    .. versionchanged:: 1.4.0 Zstandard support.\n\nprotocol : int\n    Int which indicates which protocol should be used by the pickler,\n    default HIGHEST_PROTOCOL (see [1], paragraph 12.1.2). The possible\n    values for this parameter depend on the version of Python. For Python\n    2.x, possible values are 0, 1, 2. For Python>=3.0, 3 is a valid value.\n    For Python >= 3.4, 4 is a valid value. A negative value for the\n    protocol parameter is equivalent to setting its value to\n    HIGHEST_PROTOCOL.\n\nstorage_options : dict, optional\n    Extra options that make sense for a particular storage connection, e.g.\n    host, port, username, password, etc. For HTTP(S) URLs the key-value pairs\n    are forwarded to ``urllib.request.Request`` as header options. For other\n    URLs (e.g. starting with \"s3://\", and \"gcs://\") the key-value pairs are\n    forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more\n    details, and for more examples on storage options refer `here\n    <https://pandas.pydata.org/docs/user_guide/io.html?\n    highlight=storage_options#reading-writing-remote-files>`_.\n\n    .. [1] https://docs.python.org/3/library/pickle.html\n\nSee Also\n--------\nread_pickle : Load pickled pandas object (or any object) from file.\nDataFrame.to_hdf : Write DataFrame to an HDF5 file.\nDataFrame.to_sql : Write DataFrame to a SQL database.\nDataFrame.to_parquet : Write a DataFrame to the binary parquet format.\n\nExamples\n--------\n>>> original_df = pd.DataFrame({\"foo\": range(5), \"bar\": range(5, 10)})  # doctest: +SKIP\n>>> original_df  # doctest: +SKIP\n   foo  bar\n0    0    5\n1    1    6\n2    2    7\n3    3    8\n4    4    9\n>>> pd.to_pickle(original_df, \"./dummy.pkl\")  # doctest: +SKIP\n\n>>> unpickled_df = pd.read_pickle(\"./dummy.pkl\")  # doctest: +SKIP\n>>> unpickled_df  # doctest: +SKIP\n   foo  bar\n0    0    5\n1    1    6\n2    2    7\n3    3    8\n4    4    9"
  },
  {
    "symbol": "pandas.to_timedelta",
    "signature": "(arg: 'str | int | float | timedelta | list | tuple | range | ArrayLike | Index | Series', unit: 'UnitChoices | None' = None, errors: 'DateTimeErrorChoices' = 'raise') -> 'Timedelta | TimedeltaIndex | Series'",
    "doc": "Convert argument to timedelta.\n\nTimedeltas are absolute differences in times, expressed in difference\nunits (e.g. days, hours, minutes, seconds). This method converts\nan argument from a recognized timedelta format / value into\na Timedelta type.\n\nParameters\n----------\narg : str, timedelta, list-like or Series\n    The data to be converted to timedelta.\n\n    .. versionchanged:: 2.0\n        Strings with units 'M', 'Y' and 'y' do not represent\n        unambiguous timedelta values and will raise an exception.\n\nunit : str, optional\n    Denotes the unit of the arg for numeric `arg`. Defaults to ``\"ns\"``.\n\n    Possible values:\n\n    * 'W'\n    * 'D' / 'days' / 'day'\n    * 'hours' / 'hour' / 'hr' / 'h' / 'H'\n    * 'm' / 'minute' / 'min' / 'minutes' / 'T'\n    * 's' / 'seconds' / 'sec' / 'second' / 'S'\n    * 'ms' / 'milliseconds' / 'millisecond' / 'milli' / 'millis' / 'L'\n    * 'us' / 'microseconds' / 'microsecond' / 'micro' / 'micros' / 'U'\n    * 'ns' / 'nanoseconds' / 'nano' / 'nanos' / 'nanosecond' / 'N'\n\n    Must not be specified when `arg` contains strings and ``errors=\"raise\"``.\n\n    .. deprecated:: 2.2.0\n        Units 'H', 'T', 'S', 'L', 'U' and 'N' are deprecated and will be removed\n        in a future version. Please use 'h', 'min', 's', 'ms', 'us', and 'ns'\n        instead of 'H', 'T', 'S', 'L', 'U' and 'N'.\n\nerrors : {'ignore', 'raise', 'coerce'}, default 'raise'\n    - If 'raise', then invalid parsing will raise an exception.\n    - If 'coerce', then invalid parsing will be set as NaT.\n    - If 'ignore', then invalid parsing will return the input.\n\nReturns\n-------\ntimedelta\n    If parsing succeeded.\n    Return type depends on input:\n\n    - list-like: TimedeltaIndex of timedelta64 dtype\n    - Series: Series of timedelta64 dtype\n    - scalar: Timedelta\n\nSee Also\n--------\nDataFrame.astype : Cast argument to a specified dtype.\nto_datetime : Convert argument to datetime.\nconvert_dtypes : Convert dtypes.\n\nNotes\n-----\nIf the precision is higher than nanoseconds, the precision of the duration is\ntruncated to nanoseconds for string inputs.\n\nExamples\n--------\nParsing a single string to a Timedelta:\n\n>>> pd.to_timedelta('1 days 06:05:01.00003')\nTimedelta('1 days 06:05:01.000030')\n>>> pd.to_timedelta('15.5us')\nTimedelta('0 days 00:00:00.000015500')\n\nParsing a list or array of strings:\n\n>>> pd.to_timedelta(['1 days 06:05:01.00003', '15.5us', 'nan'])\nTimedeltaIndex(['1 days 06:05:01.000030', '0 days 00:00:00.000015500', NaT],\n               dtype='timedelta64[ns]', freq=None)\n\nConverting numbers by specifying the `unit` keyword argument:\n\n>>> pd.to_timedelta(np.arange(5), unit='s')\nTimedeltaIndex(['0 days 00:00:00', '0 days 00:00:01', '0 days 00:00:02',\n                '0 days 00:00:03', '0 days 00:00:04'],\n               dtype='timedelta64[ns]', freq=None)\n>>> pd.to_timedelta(np.arange(5), unit='d')\nTimedeltaIndex(['0 days', '1 days', '2 days', '3 days', '4 days'],\n               dtype='timedelta64[ns]', freq=None)"
  },
  {
    "symbol": "pandas.tseries.offsets.BDay",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "DateOffset subclass representing possibly n business days.\n\nParameters\n----------\nn : int, default 1\n    The number of days represented.\nnormalize : bool, default False\n    Normalize start/end dates to midnight.\noffset : timedelta, default timedelta(0)\n    Time offset to apply.\n\nExamples\n--------\nYou can use the parameter ``n`` to represent a shift of n business days.\n\n>>> ts = pd.Timestamp(2022, 12, 9, 15)\n>>> ts.strftime('%a %d %b %Y %H:%M')\n'Fri 09 Dec 2022 15:00'\n>>> (ts + pd.offsets.BusinessDay(n=5)).strftime('%a %d %b %Y %H:%M')\n'Fri 16 Dec 2022 15:00'\n\nPassing the parameter ``normalize`` equal to True, you shift the start\nof the next business day to midnight.\n\n>>> ts = pd.Timestamp(2022, 12, 9, 15)\n>>> ts + pd.offsets.BusinessDay(normalize=True)\nTimestamp('2022-12-12 00:00:00')"
  },
  {
    "symbol": "pandas.tseries.offsets.BMonthBegin",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "DateOffset of one month at the first business day.\n\nBusinessMonthBegin goes to the next date which is the first business day\nof the month.\n\nParameters\n----------\nn : int, default 1\n    The number of months represented.\nnormalize : bool, default False\n    Normalize start/end dates to midnight before generating date range.\n\nSee Also\n--------\n:class:`~pandas.tseries.offsets.DateOffset` : Standard kind of date increment.\n\nExamples\n--------\n>>> ts = pd.Timestamp(2022, 11, 30)\n>>> ts + pd.offsets.BMonthBegin()\nTimestamp('2022-12-01 00:00:00')\n\n>>> ts = pd.Timestamp(2022, 12, 1)\n>>> ts + pd.offsets.BMonthBegin()\nTimestamp('2023-01-02 00:00:00')\n\nIf you want to get the start of the current business month:\n\n>>> ts = pd.Timestamp(2022, 12, 1)\n>>> pd.offsets.BMonthBegin().rollback(ts)\nTimestamp('2022-12-01 00:00:00')"
  },
  {
    "symbol": "pandas.tseries.offsets.BMonthEnd",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "DateOffset increments between the last business day of the month.\n\nBusinessMonthEnd goes to the next date which is the last business day of the month.\n\nParameters\n----------\nn : int, default 1\n    The number of months represented.\nnormalize : bool, default False\n    Normalize start/end dates to midnight before generating date range.\n\nSee Also\n--------\n:class:`~pandas.tseries.offsets.DateOffset` : Standard kind of date increment.\n\nExamples\n--------\n>>> ts = pd.Timestamp(2022, 11, 29)\n>>> ts + pd.offsets.BMonthEnd()\nTimestamp('2022-11-30 00:00:00')\n\n>>> ts = pd.Timestamp(2022, 11, 30)\n>>> ts + pd.offsets.BMonthEnd()\nTimestamp('2022-12-30 00:00:00')\n\nIf you want to get the end of the current business month:\n\n>>> ts = pd.Timestamp(2022, 11, 30)\n>>> pd.offsets.BMonthEnd().rollforward(ts)\nTimestamp('2022-11-30 00:00:00')"
  },
  {
    "symbol": "pandas.tseries.offsets.BQuarterBegin",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "DateOffset increments between the first business day of each Quarter.\n\nstartingMonth = 1 corresponds to dates like 1/01/2007, 4/01/2007, ...\nstartingMonth = 2 corresponds to dates like 2/01/2007, 5/01/2007, ...\nstartingMonth = 3 corresponds to dates like 3/01/2007, 6/01/2007, ...\n\nParameters\n----------\nn : int, default 1\n    The number of quarters represented.\nnormalize : bool, default False\n    Normalize start/end dates to midnight before generating date range.\nstartingMonth : int, default 3\n    A specific integer for the month of the year from which we start quarters.\n\nSee Also\n--------\n:class:`~pandas.tseries.offsets.DateOffset` : Standard kind of date increment.\n\nExamples\n--------\n>>> from pandas.tseries.offsets import BQuarterBegin\n>>> ts = pd.Timestamp('2020-05-24 05:01:15')\n>>> ts + BQuarterBegin()\nTimestamp('2020-06-01 05:01:15')\n>>> ts + BQuarterBegin(2)\nTimestamp('2020-09-01 05:01:15')\n>>> ts + BQuarterBegin(startingMonth=2)\nTimestamp('2020-08-03 05:01:15')\n>>> ts + BQuarterBegin(-1)\nTimestamp('2020-03-02 05:01:15')"
  },
  {
    "symbol": "pandas.tseries.offsets.BQuarterEnd",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "DateOffset increments between the last business day of each Quarter.\n\nstartingMonth = 1 corresponds to dates like 1/31/2007, 4/30/2007, ...\nstartingMonth = 2 corresponds to dates like 2/28/2007, 5/31/2007, ...\nstartingMonth = 3 corresponds to dates like 3/30/2007, 6/29/2007, ...\n\nParameters\n----------\nn : int, default 1\n    The number of quarters represented.\nnormalize : bool, default False\n    Normalize start/end dates to midnight before generating date range.\nstartingMonth : int, default 3\n    A specific integer for the month of the year from which we start quarters.\n\nSee Also\n--------\n:class:`~pandas.tseries.offsets.DateOffset` : Standard kind of date increment.\n\nExamples\n--------\n>>> from pandas.tseries.offsets import BQuarterEnd\n>>> ts = pd.Timestamp('2020-05-24 05:01:15')\n>>> ts + BQuarterEnd()\nTimestamp('2020-06-30 05:01:15')\n>>> ts + BQuarterEnd(2)\nTimestamp('2020-09-30 05:01:15')\n>>> ts + BQuarterEnd(1, startingMonth=2)\nTimestamp('2020-05-29 05:01:15')\n>>> ts + BQuarterEnd(startingMonth=2)\nTimestamp('2020-05-29 05:01:15')"
  },
  {
    "symbol": "pandas.tseries.offsets.BYearBegin",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "DateOffset increments between the first business day of the year.\n\nParameters\n----------\nn : int, default 1\n    The number of years represented.\nnormalize : bool, default False\n    Normalize start/end dates to midnight before generating date range.\nmonth : int, default 1\n    A specific integer for the month of the year.\n\nSee Also\n--------\n:class:`~pandas.tseries.offsets.DateOffset` : Standard kind of date increment.\n\nExamples\n--------\n>>> from pandas.tseries.offsets import BYearBegin\n>>> ts = pd.Timestamp('2020-05-24 05:01:15')\n>>> ts + BYearBegin()\nTimestamp('2021-01-01 05:01:15')\n>>> ts - BYearBegin()\nTimestamp('2020-01-01 05:01:15')\n>>> ts + BYearBegin(-1)\nTimestamp('2020-01-01 05:01:15')\n>>> ts + BYearBegin(2)\nTimestamp('2022-01-03 05:01:15')\n>>> ts + BYearBegin(month=11)\nTimestamp('2020-11-02 05:01:15')"
  },
  {
    "symbol": "pandas.tseries.offsets.BYearEnd",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "DateOffset increments between the last business day of the year.\n\nParameters\n----------\nn : int, default 1\n    The number of years represented.\nnormalize : bool, default False\n    Normalize start/end dates to midnight before generating date range.\nmonth : int, default 12\n    A specific integer for the month of the year.\n\nSee Also\n--------\n:class:`~pandas.tseries.offsets.DateOffset` : Standard kind of date increment.\n\nExamples\n--------\n>>> from pandas.tseries.offsets import BYearEnd\n>>> ts = pd.Timestamp('2020-05-24 05:01:15')\n>>> ts - BYearEnd()\nTimestamp('2019-12-31 05:01:15')\n>>> ts + BYearEnd()\nTimestamp('2020-12-31 05:01:15')\n>>> ts + BYearEnd(3)\nTimestamp('2022-12-30 05:01:15')\n>>> ts + BYearEnd(-3)\nTimestamp('2017-12-29 05:01:15')\n>>> ts + BYearEnd(month=11)\nTimestamp('2020-11-30 05:01:15')"
  },
  {
    "symbol": "pandas.tseries.offsets.BaseOffset",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Base class for DateOffset methods that are not overridden by subclasses.\n\nParameters\n----------\nn : int\n    Number of multiples of the frequency.\n\nnormalize : bool\n    Whether the frequency can align with midnight.\n\nExamples\n--------\n>>> pd.offsets.Hour(5).n\n5\n>>> pd.offsets.Hour(5).normalize\nFalse"
  },
  {
    "symbol": "pandas.tseries.offsets.BusinessDay",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "DateOffset subclass representing possibly n business days.\n\nParameters\n----------\nn : int, default 1\n    The number of days represented.\nnormalize : bool, default False\n    Normalize start/end dates to midnight.\noffset : timedelta, default timedelta(0)\n    Time offset to apply.\n\nExamples\n--------\nYou can use the parameter ``n`` to represent a shift of n business days.\n\n>>> ts = pd.Timestamp(2022, 12, 9, 15)\n>>> ts.strftime('%a %d %b %Y %H:%M')\n'Fri 09 Dec 2022 15:00'\n>>> (ts + pd.offsets.BusinessDay(n=5)).strftime('%a %d %b %Y %H:%M')\n'Fri 16 Dec 2022 15:00'\n\nPassing the parameter ``normalize`` equal to True, you shift the start\nof the next business day to midnight.\n\n>>> ts = pd.Timestamp(2022, 12, 9, 15)\n>>> ts + pd.offsets.BusinessDay(normalize=True)\nTimestamp('2022-12-12 00:00:00')"
  },
  {
    "symbol": "pandas.tseries.offsets.BusinessHour",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "DateOffset subclass representing possibly n business hours.\n\nParameters\n----------\nn : int, default 1\n    The number of hours represented.\nnormalize : bool, default False\n    Normalize start/end dates to midnight before generating date range.\nstart : str, time, or list of str/time, default \"09:00\"\n    Start time of your custom business hour in 24h format.\nend : str, time, or list of str/time, default: \"17:00\"\n    End time of your custom business hour in 24h format.\noffset : timedelta, default timedelta(0)\n    Time offset to apply.\n\nExamples\n--------\nYou can use the parameter ``n`` to represent a shift of n hours.\n\n>>> ts = pd.Timestamp(2022, 12, 9, 8)\n>>> ts + pd.offsets.BusinessHour(n=5)\nTimestamp('2022-12-09 14:00:00')\n\nYou can also change the start and the end of business hours.\n\n>>> ts = pd.Timestamp(2022, 8, 5, 16)\n>>> ts + pd.offsets.BusinessHour(start=\"11:00\")\nTimestamp('2022-08-08 11:00:00')\n\n>>> from datetime import time as dt_time\n>>> ts = pd.Timestamp(2022, 8, 5, 22)\n>>> ts + pd.offsets.BusinessHour(end=dt_time(19, 0))\nTimestamp('2022-08-08 10:00:00')\n\nPassing the parameter ``normalize`` equal to True, you shift the start\nof the next business hour to midnight.\n\n>>> ts = pd.Timestamp(2022, 12, 9, 8)\n>>> ts + pd.offsets.BusinessHour(normalize=True)\nTimestamp('2022-12-09 00:00:00')\n\nYou can divide your business day hours into several parts.\n\n>>> import datetime as dt\n>>> freq = pd.offsets.BusinessHour(start=[\"06:00\", \"10:00\", \"15:00\"],\n...                                end=[\"08:00\", \"12:00\", \"17:00\"])\n>>> pd.date_range(dt.datetime(2022, 12, 9), dt.datetime(2022, 12, 13), freq=freq)\nDatetimeIndex(['2022-12-09 06:00:00', '2022-12-09 07:00:00',\n               '2022-12-09 10:00:00', '2022-12-09 11:00:00',\n               '2022-12-09 15:00:00', '2022-12-09 16:00:00',\n               '2022-12-12 06:00:00', '2022-12-12 07:00:00',\n               '2022-12-12 10:00:00', '2022-12-12 11:00:00',\n               '2022-12-12 15:00:00', '2022-12-12 16:00:00'],\n               dtype='datetime64[ns]', freq='bh')"
  },
  {
    "symbol": "pandas.tseries.offsets.BusinessMonthBegin",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "DateOffset of one month at the first business day.\n\nBusinessMonthBegin goes to the next date which is the first business day\nof the month.\n\nParameters\n----------\nn : int, default 1\n    The number of months represented.\nnormalize : bool, default False\n    Normalize start/end dates to midnight before generating date range.\n\nSee Also\n--------\n:class:`~pandas.tseries.offsets.DateOffset` : Standard kind of date increment.\n\nExamples\n--------\n>>> ts = pd.Timestamp(2022, 11, 30)\n>>> ts + pd.offsets.BMonthBegin()\nTimestamp('2022-12-01 00:00:00')\n\n>>> ts = pd.Timestamp(2022, 12, 1)\n>>> ts + pd.offsets.BMonthBegin()\nTimestamp('2023-01-02 00:00:00')\n\nIf you want to get the start of the current business month:\n\n>>> ts = pd.Timestamp(2022, 12, 1)\n>>> pd.offsets.BMonthBegin().rollback(ts)\nTimestamp('2022-12-01 00:00:00')"
  },
  {
    "symbol": "pandas.tseries.offsets.BusinessMonthEnd",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "DateOffset increments between the last business day of the month.\n\nBusinessMonthEnd goes to the next date which is the last business day of the month.\n\nParameters\n----------\nn : int, default 1\n    The number of months represented.\nnormalize : bool, default False\n    Normalize start/end dates to midnight before generating date range.\n\nSee Also\n--------\n:class:`~pandas.tseries.offsets.DateOffset` : Standard kind of date increment.\n\nExamples\n--------\n>>> ts = pd.Timestamp(2022, 11, 29)\n>>> ts + pd.offsets.BMonthEnd()\nTimestamp('2022-11-30 00:00:00')\n\n>>> ts = pd.Timestamp(2022, 11, 30)\n>>> ts + pd.offsets.BMonthEnd()\nTimestamp('2022-12-30 00:00:00')\n\nIf you want to get the end of the current business month:\n\n>>> ts = pd.Timestamp(2022, 11, 30)\n>>> pd.offsets.BMonthEnd().rollforward(ts)\nTimestamp('2022-11-30 00:00:00')"
  },
  {
    "symbol": "pandas.tseries.offsets.CBMonthBegin",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "DateOffset subclass representing custom business month(s).\n\nIncrements between beginning of month dates.\n\nParameters\n----------\nn : int, default 1\n    The number of months represented.\nnormalize : bool, default False\n    Normalize start dates to midnight before generating date range.\nweekmask : str, Default 'Mon Tue Wed Thu Fri'\n    Weekmask of valid business days, passed to ``numpy.busdaycalendar``.\nholidays : list\n    List/array of dates to exclude from the set of valid business days,\n    passed to ``numpy.busdaycalendar``.\ncalendar : np.busdaycalendar\n    Calendar to integrate.\noffset : timedelta, default timedelta(0)\n    Time offset to apply.\n\nSee Also\n--------\n:class:`~pandas.tseries.offsets.DateOffset` : Standard kind of date increment.\n\nExamples\n--------\nIn the example below we use the default parameters.\n\n>>> ts = pd.Timestamp(2022, 8, 5)\n>>> ts + pd.offsets.CustomBusinessMonthBegin()\nTimestamp('2022-09-01 00:00:00')\n\nCustom business month start can be specified by ``weekmask`` parameter.\nTo convert the returned datetime object to its string representation\nthe function strftime() is used in the next example.\n\n>>> import datetime as dt\n>>> freq = pd.offsets.CustomBusinessMonthBegin(weekmask=\"Wed Thu\")\n>>> pd.date_range(dt.datetime(2022, 7, 10), dt.datetime(2022, 12, 18),\n...               freq=freq).strftime('%a %d %b %Y %H:%M')\nIndex(['Wed 03 Aug 2022 00:00', 'Thu 01 Sep 2022 00:00',\n       'Wed 05 Oct 2022 00:00', 'Wed 02 Nov 2022 00:00',\n       'Thu 01 Dec 2022 00:00'],\n       dtype='object')\n\nUsing NumPy business day calendar you can define custom holidays.\n\n>>> import datetime as dt\n>>> bdc = np.busdaycalendar(holidays=['2022-08-01', '2022-09-30',\n...                                   '2022-10-31', '2022-11-01'])\n>>> freq = pd.offsets.CustomBusinessMonthBegin(calendar=bdc)\n>>> pd.date_range(dt.datetime(2022, 7, 10), dt.datetime(2022, 11, 10), freq=freq)\nDatetimeIndex(['2022-08-02', '2022-09-01', '2022-10-03', '2022-11-02'],\n               dtype='datetime64[ns]', freq='CBMS')"
  },
  {
    "symbol": "pandas.tseries.offsets.CBMonthEnd",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "DateOffset subclass representing custom business month(s).\n\nIncrements between end of month dates.\n\nParameters\n----------\nn : int, default 1\n    The number of months represented.\nnormalize : bool, default False\n    Normalize end dates to midnight before generating date range.\nweekmask : str, Default 'Mon Tue Wed Thu Fri'\n    Weekmask of valid business days, passed to ``numpy.busdaycalendar``.\nholidays : list\n    List/array of dates to exclude from the set of valid business days,\n    passed to ``numpy.busdaycalendar``.\ncalendar : np.busdaycalendar\n    Calendar to integrate.\noffset : timedelta, default timedelta(0)\n    Time offset to apply.\n\nSee Also\n--------\n:class:`~pandas.tseries.offsets.DateOffset` : Standard kind of date increment.\n\nExamples\n--------\nIn the example below we use the default parameters.\n\n>>> ts = pd.Timestamp(2022, 8, 5)\n>>> ts + pd.offsets.CustomBusinessMonthEnd()\nTimestamp('2022-08-31 00:00:00')\n\nCustom business month end can be specified by ``weekmask`` parameter.\nTo convert the returned datetime object to its string representation\nthe function strftime() is used in the next example.\n\n>>> import datetime as dt\n>>> freq = pd.offsets.CustomBusinessMonthEnd(weekmask=\"Wed Thu\")\n>>> pd.date_range(dt.datetime(2022, 7, 10), dt.datetime(2022, 12, 18),\n...               freq=freq).strftime('%a %d %b %Y %H:%M')\nIndex(['Thu 28 Jul 2022 00:00', 'Wed 31 Aug 2022 00:00',\n       'Thu 29 Sep 2022 00:00', 'Thu 27 Oct 2022 00:00',\n       'Wed 30 Nov 2022 00:00'],\n       dtype='object')\n\nUsing NumPy business day calendar you can define custom holidays.\n\n>>> import datetime as dt\n>>> bdc = np.busdaycalendar(holidays=['2022-08-01', '2022-09-30',\n...                                   '2022-10-31', '2022-11-01'])\n>>> freq = pd.offsets.CustomBusinessMonthEnd(calendar=bdc)\n>>> pd.date_range(dt.datetime(2022, 7, 10), dt.datetime(2022, 11, 10), freq=freq)\nDatetimeIndex(['2022-07-29', '2022-08-31', '2022-09-29', '2022-10-28'],\n               dtype='datetime64[ns]', freq='CBME')"
  },
  {
    "symbol": "pandas.tseries.offsets.CDay",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "DateOffset subclass representing possibly n custom business days.\n\nIn CustomBusinessDay we can use custom weekmask, holidays, and calendar.\n\nParameters\n----------\nn : int, default 1\n    The number of days represented.\nnormalize : bool, default False\n    Normalize start/end dates to midnight before generating date range.\nweekmask : str, Default 'Mon Tue Wed Thu Fri'\n    Weekmask of valid business days, passed to ``numpy.busdaycalendar``.\nholidays : list\n    List/array of dates to exclude from the set of valid business days,\n    passed to ``numpy.busdaycalendar``.\ncalendar : np.busdaycalendar\n    Calendar to integrate.\noffset : timedelta, default timedelta(0)\n    Time offset to apply.\n\nExamples\n--------\nIn the example below the default parameters give the next business day.\n\n>>> ts = pd.Timestamp(2022, 8, 5, 16)\n>>> ts + pd.offsets.CustomBusinessDay()\nTimestamp('2022-08-08 16:00:00')\n\nBusiness days can be specified by ``weekmask`` parameter. To convert\nthe returned datetime object to its string representation\nthe function strftime() is used in the next example.\n\n>>> import datetime as dt\n>>> freq = pd.offsets.CustomBusinessDay(weekmask=\"Mon Wed Fri\")\n>>> pd.date_range(dt.datetime(2022, 12, 10), dt.datetime(2022, 12, 21),\n...               freq=freq).strftime('%a %d %b %Y %H:%M')\nIndex(['Mon 12 Dec 2022 00:00', 'Wed 14 Dec 2022 00:00',\n       'Fri 16 Dec 2022 00:00', 'Mon 19 Dec 2022 00:00',\n       'Wed 21 Dec 2022 00:00'],\n       dtype='object')\n\nUsing NumPy business day calendar you can define custom holidays.\n\n>>> import datetime as dt\n>>> bdc = np.busdaycalendar(holidays=['2022-12-12', '2022-12-14'])\n>>> freq = pd.offsets.CustomBusinessDay(calendar=bdc)\n>>> pd.date_range(dt.datetime(2022, 12, 10), dt.datetime(2022, 12, 25), freq=freq)\nDatetimeIndex(['2022-12-13', '2022-12-15', '2022-12-16', '2022-12-19',\n               '2022-12-20', '2022-12-21', '2022-12-22', '2022-12-23'],\n               dtype='datetime64[ns]', freq='C')\n\nIf you want to shift the result on n day you can use the parameter ``offset``.\n\n>>> pd.Timestamp(2022, 8, 5, 16) + pd.offsets.CustomBusinessDay(1)\nTimestamp('2022-08-08 16:00:00')\n\n>>> import datetime as dt\n>>> ts = pd.Timestamp(2022, 8, 5, 16)\n>>> ts + pd.offsets.CustomBusinessDay(1, offset=dt.timedelta(days=1))\nTimestamp('2022-08-09 16:00:00')"
  },
  {
    "symbol": "pandas.tseries.offsets.CustomBusinessDay",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "DateOffset subclass representing possibly n custom business days.\n\nIn CustomBusinessDay we can use custom weekmask, holidays, and calendar.\n\nParameters\n----------\nn : int, default 1\n    The number of days represented.\nnormalize : bool, default False\n    Normalize start/end dates to midnight before generating date range.\nweekmask : str, Default 'Mon Tue Wed Thu Fri'\n    Weekmask of valid business days, passed to ``numpy.busdaycalendar``.\nholidays : list\n    List/array of dates to exclude from the set of valid business days,\n    passed to ``numpy.busdaycalendar``.\ncalendar : np.busdaycalendar\n    Calendar to integrate.\noffset : timedelta, default timedelta(0)\n    Time offset to apply.\n\nExamples\n--------\nIn the example below the default parameters give the next business day.\n\n>>> ts = pd.Timestamp(2022, 8, 5, 16)\n>>> ts + pd.offsets.CustomBusinessDay()\nTimestamp('2022-08-08 16:00:00')\n\nBusiness days can be specified by ``weekmask`` parameter. To convert\nthe returned datetime object to its string representation\nthe function strftime() is used in the next example.\n\n>>> import datetime as dt\n>>> freq = pd.offsets.CustomBusinessDay(weekmask=\"Mon Wed Fri\")\n>>> pd.date_range(dt.datetime(2022, 12, 10), dt.datetime(2022, 12, 21),\n...               freq=freq).strftime('%a %d %b %Y %H:%M')\nIndex(['Mon 12 Dec 2022 00:00', 'Wed 14 Dec 2022 00:00',\n       'Fri 16 Dec 2022 00:00', 'Mon 19 Dec 2022 00:00',\n       'Wed 21 Dec 2022 00:00'],\n       dtype='object')\n\nUsing NumPy business day calendar you can define custom holidays.\n\n>>> import datetime as dt\n>>> bdc = np.busdaycalendar(holidays=['2022-12-12', '2022-12-14'])\n>>> freq = pd.offsets.CustomBusinessDay(calendar=bdc)\n>>> pd.date_range(dt.datetime(2022, 12, 10), dt.datetime(2022, 12, 25), freq=freq)\nDatetimeIndex(['2022-12-13', '2022-12-15', '2022-12-16', '2022-12-19',\n               '2022-12-20', '2022-12-21', '2022-12-22', '2022-12-23'],\n               dtype='datetime64[ns]', freq='C')\n\nIf you want to shift the result on n day you can use the parameter ``offset``.\n\n>>> pd.Timestamp(2022, 8, 5, 16) + pd.offsets.CustomBusinessDay(1)\nTimestamp('2022-08-08 16:00:00')\n\n>>> import datetime as dt\n>>> ts = pd.Timestamp(2022, 8, 5, 16)\n>>> ts + pd.offsets.CustomBusinessDay(1, offset=dt.timedelta(days=1))\nTimestamp('2022-08-09 16:00:00')"
  },
  {
    "symbol": "pandas.tseries.offsets.CustomBusinessHour",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "DateOffset subclass representing possibly n custom business days.\n\nIn CustomBusinessHour we can use custom weekmask, holidays, and calendar.\n\nParameters\n----------\nn : int, default 1\n    The number of hours represented.\nnormalize : bool, default False\n    Normalize start/end dates to midnight before generating date range.\nweekmask : str, Default 'Mon Tue Wed Thu Fri'\n    Weekmask of valid business days, passed to ``numpy.busdaycalendar``.\nholidays : list\n    List/array of dates to exclude from the set of valid business days,\n    passed to ``numpy.busdaycalendar``.\ncalendar : np.busdaycalendar\n    Calendar to integrate.\nstart : str, time, or list of str/time, default \"09:00\"\n    Start time of your custom business hour in 24h format.\nend : str, time, or list of str/time, default: \"17:00\"\n    End time of your custom business hour in 24h format.\noffset : timedelta, default timedelta(0)\n    Time offset to apply.\n\nExamples\n--------\nIn the example below the default parameters give the next business hour.\n\n>>> ts = pd.Timestamp(2022, 8, 5, 16)\n>>> ts + pd.offsets.CustomBusinessHour()\nTimestamp('2022-08-08 09:00:00')\n\nWe can also change the start and the end of business hours.\n\n>>> ts = pd.Timestamp(2022, 8, 5, 16)\n>>> ts + pd.offsets.CustomBusinessHour(start=\"11:00\")\nTimestamp('2022-08-08 11:00:00')\n\n>>> from datetime import time as dt_time\n>>> ts = pd.Timestamp(2022, 8, 5, 16)\n>>> ts + pd.offsets.CustomBusinessHour(end=dt_time(19, 0))\nTimestamp('2022-08-05 17:00:00')\n\n>>> ts = pd.Timestamp(2022, 8, 5, 22)\n>>> ts + pd.offsets.CustomBusinessHour(end=dt_time(19, 0))\nTimestamp('2022-08-08 10:00:00')\n\nYou can divide your business day hours into several parts.\n\n>>> import datetime as dt\n>>> freq = pd.offsets.CustomBusinessHour(start=[\"06:00\", \"10:00\", \"15:00\"],\n...                                      end=[\"08:00\", \"12:00\", \"17:00\"])\n>>> pd.date_range(dt.datetime(2022, 12, 9), dt.datetime(2022, 12, 13), freq=freq)\nDatetimeIndex(['2022-12-09 06:00:00', '2022-12-09 07:00:00',\n               '2022-12-09 10:00:00', '2022-12-09 11:00:00',\n               '2022-12-09 15:00:00', '2022-12-09 16:00:00',\n               '2022-12-12 06:00:00', '2022-12-12 07:00:00',\n               '2022-12-12 10:00:00', '2022-12-12 11:00:00',\n               '2022-12-12 15:00:00', '2022-12-12 16:00:00'],\n               dtype='datetime64[ns]', freq='cbh')\n\nBusiness days can be specified by ``weekmask`` parameter. To convert\nthe returned datetime object to its string representation\nthe function strftime() is used in the next example.\n\n>>> import datetime as dt\n>>> freq = pd.offsets.CustomBusinessHour(weekmask=\"Mon Wed Fri\",\n...                                      start=\"10:00\", end=\"13:00\")\n>>> pd.date_range(dt.datetime(2022, 12, 10), dt.datetime(2022, 12, 18),\n...               freq=freq).strftime('%a %d %b %Y %H:%M')\nIndex(['Mon 12 Dec 2022 10:00', 'Mon 12 Dec 2022 11:00',\n       'Mon 12 Dec 2022 12:00', 'Wed 14 Dec 2022 10:00',\n       'Wed 14 Dec 2022 11:00', 'Wed 14 Dec 2022 12:00',\n       'Fri 16 Dec 2022 10:00', 'Fri 16 Dec 2022 11:00',\n       'Fri 16 Dec 2022 12:00'],\n       dtype='object')\n\nUsing NumPy business day calendar you can define custom holidays.\n\n>>> import datetime as dt\n>>> bdc = np.busdaycalendar(holidays=['2022-12-12', '2022-12-14'])\n>>> freq = pd.offsets.CustomBusinessHour(calendar=bdc, start=\"10:00\", end=\"13:00\")\n>>> pd.date_range(dt.datetime(2022, 12, 10), dt.datetime(2022, 12, 18), freq=freq)\nDatetimeIndex(['2022-12-13 10:00:00', '2022-12-13 11:00:00',\n               '2022-12-13 12:00:00', '2022-12-15 10:00:00',\n               '2022-12-15 11:00:00', '2022-12-15 12:00:00',\n               '2022-12-16 10:00:00', '2022-12-16 11:00:00',\n               '2022-12-16 12:00:00'],\n               dtype='datetime64[ns]', freq='cbh')"
  },
  {
    "symbol": "pandas.tseries.offsets.CustomBusinessMonthBegin",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "DateOffset subclass representing custom business month(s).\n\nIncrements between beginning of month dates.\n\nParameters\n----------\nn : int, default 1\n    The number of months represented.\nnormalize : bool, default False\n    Normalize start dates to midnight before generating date range.\nweekmask : str, Default 'Mon Tue Wed Thu Fri'\n    Weekmask of valid business days, passed to ``numpy.busdaycalendar``.\nholidays : list\n    List/array of dates to exclude from the set of valid business days,\n    passed to ``numpy.busdaycalendar``.\ncalendar : np.busdaycalendar\n    Calendar to integrate.\noffset : timedelta, default timedelta(0)\n    Time offset to apply.\n\nSee Also\n--------\n:class:`~pandas.tseries.offsets.DateOffset` : Standard kind of date increment.\n\nExamples\n--------\nIn the example below we use the default parameters.\n\n>>> ts = pd.Timestamp(2022, 8, 5)\n>>> ts + pd.offsets.CustomBusinessMonthBegin()\nTimestamp('2022-09-01 00:00:00')\n\nCustom business month start can be specified by ``weekmask`` parameter.\nTo convert the returned datetime object to its string representation\nthe function strftime() is used in the next example.\n\n>>> import datetime as dt\n>>> freq = pd.offsets.CustomBusinessMonthBegin(weekmask=\"Wed Thu\")\n>>> pd.date_range(dt.datetime(2022, 7, 10), dt.datetime(2022, 12, 18),\n...               freq=freq).strftime('%a %d %b %Y %H:%M')\nIndex(['Wed 03 Aug 2022 00:00', 'Thu 01 Sep 2022 00:00',\n       'Wed 05 Oct 2022 00:00', 'Wed 02 Nov 2022 00:00',\n       'Thu 01 Dec 2022 00:00'],\n       dtype='object')\n\nUsing NumPy business day calendar you can define custom holidays.\n\n>>> import datetime as dt\n>>> bdc = np.busdaycalendar(holidays=['2022-08-01', '2022-09-30',\n...                                   '2022-10-31', '2022-11-01'])\n>>> freq = pd.offsets.CustomBusinessMonthBegin(calendar=bdc)\n>>> pd.date_range(dt.datetime(2022, 7, 10), dt.datetime(2022, 11, 10), freq=freq)\nDatetimeIndex(['2022-08-02', '2022-09-01', '2022-10-03', '2022-11-02'],\n               dtype='datetime64[ns]', freq='CBMS')"
  },
  {
    "symbol": "pandas.tseries.offsets.CustomBusinessMonthEnd",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "DateOffset subclass representing custom business month(s).\n\nIncrements between end of month dates.\n\nParameters\n----------\nn : int, default 1\n    The number of months represented.\nnormalize : bool, default False\n    Normalize end dates to midnight before generating date range.\nweekmask : str, Default 'Mon Tue Wed Thu Fri'\n    Weekmask of valid business days, passed to ``numpy.busdaycalendar``.\nholidays : list\n    List/array of dates to exclude from the set of valid business days,\n    passed to ``numpy.busdaycalendar``.\ncalendar : np.busdaycalendar\n    Calendar to integrate.\noffset : timedelta, default timedelta(0)\n    Time offset to apply.\n\nSee Also\n--------\n:class:`~pandas.tseries.offsets.DateOffset` : Standard kind of date increment.\n\nExamples\n--------\nIn the example below we use the default parameters.\n\n>>> ts = pd.Timestamp(2022, 8, 5)\n>>> ts + pd.offsets.CustomBusinessMonthEnd()\nTimestamp('2022-08-31 00:00:00')\n\nCustom business month end can be specified by ``weekmask`` parameter.\nTo convert the returned datetime object to its string representation\nthe function strftime() is used in the next example.\n\n>>> import datetime as dt\n>>> freq = pd.offsets.CustomBusinessMonthEnd(weekmask=\"Wed Thu\")\n>>> pd.date_range(dt.datetime(2022, 7, 10), dt.datetime(2022, 12, 18),\n...               freq=freq).strftime('%a %d %b %Y %H:%M')\nIndex(['Thu 28 Jul 2022 00:00', 'Wed 31 Aug 2022 00:00',\n       'Thu 29 Sep 2022 00:00', 'Thu 27 Oct 2022 00:00',\n       'Wed 30 Nov 2022 00:00'],\n       dtype='object')\n\nUsing NumPy business day calendar you can define custom holidays.\n\n>>> import datetime as dt\n>>> bdc = np.busdaycalendar(holidays=['2022-08-01', '2022-09-30',\n...                                   '2022-10-31', '2022-11-01'])\n>>> freq = pd.offsets.CustomBusinessMonthEnd(calendar=bdc)\n>>> pd.date_range(dt.datetime(2022, 7, 10), dt.datetime(2022, 11, 10), freq=freq)\nDatetimeIndex(['2022-07-29', '2022-08-31', '2022-09-29', '2022-10-28'],\n               dtype='datetime64[ns]', freq='CBME')"
  },
  {
    "symbol": "pandas.tseries.offsets.DateOffset",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Standard kind of date increment used for a date range.\n\nWorks exactly like the keyword argument form of relativedelta.\nNote that the positional argument form of relativedelata is not\nsupported. Use of the keyword n is discouraged-- you would be better\noff specifying n in the keywords you use, but regardless it is\nthere for you. n is needed for DateOffset subclasses.\n\nDateOffset works as follows.  Each offset specify a set of dates\nthat conform to the DateOffset.  For example, Bday defines this\nset to be the set of dates that are weekdays (M-F).  To test if a\ndate is in the set of a DateOffset dateOffset we can use the\nis_on_offset method: dateOffset.is_on_offset(date).\n\nIf a date is not on a valid date, the rollback and rollforward\nmethods can be used to roll the date to the nearest valid date\nbefore/after the date.\n\nDateOffsets can be created to move dates forward a given number of\nvalid dates.  For example, Bday(2) can be added to a date to move\nit two business days forward.  If the date does not start on a\nvalid date, first it is moved to a valid date.  Thus pseudo code\nis::\n\n    def __add__(date):\n      date = rollback(date) # does nothing if date is valid\n      return date + <n number of periods>\n\nWhen a date offset is created for a negative number of periods,\nthe date is first rolled forward.  The pseudo code is::\n\n    def __add__(date):\n      date = rollforward(date) # does nothing if date is valid\n      return date + <n number of periods>\n\nZero presents a problem.  Should it roll forward or back?  We\narbitrarily have it rollforward:\n\ndate + BDay(0) == BDay.rollforward(date)\n\nSince 0 is a bit weird, we suggest avoiding its use.\n\nBesides, adding a DateOffsets specified by the singular form of the date\ncomponent can be used to replace certain component of the timestamp.\n\nParameters\n----------\nn : int, default 1\n    The number of time periods the offset represents.\n    If specified without a temporal pattern, defaults to n days.\nnormalize : bool, default False\n    Whether to round the result of a DateOffset addition down to the\n    previous midnight.\nweekday : int {0, 1, ..., 6}, default 0\n\n    A specific integer for the day of the week.\n\n    - 0 is Monday\n    - 1 is Tuesday\n    - 2 is Wednesday\n    - 3 is Thursday\n    - 4 is Friday\n    - 5 is Saturday\n    - 6 is Sunday\n\n    Instead Weekday type from dateutil.relativedelta can be used.\n\n    - MO is Monday\n    - TU is Tuesday\n    - WE is Wednesday\n    - TH is Thursday\n    - FR is Friday\n    - SA is Saturday\n    - SU is Sunday.\n\n**kwds\n    Temporal parameter that add to or replace the offset value.\n\n    Parameters that **add** to the offset (like Timedelta):\n\n    - years\n    - months\n    - weeks\n    - days\n    - hours\n    - minutes\n    - seconds\n    - milliseconds\n    - microseconds\n    - nanoseconds\n\n    Parameters that **replace** the offset value:\n\n    - year\n    - month\n    - day\n    - weekday\n    - hour\n    - minute\n    - second\n    - microsecond\n    - nanosecond.\n\nSee Also\n--------\ndateutil.relativedelta.relativedelta : The relativedelta type is designed\n    to be applied to an existing datetime an can replace specific components of\n    that datetime, or represents an interval of time.\n\nExamples\n--------\n>>> from pandas.tseries.offsets import DateOffset\n>>> ts = pd.Timestamp('2017-01-01 09:10:11')\n>>> ts + DateOffset(months=3)\nTimestamp('2017-04-01 09:10:11')\n\n>>> ts = pd.Timestamp('2017-01-01 09:10:11')\n>>> ts + DateOffset(months=2)\nTimestamp('2017-03-01 09:10:11')\n>>> ts + DateOffset(day=31)\nTimestamp('2017-01-31 09:10:11')\n\n>>> ts + pd.DateOffset(hour=8)\nTimestamp('2017-01-01 08:10:11')"
  },
  {
    "symbol": "pandas.tseries.offsets.Day",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Offset ``n`` days.\n\nParameters\n----------\nn : int, default 1\n    The number of days represented.\n\nSee Also\n--------\n:class:`~pandas.tseries.offsets.DateOffset` : Standard kind of date increment.\n\nExamples\n--------\nYou can use the parameter ``n`` to represent a shift of n days.\n\n>>> from pandas.tseries.offsets import Day\n>>> ts = pd.Timestamp(2022, 12, 9, 15)\n>>> ts\nTimestamp('2022-12-09 15:00:00')\n\n>>> ts + Day()\nTimestamp('2022-12-10 15:00:00')\n>>> ts - Day(4)\nTimestamp('2022-12-05 15:00:00')\n\n>>> ts + Day(-4)\nTimestamp('2022-12-05 15:00:00')"
  },
  {
    "symbol": "pandas.tseries.offsets.Easter",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "DateOffset for the Easter holiday using logic defined in dateutil.\n\nRight now uses the revised method which is valid in years 1583-4099.\n\nParameters\n----------\nn : int, default 1\n    The number of years represented.\nnormalize : bool, default False\n    Normalize start/end dates to midnight before generating date range.\n\nSee Also\n--------\n:class:`~pandas.tseries.offsets.DateOffset` : Standard kind of date increment.\n\nExamples\n--------\n>>> ts = pd.Timestamp(2022, 1, 1)\n>>> ts + pd.offsets.Easter()\nTimestamp('2022-04-17 00:00:00')"
  },
  {
    "symbol": "pandas.tseries.offsets.FY5253",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Describes 52-53 week fiscal year. This is also known as a 4-4-5 calendar.\n\nIt is used by companies that desire that their\nfiscal year always end on the same day of the week.\n\nIt is a method of managing accounting periods.\nIt is a common calendar structure for some industries,\nsuch as retail, manufacturing and parking industry.\n\nFor more information see:\nhttps://en.wikipedia.org/wiki/4-4-5_calendar\n\nThe year may either:\n\n- end on the last X day of the Y month.\n- end on the last X day closest to the last day of the Y month.\n\nX is a specific day of the week.\nY is a certain month of the year\n\nParameters\n----------\nn : int\n    The number of fiscal years represented.\nnormalize : bool, default False\n    Normalize start/end dates to midnight before generating date range.\nweekday : int {0, 1, ..., 6}, default 0\n    A specific integer for the day of the week.\n\n    - 0 is Monday\n    - 1 is Tuesday\n    - 2 is Wednesday\n    - 3 is Thursday\n    - 4 is Friday\n    - 5 is Saturday\n    - 6 is Sunday.\n\nstartingMonth : int {1, 2, ... 12}, default 1\n    The month in which the fiscal year ends.\n\nvariation : str, default \"nearest\"\n    Method of employing 4-4-5 calendar.\n\n    There are two options:\n\n    - \"nearest\" means year end is **weekday** closest to last day of month in year.\n    - \"last\" means year end is final **weekday** of the final month in fiscal year.\n\nSee Also\n--------\n:class:`~pandas.tseries.offsets.DateOffset` : Standard kind of date increment.\n\nExamples\n--------\nIn the example below the default parameters give the next 52-53 week fiscal year.\n\n>>> ts = pd.Timestamp(2022, 1, 1)\n>>> ts + pd.offsets.FY5253()\nTimestamp('2022-01-31 00:00:00')\n\nBy the parameter ``startingMonth`` we can specify\nthe month in which fiscal years end.\n\n>>> ts = pd.Timestamp(2022, 1, 1)\n>>> ts + pd.offsets.FY5253(startingMonth=3)\nTimestamp('2022-03-28 00:00:00')\n\n52-53 week fiscal year can be specified by\n``weekday`` and ``variation`` parameters.\n\n>>> ts = pd.Timestamp(2022, 1, 1)\n>>> ts + pd.offsets.FY5253(weekday=5, startingMonth=12, variation=\"last\")\nTimestamp('2022-12-31 00:00:00')"
  },
  {
    "symbol": "pandas.tseries.offsets.FY5253Quarter",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "DateOffset increments between business quarter dates for 52-53 week fiscal year.\n\nAlso known as a 4-4-5 calendar.\n\nIt is used by companies that desire that their\nfiscal year always end on the same day of the week.\n\nIt is a method of managing accounting periods.\nIt is a common calendar structure for some industries,\nsuch as retail, manufacturing and parking industry.\n\nFor more information see:\nhttps://en.wikipedia.org/wiki/4-4-5_calendar\n\nThe year may either:\n\n- end on the last X day of the Y month.\n- end on the last X day closest to the last day of the Y month.\n\nX is a specific day of the week.\nY is a certain month of the year\n\nstartingMonth = 1 corresponds to dates like 1/31/2007, 4/30/2007, ...\nstartingMonth = 2 corresponds to dates like 2/28/2007, 5/31/2007, ...\nstartingMonth = 3 corresponds to dates like 3/30/2007, 6/29/2007, ...\n\nParameters\n----------\nn : int\n    The number of business quarters represented.\nnormalize : bool, default False\n    Normalize start/end dates to midnight before generating date range.\nweekday : int {0, 1, ..., 6}, default 0\n    A specific integer for the day of the week.\n\n    - 0 is Monday\n    - 1 is Tuesday\n    - 2 is Wednesday\n    - 3 is Thursday\n    - 4 is Friday\n    - 5 is Saturday\n    - 6 is Sunday.\n\nstartingMonth : int {1, 2, ..., 12}, default 1\n    The month in which fiscal years end.\n\nqtr_with_extra_week : int {1, 2, 3, 4}, default 1\n    The quarter number that has the leap or 14 week when needed.\n\nvariation : str, default \"nearest\"\n    Method of employing 4-4-5 calendar.\n\n    There are two options:\n\n    - \"nearest\" means year end is **weekday** closest to last day of month in year.\n    - \"last\" means year end is final **weekday** of the final month in fiscal year.\n\nSee Also\n--------\n:class:`~pandas.tseries.offsets.DateOffset` : Standard kind of date increment.\n\nExamples\n--------\nIn the example below the default parameters give\nthe next business quarter for 52-53 week fiscal year.\n\n>>> ts = pd.Timestamp(2022, 1, 1)\n>>> ts + pd.offsets.FY5253Quarter()\nTimestamp('2022-01-31 00:00:00')\n\nBy the parameter ``startingMonth`` we can specify\nthe month in which fiscal years end.\n\n>>> ts = pd.Timestamp(2022, 1, 1)\n>>> ts + pd.offsets.FY5253Quarter(startingMonth=3)\nTimestamp('2022-03-28 00:00:00')\n\nBusiness quarters for 52-53 week fiscal year can be specified by\n``weekday`` and ``variation`` parameters.\n\n>>> ts = pd.Timestamp(2022, 1, 1)\n>>> ts + pd.offsets.FY5253Quarter(weekday=5, startingMonth=12, variation=\"last\")\nTimestamp('2022-04-02 00:00:00')"
  },
  {
    "symbol": "pandas.tseries.offsets.Hour",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Offset ``n`` hours.\n\nParameters\n----------\nn : int, default 1\n    The number of hours represented.\n\nSee Also\n--------\n:class:`~pandas.tseries.offsets.DateOffset` : Standard kind of date increment.\n\nExamples\n--------\nYou can use the parameter ``n`` to represent a shift of n hours.\n\n>>> from pandas.tseries.offsets import Hour\n>>> ts = pd.Timestamp(2022, 12, 9, 15)\n>>> ts\nTimestamp('2022-12-09 15:00:00')\n\n>>> ts + Hour()\nTimestamp('2022-12-09 16:00:00')\n>>> ts - Hour(4)\nTimestamp('2022-12-09 11:00:00')\n\n>>> ts + Hour(-4)\nTimestamp('2022-12-09 11:00:00')"
  },
  {
    "symbol": "pandas.tseries.offsets.LastWeekOfMonth",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Describes monthly dates in last week of month.\n\nFor example \"the last Tuesday of each month\".\n\nParameters\n----------\nn : int, default 1\n    The number of months represented.\nnormalize : bool, default False\n    Normalize start/end dates to midnight before generating date range.\nweekday : int {0, 1, ..., 6}, default 0\n    A specific integer for the day of the week.\n\n    - 0 is Monday\n    - 1 is Tuesday\n    - 2 is Wednesday\n    - 3 is Thursday\n    - 4 is Friday\n    - 5 is Saturday\n    - 6 is Sunday.\n\nExamples\n--------\n>>> ts = pd.Timestamp(2022, 1, 1)\n>>> ts + pd.offsets.LastWeekOfMonth()\nTimestamp('2022-01-31 00:00:00')"
  },
  {
    "symbol": "pandas.tseries.offsets.Micro",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Offset ``n`` microseconds.\n\nParameters\n----------\nn : int, default 1\n    The number of microseconds represented.\n\nSee Also\n--------\n:class:`~pandas.tseries.offsets.DateOffset` : Standard kind of date increment.\n\nExamples\n--------\nYou can use the parameter ``n`` to represent a shift of n microseconds.\n\n>>> from pandas.tseries.offsets import Micro\n>>> ts = pd.Timestamp(2022, 12, 9, 15)\n>>> ts\nTimestamp('2022-12-09 15:00:00')\n\n>>> ts + Micro(n=1000)\nTimestamp('2022-12-09 15:00:00.001000')\n\n>>> ts - Micro(n=1000)\nTimestamp('2022-12-09 14:59:59.999000')\n\n>>> ts + Micro(n=-1000)\nTimestamp('2022-12-09 14:59:59.999000')"
  },
  {
    "symbol": "pandas.tseries.offsets.Milli",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Offset ``n`` milliseconds.\n\nParameters\n----------\nn : int, default 1\n    The number of milliseconds represented.\n\nSee Also\n--------\n:class:`~pandas.tseries.offsets.DateOffset` : Standard kind of date increment.\n\nExamples\n--------\nYou can use the parameter ``n`` to represent a shift of n milliseconds.\n\n>>> from pandas.tseries.offsets import Milli\n>>> ts = pd.Timestamp(2022, 12, 9, 15)\n>>> ts\nTimestamp('2022-12-09 15:00:00')\n\n>>> ts + Milli(n=10)\nTimestamp('2022-12-09 15:00:00.010000')\n\n>>> ts - Milli(n=10)\nTimestamp('2022-12-09 14:59:59.990000')\n\n>>> ts + Milli(n=-10)\nTimestamp('2022-12-09 14:59:59.990000')"
  },
  {
    "symbol": "pandas.tseries.offsets.Minute",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Offset ``n`` minutes.\n\nParameters\n----------\nn : int, default 1\n    The number of minutes represented.\n\nSee Also\n--------\n:class:`~pandas.tseries.offsets.DateOffset` : Standard kind of date increment.\n\nExamples\n--------\nYou can use the parameter ``n`` to represent a shift of n minutes.\n\n>>> from pandas.tseries.offsets import Minute\n>>> ts = pd.Timestamp(2022, 12, 9, 15)\n>>> ts\nTimestamp('2022-12-09 15:00:00')\n\n>>> ts + Minute(n=10)\nTimestamp('2022-12-09 15:10:00')\n>>> ts - Minute(n=10)\nTimestamp('2022-12-09 14:50:00')\n\n>>> ts + Minute(n=-10)\nTimestamp('2022-12-09 14:50:00')"
  },
  {
    "symbol": "pandas.tseries.offsets.MonthBegin",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "DateOffset of one month at beginning.\n\nMonthBegin goes to the next date which is a start of the month.\n\nParameters\n----------\nn : int, default 1\n    The number of months represented.\nnormalize : bool, default False\n    Normalize start/end dates to midnight before generating date range.\n\nSee Also\n--------\n:class:`~pandas.tseries.offsets.DateOffset` : Standard kind of date increment.\n\nExamples\n--------\n>>> ts = pd.Timestamp(2022, 11, 30)\n>>> ts + pd.offsets.MonthBegin()\nTimestamp('2022-12-01 00:00:00')\n\n>>> ts = pd.Timestamp(2022, 12, 1)\n>>> ts + pd.offsets.MonthBegin()\nTimestamp('2023-01-01 00:00:00')\n\nIf you want to get the start of the current month:\n\n>>> ts = pd.Timestamp(2022, 12, 1)\n>>> pd.offsets.MonthBegin().rollback(ts)\nTimestamp('2022-12-01 00:00:00')"
  },
  {
    "symbol": "pandas.tseries.offsets.MonthEnd",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "DateOffset of one month end.\n\nMonthEnd goes to the next date which is an end of the month.\n\nParameters\n----------\nn : int, default 1\n    The number of months represented.\nnormalize : bool, default False\n    Normalize start/end dates to midnight before generating date range.\n\nSee Also\n--------\n:class:`~pandas.tseries.offsets.DateOffset` : Standard kind of date increment.\n\nExamples\n--------\n>>> ts = pd.Timestamp(2022, 1, 30)\n>>> ts + pd.offsets.MonthEnd()\nTimestamp('2022-01-31 00:00:00')\n\n>>> ts = pd.Timestamp(2022, 1, 31)\n>>> ts + pd.offsets.MonthEnd()\nTimestamp('2022-02-28 00:00:00')\n\nIf you want to get the end of the current month:\n\n>>> ts = pd.Timestamp(2022, 1, 31)\n>>> pd.offsets.MonthEnd().rollforward(ts)\nTimestamp('2022-01-31 00:00:00')"
  },
  {
    "symbol": "pandas.tseries.offsets.Nano",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Offset ``n`` nanoseconds.\n\nParameters\n----------\nn : int, default 1\n    The number of nanoseconds represented.\n\nSee Also\n--------\n:class:`~pandas.tseries.offsets.DateOffset` : Standard kind of date increment.\n\nExamples\n--------\nYou can use the parameter ``n`` to represent a shift of n nanoseconds.\n\n>>> from pandas.tseries.offsets import Nano\n>>> ts = pd.Timestamp(2022, 12, 9, 15)\n>>> ts\nTimestamp('2022-12-09 15:00:00')\n\n>>> ts + Nano(n=1000)\nTimestamp('2022-12-09 15:00:00.000001')\n\n>>> ts - Nano(n=1000)\nTimestamp('2022-12-09 14:59:59.999999')\n\n>>> ts + Nano(n=-1000)\nTimestamp('2022-12-09 14:59:59.999999')"
  },
  {
    "symbol": "pandas.tseries.offsets.QuarterBegin",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "DateOffset increments between Quarter start dates.\n\nstartingMonth = 1 corresponds to dates like 1/01/2007, 4/01/2007, ...\nstartingMonth = 2 corresponds to dates like 2/01/2007, 5/01/2007, ...\nstartingMonth = 3 corresponds to dates like 3/01/2007, 6/01/2007, ...\n\nParameters\n----------\nn : int, default 1\n    The number of quarters represented.\nnormalize : bool, default False\n    Normalize start/end dates to midnight before generating date range.\nstartingMonth : int, default 3\n    A specific integer for the month of the year from which we start quarters.\n\nSee Also\n--------\n:class:`~pandas.tseries.offsets.DateOffset` : Standard kind of date increment.\n\nExamples\n--------\n>>> ts = pd.Timestamp(2022, 1, 1)\n>>> ts + pd.offsets.QuarterBegin()\nTimestamp('2022-03-01 00:00:00')"
  },
  {
    "symbol": "pandas.tseries.offsets.QuarterEnd",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "DateOffset increments between Quarter end dates.\n\nstartingMonth = 1 corresponds to dates like 1/31/2007, 4/30/2007, ...\nstartingMonth = 2 corresponds to dates like 2/28/2007, 5/31/2007, ...\nstartingMonth = 3 corresponds to dates like 3/31/2007, 6/30/2007, ...\n\nParameters\n----------\nn : int, default 1\n    The number of quarters represented.\nnormalize : bool, default False\n    Normalize start/end dates to midnight before generating date range.\nstartingMonth : int, default 3\n    A specific integer for the month of the year from which we start quarters.\n\nSee Also\n--------\n:class:`~pandas.tseries.offsets.DateOffset` : Standard kind of date increment.\n\nExamples\n--------\n>>> ts = pd.Timestamp(2022, 1, 1)\n>>> ts + pd.offsets.QuarterEnd()\nTimestamp('2022-03-31 00:00:00')"
  },
  {
    "symbol": "pandas.tseries.offsets.Second",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Offset ``n`` seconds.\n\nParameters\n----------\nn : int, default 1\n    The number of seconds represented.\n\nSee Also\n--------\n:class:`~pandas.tseries.offsets.DateOffset` : Standard kind of date increment.\n\nExamples\n--------\nYou can use the parameter ``n`` to represent a shift of n seconds.\n\n>>> from pandas.tseries.offsets import Second\n>>> ts = pd.Timestamp(2022, 12, 9, 15)\n>>> ts\nTimestamp('2022-12-09 15:00:00')\n\n>>> ts + Second(n=10)\nTimestamp('2022-12-09 15:00:10')\n>>> ts - Second(n=10)\nTimestamp('2022-12-09 14:59:50')\n\n>>> ts + Second(n=-10)\nTimestamp('2022-12-09 14:59:50')"
  },
  {
    "symbol": "pandas.tseries.offsets.SemiMonthBegin",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Two DateOffset's per month repeating on the first day of the month & day_of_month.\n\nParameters\n----------\nn : int, default 1\n    The number of months represented.\nnormalize : bool, default False\n    Normalize start/end dates to midnight before generating date range.\nday_of_month : int, {1, 3,...,27}, default 15\n    A specific integer for the day of the month.\n\nExamples\n--------\n>>> ts = pd.Timestamp(2022, 1, 1)\n>>> ts + pd.offsets.SemiMonthBegin()\nTimestamp('2022-01-15 00:00:00')"
  },
  {
    "symbol": "pandas.tseries.offsets.SemiMonthEnd",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Two DateOffset's per month repeating on the last day of the month & day_of_month.\n\nParameters\n----------\nn : int, default 1\n    The number of months represented.\nnormalize : bool, default False\n    Normalize start/end dates to midnight before generating date range.\nday_of_month : int, {1, 3,...,27}, default 15\n    A specific integer for the day of the month.\n\nExamples\n--------\n>>> ts = pd.Timestamp(2022, 1, 14)\n>>> ts + pd.offsets.SemiMonthEnd()\nTimestamp('2022-01-15 00:00:00')\n\n>>> ts = pd.Timestamp(2022, 1, 15)\n>>> ts + pd.offsets.SemiMonthEnd()\nTimestamp('2022-01-31 00:00:00')\n\n>>> ts = pd.Timestamp(2022, 1, 31)\n>>> ts + pd.offsets.SemiMonthEnd()\nTimestamp('2022-02-15 00:00:00')\n\nIf you want to get the result for the current month:\n\n>>> ts = pd.Timestamp(2022, 1, 15)\n>>> pd.offsets.SemiMonthEnd().rollforward(ts)\nTimestamp('2022-01-15 00:00:00')"
  },
  {
    "symbol": "pandas.tseries.offsets.Tick",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Base class for DateOffset methods that are not overridden by subclasses.\n\nParameters\n----------\nn : int\n    Number of multiples of the frequency.\n\nnormalize : bool\n    Whether the frequency can align with midnight.\n\nExamples\n--------\n>>> pd.offsets.Hour(5).n\n5\n>>> pd.offsets.Hour(5).normalize\nFalse"
  },
  {
    "symbol": "pandas.tseries.offsets.Week",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Weekly offset.\n\nParameters\n----------\nn : int, default 1\n    The number of weeks represented.\nnormalize : bool, default False\n    Normalize start/end dates to midnight before generating date range.\nweekday : int or None, default None\n    Always generate specific day of week.\n    0 for Monday and 6 for Sunday.\n\nSee Also\n--------\npd.tseries.offsets.WeekOfMonth :\n Describes monthly dates like, the Tuesday of the\n 2nd week of each month.\n\nExamples\n--------\n\n>>> date_object = pd.Timestamp(\"2023-01-13\")\n>>> date_object\nTimestamp('2023-01-13 00:00:00')\n\n>>> date_plus_one_week = date_object + pd.tseries.offsets.Week(n=1)\n>>> date_plus_one_week\nTimestamp('2023-01-20 00:00:00')\n\n>>> date_next_monday = date_object + pd.tseries.offsets.Week(weekday=0)\n>>> date_next_monday\nTimestamp('2023-01-16 00:00:00')\n\n>>> date_next_sunday = date_object + pd.tseries.offsets.Week(weekday=6)\n>>> date_next_sunday\nTimestamp('2023-01-15 00:00:00')"
  },
  {
    "symbol": "pandas.tseries.offsets.WeekOfMonth",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "Describes monthly dates like \"the Tuesday of the 2nd week of each month\".\n\nParameters\n----------\nn : int, default 1\n    The number of months represented.\nnormalize : bool, default False\n    Normalize start/end dates to midnight before generating date range.\nweek : int {0, 1, 2, 3, ...}, default 0\n    A specific integer for the week of the month.\n    e.g. 0 is 1st week of month, 1 is the 2nd week, etc.\nweekday : int {0, 1, ..., 6}, default 0\n    A specific integer for the day of the week.\n\n    - 0 is Monday\n    - 1 is Tuesday\n    - 2 is Wednesday\n    - 3 is Thursday\n    - 4 is Friday\n    - 5 is Saturday\n    - 6 is Sunday.\n\nExamples\n--------\n>>> ts = pd.Timestamp(2022, 1, 1)\n>>> ts + pd.offsets.WeekOfMonth()\nTimestamp('2022-01-03 00:00:00')"
  },
  {
    "symbol": "pandas.tseries.offsets.YearBegin",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "DateOffset increments between calendar year begin dates.\n\nYearBegin goes to the next date which is the start of the year.\n\nParameters\n----------\nn : int, default 1\n    The number of years represented.\nnormalize : bool, default False\n    Normalize start/end dates to midnight before generating date range.\nmonth : int, default 1\n    A specific integer for the month of the year.\n\nSee Also\n--------\n:class:`~pandas.tseries.offsets.DateOffset` : Standard kind of date increment.\n\nExamples\n--------\n>>> ts = pd.Timestamp(2022, 12, 1)\n>>> ts + pd.offsets.YearBegin()\nTimestamp('2023-01-01 00:00:00')\n\n>>> ts = pd.Timestamp(2023, 1, 1)\n>>> ts + pd.offsets.YearBegin()\nTimestamp('2024-01-01 00:00:00')\n\n>>> ts = pd.Timestamp(2022, 1, 1)\n>>> ts + pd.offsets.YearBegin(month=2)\nTimestamp('2022-02-01 00:00:00')\n\nIf you want to get the start of the current year:\n\n>>> ts = pd.Timestamp(2023, 1, 1)\n>>> pd.offsets.YearBegin().rollback(ts)\nTimestamp('2023-01-01 00:00:00')"
  },
  {
    "symbol": "pandas.tseries.offsets.YearEnd",
    "signature": "(self, /, *args, **kwargs)",
    "doc": "DateOffset increments between calendar year end dates.\n\nYearEnd goes to the next date which is the end of the year.\n\nParameters\n----------\nn : int, default 1\n    The number of years represented.\nnormalize : bool, default False\n    Normalize start/end dates to midnight before generating date range.\nmonth : int, default 12\n    A specific integer for the month of the year.\n\nSee Also\n--------\n:class:`~pandas.tseries.offsets.DateOffset` : Standard kind of date increment.\n\nExamples\n--------\n>>> ts = pd.Timestamp(2022, 1, 1)\n>>> ts + pd.offsets.YearEnd()\nTimestamp('2022-12-31 00:00:00')\n\n>>> ts = pd.Timestamp(2022, 12, 31)\n>>> ts + pd.offsets.YearEnd()\nTimestamp('2023-12-31 00:00:00')\n\n>>> ts = pd.Timestamp(2022, 1, 1)\n>>> ts + pd.offsets.YearEnd(month=2)\nTimestamp('2022-02-28 00:00:00')\n\nIf you want to get the end of the current year:\n\n>>> ts = pd.Timestamp(2022, 12, 31)\n>>> pd.offsets.YearEnd().rollforward(ts)\nTimestamp('2022-12-31 00:00:00')"
  },
  {
    "symbol": "pandas.unique",
    "signature": "(values)",
    "doc": "Return unique values based on a hash table.\n\nUniques are returned in order of appearance. This does NOT sort.\n\nSignificantly faster than numpy.unique for long enough sequences.\nIncludes NA values.\n\nParameters\n----------\nvalues : 1d array-like\n\nReturns\n-------\nnumpy.ndarray or ExtensionArray\n\n    The return can be:\n\n    * Index : when the input is an Index\n    * Categorical : when the input is a Categorical dtype\n    * ndarray : when the input is a Series/ndarray\n\n    Return numpy.ndarray or ExtensionArray.\n\nSee Also\n--------\nIndex.unique : Return unique values from an Index.\nSeries.unique : Return unique values of Series object.\n\nExamples\n--------\n>>> pd.unique(pd.Series([2, 1, 3, 3]))\narray([2, 1, 3])\n\n>>> pd.unique(pd.Series([2] + [1] * 5))\narray([2, 1])\n\n>>> pd.unique(pd.Series([pd.Timestamp(\"20160101\"), pd.Timestamp(\"20160101\")]))\narray(['2016-01-01T00:00:00.000000000'], dtype='datetime64[ns]')\n\n>>> pd.unique(\n...     pd.Series(\n...         [\n...             pd.Timestamp(\"20160101\", tz=\"US/Eastern\"),\n...             pd.Timestamp(\"20160101\", tz=\"US/Eastern\"),\n...         ]\n...     )\n... )\n<DatetimeArray>\n['2016-01-01 00:00:00-05:00']\nLength: 1, dtype: datetime64[ns, US/Eastern]\n\n>>> pd.unique(\n...     pd.Index(\n...         [\n...             pd.Timestamp(\"20160101\", tz=\"US/Eastern\"),\n...             pd.Timestamp(\"20160101\", tz=\"US/Eastern\"),\n...         ]\n...     )\n... )\nDatetimeIndex(['2016-01-01 00:00:00-05:00'],\n        dtype='datetime64[ns, US/Eastern]',\n        freq=None)\n\n>>> pd.unique(np.array(list(\"baabc\"), dtype=\"O\"))\narray(['b', 'a', 'c'], dtype=object)\n\nAn unordered Categorical will return categories in the\norder of appearance.\n\n>>> pd.unique(pd.Series(pd.Categorical(list(\"baabc\"))))\n['b', 'a', 'c']\nCategories (3, object): ['a', 'b', 'c']\n\n>>> pd.unique(pd.Series(pd.Categorical(list(\"baabc\"), categories=list(\"abc\"))))\n['b', 'a', 'c']\nCategories (3, object): ['a', 'b', 'c']\n\nAn ordered Categorical preserves the category ordering.\n\n>>> pd.unique(\n...     pd.Series(\n...         pd.Categorical(list(\"baabc\"), categories=list(\"abc\"), ordered=True)\n...     )\n... )\n['b', 'a', 'c']\nCategories (3, object): ['a' < 'b' < 'c']\n\nAn array of tuples\n\n>>> pd.unique(pd.Series([(\"a\", \"b\"), (\"b\", \"a\"), (\"a\", \"c\"), (\"b\", \"a\")]).values)\narray([('a', 'b'), ('b', 'a'), ('a', 'c')], dtype=object)"
  },
  {
    "symbol": "pandas.value_counts",
    "signature": "(values, sort: 'bool' = True, ascending: 'bool' = False, normalize: 'bool' = False, bins=None, dropna: 'bool' = True) -> 'Series'",
    "doc": "Compute a histogram of the counts of non-null values.\n\nParameters\n----------\nvalues : ndarray (1-d)\nsort : bool, default True\n    Sort by values\nascending : bool, default False\n    Sort in ascending order\nnormalize: bool, default False\n    If True then compute a relative histogram\nbins : integer, optional\n    Rather than count values, group them into half-open bins,\n    convenience for pd.cut, only works with numeric data\ndropna : bool, default True\n    Don't include counts of NaN\n\nReturns\n-------\nSeries"
  },
  {
    "symbol": "pandas.wide_to_long",
    "signature": "(df: 'DataFrame', stubnames, i, j, sep: 'str' = '', suffix: 'str' = '\\\\d+') -> 'DataFrame'",
    "doc": "Unpivot a DataFrame from wide to long format.\n\nLess flexible but more user-friendly than melt.\n\nWith stubnames ['A', 'B'], this function expects to find one or more\ngroup of columns with format\nA-suffix1, A-suffix2,..., B-suffix1, B-suffix2,...\nYou specify what you want to call this suffix in the resulting long format\nwith `j` (for example `j='year'`)\n\nEach row of these wide variables are assumed to be uniquely identified by\n`i` (can be a single column name or a list of column names)\n\nAll remaining variables in the data frame are left intact.\n\nParameters\n----------\ndf : DataFrame\n    The wide-format DataFrame.\nstubnames : str or list-like\n    The stub name(s). The wide format variables are assumed to\n    start with the stub names.\ni : str or list-like\n    Column(s) to use as id variable(s).\nj : str\n    The name of the sub-observation variable. What you wish to name your\n    suffix in the long format.\nsep : str, default \"\"\n    A character indicating the separation of the variable names\n    in the wide format, to be stripped from the names in the long format.\n    For example, if your column names are A-suffix1, A-suffix2, you\n    can strip the hyphen by specifying `sep='-'`.\nsuffix : str, default '\\\\d+'\n    A regular expression capturing the wanted suffixes. '\\\\d+' captures\n    numeric suffixes. Suffixes with no numbers could be specified with the\n    negated character class '\\\\D+'. You can also further disambiguate\n    suffixes, for example, if your wide variables are of the form A-one,\n    B-two,.., and you have an unrelated column A-rating, you can ignore the\n    last one by specifying `suffix='(!?one|two)'`. When all suffixes are\n    numeric, they are cast to int64/float64.\n\nReturns\n-------\nDataFrame\n    A DataFrame that contains each stub name as a variable, with new index\n    (i, j).\n\nSee Also\n--------\nmelt : Unpivot a DataFrame from wide to long format, optionally leaving\n    identifiers set.\npivot : Create a spreadsheet-style pivot table as a DataFrame.\nDataFrame.pivot : Pivot without aggregation that can handle\n    non-numeric data.\nDataFrame.pivot_table : Generalization of pivot that can handle\n    duplicate values for one index/column pair.\nDataFrame.unstack : Pivot based on the index values instead of a\n    column.\n\nNotes\n-----\nAll extra variables are left untouched. This simply uses\n`pandas.melt` under the hood, but is hard-coded to \"do the right thing\"\nin a typical case.\n\nExamples\n--------\n>>> np.random.seed(123)\n>>> df = pd.DataFrame({\"A1970\" : {0 : \"a\", 1 : \"b\", 2 : \"c\"},\n...                    \"A1980\" : {0 : \"d\", 1 : \"e\", 2 : \"f\"},\n...                    \"B1970\" : {0 : 2.5, 1 : 1.2, 2 : .7},\n...                    \"B1980\" : {0 : 3.2, 1 : 1.3, 2 : .1},\n...                    \"X\"     : dict(zip(range(3), np.random.randn(3)))\n...                   })\n>>> df[\"id\"] = df.index\n>>> df\n  A1970 A1980  B1970  B1980         X  id\n0     a     d    2.5    3.2 -1.085631   0\n1     b     e    1.2    1.3  0.997345   1\n2     c     f    0.7    0.1  0.282978   2\n>>> pd.wide_to_long(df, [\"A\", \"B\"], i=\"id\", j=\"year\")\n... # doctest: +NORMALIZE_WHITESPACE\n                X  A    B\nid year\n0  1970 -1.085631  a  2.5\n1  1970  0.997345  b  1.2\n2  1970  0.282978  c  0.7\n0  1980 -1.085631  d  3.2\n1  1980  0.997345  e  1.3\n2  1980  0.282978  f  0.1\n\nWith multiple id columns\n\n>>> df = pd.DataFrame({\n...     'famid': [1, 1, 1, 2, 2, 2, 3, 3, 3],\n...     'birth': [1, 2, 3, 1, 2, 3, 1, 2, 3],\n...     'ht1': [2.8, 2.9, 2.2, 2, 1.8, 1.9, 2.2, 2.3, 2.1],\n...     'ht2': [3.4, 3.8, 2.9, 3.2, 2.8, 2.4, 3.3, 3.4, 2.9]\n... })\n>>> df\n   famid  birth  ht1  ht2\n0      1      1  2.8  3.4\n1      1      2  2.9  3.8\n2      1      3  2.2  2.9\n3      2      1  2.0  3.2\n4      2      2  1.8  2.8\n5      2      3  1.9  2.4\n6      3      1  2.2  3.3\n7      3      2  2.3  3.4\n8      3      3  2.1  2.9\n>>> l = pd.wide_to_long(df, stubnames='ht', i=['famid', 'birth'], j='age')\n>>> l\n... # doctest: +NORMALIZE_WHITESPACE\n                  ht\nfamid birth age\n1     1     1    2.8\n            2    3.4\n      2     1    2.9\n            2    3.8\n      3     1    2.2\n            2    2.9\n2     1     1    2.0\n            2    3.2\n      2     1    1.8\n            2    2.8\n      3     1    1.9\n            2    2.4\n3     1     1    2.2\n            2    3.3\n      2     1    2.3\n            2    3.4\n      3     1    2.1\n            2    2.9\n\nGoing from long back to wide just takes some creative use of `unstack`\n\n>>> w = l.unstack()\n>>> w.columns = w.columns.map('{0[0]}{0[1]}'.format)\n>>> w.reset_index()\n   famid  birth  ht1  ht2\n0      1      1  2.8  3.4\n1      1      2  2.9  3.8\n2      1      3  2.2  2.9\n3      2      1  2.0  3.2\n4      2      2  1.8  2.8\n5      2      3  1.9  2.4\n6      3      1  2.2  3.3\n7      3      2  2.3  3.4\n8      3      3  2.1  2.9\n\nLess wieldy column names are also handled\n\n>>> np.random.seed(0)\n>>> df = pd.DataFrame({'A(weekly)-2010': np.random.rand(3),\n...                    'A(weekly)-2011': np.random.rand(3),\n...                    'B(weekly)-2010': np.random.rand(3),\n...                    'B(weekly)-2011': np.random.rand(3),\n...                    'X' : np.random.randint(3, size=3)})\n>>> df['id'] = df.index\n>>> df # doctest: +NORMALIZE_WHITESPACE, +ELLIPSIS\n   A(weekly)-2010  A(weekly)-2011  B(weekly)-2010  B(weekly)-2011  X  id\n0        0.548814        0.544883        0.437587        0.383442  0   0\n1        0.715189        0.423655        0.891773        0.791725  1   1\n2        0.602763        0.645894        0.963663        0.528895  1   2\n\n>>> pd.wide_to_long(df, ['A(weekly)', 'B(weekly)'], i='id',\n...                 j='year', sep='-')\n... # doctest: +NORMALIZE_WHITESPACE\n         X  A(weekly)  B(weekly)\nid year\n0  2010  0   0.548814   0.437587\n1  2010  1   0.715189   0.891773\n2  2010  1   0.602763   0.963663\n0  2011  0   0.544883   0.383442\n1  2011  1   0.423655   0.791725\n2  2011  1   0.645894   0.528895\n\nIf we have many columns, we could also use a regex to find our\nstubnames and pass that list on to wide_to_long\n\n>>> stubnames = sorted(\n...     set([match[0] for match in df.columns.str.findall(\n...         r'[A-B]\\(.*\\)').values if match != []])\n... )\n>>> list(stubnames)\n['A(weekly)', 'B(weekly)']\n\nAll of the above examples have integers as suffixes. It is possible to\nhave non-integers as suffixes.\n\n>>> df = pd.DataFrame({\n...     'famid': [1, 1, 1, 2, 2, 2, 3, 3, 3],\n...     'birth': [1, 2, 3, 1, 2, 3, 1, 2, 3],\n...     'ht_one': [2.8, 2.9, 2.2, 2, 1.8, 1.9, 2.2, 2.3, 2.1],\n...     'ht_two': [3.4, 3.8, 2.9, 3.2, 2.8, 2.4, 3.3, 3.4, 2.9]\n... })\n>>> df\n   famid  birth  ht_one  ht_two\n0      1      1     2.8     3.4\n1      1      2     2.9     3.8\n2      1      3     2.2     2.9\n3      2      1     2.0     3.2\n4      2      2     1.8     2.8\n5      2      3     1.9     2.4\n6      3      1     2.2     3.3\n7      3      2     2.3     3.4\n8      3      3     2.1     2.9\n\n>>> l = pd.wide_to_long(df, stubnames='ht', i=['famid', 'birth'], j='age',\n...                     sep='_', suffix=r'\\w+')\n>>> l\n... # doctest: +NORMALIZE_WHITESPACE\n                  ht\nfamid birth age\n1     1     one  2.8\n            two  3.4\n      2     one  2.9\n            two  3.8\n      3     one  2.2\n            two  2.9\n2     1     one  2.0\n            two  3.2\n      2     one  1.8\n            two  2.8\n      3     one  1.9\n            two  2.4\n3     1     one  2.2\n            two  3.3\n      2     one  2.3\n            two  3.4\n      3     one  2.1\n            two  2.9"
  }
]
